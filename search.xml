<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>011SpringCloud系列——Gateway 自定义网关过滤器（六）</title>
      <link href="/2022/11/07/02springcloud/011SpringCloud%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94Gateway%20%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E5%85%B3%E8%BF%87%E6%BB%A4%E5%99%A8%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2022/11/07/02springcloud/011SpringCloud%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94Gateway%20%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E5%85%B3%E8%BF%87%E6%BB%A4%E5%99%A8%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Gateway过滤器有什么用？"><a href="#Gateway过滤器有什么用？" class="headerlink" title="Gateway过滤器有什么用？"></a>Gateway过滤器有什么用？</h1><p>一个标准的Spring webFilter，使用过滤器，可以在<strong>请求之前或者之后执行业务逻辑。</strong></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070142198.png" alt="image.png"></p><p>从图中很明显可以看出，在请求后端服务前后都需要经过Filter，于是乎Filter的作用就明确了，在PreFilter(请求前处理)可以做<strong>参数校验</strong>、<strong>流量监控</strong>、<strong>日志记录</strong>、<strong>修改请求内容</strong>等等，在PostFilter(请求后处理)可以做<strong>响应内容修改</strong>。</p><h1 id="Gateway过滤器分类"><a href="#Gateway过滤器分类" class="headerlink" title="Gateway过滤器分类"></a>Gateway过滤器分类</h1><p>Gateway中一共提供了两种过滤器，一种是GatewayFilter、GlobalFilter；<br />GatewayFilter：Gateway网关过滤器，是针对单个路由的过滤器，又称局部过滤器，其功能是针对访问的URL起到一定的过滤效果。<br />GlobalFilter：从名称而言，那就是全局过滤器，是需要实现具体的Java类来实现GlobalFilter接口，这其中可以根据进行权限的验证，HTTP请求的头部添加等等。</p><h1 id="过滤器的声明周期"><a href="#过滤器的声明周期" class="headerlink" title="过滤器的声明周期"></a>过滤器的声明周期</h1><p>有pre和post两种方式的filter,分别处理前置逻辑和后置逻辑。客户端的请求先经过pre类型的filter，然后将请求转发到具体的业务服务，收到业务服务的响应之后，再经过post类型的filter处理，最后返回响应到客户端。</p><h1 id="过滤器的优先级"><a href="#过滤器的优先级" class="headerlink" title="过滤器的优先级"></a>过滤器的优先级</h1><p><strong>order越大，优先级越低</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;AFilter前置逻辑&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;AFilter后置逻辑&quot;</span>);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;BFilter前置逻辑&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;BFilter后置逻辑&quot;</span>);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;CFilter前置逻辑&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;CFilter后置逻辑&quot;</span>);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(-1)</span></span><br><span class="line">    <span class="keyword">public</span> GlobalFilter <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AFilter</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(0)</span></span><br><span class="line">    <span class="keyword">public</span> GlobalFilter <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BFilter</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(1)</span></span><br><span class="line">    <span class="keyword">public</span> GlobalFilter <span class="title function_">c</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CFilter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AFilter前置逻辑</span><br><span class="line">BFilter前置逻辑</span><br><span class="line">CFilter前置逻辑</span><br><span class="line"></span><br><span class="line">CFilter后置逻辑</span><br><span class="line">BFilter后置逻辑</span><br><span class="line">AFilter后置逻辑</span><br></pre></td></tr></table></figure><h1 id="过滤器参数"><a href="#过滤器参数" class="headerlink" title="过滤器参数"></a>过滤器参数</h1><p>过滤器参数相对断言参数要少一些，但是同样重要，让我们来细数一下。<br />路由中的filters参数的设置也是非常广泛的。<br />而我们平时使用最多的就是</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">demo</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">http://demo</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/demo/**</span></span><br><span class="line">  <span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure><p>这个参数是从请求中剥离的路径个数，比如<code>http://127.0.0.1/demo/user/list</code>, 就可以得到<code>http://127.0.0.1/demo/list</code>。</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务网关 </tag>
            
            <tag> gateway </tag>
            
            <tag> event loop </tag>
            
            <tag> 过滤器 </tag>
            
            <tag> 自定义动态过滤器 </tag>
            
            <tag> 静态过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>010SpringCloud系列——SpringCloud Gateway 网关（六）</title>
      <link href="/2022/11/07/02springcloud/010SpringCloud%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94SpringCloud%20Gateway%20%E7%BD%91%E5%85%B3%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2022/11/07/02springcloud/010SpringCloud%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94SpringCloud%20Gateway%20%E7%BD%91%E5%85%B3%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="推荐直接看脑图"><a href="#推荐直接看脑图" class="headerlink" title="推荐直接看脑图"></a>推荐直接看脑图</h1><p>本篇幅记得是导图，下面的笔记是好不容易从脑图中整理出来的，可能不完整</p><p>地址：</p><h1 id="什么是服务网关"><a href="#什么是服务网关" class="headerlink" title="什么是服务网关?"></a>什么是服务网关?</h1><p>API Gateway（APIGW &#x2F; API 网关），顾名思义，是出现在系统边界上的一个面向 API 的、串行集中式的<code>企业级应用防火墙</code><br />API 网关是一个服务器，是系统对外的唯一入口。<br />API 网关封装了系统内部架构，为每个客户端提供定制的 API。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140896.png" alt="image.png"></p><h1 id="为什么需要服务网关？"><a href="#为什么需要服务网关？" class="headerlink" title="为什么需要服务网关？"></a>为什么需要服务网关？</h1><h2 id="统一管理平台"><a href="#统一管理平台" class="headerlink" title="统一管理平台"></a>统一管理平台</h2><blockquote><p>举个例子: 报警电话 110, 打火警电话 119, 急救电话 120, 交通事故电话 122, 高速公路报警电话 12122, 森林防火报警电话12119等等<br>你突然发现路边变压器坏了, 你想通知有关部分, 但你不知道到底是哪个部门和什么电话号码, 所以你晕了<br>接着有个叫 Gateway 的人搞了个类似 114 查号平台, 你只需要打电话给 114 , 告知他你有什么需求, 114会跟你的要求转播到相应的平台<br>而这个 114 平台就类似于 Gateway API 网关, 而你就是客户端, Gateway会根据你的要求做出甄别、回应或者转发给相应的微服务(110 119等)</p></blockquote><p>API网关出现的原因就跟上面的例子略有不同，但总体相似。随着微服务架构的出现，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信，会有以下的问题：</p><ul><li>客户端请求多个微服务，各个服务ip不一样，增加客户端复杂度。</li><li>存在跨域，在一定场景下处理相对复杂。 </li><li>认证复杂，每个服务都需要独立认证。 </li><li>与微服务耦合太强，微服务变更，客户端需要变更</li></ul><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140731.png" alt="image.png"></p><p>当然不管有没有 API 网关，后端微服务都可以通过 API 很好地支持客户端的访问,  如下图: <br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140008.png" alt="image.png"></p><p>但对于服务数量众多、复杂度比较高、规模比较大的业务来说，引入 API 网关也有一系列的好处：</p><ul><li>聚合接口使得服务对调用者透明，客户端与后端的耦合度降低</li><li>聚合后台服务，节省流量，提高性能，提升用户体验</li><li>提供安全、流控、过滤、缓存、计费、监控等 API 管理功能</li></ul><h2 id="隔离外部访问与内部系统"><a href="#隔离外部访问与内部系统" class="headerlink" title="隔离外部访问与内部系统"></a>隔离外部访问与内部系统</h2><p>所有的客户端和消费端都通过统一的网关接入微服务，<strong>在网关层处理所有非业务功能</strong>。</p><p>API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST&#x2F;HTTP的访问API。</p><p>常见的API网关主要提供以下的功能：</p><ul><li><strong>路由功能</strong>：路由是微服务网关的核心能力。通过路由功能微服务网关可以将请求转发到目标微服务。在微服务架构中，网关可以结合注册中心的动态服务发现，实现对后端服务的发现，调用方只需要知道网关对外暴露的服务API就可以透明地访问后端微服务。</li><li><strong>负载均衡</strong>：API网关结合负载均衡技术，利用Eureka或者Consul等服务发现工具，通过轮询、指定权重、IP地址哈希等机制实现下游服务的负载均衡。</li><li><strong>统一鉴权</strong>：一般而言，无论对内网还是外网的接口都需要做用户身份认证，而用户认证在一些规模较大的系统中都会采用统一的单点登录（Single Sign On）系统，如果每个微服务都要对接单点登录系统，那么显然比较浪费资源且开发效率低。API网关是统一管理安全性的绝佳场所，可以将认证的部分抽取到网关层，微服务系统无须关注认证的逻辑，只关注自身业务即可。</li><li><strong>协议转换</strong>：API网关的一大作用在于构建异构系统，API网关作为单一入口，通过协议转换整合后台基于REST、AMQP、Dubbo等不同风格和实现技术的微服务，面向Web Mobile、开放平台等特定客户端提供统一服务。</li><li><strong>指标监控</strong>：网关可以统计后端服务的请求次数，并且可以实时地更新当前的流量健康状态，可以对URL粒度的服务进行延迟统计，也可以使用Hystrix Dashboard查看后端服务的流量状态及是否有熔断发生。</li><li><strong>限流熔断</strong>：在某些场景下需要控制客户端的访问次数和访问频率，一些高并发系统有时还会有限流的需求。在网关上可以配置一个阈值，当请求数超过阈值时就直接返回错误而不继续访问后台服务。当出现流量洪峰或者后端服务出现延迟或故障时，网关能够主动进行熔断，保护后端服务，并保持前端用户体验良好。</li><li><strong>黑白名单</strong>：微服务网关可以使用系统黑名单，过滤HTTP请求特征，拦截异常客户端的请求，例如DDoS攻击等侵蚀带宽或资源迫使服务中断等行为，可以在网关层面进行拦截过滤。比较常见的拦截策略是根据IP地址增加黑名单。在存在鉴权管理的路由服务中可以通过设置白名单跳过鉴权管理而直接访问后端服务资源。</li><li><strong>灰度发布</strong>：微服务网关可以根据HTTP请求中的特殊标记和后端服务列表元数据标识进行流量控制，实现在用户无感知的情况下完成灰度发布。</li><li><strong>流量染色</strong>：和灰度发布的原理相似，网关可以根据HTTP请求的Host、Head、Agent等标识对请求进行染色，有了网关的流量染色功能，我们可以对服务后续的调用链路进行跟踪，对服务延迟及服务运行状况进行进一步的链路分析。</li><li><strong>文档中心</strong>：网关结合Swagger，可以将后端的微服务暴露给网关，网关作为统一的入口给接口的使用方提供查看后端服务的API规范，不需要知道每一个后端微服务的Swagger地址，这样网关起到了对后端API聚合的效果。</li><li><strong>日志审计</strong>：微服务网关可以作为统一的日志记录和收集器，对服务URL粒度的日志请求信息和响应信息进行拦截。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140149.png" alt="image.png"></p><h1 id="什么是Spring-Cloud-Gateway"><a href="#什么是Spring-Cloud-Gateway" class="headerlink" title="什么是Spring Cloud Gateway?"></a>什么是Spring Cloud Gateway?</h1><p>SpringCloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。<br />SpringCloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 2.0之前的非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。<br />Spring Cloud Gateway 的目标，不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控&#x2F;指标，和限流。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140994.png" alt="image.png"></p><p>上图可以很直观的看出来 Gateway 大体上的设计思路</p><p><strong>客户端的请求通过</strong><code>**Gateway的Predicates**</code>**进行匹配，如果判断为 **<code>**false**</code><strong>则跳到下一个</strong><code>**Route**</code><strong>，如果为</strong><code>**true**</code><strong>则通过一系列的</strong><code>**Filter**</code><strong>链路处理后将请求转发给微服务</strong></p><p>另外，我们还能看出Gateway底层使用的是 Netty 进行通讯, 而 Netty 底层使用的是 event loop 模型<br />我们来解了解面试常问道的 event loop是什么？和 Reactor线程模型是什么？</p><h2 id="什么是-event-loop-模型"><a href="#什么是-event-loop-模型" class="headerlink" title="什么是 event loop 模型?"></a>什么是 event loop 模型?</h2><p>EventLoop 这个概念其实并不是 Netty 独有的，它是一种事件等待和处理的程序模型，可以解决<strong>多线程资源消耗高的问题</strong>。例如 Node.js 就采用了 EventLoop 的运行机制，不仅占用资源低，而且能够支撑了大规模的流量访问。<br />下图展示了 EventLoop 通用的运行模式。每当事件发生时，应用程序都会将产生的事件放入事件队列当中，然后 EventLoop 会轮询从队列中取出事件执行或者将事件分发给相应的事件监听者执行。事件执行的方式通常分为立即执行、延后执行、定期执行几种。</p><blockquote><p>触发事件和事件完成之间是有事件间隔的，所以触发事件时会将事件存入 事件队列 中，然后交给 EventLoop 线程 轮询，等到 Worker 线程执行完毕事件后将告知 Event Loop 将 执行结果+Callback 返回给 主线程，主线程执行 Callback </p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140928.png" alt="image.png"></p><h2 id="什么是Reactor线程模型？"><a href="#什么是Reactor线程模型？" class="headerlink" title="什么是Reactor线程模型？"></a>什么是Reactor线程模型？</h2><p>Reactor 模式是基于<strong>事件驱动</strong>的，它会<strong>监听</strong>事件的发生，当监听到事件发生后，根据多路复用策略，将事件<strong>分发</strong>给相应的处理器处理。</p><p>核心组件：</p><ul><li>Handle（Event）：用于表示事件。</li><li>Event Demultiplexer：事件分离器，用于同步等待事件的发生。</li><li>Reactor：反应器，用于监听和分发事件。内部会调用 Event Demultiplexer 来同步等待事件的发生，然后将事件交由 Event Handler 处理。</li><li>Event Handler：事件处理器，用于处理事件。</li></ul><h1 id="SpringCloud-Gateway核心流程"><a href="#SpringCloud-Gateway核心流程" class="headerlink" title="SpringCloud Gateway核心流程"></a>SpringCloud Gateway核心流程</h1><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140236.png" alt="image.png"><br />核心概念：</p><ol><li>Gateway Client 向 Spring Cloud Gateway 发送请求</li><li>请求首先会被 HttpWebHandlerAdapter 进行提取组装成网关上下文</li><li>然后网关的上下文会传递到 DispatcherHandler ，它负责将请求分发给 RoutePredicateHandlerMapping</li><li>RoutePredicateHandlerMapping 负责路由查找，并根据路由断言判断路由是否可用</li><li>如果过断言成功，由FilteringWebHandler 创建过滤器链并调用</li><li>通过特定于请求的 Fliter 链运行请求，Filter 被虚线分隔的原因是Filter可以在发送代理请求之前（pre）和之后（post）运行逻辑</li><li>执行所有pre过滤器逻辑。然后进行代理请求。发出代理请求后，将运行“post”过滤器逻辑。</li><li>处理完毕之后将 Response 返回到 Gateway 客户端</li></ol><p>Filter过滤器：</p><ul><li>Filter在pre类型的过滤器可以做参数效验、权限效验、流量监控、日志输出、协议转换等。</li><li>Filter在post类型的过滤器可以做响应内容、响应头的修改、日志输出、流量监控等</li></ul><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140699.gif" alt="动画.gif"></p><h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><p>github切换到 consul 分支</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140686.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070141210.png" alt="image.png"></p><h2 id="新建-payment8007-项目"><a href="#新建-payment8007-项目" class="headerlink" title="新建 payment8007 项目"></a>新建 payment8007 项目</h2><p>新建一个新的项目: <code>cloud-providerconsul-payment8007</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8007</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><h2 id="新建项目gateway9527"><a href="#新建项目gateway9527" class="headerlink" title="新建项目gateway9527"></a>新建项目<code>gateway9527</code></h2><p>创建项目<code>cloud-gateway-gateway9527</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注意这里不能导入 web，因为 gataway已经有webflux了 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><span class="comment">&lt;!--一般基础配置类--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意需要将 <code>spring-boot-starter-web</code>包注释掉，然后添加 <code>spring-cloud-starter-gateway</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment">#将 payment-8007 8006 提供的服务隐藏起来，不暴露给客户端，只给客户端暴露 API 网关的地址 9527</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">provider_payment_consul_routh</span>   <span class="comment">#路由 id,没有固定规则，但唯一，建议与服务名对应</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://consul-provider-payment</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/consul/**</span>    <span class="comment">#断言，路径匹配 注意：Path 中 P 为大写</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Method=GET</span> <span class="comment">#只能时 GET 请求时，才能访问</span></span><br></pre></td></tr></table></figure><p>这里我们需要注意 <code>uri</code> 和 <code>predicates</code>这两个配置</p><p>其中</p><ul><li><code>predicates</code>：下面的配置相当于 匹配条件</li><li><code>uri</code>：相当于匹配成功后访问的域名</li><li><code>id</code>：就是这段 <code>uri</code> 和 <code>predicates</code> 的唯一属性，用于标识唯一性，不能重名</li></ul><p>**最终访问的是: <strong><code>**uri + predicates.Path**</code></strong> 相当于 **<code>**https://consul-provider-payment/payment/consul/**</code></p><blockquote><p>注意，如果你在 <code>uri</code>中配置<code>uri: https://www.baidu.com</code>那么他就会访问到 百度</p></blockquote><p>所以如果你这样配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GateWayConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line">        RouteLocatorBuilder.<span class="type">Builder</span> <span class="variable">routes</span> <span class="operator">=</span> builder.routes();</span><br><span class="line"></span><br><span class="line">        routes.route(<span class="string">&quot;path_route_zhazha&quot;</span>,</span><br><span class="line">                r -&gt; r.path(<span class="string">&quot;/guonei&quot;</span>)</span><br><span class="line">                        .uri(<span class="string">&quot;https://www.baidu.com&quot;</span>)).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator2</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line">        RouteLocatorBuilder.<span class="type">Builder</span> <span class="variable">routes</span> <span class="operator">=</span> builder.routes();</span><br><span class="line">        routes.route(<span class="string">&quot;path_route_zhazha2&quot;</span>,</span><br><span class="line">                r -&gt; r.path(<span class="string">&quot;/guoji&quot;</span>)</span><br><span class="line">                        .uri(<span class="string">&quot;https://news.baidu.com&quot;</span>)).build();</span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中如果你访问<code>[http://localhost:9527/guonei](http://localhost:9527/guonei)</code>会导致:<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070141401.png" alt="image.png"><br />如果你访问<code>[https://www.baidu.com/guonei](https://www.baidu.com/guonei)</code>相同的:<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070141198.png" alt="image.png"></p><p><strong>所以需要注意的是</strong><code>**Path**</code><strong>必须是</strong><code>**uri**</code><strong>域名必须存在的路径</strong></p><h3 id="Java-Bean方式配置路由器"><a href="#Java-Bean方式配置路由器" class="headerlink" title="Java Bean方式配置路由器"></a>Java Bean方式配置路由器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemogatewayApplication</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> builder.routes()</span><br><span class="line">.route(<span class="string">&quot;path_route&quot;</span>, r -&gt; r.path(<span class="string">&quot;/get&quot;</span>)</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;host_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.myhost.org&quot;</span>)</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;rewrite_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.rewrite.org&quot;</span>)</span><br><span class="line">.filters(f -&gt; f.rewritePath(<span class="string">&quot;/foo/(?&lt;segment&gt;.*)&quot;</span>, <span class="string">&quot;/$&#123;segment&#125;&quot;</span>))</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;hystrix_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.hystrix.org&quot;</span>)</span><br><span class="line">.filters(f -&gt; f.hystrix(c -&gt; c.setName(<span class="string">&quot;slowcmd&quot;</span>)))</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;hystrix_fallback_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.hystrixfallback.org&quot;</span>)</span><br><span class="line">.filters(f -&gt; f.hystrix(c -&gt; c.setName(<span class="string">&quot;slowcmd&quot;</span>).setFallbackUri(<span class="string">&quot;forward:/hystrixfallback&quot;</span>)))</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;limit_route&quot;</span>, r -&gt; r</span><br><span class="line">.host(<span class="string">&quot;*.limited.org&quot;</span>).and().path(<span class="string">&quot;/anything/**&quot;</span>)</span><br><span class="line">.filters(f -&gt; f.requestRateLimiter(c -&gt; c.setRateLimiter(redisRateLimiter())))</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Gateway组件中的配置路由详解"><a href="#Gateway组件中的配置路由详解" class="headerlink" title="Gateway组件中的配置路由详解"></a>Gateway组件中的配置路由详解</h1><h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">router1</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">http://www.baidu.com</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Path=/baidu/**</span></span><br><span class="line">    <span class="attr">filters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure><p>其中的id参数，是唯一的，如果多个路由的话，id也应该是不同的。</p><p>uri：该参数时用来指定匹配后的访问链接，如果匹配成功，那么就去访问百度了。<br />predicates：断言参数，这个请接着往下看。<br />filters：过滤器参数。</p><h2 id="断言参数"><a href="#断言参数" class="headerlink" title="断言参数"></a>断言参数</h2><p>断言参数<code>predicates</code>，是用来匹配路由规则的，比如本次例子中的<code>Path=/baidu/**</code>，意思就是匹配<code>[http://localhost/baidu/*/](http://localhost/baidu/*/)</code>的相关的链接。<br />断言参数也是Gateway中规则最多的了，下面我们细说一下断言有提供哪些匹配参数。</p><h3 id="After"><a href="#After" class="headerlink" title="After"></a>After</h3><p><code>- After=2021-01-01</code><br />匹配在2021年一月一日时间之后发生的请求。</p><blockquote><p><code>After=2019-09-24T16:30:00+08:00[Asia/Shanghai] </code></p></blockquote><h3 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h3><p><code>- Before=2021-01-01</code><br />匹配在2021年一月一日时间之前发生的请求。</p><h3 id="Between"><a href="#Between" class="headerlink" title="Between"></a>Between</h3><p><code>- Before=2021-01-01,2021-01-02</code><br />匹配在2021年一月一日至2021年一月二日之间发生的请求。</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p><code>- Cookie=username, macro</code><br />cookie的设置，有两个参数，分别是name和regexp（Java正则），可以匹配到相应名称的Cookie名称，且与正则相匹配的Cookie值的链接。</p><blockquote><p>username&#x3D;macro</p></blockquote><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p><code>- Header=X-Request-Id, \d+</code><br />Header同样也提供了两个参数，分别是name和regexp（Java正则），可以匹配相应类型的Url，比如127.0.0.1&#x2F;demo&#x2F;1，这样就可以进入上述规则。</p><h3 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h3><p><code>- Host=**.baidu.com</code><br />Host就比较好理解了，其参数就是匹配相应的ip，或者域名等信息的Url。</p><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p><code>- Method=GET</code><br />Method就更加熟悉了，GET、POST、PUT、DELETE等都是属于Method中的一类，上述就是匹配GET类的请求。</p><h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><p><code>- Path=/baidu/**</code><br />Path：我们最常用的，用于匹配URL相关路径。</p><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><p><code>- Query=username</code><br />Query：查询条件，用于匹配查询条件是否存在abc条件。</p><blockquote><p>curl <a href="http://localhost:9527/user?username=zhazha">http://localhost:9527/user?username=zhazha</a></p></blockquote><h3 id="RemoteAddr"><a href="#RemoteAddr" class="headerlink" title="RemoteAddr"></a>RemoteAddr</h3><p><code>- RemoteAddr=192.168.1.1/24</code></p><p>使用curl工具从192.168.1.1发起请求可以匹配该路由。</p><blockquote><p><code>curl http://localhost:9201/user/1</code></p></blockquote><h3 id="Weight"><a href="#Weight" class="headerlink" title="Weight"></a>Weight</h3><p>利用路由权重来匹配对应的路由规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_high</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8006</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_low</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8007</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>使用权重来路由相应请求，以下表示有80%的请求会被路由到localhost:8006，20%会被路由到localhost:8007。</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务网关 </tag>
            
            <tag> gateway </tag>
            
            <tag> event loop </tag>
            
            <tag> Reactor </tag>
            
            <tag> 路由 </tag>
            
            <tag> 动态路由 </tag>
            
            <tag> 静态路由 </tag>
            
            <tag> 自定义动态路由 </tag>
            
            <tag> 断言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>009限流与熔断理论部分（五）——hystrix熔断器（三）</title>
      <link href="/2022/11/07/02springcloud/009%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94hystrix%E7%86%94%E6%96%AD%E5%99%A8%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2022/11/07/02springcloud/009%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94hystrix%E7%86%94%E6%96%AD%E5%99%A8%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇在用不到的时候可以不学，只要学会 sentinel 就可以了</p></blockquote><h1 id="Hystrix能干嘛"><a href="#Hystrix能干嘛" class="headerlink" title="Hystrix能干嘛"></a>Hystrix能干嘛</h1><p>服务降级、服务熔断、接近实时的监控······</p><blockquote><p>hystrix保障我们的分布式系统不会导致整个体系服务失败，避免<strong>级联故障</strong>，以提高分布式系统的弹性。</p></blockquote><h2 id="1、服务降级"><a href="#1、服务降级" class="headerlink" title="1、服务降级"></a>1、服务降级</h2><p>让出服务的资源, 给另外的服务</p><p>服务降级强调的是<strong>当前服务 降级(或不再调用)<strong>被调用的</strong>报错服务</strong></p><p>这里的报错服务包括: </p><ul><li>对方服务的程序运行异常</li><li>超出我方规定的超时时间</li><li>服务熔断触发服务降级</li><li>线程池&#x2F;信号量打满也会导致服务降级</li></ul><h2 id="2、服务熔断"><a href="#2、服务熔断" class="headerlink" title="2、服务熔断"></a>2、服务熔断</h2><p>类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示<br />就是保险丝：服务的降级-&gt;进而熔断-&gt;恢复调用链路</p><h2 id="3、服务限流"><a href="#3、服务限流" class="headerlink" title="3、服务限流"></a>3、服务限流</h2><p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行</p><h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><p>8001先从自身找问题：设置自身调用超时时间的峰值，峰值内可以正常运行，超过了需要有兜底的方法处理，作服务降级fallback</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070133893.png" alt="image.png"></p><blockquote><h3 id="为什么客户端和服务端都可以使用hystrix"><a href="#为什么客户端和服务端都可以使用hystrix" class="headerlink" title="为什么客户端和服务端都可以使用hystrix?"></a>为什么客户端和服务端都可以使用hystrix?</h3><ul><li>服务端</li></ul><p>serverA 调用了 serverB 的服务, serverB可能已经宕机或者负载, 无法及时的做出反应, 所以我们可以给 serverA 提供 hystrix 保障 serverA 能够及时的做出反馈, 而不是 一直阻塞等待 serverB 最终弹出一堆报错的不友好信息(而且还能不安全)</p><ul><li>客户端</li></ul><p>clientA 调用了 serverA 的服务, clientA 不信任 serverA, 所以一般都会有个另外一个 serverB 做保障.  如果 clientA 访问 serverA 时阻塞超时, clientA 会熔断 serverA, 并对 serverA 降级, 最后clientA返回一个兜底的方法给用户, 下次再次访问 clientA 时, clientA 不再访问 serverA, 而是 serverA 集群中的另一台服务 serverB(多次访问时, 还会给个请求给 serverA 试试能不能用了)</p></blockquote><p>这是一次hystrix 熔断并fallback 的过程</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070133854.png" alt="image.png"></p><p>hystrix可以配置在 clientA 处 防止<strong>蓝标2</strong>出现问题阻塞<br />也可以配置在 serverB 防止 <strong>蓝标3</strong> 出现阻塞和超时的情况</p><p>了解这些, 接下来我们可以分别介绍介绍怎么玩</p><h3 id="server服务端-提供端"><a href="#server服务端-提供端" class="headerlink" title="server服务端(提供端)"></a>server服务端(提供端)</h3><p>依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 其他略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>只要导入包后, hystrix 默认启动, 不需要另外设置</p></blockquote><p>底层默认使用的还是 ribbon 做负载均衡</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070133520.png" alt="image.png"></p><p>application.yml :</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###consul服务端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider-payment</span></span><br><span class="line">  <span class="comment">####consul注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><p>接着我们可以给 controller 或者 service 添加 hystrix 操作功能</p><p>这里我们选择标记 controller 让 hystrix 拦截并使用</p><p>hystrix 标记超时的注解是 <code>@HystrixCommand</code></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070133176.png" alt="image.png"></p><p>注解可以使用 <code>fallbackMethod</code> 标记一个方法, 让<code>@HystrixCommand</code>标记的方法在发生错误时调用的备选方案</p><p>贴出完整代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 正常访问一切 OK</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String <span class="title function_">paymentInfoOk</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超时访问，演示降级</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String <span class="title function_">paymentInfoTimeOut</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoOk</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;线程池:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;paymentInfo_OK,id: &quot;</span> + id + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;O(∩_∩)O&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;线程池:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;paymentInfo_TimeOut,id: &quot;</span> + id + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;O(∩_∩)O，耗费3秒&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoOk</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentInfoOk(id);</span><br><span class="line">log.info(<span class="string">&quot;****result: &quot;</span> + result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackPaymentInfoTimeOut&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentInfoTimeOut(id);</span><br><span class="line">log.info(<span class="string">&quot;****result: &quot;</span> + result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">fallbackPaymentInfoTimeOut</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;fallback&quot;</span>;</span><br><span class="line">log.info(<span class="string">&quot;****result: &quot;</span> + result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 通用熔断器注解, 有了这个下面的`EnableHystrix`注解就不需要了</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="comment">//@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentHystrixMain8001</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(PaymentHystrixMain8001.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里选择 controller 做 hystrix 标记可能不太恰当, 可能标记 service 可能会更好一点, 不过没关系，能够产生效果就行</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134421.png" alt="image.png">这部分完成</p><p>核心代码在这里: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackPaymentInfoTimeOut&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br></pre></td></tr></table></figure><p>超时时间是3秒， 实际延迟时间是 5 秒</p><p>所以代码肯定超时</p><p>访问: <code>[http://localhost:8001/payment/hystrix/timeout/3](http://localhost:8001/payment/hystrix/timeout/3)</code><br />反馈的信息: <code>fallback</code><br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134759.png" alt="image.png"></p><p>报错, 然后被 hystrix 拦截</p><blockquote><p>hystrix 默认超时时间为 1 秒, 而接口延迟是 5 秒, 所以这个接口会报错</p></blockquote><p>将 hystrix 超时时间定位 6秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackPaymentInfoTimeOut&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;6000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br></pre></td></tr></table></figure><p>启动jmeter</p><p>创建线程组:<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134154.png" alt="image.png"></p><p>10个线程, 跑 1秒 循环 1次<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134332.png" alt="image.png"><br />发现10个请求都成功了</p><p>改成 <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134479.png" alt="image.png">, 20个请求都会成功</p><p>但是如果改成:<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134757.png" alt="image.png"></p><p>就会走hystrix备选方案:<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134913.png" alt="image.png"><br />但是下面10个请求会成功<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134000.png" alt="image.png"></p><p>这是什么个情况?</p><h4 id="hystrix-线程隔离"><a href="#hystrix-线程隔离" class="headerlink" title="hystrix 线程隔离"></a>hystrix 线程隔离</h4><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134033.png" alt="image.png"></p><p>上图的情况是很容易出现的, 所以的请求都阻塞在 订单服务 这里.<br />而服务的线程总量是有限的(假设只有100条), 那么现在的请求全部被阻塞在 订单服务 前 <br />那么用户就没有多余的线程去访问 商品和用户 服务, 服务出现级联错误, 也就是服务雪崩</p><p>遇到这种问题要怎么解决呢?<br />hystrix使用了线程隔离技术<br />大致的方法是, 给每个服务提供默认 10个线程大小 的线程池<br />这样即使订单服务出现问题, 导致线程阻塞, 最终阻塞的线程也只不过是 10条, 不会导致 另外 的 90 条线程出现问题<br />这种方式就是令牌桶限流算法</p><p>hystrix在遇到各个类型的 command 指令时, 会将该类型设计成 key , 然后创建一个线程池, 最为 value, 存放到一个 ConcurrentHashMap 中, 如下图所示<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134472.png" alt="image.png"></p><p>具体的源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ThreadPoolExecutor <span class="title function_">getThreadPool</span><span class="params">(<span class="keyword">final</span> HystrixThreadPoolKey threadPoolKey, HystrixProperty&lt;Integer&gt; corePoolSize, HystrixProperty&lt;Integer&gt; maximumPoolSize, HystrixProperty&lt;Integer&gt; keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span> &#123;</span><br><span class="line">    <span class="type">ThreadFactory</span> <span class="variable">threadFactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!PlatformSpecific.isAppEngineStandardEnvironment()) &#123;</span><br><span class="line">        threadFactory = <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">threadNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r, <span class="string">&quot;hystrix-&quot;</span> + threadPoolKey.name() + <span class="string">&quot;-&quot;</span> + threadNumber.incrementAndGet());</span><br><span class="line">                thread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> thread;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        threadFactory = PlatformSpecific.getAppEngineThreadFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">dynamicCoreSize</span> <span class="operator">=</span> corePoolSize.get();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">dynamicMaximumSize</span> <span class="operator">=</span> maximumPoolSize.get();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dynamicCoreSize &gt; dynamicMaximumSize) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;Hystrix ThreadPool configuration at startup for : &quot;</span> + threadPoolKey.name() + <span class="string">&quot; is trying to set coreSize = &quot;</span> +</span><br><span class="line">                dynamicCoreSize + <span class="string">&quot; and maximumSize = &quot;</span> + dynamicMaximumSize + <span class="string">&quot;.  Maximum size will be set to &quot;</span> +</span><br><span class="line">                dynamicCoreSize + <span class="string">&quot;, the coreSize value, since it must be equal to or greater than the coreSize value&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(dynamicCoreSize, dynamicCoreSize, keepAliveTime.get(), unit, workQueue, threadFactory);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(dynamicCoreSize, dynamicMaximumSize, keepAliveTime.get(), unit, workQueue, threadFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行Command的方式一共四种</p><ul><li>execute()：以同步堵塞方式执行run()。调用execute()后，hystrix先创建一个新线程运行run()，接着调用程序要在execute()调用处一直堵塞着，直到run()运行完成。</li><li>queue()：以异步非堵塞方式执行run()。调用queue()就直接返回一个Future对象，同时hystrix创建一个新线程运行run()，调用程序通过Future.get()拿到run()的返回结果，而Future.get()是堵塞执行的。</li><li>observe()：事件注册前执行run()&#x2F;construct()。第一步是事件注册前，先调用observe()自动触发执行run()&#x2F;construct()（如果继承的是HystrixCommand，hystrix将创建新线程非堵塞执行run()；如果继承的是HystrixObservableCommand，将以调用程序线程堵塞执行construct()），第二步是从observe()返回后调用程序调用subscribe()完成事件注册，如果run()&#x2F;construct()执行成功则触发onNext()和onCompleted()，如果执行异常则触发onError()。</li><li>toObservable()：事件注册后执行run()&#x2F;construct()。第一步是事件注册前，调用toObservable()就直接返回一个Observable<String>对象，第二步调用subscribe()完成事件注册后自动触发执行run()&#x2F;construct()（如果继承的是HystrixCommand，hystrix将创建新线程非堵塞执行run()，调用程序不必等待run()；如果继承的是HystrixObservableCommand，将以调用程序线程堵塞执行construct()，调用程序等待construct()执行完才能继续往下走），如果run()&#x2F;construct()执行成功则触发onNext()和onCompleted()，如果执行异常则触发onError()</li></ul><h5 id="线程隔离的优点"><a href="#线程隔离的优点" class="headerlink" title="线程隔离的优点"></a>线程隔离的优点</h5><p><br />[1]:应用程序会被完全保护起来，即使依赖的一个服务的线程池满了，也不会影响到应用程序的其他部分。<br />[2]:我们给应用程序引入一个新的风险较低的客户端lib的时候，如果发生问题，也是在本lib中，并不会影响到其他内容，因此我们可以大胆的引入新lib库。<br />[3]:当依赖的一个失败的服务恢复正常时，应用程序会立即恢复正常的性能。<br />[4]:如果我们的应用程序一些参数配置错误了，线程池的运行状况将会很快显示出来，比如延迟、超时、拒绝等。同时可以通过动态属性实时执行来处理纠正错误的参数配置。<br />[5]:如果服务的性能有变化，从而需要调整，比如增加或者减少超时时间，更改重试次数，就可以通过线程池指标动态属性修改，而且不会影响到其他调用请求。<br />[6]:除了隔离优势外，hystrix拥有专门的线程池可提供内置的并发功能，使得可以在同步调用之上构建异步的外观模式，这样就可以很方便的做异步编程（Hystrix引入了Rxjava异步框架）。</p><blockquote><h4 id="尽管线程池提供了线程隔离，我们的客户端底层代码也必须要有超时设置，不能无限制的阻塞以致线程池一直饱和。"><a href="#尽管线程池提供了线程隔离，我们的客户端底层代码也必须要有超时设置，不能无限制的阻塞以致线程池一直饱和。" class="headerlink" title="尽管线程池提供了线程隔离，我们的客户端底层代码也必须要有超时设置，不能无限制的阻塞以致线程池一直饱和。"></a>尽管线程池提供了线程隔离，我们的客户端底层代码也必须要有超时设置，不能无限制的阻塞以致线程池一直饱和。</h4></blockquote><h5 id="线程隔离的缺点"><a href="#线程隔离的缺点" class="headerlink" title="线程隔离的缺点"></a>线程隔离的缺点</h5><p><br />[1]:线程池的主要缺点就是它增加了计算的开销，每个业务请求（被包装成命令）在执行的时候，会涉及到请求排队，调度和上下文切换。不过Netflix公司内部认为线程隔离开销足够小，不会产生重大的成本或性能的影响。<br />The Netflix API processes 10+ billion Hystrix Command executions per day using thread isolation. Each API instance has 40+ thread-pools with 5–20 threads in each (most are set to 10).<br />Netflix API每天使用线程隔离处理10亿次Hystrix Command执行。 每个API实例都有40多个线程池，每个线程池中有5-20个线程（大多数设置为10个）。<br />对于不依赖网络访问的服务，比如只依赖内存缓存这种情况下，就不适合用线程池隔离技术，而是采用信号量隔离，后面文章会介绍。<br />因此我们可以放心使用Hystrix的线程隔离技术，来防止雪崩这种可怕的致命性线上故障。</p><blockquote><p>这一小段转载自简书<br />作者：新栋BOOK<br />标题：Hystrix线程隔离技术解析-线程池</p></blockquote><h3 id="client客户端-消费端"><a href="#client客户端-消费端" class="headerlink" title="client客户端(消费端)"></a>client客户端(消费端)<a href="https://blog.csdn.net/Mark42/article/details/123738225"><br /></a></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###consul服务端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="comment">####consul注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><p>这里需要注意 application.yml 中如果开启了 hystrix 就需要同时启动 ribbon 和 hystrix 的超时配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">##设置feign 客户端超时时间（openFeign默认支持ribbon）</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">7000</span></span><br><span class="line">  <span class="comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">7000</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">7000</span></span><br></pre></td></tr></table></figure><p>如果不启动 hystrix 也需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderHystrixMain80</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(OrderHystrixMain80.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;consul-provider-payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentClient</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoOk</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderHystrixController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentClient paymentClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfoOk</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentClient.paymentInfoOk(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentClient.paymentInfoTimeOut(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="问题一-超时问题"><a href="#问题一-超时问题" class="headerlink" title="问题一: 超时问题"></a>问题一: 超时问题</h4><p>现在使用<code>[http://localhost:80/consumer/payment/hystrix/timeout/2](http://localhost:80/consumer/payment/hystrix/timeout/2)</code>访问地址会报错</p><p>失败信息:<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134970.png" alt="image.png"></p><p>以上,面将错误直接丢给客户是一种非常失职的方式</p><p>那么要怎么解决呢?</p><p>非常简单, 就是不让用户看到不就行了.</p><p>方法有两种:</p><ol><li>使用 hystrix 将熔断的服务降级掉(这样就遇不到报错的服务了)</li><li>熔断返回的错误数据包拦截下来, 包装一个新的页面给用户</li></ol><p><code>@HystrixCommand(fallbackMethod = &quot;fallbackPaymentInfoTimeOut&quot;)</code><br />缺少了自定义的超时时间</p><p>可以这么做:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackPaymentInfoTimeOut&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><p>给他定时 3 秒, 3秒后超时</p><p>如果你是在<strong>客户端</strong>客户端什么都有只用了 openFeign 的话, 可以这么做:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment">## default 设置的全局超时时间，指定服务名称可以设置单个服务的超时时间</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">basic</span></span><br></pre></td></tr></table></figure><blockquote><p>我们在客户端使用了 <code>openFeign</code>可以这么配置, 他底层其实使用了 ribbon(旧版本)</p></blockquote><p>当然如果你给客户端添加 hystrix 就可以这么做:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">##设置feign 客户端超时时间（openFeign默认支持ribbon）</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">7000</span></span><br><span class="line">  <span class="comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">7000</span></span><br><span class="line"><span class="comment"># hystrix 内部的超时时间, 两个超时时间相同才会有准确的超时时间</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">7000</span></span><br></pre></td></tr></table></figure><blockquote><p>这种情况是使用了 hystrix 之后的超时时间方法, 当然你也可以添加 openFeign超时配置, 也能生效, 但还是要相同, 或者 比 7000 更小才能生效, 太麻烦了</p></blockquote><h4 id="问题二-代码冗余"><a href="#问题二-代码冗余" class="headerlink" title="问题二: 代码冗余"></a>问题二: 代码冗余</h4><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackPaymentInfoTimeOut&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;6000&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentInfoTimeOut(id);</span><br><span class="line">    log.info(<span class="string">&quot;****result: &quot;</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">fallbackPaymentInfoTimeOut</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;h1&gt;访问&#x27;/payment/hystrix/timeout&#x27;失败: &quot;</span> + counter.getAndIncrement() + <span class="string">&quot;&lt;/h1&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是有问题的</p><p>每标记一个方法, 都需要配合的写一个新的 <code>fallbackMethod = &quot;fallbackPaymentInfoTimeOut&quot;</code>方法明显是不合理的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">fallbackPaymentInfoTimeOut</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;h1&gt;访问&#x27;/payment/hystrix/timeout&#x27;失败: &quot;</span> + counter.getAndIncrement() + <span class="string">&quot;&lt;/h1&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>并不是所有方法都需要专属的兜底方法</p><p>我们可以统一配置</p><h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><blockquote><p>给服务端提供代码</p></blockquote><p>给需要配置的类上添加<br /><code>@DefaultProperties(defaultFallback = &quot;globalFallback&quot;)</code><br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134606.png" alt="image.png"></p><h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><p>并且在该类中添加方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">globalFallback</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;h1&gt;Global port: &quot;</span> + port + <span class="string">&quot; counter: &quot;</span> + counter.getAndIncrement() + <span class="string">&quot;系统繁忙, 请稍后再尝试&lt;/h1&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134984.png" alt="image.png"></p><h5 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h5><p>接着添加两个方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/timeout01/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut01</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentInfoTimeOut(id);</span><br><span class="line">    log.info(<span class="string">&quot;timeout01: &quot;</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/timeout02/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut02</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentInfoTimeOut(id);</span><br><span class="line">    log.info(<span class="string">&quot;timeout01: &quot;</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>记住需要加上 <code>@HystrixCommand</code> 注解, 否则全局异常 hystrix 失效, hystrix 需要标记方法才能生效</p></blockquote><h4 id="问题三-和业务逻辑混合在一起"><a href="#问题三-和业务逻辑混合在一起" class="headerlink" title="问题三: 和业务逻辑混合在一起"></a>问题三: 和业务逻辑混合在一起</h4><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135515.png" alt="image.png"></p><p>解决办法: 把这种 兜底的方法 放在客户端上</p><p>在 客户端 添加下列代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.client.PaymentClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentFallbackClient</span> <span class="keyword">implements</span> <span class="title class_">PaymentClient</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfoOk</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;====PaymentHystrixService fall back paymentInfoOk，o(╥﹏╥)o====&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;====PaymentHystrixService fall back paymentInfoTimeOut，o(╥﹏╥)o====&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;consul-provider-payment&quot;, fallback = PaymentFallbackClient.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentClient</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoOk</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>主要方法就是给 <code>@FeignClient</code>注解添加<code>fallback</code>属性<br>值得注意的是<code>@Component</code>注解一定不要忘记加上</p></blockquote><p>此时关闭 8001 服务后, 客户端会走 兜底方法 , 不会再挂起等待</p><p><a href="http://localhost/consumer/payment/hystrix/timeout/2">http://localhost/consumer/payment/hystrix/timeout/2</a> <br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135734.png" alt="image.png"><br />接着再启动 8001 等一下又可以重新放到到该服务<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135111.png" alt="image.png"></p><h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><p>熔断机制是应对雪崩效应(<strong>级联故障</strong>)的一种微服务链路保护机制，当扇出链路的某个微服务出错不可用或者响应时间太长时，<br />会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息，当检测到该节点微服务调用响应正常后，恢复调用链路</p><p>在 springcloud 中如果使用 hystrix 做服务熔断, 他就有一个阈值 如果 5 秒内出现 20次 错误, 那么就会触发熔断机制.<br />hystrix触发熔断机制的方式还是给方法添加<code>@HystrixCommand</code>注解</p><p>hystrix 熔断的功能总结下来就是: </p><ol><li>hystrix标记方法</li><li>方法错误时调用 fallback方法, 统计方法错误次数</li><li>次数统计触发阈值后, 直接熔断（熔断器在全开状态：线路断开）</li><li>下次调用不会再去访问该服务, 而是直接调用 fallback</li><li>熔断后服务不可用, 是因为客户端直接跳过了调用正常方法的过程, 直接执行 fallback 方法</li><li>熔断后不是一直都不去使用熔断的服务, hystrix会找机会去试试是否能够处理客户端的请求（熔断器在半开状态：线路接通）, 以判断服务是否恢复（熔断器在关闭状态 ：线路全部接通）</li></ol><p>熔断器的状态：</p><ul><li>熔断打开</li></ul><p>请求不再进行调用当前服务，内部设置时钟一般为MTTR（平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态</p><ul><li>熔断关闭</li></ul><p>熔断关闭不会对服务进行熔断</p><ul><li>熔断半开</li></ul><p>部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</p><p>可以配合大佬的博客看</p><p><a href="https://martinfowler.com/bliki/CircuitBreaker.html">可以看下Martin Fowler大佬的文章CircuitBreaker</a></p><blockquote><p>It’s common for software systems to make remote calls to software running in different processes, probably on different machines across a network. One of the big differences between in-memory calls and remote calls is that remote calls can fail, or hang without a response until some timeout limit is reached. What’s worse if you have many callers on a unresponsive supplier, then you can run out of critical resources leading to cascading failures across multiple systems.</p></blockquote><p>软件系统对运行在不同进程的软件进行远程调用是很常见的, 这些软件可能运行在网络上的不同机子上. 内存调用和远程调用的不同点之一是远程调用可能会失败或者挂起而没有响应直至超过规定时间的限制. 更糟糕的是如果你有很多无响应的callers, 则你可能耗尽重要资源从, 而导致多个系统的级联错误. </p><blockquote><p>The basic idea behind the circuit breaker is very simple. You wrap a protected function call in a circuit breaker object, which monitors for failures. Once the failures reach a certain threshold, the circuit breaker trips, and all further calls to the circuit breaker return with an error, without the protected call being made at all. Usually you’ll also want some kind of monitor alert if the circuit breaker trips.</p></blockquote><p>断路器背后的思想非常简单. 你包装了个受保护的函数调用在断路器对象中, 该对象监听故障. 一旦错误达到某个阈值, 断路器会跳闸，并且对断路器的所有进一步调用都会返回错误，而根本不会进行受保护的调用。通常，如果断路器跳闸，您还需要某种监视器警报。</p><blockquote><p>这是大佬对断路器的描述和使用</p></blockquote><h3 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h3><p>现在我们根据上面的总结编写代码</p><p>在服务端添加代码:</p><p>在<code>PaymentService</code>添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">circuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;, value = &quot;true&quot;),// 是否开启断路器</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;10&quot;),// 断路后重新开启服务的请求次数</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value = &quot;10000&quot;),// 时间窗口期</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;30&quot;),// 失败率达到多少后跳闸</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">circuitBreaker</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;******id 不能负数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">serialNumber</span> <span class="operator">=</span> IdUtil.simpleUUID();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;调用成功，流水号: &quot;</span> + serialNumber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentCircuitBreaker_fallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id 不能负数，请稍后再试，/(ㄒoㄒ)/~~   id: &quot;</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>hystrix 配置说明<br><br /><br><strong>circuitBreaker.enabled</strong><br>设置断路器是否起作用。<br>默认值：true</p><p><strong>circuitBreaker.requestVolumeThreshold</strong><br>设置在一个滚动窗口中，打开断路器的最少请求数。<br>比如：断路器重新数量开启条件。如果值是20，在一个窗口内（比如10秒），收到19个请求，即使这19个请求都失败了，断路器也不会打开。<br>默认值：20</p><p><strong>circuitBreaker.sleepWindowInMilliseconds</strong><br>设置在回路被打开，拒绝请求到再次尝试请求并决定回路是否继续打开的时间。<br>窗口时间。一次统计的时间单位<br>默认值：5000（毫秒）</p><p><strong>circuitBreaker.errorThresholdPercentage</strong><br>设置打开回路并启动回退逻辑的错误比率。<br>在百分比为50%的条件下，一次时间窗口内， 发生了30次请求， 有15次失败，则触发<br>默认值：50%</p><p><a href="https://www.jianshu.com/p/39763a0bd9b8">更多hystrix配置简单说明（官方文档简译）</a></p></blockquote><p><code>PaymentController</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/circuit/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.circuitBreaker(id);</span><br><span class="line">    log.info(<span class="string">&quot;****result: &quot;</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着你就可以这么玩:<br /><a href="http://localhost:8001/payment/circuit/1">http://localhost:8001/payment/circuit/1</a><br /><a href="http://localhost:8001/payment/circuit/-31">http://localhost:8001/payment/circuit/-1</a></p><p>首先故意访问错误 30 次<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135359.png" alt="image.png"><br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135303.png" alt="image.png"></p><p>然后立即在网页上访问11次： <a href="http://localhost:8001/payment/circuit/1">http://localhost:8001/payment/circuit/1</a>  </p><blockquote><p>记住是立即访问 11  次哦， 否则就会恢复正常<br>因为超出 10 秒 的窗口时间，hystrix就会重新尝试放行请求</p></blockquote><p>你会发现前面10次都是报错 <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135514.png" alt="image.png"></p><p>这种现象完全符合大佬对 断路器的描述：</p><blockquote><p> Once the failures reach a certain threshold, the circuit breaker trips, and all further calls to the circuit breaker return with an error, without the protected call being made at all. </p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135651.png" alt="image.png"></p><h3 id="断路器开启或者关闭的条件"><a href="#断路器开启或者关闭的条件" class="headerlink" title="断路器开启或者关闭的条件"></a>断路器开启或者关闭的条件</h3><p>当满足一定的阀值的时候（默认10秒内超过20个请求次数）<br />当失败率达到一定的时候（默认10秒内超过50%的请求失败）<br />到达以上阀值，断路器将会开启<br />当开启的时候，所有请求都不会进行转发<br />一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发；如果成功，断路器会关闭；若失败，继续开启。重复4和5<br /><a href="https://blog.csdn.net/Mark42/article/details/123738225"><br /></a></p><h3 id="断路器打开之后"><a href="#断路器打开之后" class="headerlink" title="断路器打开之后"></a>断路器打开之后</h3><p>再有请求调用的时候，将不会调用主逻辑，而是直接调用降级fallback，通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果</p><h3 id="原来的主逻辑如何恢复"><a href="#原来的主逻辑如何恢复" class="headerlink" title="原来的主逻辑如何恢复"></a>原来的主逻辑如何恢复</h3><p>对于这一问题，hystrix也为我们实现了自动恢复功能。当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，主逻辑恢复；如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时<br /><a href="https://blog.csdn.net/Mark42/article/details/123738225"><br /></a></p><h3 id="所有配置"><a href="#所有配置" class="headerlink" title="所有配置"></a>所有配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//========================All</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;str_fallbackMethod&quot;,</span></span><br><span class="line"><span class="meta">        groupKey = &quot;strGroupCommand&quot;,</span></span><br><span class="line"><span class="meta">        commandKey = &quot;strCommand&quot;,</span></span><br><span class="line"><span class="meta">        threadPoolKey = &quot;strThreadPool&quot;,</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">        commandProperties = &#123;</span></span><br><span class="line"><span class="meta">                // 设置隔离策略，THREAD 表示线程池 SEMAPHORE：信号池隔离</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;execution.isolation.strategy&quot;, value = &quot;THREAD&quot;),</span></span><br><span class="line"><span class="meta">                // 当隔离策略选择信号池隔离的时候，用来设置信号池的大小（最大并发数）</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;execution.isolation.semaphore.maxConcurrentRequests&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                // 配置命令执行的超时时间</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;execution.isolation.thread.timeoutinMilliseconds&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                // 是否启用超时时间</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;execution.timeout.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                // 执行超时的时候是否中断</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;execution.isolation.thread.interruptOnTimeout&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                // 执行被取消的时候是否中断</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;execution.isolation.thread.interruptOnCancel&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                // 允许回调方法执行的最大并发数</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;fallback.isolation.semaphore.maxConcurrentRequests&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                // 服务降级是否启用，是否执行回调函数</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;fallback.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                // 是否启用断路器</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置在滚动时间窗中，断路器熔断的最小请求数。例如，默认该值为 20 的时候，</span></span><br><span class="line"><span class="meta">                // 如果滚动时间窗（默认10秒）内仅收到了19个请求， 即使这19个请求都失败了，断路器也不会打开。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;20&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置在滚动时间窗中，表示在滚动时间窗中，在请求数量超过</span></span><br><span class="line"><span class="meta">                // circuitBreaker.requestVolumeThreshold 的情况下，如果错误请求数的百分比超过50,</span></span><br><span class="line"><span class="meta">                // 就把断路器设置为 &quot;打开&quot; 状态，否则就设置为 &quot;关闭&quot; 状态。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;50&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置当断路器打开之后的休眠时间窗。 休眠时间窗结束之后，</span></span><br><span class="line"><span class="meta">                // 会将断路器置为 &quot;半开&quot; 状态，尝试熔断的请求命令，如果依然失败就将断路器继续设置为 &quot;打开&quot; 状态，</span></span><br><span class="line"><span class="meta">                // 如果成功就设置为 &quot;关闭&quot; 状态。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.sleepWindowinMilliseconds&quot;, value = &quot;5000&quot;),</span></span><br><span class="line"><span class="meta">                // 断路器强制打开</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.forceOpen&quot;, value = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">                // 断路器强制关闭</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.forceClosed&quot;, value = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">                // 滚动时间窗设置，该时间用于断路器判断健康度时需要收集信息的持续时间</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;metrics.rollingStats.timeinMilliseconds&quot;, value = &quot;10000&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置滚动时间窗统计指标信息时划分&quot;桶&quot;的数量，断路器在收集指标信息的时候会根据</span></span><br><span class="line"><span class="meta">                // 设置的时间窗长度拆分成多个 &quot;桶&quot; 来累计各度量值，每个&quot;桶&quot;记录了一段时间内的采集指标。</span></span><br><span class="line"><span class="meta">                // 比如 10 秒内拆分成 10 个&quot;桶&quot;收集这样，所以 timeinMilliseconds 必须能被 numBuckets 整除。否则会抛异常</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;metrics.rollingStats.numBuckets&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置对命令执行的延迟是否使用百分位数来跟踪和计算。如果设置为 false, 那么所有的概要统计都将返回 -1。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;metrics.rollingPercentile.enabled&quot;, value = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置百分位统计的滚动窗口的持续时间，单位为毫秒。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;metrics.rollingPercentile.timeInMilliseconds&quot;, value = &quot;60000&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置百分位统计滚动窗口中使用 “ 桶 ”的数量。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;metrics.rollingPercentile.numBuckets&quot;, value = &quot;60000&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置在执行过程中每个 “桶” 中保留的最大执行次数。如果在滚动时间窗内发生超过该设定值的执行次数，</span></span><br><span class="line"><span class="meta">                // 就从最初的位置开始重写。例如，将该值设置为100, 滚动窗口为10秒，若在10秒内一个 “桶 ”中发生了500次执行，</span></span><br><span class="line"><span class="meta">                // 那么该 “桶” 中只保留 最后的100次执行的统计。另外，增加该值的大小将会增加内存量的消耗，并增加排序百分位数所需的计算时间。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;metrics.rollingPercentile.bucketSize&quot;, value = &quot;100&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置采集影响断路器状态的健康快照（请求的成功、 错误百分比）的间隔等待时间。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;metrics.healthSnapshot.intervalinMilliseconds&quot;, value = &quot;500&quot;),</span></span><br><span class="line"><span class="meta">                // 是否开启请求缓存</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;requestCache.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                // HystrixCommand的执行和事件是否打印日志到 HystrixRequestLog 中</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;requestLog.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        &#125;,</span></span><br><span class="line"><span class="meta">        threadPoolProperties = &#123;</span></span><br><span class="line"><span class="meta">                // 该参数用来设置执行命令线程池的核心线程数，该值也就是命令执行的最大并发量</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;coreSize&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                // 该参数用来设置线程池的最大队列大小。当设置为 -1 时，线程池将使用 SynchronousQueue 实现的队列，</span></span><br><span class="line"><span class="meta">                // 否则将使用 LinkedBlockingQueue 实现的队列。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;maxQueueSize&quot;, value = &quot;-1&quot;),</span></span><br><span class="line"><span class="meta">                // 该参数用来为队列设置拒绝阈值。 通过该参数， 即使队列没有达到最大值也能拒绝请求。</span></span><br><span class="line"><span class="meta">                // 该参数主要是对 LinkedBlockingQueue 队列的补充,因为 LinkedBlockingQueue</span></span><br><span class="line"><span class="meta">                // 队列不能动态修改它的对象大小，而通过该属性就可以调整拒绝请求的队列大小了。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;queueSizeRejectionThreshold&quot;, value = &quot;5&quot;),</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">strConsumer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello 2020&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">str_fallbackMethod</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;*****fall back str_fallbackMethod&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hystrix工作流程"><a href="#hystrix工作流程" class="headerlink" title="hystrix工作流程"></a>hystrix工作流程</h2><p>Hystrix工作流程：<a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></p><p>官网图例：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135661.png" alt="image.png"></p><p>步骤说明：</p><ul><li>创建 HystrixCommand（用在依赖的服务返回单个操作结果的时候） 或 HystrixObserableCommand（用在依赖的服务返回多个操作结果的时候） 对象</li><li>命令执行。其中 HystrixComand 实现了下面前两种执行方式；而 HystrixObservableCommand 实现了后两种执行方式：execute()：同步执行，从依赖的服务返回一个单一的结果对象， 或是在发生错误的时候抛出异常。queue()：异步执行， 直接返回 一个Future对象， 其中包含了服务执行结束时要返回的单一结果对象。observe()：返回 Observable 对象，它代表了操作的多个结果，它是一个 Hot Obserable（不论 “事件源” 是否有 “订阅者”，都会在创建后对事件进行发布，所以对于 Hot Observable 的每一个 “订阅者” 都有可能是从 “事件源” 的中途开始的，并可能只是看到了整个操作的局部过程）。toObservable()： 同样会返回 Observable 对象，也代表了操作的多个结果，但它返回的是一个Cold Observable（没有 “订阅者” 的时候并不会发布事件，而是进行等待，直到有 “订阅者” 之后才发布事件，所以对于 Cold Observable 的订阅者，它可以保证从一开始看到整个操作的全部过程）</li><li>若当前命令的请求缓存功能是被启用的， 并且该命令缓存命中， 那么缓存的结果会立即以 Observable 对象的形式返回</li><li>检查断路器是否为打开状态。如果断路器是打开的，那么Hystrix不会执行命令，而是转接到 fallback 处理逻辑（第 8 步）；如果断路器是关闭的，检查是否有可用资源来执行命令（第 5 步）</li><li>线程池&#x2F;请求队列&#x2F;信号量是否占满。如果命令依赖服务的专有线程池和请求队列，或者信号量（不使用线程池的时候）已经被占满， 那么 Hystrix 也不会执行命令， 而是转接到 fallback 处理逻辑（第8步）</li><li>Hystrix 会根据我们编写的方法来决定采取什么样的方式去请求依赖服务。HystrixCommand.run() ：返回一个单一的结果，或者抛出异常。HystrixObservableCommand.construct()： 返回一个Observable 对象来发射多个结果，或通过 onError 发送错误通知</li><li>Hystrix会将 “成功”、“失败”、“拒绝”、“超时” 等信息报告给断路器， 而断路器会维护一组计数器来统计这些数据。断路器会使用这些统计数据来决定是否要将断路器打开，来对某个依赖服务的请求进行 “熔断&#x2F;短路”</li><li>当命令执行失败的时候， Hystrix 会进入 fallback 尝试回退处理， 我们通常也称该操作为 “服务降级”。而能够引起服务降级处理的情况有下面几种：第4步： 当前命令处于”熔断&#x2F;短路”状态，断路器是打开的时候。第5步： 当前命令的线程池、 请求队列或 者信号量被占满的时候。第6步：HystrixObservableCommand.construct() 或 HystrixCommand.run() 抛出异常的时候</li><li>当Hystrix命令执行成功之后， 它会将处理结果直接返回或是以Observable 的形式返回</li></ul><p>tips：如果我们没有为命令实现降级逻辑或者在降级处理逻辑中抛出了异常， Hystrix 依然会返回一个 Observable 对象， 但是它不会发射任何结果数据， 而是通过 onError 方法通知命令立即中断请求，并通过onError()方法将引起命令失败的异常发送给调用者<br /><a href="https://blog.csdn.net/Mark42/article/details/123738225"><br /></a></p><h2 id="服务监控hystrixDashboard"><a href="#服务监控hystrixDashboard" class="headerlink" title="服务监控hystrixDashboard"></a>服务监控hystrixDashboard</h2><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a><br />1、概述</h2><p><br />除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控（Hystrix Dashboard），Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p><h2 id="2、仪表盘9001"><a href="#2、仪表盘9001" class="headerlink" title="2、仪表盘9001"></a>2、仪表盘9001</h2><p><br />新建<strong>cloud-consumer-hystrix-dashboard9001</strong></p><p>（1）pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>HystrixDashboardMain9001</code>+新注解<code>@EnableHystrixDashboard</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixDashboardMain9001</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(HystrixDashboardMain9001.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开: <a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><p><strong>所有Provider微服务提供</strong>类(8001&#x2F;8002&#x2F;8003&#x2F;800x)都需要监控依赖配置<br />3、断路器演示<br />服务监控<code>hystrixDashboard</code></p><p>（1）修改<code>hystrix-payment8001</code><br />注意:新版本Hystrix需要在主启动类<code>PaymentHystrixMain8001</code>中指定监控路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 通用熔断器注解, 有了这个下面的`EnableHystrix`注解就不需要了</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="comment">//@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentHystrixMain8001</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(PaymentHystrixMain8001.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑</span></span><br><span class="line"><span class="comment"> * ServletRegistrationBean因为springboot的默认路径不是&quot;/hystrix.stream&quot;，</span></span><br><span class="line"><span class="comment"> * 只要在自己的项目里配置上下面的servlet就可以了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ServletRegistrationBean <span class="title function_">getServlet</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">HystrixMetricsStreamServlet</span> <span class="variable">streamServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HystrixMetricsStreamServlet</span>();</span><br><span class="line"><span class="type">ServletRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(streamServlet);</span><br><span class="line">registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监控测试"><a href="#监控测试" class="headerlink" title="监控测试"></a><br />监控测试</h3><p>观察监控窗口</p><p>9001监控8001，填写监控地址：<a href="http://localhost:8001/hystrix.stream">http://localhost:8001/hystrix.stream</a><br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135706.png" alt="image.png"></p><p>测试地址：<br /><a href="http://localhost:8001/payment/circuit/1">http://localhost:8001/payment/circuit/1</a><br /><a href="http://localhost:8001/payment/circuit/-1">http://localhost:8001/payment/circuit/-1</a></p><p>上述测试通过<br />先访问正确地址，再访问错误地址，再正确地址，会发现图示断路器都是慢慢放开的<br />监控结果，成功<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135446.png" alt="image.png"><br />监控结果，失败<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070136109.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070136781.png" alt="image.png"></p><h3 id="如何看？"><a href="#如何看？" class="headerlink" title="如何看？"></a>如何看？</h3><p><br />7色、1圈、1线</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070136224.png" alt="image.png"></p><p>1圈：<br />实心圆：共有两种含义，它通过颜色的变化代表了实例的健康程度，它的健康度从绿色&lt;黄色&lt;橙色&lt;红色递减。该实心圆除了颜色的变化之外，它的大小也会根据实例的请求流量发生变化，流量越大该实心圆就越大。所以通过该实心圆的展示，就可以在大量的实例中快速的发现故障实例和高压力实例<br />1线：<br />曲线：用来记录2分钟内流量的相对变化，可以通过它来观察到流量的上升和下降趋势。<br />整图说明：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070136452.png" alt="image.png"><br />整图说明2：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070136245.png" alt="image.png"><br />搞懂一个才能看懂复杂的：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070136230.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务限流 </tag>
            
            <tag> 服务熔断 </tag>
            
            <tag> 服务隔离 </tag>
            
            <tag> 服务降级 </tag>
            
            <tag> hystrix </tag>
            
            <tag> 不推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>008限流与熔断理论部分（五）——sentinel(二)</title>
      <link href="/2022/11/07/02springcloud/008%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94sentinel(%E4%BA%8C)/"/>
      <url>/2022/11/07/02springcloud/008%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94sentinel(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="feign整合sentinel"><a href="#feign整合sentinel" class="headerlink" title="feign整合sentinel"></a>feign整合sentinel</h1><p>大体步骤：</p><ol><li>开启feign的sentinel功能</li><li>确实失败后的降级规则，有两种方案<ol><li>FallbackClass，无法对远程调用的异常做处理</li><li>FallbackFactory，可以对远程调用异常进行处理</li></ol></li></ol><p>首先实现<code>FallbackFactory</code></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务限流 </tag>
            
            <tag> 服务熔断 </tag>
            
            <tag> sentinel </tag>
            
            <tag> 服务隔离 </tag>
            
            <tag> 服务降级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>007限流与熔断理论部分（五）——sentinel(一)</title>
      <link href="/2022/11/07/02springcloud/007%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94sentinel(%E4%B8%80)/"/>
      <url>/2022/11/07/02springcloud/007%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94sentinel(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是熔断器？"><a href="#什么是熔断器？" class="headerlink" title="什么是熔断器？"></a>什么是熔断器？</h1><blockquote><p>限流在前面的章节已经知道了，现在谈谈熔断器</p></blockquote><p><strong>熔断器起的作用就是在特定的场景下关掉当前的通路，从而起到保护整个系统的效果</strong></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129007.png" alt="image.png"></p><blockquote><p>这张图需要注意的是，绿色表示接通电路或者服务健康，红色表示熔断或者服务负载</p></blockquote><p>一次服务请求访问可能需要涉及到 服务A 而 服务A 又需要 服务B，C，D 三个服务器提供支持（<strong>微服务链路</strong>），如果 服务D 负载，请求延迟过高导致该请求阻塞等待服务D的响应<br />又请求的线程是珍贵资源，有限的，如果不将服务D熔断掉，并立即反馈失败，线程将被全部占用。<br />这种情况国内较雪崩效应（去你丫的雪崩效应），国外叫 cascading failures（<strong>级联故障</strong>）</p><blockquote><p>吐槽国内某些<strong>砖家</strong>别的不会，<strong>争KPI搞高大上的名字最牛</strong> 国内好像是2012年企鹅某高官首先提出的新名字<br>我当初学习的时候，就一直纠结微服务链路故障怎么就跟雪崩效应联系在一起了？雪崩效应不是加密算法的一种理想属性么？</p></blockquote><p>而熔断器就是为了防止出现级联故障而存在的。。。</p><h1 id="功能对比"><a href="#功能对比" class="headerlink" title="功能对比"></a>功能对比</h1><p>市面上的断路器就三种： Sentinel、Hystrix、resilience4j<br />其中前文说过的，Hystrix已经进入维护，基本不考虑使用了<br />而resilience4j国外推荐的比较多，国内主要使用阿里的Sentinel</p><table><thead><tr><th></th><th>Sentinel</th><th>Hystrix(维护状态)</th><th>Resilience4j（Spring推荐）</th></tr></thead><tbody><tr><td>开发者</td><td>alibaba</td><td>Netflix</td><td>独立</td></tr><tr><td>隔离策略</td><td>信号量隔离（并发线程数限流）</td><td>线程池隔离&#x2F;信号量隔离</td><td>信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于响应时间、异常比率、异常数基于异常比率</td><td>基于异常比率</td><td>基于异常比率、响应时间</td></tr><tr><td>实时统计实现</td><td>滑动窗口（LeapArray）</td><td>滑动窗口（基于 RxJava）</td><td>Ring Bit Buffer</td></tr><tr><td>动态规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td><td>有限支持</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td><td>接口的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td><td>Rate Limiter</td></tr><tr><td>流量整形</td><td>支持预热模式、匀速器模式、预热排队模式</td><td>不支持</td><td>简单的 Rate Limiter 模式</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>控制台</td><td>提供开箱即用的控制台，可配置规则、查看秒级监控、机器发现等</td><td>简单的监控查看</td><td>不提供控制台，可对接其它监控系统</td></tr></tbody></table><p>我们主要学习 sentinel<br />从：</p><ol><li>Sentinel是什么？</li><li>Sentinel有什么用？</li><li>怎么用sentinel？</li><li>sentinel如何实现？（底层实现）</li></ol><h1 id="sentinel限流框架"><a href="#sentinel限流框架" class="headerlink" title="sentinel限流框架"></a>sentinel限流框架</h1><h2 id="sentinel是什么？"><a href="#sentinel是什么？" class="headerlink" title="sentinel是什么？"></a>sentinel是什么？</h2><p>Sentinel 是<strong>面向分布式服务架构的流量控制组件</strong>，主要以流量为切入点，从限流、流量整形、熔断降级、系统负载保护、热点防护等多个维度来帮助开发者保障微服务的稳定性。</p><h2 id="Sentinel有功能？"><a href="#Sentinel有功能？" class="headerlink" title="Sentinel有功能？"></a>Sentinel有功能？</h2><p>Hystrix 主要是隔离和熔断，但是 Sentinel 侧重于</p><ul><li>多样化的流量控制</li><li>熔断降级</li><li>系统负载保护</li><li>实时监控和控制台</li></ul><blockquote><p>记住，限流和降级都是以保护核心业务为目的的策略，除核心外的业务在一定阈值内保证可用。</p></blockquote><h3 id="什么是流量控制？"><a href="#什么是流量控制？" class="headerlink" title="什么是流量控制？"></a>什么是流量控制？</h3><p>对随机到来的请求，sentinel根据系统处理能力对流量进行规整。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129677.png" alt="image.png"></p><p>sentinel将java应用的任何内容认为是<strong>资源</strong>（比如：应用程序提供的服务、应用程序调用其他应用提供的服务、甚至是一段代码），然后在资源外边围绕一圈<strong>规则</strong>（流量控制规则、熔断降级规则或系统保护规则）以保护资源，并且所有规则都可以实时动态调整。</p><h3 id="什么是sentinel的熔断降级？"><a href="#什么是sentinel的熔断降级？" class="headerlink" title="什么是sentinel的熔断降级？"></a>什么是sentinel的熔断降级？</h3><p>sentinel的熔断降级实现方式和 Hystrix 的实现不同。<br />Hystrix通过线程隔离实现对资源的隔离，这样的好处在于比较彻底，缺点也很明显线程池线程过多导致线程上下文切换频繁，还需要预先设定线程池大小。<br />Sentinel的实现方式就有两种思路：</p><ol><li>对每个资源设定一个阈值，如果该资源阻塞导致线程数量超过该阈值，资源就会拒绝新的请求，直到该资源的线程完成任务之后，才可以重新接受新的线程。这种方式的好处在于，不会有频繁的线程上下文切换，也不需要事先设定好线程池的大小，只要累计堆积线程的数量就行。</li><li>对资源进行定时。Sentinel 通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</li></ol><blockquote><p><strong>Hystrix的线程隔离</strong>：针对不同的资源分别创建不同的线程池，不同服务调用都发生在不同的线程池中，在线程池排队、超时等阻塞情况时可以快速失败，并可以提供 fallback 机制。线程池隔离的好处是隔离度比较高，可以针对某个资源的线程池去进行处理而不影响其它资源，但是代价就是线程上下文切换的 overhead 比较大，特别是对低延时的调用有比较大的影响。</p></blockquote><h3 id="系统自适应保护"><a href="#系统自适应保护" class="headerlink" title="系统自适应保护"></a>系统自适应保护</h3><p>sentinel会保持外部流量和内部系统处理能力之间的平衡。在分布式系统中，如果某个资源已经负载，分布式系统就会将该次请求转发给其他资源，但其他资源正好也在边缘状态，此时就会导致两个资源都会负载，导致集群不可用。针对这个情况，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p><h1 id="怎么安装sentinel控制台？"><a href="#怎么安装sentinel控制台？" class="headerlink" title="怎么安装sentinel控制台？"></a>怎么安装sentinel控制台？</h1><h2 id="什么是Sentinel-控制台？"><a href="#什么是Sentinel-控制台？" class="headerlink" title="什么是Sentinel 控制台？"></a>什么是Sentinel 控制台？</h2><p>Sentinel 提供一个轻量级的开源控制台，它提供机器发现以及健康情况管理、监控（单机和集群），规则管理和推送的功能。</p><p>Sentinel 控制台包含如下功能:<br />查看机器列表以及健康情况：收集 Sentinel 客户端发送的心跳包，用于判断机器是否在线。<br />监控 (单机和集群聚合)：通过 Sentinel 客户端暴露的监控 API，定期拉取并且聚合应用监控信息，最终可以实现秒级的实时监控。<br />规则管理和推送：统一管理推送规则。<br />鉴权：生产环境中鉴权非常重要。这里每个开发者需要根据自己的实际情况进行定制。</p><blockquote><p>注意：Sentinel 控制台目前仅支持单机部署。Sentinel 控制台项目提供 Sentinel 功能全集示例，不作为开箱即用的生产环境控制台，不提供安全可靠保障。若希望在生产环境使用请根据文档自行进行定制和改造。</p></blockquote><h2 id="启动控制台"><a href="#启动控制台" class="headerlink" title="启动控制台"></a>启动控制台</h2><ol><li>下载 <code>sentinel</code>jar 包 <a href="https://github.com/alibaba/Sentinel/releases">sentinel笔者使用的是1.8.5版本</a></li><li>启动控制台<code>java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</code></li><li>访问<code>[http://localhost:8080/](http://localhost:8080/)</code></li></ol><blockquote><p>其中 <code>-Dserver.port=8080</code> 用于指定 Sentinel 控制台端口为 <code>8080</code>。<br>从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的登录功能，默认用户名和密码都是 <code>sentinel</code>。<br>用户可以通过如下参数进行配置：<br><code>-Dsentinel.dashboard.auth.username=sentinel</code> 用于指定控制台的登录用户名为 <code>sentinel</code>；<br><code>-Dsentinel.dashboard.auth.password=123456</code> 用于指定控制台的登录密码为 <code>123456</code>；如果省略这两个参数，默认用户和密码均为 <code>sentinel</code>；<br><code>-Dserver.servlet.session.timeout=7200 </code>用于指定 Spring Boot 服务端 session 的过期时间，如 <code>7200 </code>表示 <code>7200 秒</code>；<code>60m</code> 表示 <code>60 分钟</code>，<strong>默认为 30 分钟</strong>；<br>同样也可以直接在 <code>Spring properties</code> 文件中进行配置。<br>注意：部署多台控制台时，<code>session </code>默认不会在各实例之间共享，这一块需要自行改造。</p></blockquote><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><code>cloudalibaba-sentinel-service8401</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelMainApp8401</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(SentinelMainApp8401.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.alibaba.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlowLimitController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/testA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testA</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;------testA&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/testB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testB</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;------testB&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目后，我们不会看到 <code>cloudalibaba-sentinel-service</code>这个项目出现在sentinel控制台左侧</p><p>sentinel控制台是懒加载的，如果不访问一次，控制台就不会主动去捕获信息</p><p>需要主动一次访问：<a href="http://localhost:8401/testA">http://localhost:8401/testA</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129985.png" alt="image.png"></p><h1 id="sentinel控制台详情"><a href="#sentinel控制台详情" class="headerlink" title="sentinel控制台详情"></a>sentinel控制台详情</h1><h2 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h2><p><code>sentinel</code>默认监控的是<code>SpringMVC</code>的<code>Mapping</code>也就是我们常说的 <code>controller</code> 层，<code>sentinel</code>将这视为<strong>资源</strong>。</p><p>簇点链路显示了那些被sentinel视为资源的地址，如下图：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129454.png" alt="image.png"></p><blockquote><p>注意: 簇点链路监控是内存态的信息，它仅展示启动后调用过的资源。所以如果打开 <code>sentinel </code>控制台后发现这里没有我们需要的资源，比如：<code>testA</code>，可以在浏览器上访问一次，就会出现了</p></blockquote><p>我们可以为 testA 资源添加流控：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129115.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129770.png" alt="image.png"></p><p>接着我们下载JMeter工具。该工具主要用来发送请求使用。</p><blockquote><p>打开工具后会发现全是英文，如果阅读比较困难可以打开【option】——【choose language】选择简体中文即可</p></blockquote><p>现在开始模拟多客户访问网站</p><ol><li>创建【测试计划】。点击【文件】——【新建】，还可以修改下名称【sentinel测试计划】——<code>ctrl+s</code>保存，选择存储路径即可。</li><li>右键【sentinel测试计划】——【添加】——【线程】——【线程组】——<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129101.png" alt="image.png"></li><li>创建http请求<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129181.png" alt="image.png"></li><li>添加路径：<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129578.png" alt="image.png"></li><li>添加结果树：<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129715.png" alt="image.png"></li><li>直接启动</li><li>打开结果树：<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129889.png" alt="image.png"></li></ol><blockquote><p>我们的中线程数为：20，两秒内执行完，qps计算可得：20&#x2F;2&#x3D;10，明显大于我们设定的qps&#x3D;5</p></blockquote><h2 id="流控规则的模式"><a href="#流控规则的模式" class="headerlink" title="流控规则的模式"></a>流控规则的模式</h2><p>流控模式有三种：</p><ol><li>直接：统计当前资源的请求，触发阈值时限流，比如上面我们访问 <code>/testA</code>资源一样</li><li>关联：统计关联资源(<code>B</code>)的请求，触发阈值时限流<code>A</code>，简单点说就是统计<code>B</code>限流<code>A</code></li><li>链路：统计指定链路访问到本资源的请求，触发阈值，限流整个链路</li></ol><h3 id="关联的使用场景"><a href="#关联的使用场景" class="headerlink" title="关联的使用场景"></a>关联的使用场景</h3><p>它的单元是 接口，讲的是 接口与接口之间 的关联关系</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129171.png" alt="image.png"><br />用户有无数个请求访问 <code>/textA</code> 和 <code>/textB</code>，他们之间共同竞争 <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129676.png" alt="image.png"><br />现在我们要保证 <code>/textB</code>能够得到尽量多的资源要怎么做？</p><p>非常简单。</p><ol><li>我们假设<code>/textB</code>更加重要（根据实际项目判定那个资源更加重要）</li><li>之后再对 <code>/textA</code>限流</li><li>然后sentinel就会统计 <code>/textB</code>是否超出阈值，来限流<code>/textA</code>，从而让出更多的<strong>数据库某表</strong>给<code>textB</code>访问</li></ol><blockquote><p>超出表示<code>/textB</code>现在需要更多的资源，此时就需要让<code>testA</code>让出更多的请求</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130541.png" alt="image.png"></p><p><strong>关联的使用场景：</strong></p><ol><li><strong>两个资源有竞争关系</strong></li><li><strong>一个优先级高，一个优先级低</strong></li><li><strong>需要保证其中 一个重要的请求获得更多的资源</strong></li></ol><p>添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;query&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;查看订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;更新订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130379.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130028.png" alt="image.png"></p><blockquote><p>需要注意这里是<code>put</code>请求不是<code>get</code></p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130712.png" alt="image.png"></p><p>访问：<a href="http://localhost:8401/query">http://localhost:8401/query</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130124.png" alt="image.png"></p><p>可以看到 <code>query</code>请求被限流</p><h3 id="链路的使用场景"><a href="#链路的使用场景" class="headerlink" title="链路的使用场景"></a>链路的使用场景</h3><p>链路的单元是一条调用链，讲的是调用链之间的关系</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130416.png" alt="image.png"></p><p>在上面的调用链路中，作为入口的 <code>testA</code>和<code>testC </code>最终都会调用到<code>goods</code>资源</p><p>现在的问题是哪个调用链路的重要性较高，假设 <code>testC </code>调用链路重要性更加重要<br />那么就需要在 sentinel 控制台中添加以 <code>testA</code>作为入口的调用链路<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130316.png" alt="image.png"></p><ol><li><strong>两个链路（或者多条）</strong></li><li><strong>一个链路优先级高，另一个链路优先级低</strong></li><li><strong>两个链路有相交的资源</strong></li></ol><p>还是支付和查询订单，这两个业务都需要在底层调用<code>OrderService</code>的查询订单信息方法。<br />但是我们知道 sentinel 默认监控 SpringMVC 的 <code>Mapping</code><br />所以我们可以在<code>OrderService</code>方法上面添加<code>SentinelResource</code>注解，将方法标记为 <strong>资源</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">queryOrder</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;goods&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryOrder</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;查询订单&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;query&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">orderService.queryOrder();</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;查看订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">orderService.queryOrder();</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;更新订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们访问下链接</p><p>但是我们发现还是只有一个链路：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130339.png" alt="image.png"></p><p>这是有问题的，官网也说了，<code>application.yml</code>需要添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">web-context-unify:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>再次试试</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130641.png" alt="image.png"><br />这样我们就能看到两棵不同的树</p><p>接着我们给 goods 资源添加流控</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130781.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130670.png" alt="image.png"></p><blockquote><p>注意这里的qps是2</p></blockquote><p>添加jmeter<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130231.png" alt="image.png"> <br /><code>qps=4</code><br />然后添加两个 http 请求：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130303.png" alt="image.png"></p><p>访问：<a href="http://localhost:8401/query">http://localhost:8401/query</a><br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130130.png" alt="image.png"></p><p>jmeter也报错：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130309.png" alt="image.png"></p><h2 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h2><p>流控效果是请求达到流量阈值是所采取的策略是什么？</p><ul><li>快速失败：达到阈值，新的请求将被拒绝并抛出FlowException异常（默认）</li><li>预热模式（warm up）：对超出阈值的请求也会抛出异常，但是这种默认的阈值是动态的，会慢慢的将阈值调高直到最大阈值为止</li><li>排队等待：让所有的请求按照先后顺序排序，每个请求的间隔不能小于指定时间</li></ul><h3 id="预热模式"><a href="#预热模式" class="headerlink" title="预热模式"></a>预热模式</h3><p>预热模式下，需要设置<strong>qps阈值</strong>和<strong>预热时长</strong><br />这里我们设置 qps &#x3D; 10 预热时长 &#x3D; 5<br />这样 sentinel 将在不需要预热是 qps 保持为 10 &#x2F; 3 &#x3D; 3<br />这里的除数是 sentinel 内部默认值 3 <br />预热请求超出qps &#x3D; 3 则 sentinel 会逐步预热，直到5秒后的最大值，中间会拒绝掉部分请求</p><p>这就是预热模式</p><blockquote><p>threshold &#x2F; coldFactor &#x3D; 初始qps<br>coldFactor默认值为 3<br>threshold是最大qps</p></blockquote><p>设置jmeter：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130001.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131980.png" alt="image.png"></p><p>起步就是 3 qps</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131769.png" alt="image.png"><br />可以看到成功的请求逐渐变高</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>预热模式的使用场景一般是秒杀活动</p><h2 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h2><p>热点：统计访问数量较大的节点<br />参数：针对参数<br />限流：使用的操作</p><p>说白了，就是<strong>分别统计参数值相同的请求，判断是否超出QPS阈值。</strong></p><p>如果不懂，还可以看下下面这张图示</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131993.png" alt="image.png"></p><p>sentinel对热点参数限流为 QPS &#x3D; 5，然后总共发了 18 个请求，其中10个请求是非热点接口的，所以可以不看</p><p>热点请求有8个<br />参数 axb 的请求在一秒钟发生了5次，大于等于qps阈值5，所以将被阻塞<br />参数 abc 的请求在一秒内发生了3次，没有超出阈值，请求通过。</p><p>还可以使用 sentinel控制台再次说明：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131543.png" alt="image.png"><br />如上图所示，我们设置了资源<code>hot</code><br />参数索引为 0 表示 <code>hot</code>接口的第一个参数<br />单机阈值为5，统计窗口时长为1，表示1秒内<strong>相同参数</strong>额请求数不能超过5个</p><p>比如 <code>hot?id=1</code>请求在一秒的时间内发起了10次，那么请求就会被阻塞</p><blockquote><p>此时前面的那一秒时间可能还发起了别的请求，比如<code>hot?id=2</code>发起了3次，此时并不会阻塞，虽然接口相同，但参数不同<br>热点参数限流针对的颗粒度是 接口+参数，接口相同，参数不同，意味着不同的请求，不会被 热点参数限流规则 统计</p></blockquote><h3 id="在springboot中试试"><a href="#在springboot中试试" class="headerlink" title="在springboot中试试"></a>在springboot中试试</h3><p>添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;hot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hot</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;热点参数: &quot;</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后设置 jmeter：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131898.png" alt="image.png"></p><p><code>id=1</code>配置的线程组是<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131199.png" alt="image.png"></p><p><code>id=2</code>配置的线程组是<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131808.png" alt="image.png"></p><p>同时启动两个线程组，结果发现全部都是成功，没有限流效果？<br />限流不成功？</p><p>其原因很简单，SpringMVC的<code>@Controller</code>注解的资源不被<strong>热点流量限流</strong>发现<br />需要主动给他们添加注解<code>@SentinelResource(&quot;hot&quot;)</code></p><blockquote><p>注意了。热点参数限流默认对SpringMVC资源无效。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;hot&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(&quot;hot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hot</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;热点参数: &quot;</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131783.png" alt="image.png"><br />添加【热点规则】</p><p><code>id=1</code>结果<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131438.png" alt="image.png">，部分成功</p><p><code>id=2</code>结果<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131533.png" alt="image.png">，全部成功</p><p>说明 <code>id=1</code>和 <code>id=2</code>同时启动，不会产生任何的相互影响</p><h3 id="参数例外项"><a href="#参数例外项" class="headerlink" title="参数例外项"></a>参数例外项</h3><p>热点限流，对该接口的热点参数进行限流，但需要有例外情况。<br />也就是说这个参数需要进行特殊处理，即便它是热点参数，但不能也不需要限流。</p><p>比如：某款包款热卖利润极其高的商品，我们就不能进行热点参数限流。<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131094.png" alt="image.png"></p><p>上图我们重新设置了 <code>id=10</code>的这款热点商品的例外项，将其<code>qps</code>上调到每秒10个请求。</p><p>添加jmeter测试：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131787.png" alt="image.png"><br /><a href="http://localhost:8401/hot?id=10">http://localhost:8401/hot?id=10</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131109.png" alt="image.png"></p><h2 id="“实时监控”汇总资源信息（集群聚合）"><a href="#“实时监控”汇总资源信息（集群聚合）" class="headerlink" title="“实时监控”汇总资源信息（集群聚合）"></a>“实时监控”汇总资源信息（集群聚合）</h2><p>同时，同一个服务下的所有机器的簇点信息会被汇总，并且秒级地展示在”实时监控”下。<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131064.png" alt="image.png"></p><blockquote><p>注意: 实时监控仅存储 5 分钟以内的数据，如果需要持久化，需要通过调用<a href="https://github.com/alibaba/Sentinel/wiki/%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7">实时监控接口</a>来定制。</p></blockquote><blockquote><p>注意：请确保 Sentinel 控制台所在的机器时间与自己应用的机器时间保持一致，否则会导致拉不到实时的监控数据。</p></blockquote><h2 id="规则管理及推送"><a href="#规则管理及推送" class="headerlink" title="规则管理及推送"></a>规则管理及推送</h2><blockquote><p>本页面相关文档在 ：</p></blockquote><blockquote><p>sentinel默认使用的是原始模式，这种模式的配置只保存在内存中，在测试环境可以用用，但是在生产环境就不能这么玩了</p></blockquote><p>Sentinel 控制台同时提供简单的规则管理以及推送的功能。规则推送分为 3 种模式，包括 “原始模式”、”Pull 模式” 和”Push 模式”。<br />这里先简单的介绍”原始模式”。</p><p>sentinel默认是原始模式，该模式API 将规则推送至客户端并直接更新到内存中，简单，无任何依赖，但不保证一致性；<strong>规则保存在内存中，重启即消失。严重不建议用于生产环境</strong></p><p>DataSource 接口给我们提供了对接任意配置源的能力。相比直接通过 API 修改规则，实现 DataSource 接口是更加可靠的做法。<br />我们推荐通过控制台设置规则后将规则推送到统一的规则中心，客户端实现 ReadableDataSource 接口端监听规则中心实时获取变更，流程如下：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131832.png" alt="image.png"><br />DataSource 扩展常见的实现方式有:</p><ul><li>拉模式：客户端主动向某个规则管理中心定期轮询拉取规则，这个规则中心可以是 RDBMS、文件，甚至是 VCS 等。这样做的方式是简单，缺点是无法及时获取变更；</li><li>推模式：规则中心统一推送，客户端通过注册监听器的方式时刻监听变化，比如使用 Nacos、Zookeeper 等配置中心。这种方式有更好的实时性和一致性保证。</li></ul><p>Sentinel 目前支持以下数据源扩展：</p><ul><li>Pull-based: 动态文件数据源、Consul, Eureka</li><li>Push-based: ZooKeeper, Redis, Nacos, Apollo, etcd</li></ul><h2 id="拉模式"><a href="#拉模式" class="headerlink" title="拉模式"></a>拉模式</h2><p>pull 模式的数据源（如本地文件、RDBMS 等）一般是可写入的。使用时需要在客户端注册数据源：将对应的读数据源注册至对应的 RuleManager，将写数据源注册至 transport 的 WritableDataSourceRegistry 中。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131305.webp"></p><p>首先 Sentinel 控制台通过 API 将规则推送至客户端并更新到内存中，接着注册的写数据源会将新的规则保存到本地的文件中。使用 pull 模式的数据源时一般不需要对 Sentinel 控制台进行改造。这种实现方法好处是简单，坏处是无法保证监控数据的一致性。</p><p>实现拉模式的数据源最简单的方式是继承 <code>AutoRefreshDataSource </code>抽象类，然后实现 <code>readSource()</code> 方法，在该方法里从指定数据源读取字符串格式的配置数据。比如 <a href="https://github.com/alibaba/Sentinel/blob/master/sentinel-demo/sentinel-demo-dynamic-file-rule/src/main/java/com/alibaba/csp/sentinel/demo/file/rule/FileDataSourceDemo.java">基于文件的数据源</a>。</p><h1 id="隔离和降级"><a href="#隔离和降级" class="headerlink" title="隔离和降级"></a>隔离和降级</h1><p>服务之间是相互依赖的，虽然限流可以保证服务不会因高并发产生异常，但无法保证服务不会因为其他原因而产生故障。所以需要其他手段将这些故障控制台一定的范围内，防止服务级联故障（服务雪崩）。</p><p>而这些手段大体上包括这几种：</p><ul><li>线程隔离：给每个服务专门提供一个线程池，线程池线程数量不能太高。这样出现问题 ，也仅仅只会有部分线程被阻塞。不会导致服务级联故障。</li><li>熔断：判断服务的故障率，根据故障情况，对该服务进行熔断。下次请求再次访问到该服务时，就会被立即返回。</li><li>限流：通过对并发访问进行限速，保证其他功能拿到更多的系统资源。</li></ul><blockquote><p>需要注意：降级是限流的一种行为（方案）</p></blockquote><p>限流的方案：</p><ul><li>拒绝服务：最简单的方式，把多余的请求直接拒绝掉。做的高大上一些，可以根据一定的用户规则进行拒绝策略。</li><li>服务降级：降级甚至关掉后台的某些服务。在服务必定出现高并发的情况下，比如双11。可以预先停止掉部分不重要的服务，并将部分强一致性的服务修改为最终一致性。（需要对业务有一定的了解）【弃卒保帅】</li><li>特权请求： 在多租户或者对用户进行分级时，可以考虑让一些特殊的用户有限处理，其他的可以考虑干掉</li><li>延迟处理：可以利用队列把请求缓存住。削峰填谷。</li></ul><blockquote><p>从上面提供的方案我们可以发现，都是对服务的调用方进行某种操作以保证服务高可用。服务的调用方也就是客户端在springcloud中一般使用feign进行调用，所以对于SpringCloud整合Sentinel，就需要对feign进行操作</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务限流 </tag>
            
            <tag> 服务熔断 </tag>
            
            <tag> sentinel </tag>
            
            <tag> 服务隔离 </tag>
            
            <tag> 服务降级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>006SpringCloud系列——限流与熔断理论部分（五）</title>
      <link href="/2022/11/07/02springcloud/006SpringCloud%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2022/11/07/02springcloud/006SpringCloud%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="限流的目的（作用）"><a href="#限流的目的（作用）" class="headerlink" title="限流的目的（作用）"></a>限流的目的（作用）</h1><p>限流是保证最大限度为用户提供服务的手段之一</p><p>限流通过限制并发访问量或者一定窗口期内允许的请求量来保护系统，一旦达到限流量将会走相应的拒绝策略，比如：跳转的相对温和的拒绝页面拒绝请求、进入排队系统、降级等</p><p>总而言之，<strong>限流就是损失部分用户的可用性，为绝大多数用户提供稳定的服务。</strong></p><blockquote><p><strong>限流的核心：保护全部核心业务，损失部分一般业务。</strong></p></blockquote><h1 id="限流的实现方法"><a href="#限流的实现方法" class="headerlink" title="限流的实现方法"></a>限流的实现方法</h1><p>现在几乎无处不在：</p><ul><li>在Nginx层添加限流模块，限制平均访问速度</li><li>通过设置数据库连接池的大小总并发量</li><li>通过Guava提供的Ratelimiter限制接口的访问速度</li><li>TCP通讯协议的限流整形</li></ul><p>以此诞生和很多非常优秀的限流方法</p><h2 id="计数器固定窗口算法"><a href="#计数器固定窗口算法" class="headerlink" title="计数器固定窗口算法"></a>计数器固定窗口算法</h2><p>在执行时间周期内，每发生一次访问就累计一次，直到累计值达到限流上限，触发限流拒绝策略，当进入下一次时间周期时，重置限流计数累计值。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>但这种限流算法存在问题。。。</p><p>假设我们的时钟周期是 2s ，限流是 100</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070125860.png" alt="image.png"></p><p>如上图所示，在短短不到 1s 的时间内连续发生了 200 次突然的访问</p><p>超出系统能够提供的并发请求量</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>为了更好的观察到限流的情况，我们对限流需求进行了修改</p><p>2s 只能通过 2次 请求，共有10个请求，每个请求间隔 250ms </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.simplewindow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器固定窗口算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimiterSimpleWindow</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每秒阈值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">QPS</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间窗口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">TIME_WINDOWS</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计数器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">REQ_COUNT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 窗口计算开始时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">START_TIME</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ((System.currentTimeMillis() - START_TIME) &gt; TIME_WINDOWS) &#123;</span><br><span class="line">REQ_COUNT.set(<span class="number">0</span>);</span><br><span class="line">START_TIME = System.currentTimeMillis();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> REQ_COUNT.incrementAndGet() &lt;= QPS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">TimeUnit.MILLISECONDS.sleep(<span class="number">250</span>);</span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line"><span class="keyword">if</span> (tryAcquire()) &#123;</span><br><span class="line">System.out.println(now + <span class="string">&quot; do something&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(now + <span class="string">&quot; 被限流了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">18:48:32.459501800 <span class="keyword">do</span> something</span><br><span class="line">18:48:32.743208100 <span class="keyword">do</span> something</span><br><span class="line">18:48:32.999056300 被限流了</span><br><span class="line">18:48:33.251895600 被限流了</span><br><span class="line">18:48:33.504932600 被限流了</span><br><span class="line">18:48:33.756792300 被限流了</span><br><span class="line">18:48:34.009640500 被限流了</span><br><span class="line">18:48:34.262830700 <span class="keyword">do</span> something</span><br><span class="line">18:48:34.523701700 <span class="keyword">do</span> something</span><br><span class="line">18:48:34.791088100 被限流了</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="滑动窗口算法"><a href="#滑动窗口算法" class="headerlink" title="滑动窗口算法"></a>滑动窗口算法</h2><p>滑动窗口算法<strong>降低了</strong>计算器固定窗口算法的两倍_阈值_问题。</p><p>大体思路很简单，将 1s 的时间分段，分成更细颗粒度的时间单位，比如分成 4 分，如此原本的 1s 限流 100 次，变成 0.25s 限流 25次</p><p>即便出现了_阈值_问题，也仅仅是多了 25 次请求。125次请求也比200次请求要好得多</p><p>编码可以参考这张图：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070125498.png"><br />根据这张图以及对滑动窗口算法的理解，就可以写出下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.simplewindow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 滑动窗口算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimiterSlidingWindow</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 窗口大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Long</span> <span class="variable">windowSize</span> <span class="operator">=</span> <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分区</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">partition</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阈值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">qps</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存放子窗口的信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> WindowInfo[] windowsArray = <span class="keyword">new</span> <span class="title class_">WindowInfo</span>[partition];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RateLimiterSlidingWindow</span><span class="params">(Integer qps)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.qps = qps;</span><br><span class="line"><span class="type">long</span> <span class="variable">currentTimeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; windowsArray.length; i++) &#123;</span><br><span class="line">windowsArray[i] = <span class="keyword">new</span> <span class="title class_">WindowInfo</span>(currentTimeMillis, <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">currentTimeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">long</span> <span class="variable">curIndex</span> <span class="operator">=</span> currentTimeMillis % windowSize / (windowSize / partition);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; windowsArray.length; i++) &#123;</span><br><span class="line"><span class="type">WindowInfo</span> <span class="variable">windowInfo</span> <span class="operator">=</span> windowsArray[i];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对时间的判断，判断是否超时</span></span><br><span class="line"><span class="comment"> * 这里每个子窗口的时间都是一样的 因为 currentTimeMillis 每次 tryAcquire 设置的都是相同一个值</span></span><br><span class="line"><span class="comment"> * 所以这里可以直接跟 windowSize 判断，而不是 子窗口的 windowSize / partition 单位时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> ((currentTimeMillis - windowInfo.time) &gt; windowSize) &#123;</span><br><span class="line">windowInfo.time = currentTimeMillis;</span><br><span class="line">windowInfo.getCount().set(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断子窗口的计数是否超过 qps ， 如果没有超过，则自增</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (curIndex == i &amp;&amp; windowInfo.getCount().get() &lt; qps) &#123;</span><br><span class="line">windowInfo.getCount().incrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line">sum += windowInfo.getCount().get();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最终在这里判断所有子窗口累计的次数和是否超过 qps 的次数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> sum &lt;= qps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">WindowInfo</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Long time;</span><br><span class="line"><span class="keyword">private</span> AtomicInteger count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">WindowInfo</span><span class="params">(Long time, AtomicInteger count)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.time = time;</span><br><span class="line"><span class="built_in">this</span>.count = count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">getTime</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTime</span><span class="params">(Long time)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.time = time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> AtomicInteger <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">success</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">RateLimiterSlidingWindow</span> <span class="variable">limiterSlidingWindow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RateLimiterSlidingWindow</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">Thread.sleep(<span class="number">300</span>);</span><br><span class="line"><span class="keyword">if</span> (limiterSlidingWindow.tryAcquire()) &#123;</span><br><span class="line">success++;</span><br><span class="line">System.err.println(<span class="string">&quot;访问成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;访问失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;实测成功次数：&quot;</span> + success);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里看代码可以计算出大致的成功次数：<br />20 次请求， 每次请求需要等待 300ms 所以需要 6000 ms 也就是 6s<br />而每次的 qps 的次数是 2， 所以大致可以访问 12 次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">访问成功</span><br><span class="line">访问成功</span><br><span class="line">访问失败</span><br><span class="line">访问成功</span><br><span class="line">访问成功</span><br><span class="line">访问失败</span><br><span class="line">访问失败</span><br><span class="line">访问成功</span><br><span class="line">访问成功</span><br><span class="line">访问失败</span><br><span class="line">访问失败</span><br><span class="line">访问成功</span><br><span class="line">访问成功</span><br><span class="line">访问失败</span><br><span class="line">访问失败</span><br><span class="line">访问成功</span><br><span class="line">访问成功</span><br><span class="line">访问失败</span><br><span class="line">访问失败</span><br><span class="line">访问成功</span><br><span class="line">实测成功次数：11</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码0</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>sentinel 就是使用的这种算法实现的限流</p></blockquote><p>缺点：<br />这种方式无法处理突发情况，比如段时间内爆发大量的流量，此时将会有大量请求被拒绝</p><h2 id="滑动日志算法"><a href="#滑动日志算法" class="headerlink" title="滑动日志算法"></a>滑动日志算法</h2><p>滑动日志的方式是：使用日志记录下用户所有请求的时间，新请求到来时先判断最近指定时间范围内的请求数量是否超过指定阈值，由此来确定是否达到限流，这种方式没有了时间窗口突变的问题，限流比较准确，但是因为要记录下每次请求的时间点，所以<strong>占用的内存较多</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.simplewindow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 滑动日志方式限流</span></span><br><span class="line"><span class="comment"> * 设置 QPS 为 2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimiterSildingLog</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阈值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">qps</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录请求的时间戳,和数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TreeMap&lt;Long, Long&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理请求记录间隔, 60 秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">claerTime</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RateLimiterSildingLog</span><span class="params">(Integer qps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.qps = qps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 清理过期的数据老数据，最长 60 秒清理一次</span></span><br><span class="line">        <span class="keyword">if</span> (!treeMap.isEmpty() &amp;&amp; (now - treeMap.firstKey()) &gt; claerTime) &#123;</span><br><span class="line">            Set&lt;Long&gt; keySet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(treeMap.subMap(<span class="number">0L</span>, now - <span class="number">1000</span>).keySet());</span><br><span class="line">            <span class="keyword">for</span> (Long key : keySet) &#123;</span><br><span class="line">                treeMap.remove(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算当前请求次数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Long value : treeMap.subMap(now - <span class="number">1000</span>, now).values()) &#123;</span><br><span class="line">            sum += value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 超过QPS限制，直接返回 false</span></span><br><span class="line">        <span class="keyword">if</span> (sum + <span class="number">1</span> &gt; qps) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录本次请求</span></span><br><span class="line">        <span class="keyword">if</span> (treeMap.containsKey(now)) &#123;</span><br><span class="line">            treeMap.compute(now, (k, v) -&gt; v + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            treeMap.put(now, <span class="number">1L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum &lt;= qps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">RateLimiterSildingLog</span> <span class="variable">rateLimiterSildingLog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RateLimiterSildingLog</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">250</span>);</span><br><span class="line">            <span class="type">LocalTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">            <span class="keyword">if</span> (rateLimiterSildingLog.tryAcquire()) &#123;</span><br><span class="line">                System.out.println(now + <span class="string">&quot; 做点什么&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(now + <span class="string">&quot; 被限流&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="令牌桶限流算法"><a href="#令牌桶限流算法" class="headerlink" title="令牌桶限流算法"></a>令牌桶限流算法</h2><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>令牌桶限流算法：系统会以一个恒定的速度往桶里放入令牌，而请求需要一个令牌，如果桶里没有令牌，则拒绝服务。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070125272.png"><br />令牌桶是网络流量整形（Traffic Shaping）和速率限制（Rate Limiting）中最常使用的一种算法</p><ul><li>那什么是网络流量整形和速率限制？</li></ul><p>网络流量整形借助缓冲区和令牌桶实现，保证报文能够以一定的速率发出，大体的工作方式可以借助下图实现<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070126826.png" alt="image.png"><br />如图所示，将报文的包放在下面缓存区，而上面的令牌桶以一定的效率生成令牌，每次报文想要发送前，需要获得一个令牌，这样，令牌桶就决定了报文的发送效率</p><p>假设令牌生成的效率是每秒 10 个，也就是 QPS &#x3D; 10，此时请求获取令牌时存在这么三种情况：</p><ul><li>请求速度大于令牌生成速度：那么令牌就被很快用完，后续再有请求发生，就会被限流</li><li>请求速度等于令牌生成速度：此时流量处于稳定状态</li><li>请求小于令牌生成速度：说明此时系统请求较少，请求将被稳定处理，而令牌的数量将会被限制在 max 最大值</li></ul><p>令牌桶可以处理突发请求：令牌桶是可以累积的，所以短时间内突然新增大量的请求这种情况可以被令牌桶积累的令牌处理</p><blockquote><p>需要注意：令牌桶限流算法容易和漏桶算法混淆。主要的区别在于令牌桶可以积累令牌，对付突发流量，也能保证处理的平均效率，而漏桶算法只能够强制限流</p></blockquote><p>代码可以借助这张图编写：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070126470.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.simplewindow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenBucketSmoothBursty</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 令牌桶的容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Integer capacity;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成令牌的效率</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> rate;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前令牌的数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> tokenAmount;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(Request request)</span> &#123;</span><br><span class="line">request.setHandleTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">System.out.println(request.getCode() + <span class="string">&quot;号请求被处理，请求发起时间:&quot;</span> + request.getLaunchTime() + <span class="string">&quot;,请求处理时间: &quot;</span> + request.getHandleTime() + <span class="string">&quot;, 处理耗时:&quot;</span> + (request.getHandleTime().getTime() - request.getLaunchTime().getTime()) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TokenBucketSmoothBursty</span><span class="params">(Integer capacity, <span class="type">long</span> rate)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.capacity = capacity;</span><br><span class="line"><span class="built_in">this</span>.rate = rate;</span><br><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">pool.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (tokenAmount &lt; <span class="built_in">this</span>.capacity) &#123;</span><br><span class="line"><span class="built_in">this</span>.tokenAmount++;</span><br><span class="line">System.out.println(<span class="string">&quot;tokenAmount: &quot;</span> + tokenAmount);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>, rate, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">TokenBucketSmoothBursty</span> <span class="variable">tokenBucketSmoothBursty</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TokenBucketSmoothBursty</span>(<span class="number">5</span>, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line"><span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>(i, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"><span class="keyword">if</span> (tokenBucketSmoothBursty.tryAcquire(request, TokenBucketSmoothBursty::handleRequest)) &#123;</span><br><span class="line">System.out.println(i + <span class="string">&quot;号请求被接受&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.err.println(i + <span class="string">&quot;号请求被拒绝&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(Request request, Consumer&lt;Request&gt; consumer)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (tokenAmount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">tokenAmount--;</span><br><span class="line">consumer.accept(request);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Request</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"><span class="keyword">private</span> Date launchTime;</span><br><span class="line"><span class="keyword">private</span> Date handleTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Request</span><span class="params">(<span class="type">int</span> code, Date launchTime)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.code = code;</span><br><span class="line"><span class="built_in">this</span>.launchTime = launchTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Request</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.code = code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">getLaunchTime</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> launchTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLaunchTime</span><span class="params">(Date launchTime)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.launchTime = launchTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">getHandleTime</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> handleTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHandleTime</span><span class="params">(Date handleTime)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.handleTime = handleTime;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以使用 guava 的 <code>RateLimiter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 设置令牌桶的容量为 2， 意味着 1 秒钟只能访问 2 次</span></span><br><span class="line">    <span class="type">RateLimiter</span> <span class="variable">limiter</span> <span class="operator">=</span> RateLimiter.create(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);</span><br><span class="line">        <span class="comment">// 产生了一个令牌</span></span><br><span class="line">        System.out.println(time + <span class="string">&quot; : &quot;</span> + limiter.tryAcquire());</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">250</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏桶限流法"><a href="#漏桶限流法" class="headerlink" title="漏桶限流法"></a>漏桶限流法</h2><h3 id="是什么？-1"><a href="#是什么？-1" class="headerlink" title="是什么？"></a>是什么？</h3><p>漏桶限流算法的主要功能是：<br />控制数据注入网络的速度，以一种均速将桶内的请求一点点的放出来，平滑网络上的突发请求。<br />当请求超出桶的大小时，请求将被拒绝，走决绝策略。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070126931.png" alt="image.png"></p><blockquote><p>漏桶算法和令牌桶算法的区别在于漏桶限流算法能够拦截请求，也能够拦截突发请求，但无法处理突发的多余请求，它只能够按照程序员规定的速度一点点处理请求，而多余桶容量的请求将被抛弃或者走其他拒绝策略</p></blockquote><p>还可以直接使用 guava 提供的漏桶算法</p><h2 id="各个限流算法的比较"><a href="#各个限流算法的比较" class="headerlink" title="各个限流算法的比较"></a>各个限流算法的比较</h2><table><thead><tr><th>算法</th><th>确定参数</th><th>空间复杂度</th><th>时间复杂度</th><th>限制突发流量</th><th>平滑限流</th><th>分布式环境下实现难度</th></tr></thead><tbody><tr><td>固定窗口</td><td>计数周期T、<br />周期内最大访问数N</td><td>低O(1)<br />（记录周期内访问次数及周期开始时间）</td><td>低O(1)</td><td>否</td><td>否</td><td>低</td></tr><tr><td>滑动窗口</td><td>计数周期T、<br />周期内最大访问数N</td><td>高O(N)<br />（记录每个小周期中的访问数量）</td><td>中O(N)</td><td>是</td><td>相对实现。滑动窗口的格子划分的越多，那么滑动窗口的滚动就越平滑</td><td>中</td></tr><tr><td>漏桶</td><td>漏桶流出速度r、漏桶容量N</td><td>低O(1)<br />（记录当前漏桶中容量）</td><td>高O(N)</td><td>是</td><td>是</td><td>高</td></tr><tr><td>令牌桶</td><td>令牌产生速度r、令牌桶容量N</td><td>低O(1)<br />（记录当前令牌桶中令牌数）</td><td>高O(N)</td><td>是</td><td>是</td><td>高</td></tr></tbody></table><h2 id="服务的熔断和降低"><a href="#服务的熔断和降低" class="headerlink" title="服务的熔断和降低"></a>服务的熔断和降低</h2><h3 id="什么是服务的熔断？"><a href="#什么是服务的熔断？" class="headerlink" title="什么是服务的熔断？"></a>什么是服务的熔断？</h3><p>我们在各种场景下都会接触到熔断这两个字。高压电路中，如果某处电压过高，熔断器就会熔断，对电路进行保护。股票交易中，如果股票涨跌幅过大，也会采用熔断机制，暂停交易，来控制交易风险。</p><p>同样，在微服务架构中，熔断机制也是起着类似的作用。<strong>当调用链路中的某个微服务长时间不可用或者有延迟，响应过慢，系统就会熔断对该节点微服务的调用，快速返回错误信息。当监控到该微服务正常工作后，再次恢复该调用链路。</strong></p><h3 id="为什么需要服务的熔断？"><a href="#为什么需要服务的熔断？" class="headerlink" title="为什么需要服务的熔断？"></a>为什么需要服务的熔断？</h3><p>举个例子：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070126325.png" alt="image.png"></p><p>服务A 需要 服务 B C D </p><p>但是 服务D 出现了过载或者不可用的情况，导致 服务A 的请求阻塞等待 服务D 的响应，连带着 服务A 也出现问题。</p><p>如果还有其他服务需要用到 服务A 那么也跟着出问题，也就是所谓的服务雪崩效应</p><p>此时如果我们给每一个服务外围包裹一个熔断器，<strong>在服务可用时，闭合熔断器，在不可以使用时断开熔断器，立即告知调用方服务处于不可用状态</strong>。</p><h2 id="熔断器都有什么落地实现？"><a href="#熔断器都有什么落地实现？" class="headerlink" title="熔断器都有什么落地实现？"></a>熔断器都有什么落地实现？</h2><h3 id="Hystrix熔断器"><a href="#Hystrix熔断器" class="headerlink" title="Hystrix熔断器"></a>Hystrix熔断器</h3><p>Hystrix是一个用于处理分布式系统的<strong>延迟和容错</strong>的开源库,在分布式系统里，许多依赖不可避免的会调用失败,比如超时、异常等,<strong>Hystrix能够保证在一个依赖出问题的情况下， 不会导致整体服务失败，避免级联故障,以提高分布式系统的弹性</strong>。<strong>”断路器”本身是一种开关装置,当某个服务单元发生故障之后, 通过断路器的故障监控 (类似熔断保险丝),向调用方返回一个符合预期的、可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用,从而避免了故障在分布式系统中的蔓延，乃至雪崩。</strong></p><blockquote><p>这一段既说明了 hystrix 的作用，也说出了熔断器的作用</p></blockquote><h4 id="hystrix存在的问题"><a href="#hystrix存在的问题" class="headerlink" title="hystrix存在的问题"></a>hystrix存在的问题</h4><p>2018 年前后Netflix公司宣布其<strong>核心组件Hystrix、Ribbon、Zuul、Eureka等进入维护状态，不再进行新特性开发，只修 BUG</strong>。<br />这直接影响了Spring Cloud项目的发展路线，Spring 官方不得不采取了应对措施，在 2019 年的在 SpringOne 2019 大会中，Spring Cloud宣布 Spring Cloud Netflix 项目进入维护模式，并<strong>在 2020 年移除相关的Netflix OSS组件</strong>。</p><p>如今Netflix OSS在Spring Cloud体系的时代已经落幕了。在本次的更新中以下组件被从Spring Cloud Netflix中移除了<br />Spring Cloud本次移除的Netflix组件<br /><strong>Spring Cloud官方尤其着重指出ribbon、hystrix 和 zuul从Spring Cloud 2020.0正式版发布后将不再被Spring Cloud支持</strong>。在目前<strong>最新的Spring Cloud 2020.0中仅仅剩下了Eureka。但是留给Eureka的时间也不多了</strong>。<br /><strong>Feign 虽然是Netflix公司开源的，但从 9.x 版本开始就移交给OpenFeign组织管理，不从属于Netflix OSS范畴</strong>。</p><blockquote><p>所以 hystrix 入个门就行了，可能会有些公司还在用，但已淘汰，毕竟 spring-cloud-alibaba 系列实在太香了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务限流 </tag>
            
            <tag> 服务熔断 </tag>
            
            <tag> hystrix </tag>
            
            <tag> 限流 </tag>
            
            <tag> 熔断 </tag>
            
            <tag> 滑动窗口算法 </tag>
            
            <tag> 滑动日志算法 </tag>
            
            <tag> 漏桶限流算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>005SpringCloud系列——OpenFeign服务接口调用（四）</title>
      <link href="/2022/11/07/02springcloud/005SpringCloud%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94OpenFeign%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2022/11/07/02springcloud/005SpringCloud%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94OpenFeign%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenFeign是什么？"><a href="#OpenFeign是什么？" class="headerlink" title="OpenFeign是什么？"></a>OpenFeign是什么？</h1><blockquote><p><a href="https://github.com/OpenFeign/feign">Feign</a> is a declarative web service client. It makes writing web service clients easier. To use Feign create an interface and annotate it. It has pluggable annotation support including Feign annotations and JAX-RS annotations. Feign also supports pluggable encoders and decoders. Spring Cloud adds support for Spring MVC annotations and for using the same HttpMessageConverters used by default in Spring Web. Spring Cloud integrates Eureka, Spring Cloud CircuitBreaker, as well as Spring Cloud LoadBalancer to provide a load-balanced http client when using Feign.</p></blockquote><p>feign是一个声明式的web服务客户端。它使得编写web服务客户端更加容易。要使用 feign 则需要创建一个接口并给接口添加上注解即可。<br />它具有可插入式的注解支持，包含feign注解和JAX-RS注解。feign也支持可插入的编码和解码。Spring Cloud增加了对Spring MVC注释的支持，并支持使用Spring Web中默认使用的HttpMessageConverters。当使用 Feign 时，Spring Cloud 整合了 Eureka，Spring Cloud CircuitBreaker(断路器)以及Spring Cloud LoadBalancer（负载均衡）以提供负载均衡的http client。</p><blockquote><p>说白了, openFeign就是个针对服务端映射(controller)的客户端工具, 主要目的是<strong>让 客户端 能够以类似 调用service的方式 调用到 服务端 的 controller</strong></p></blockquote><h2 id="Feign和OpenFeign的区别"><a href="#Feign和OpenFeign的区别" class="headerlink" title="Feign和OpenFeign的区别"></a>Feign和OpenFeign的区别</h2><table><thead><tr><th>Feign</th><th>openFiegn</th></tr></thead><tbody><tr><td>Feign是SpringCloud组件中一个轻量级RESTful的HTTP服务客户端，Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务</td><td>OpenFeign 是SpringCloud在Feign的基础上支持了SpringMVC的注解，如@RequestMapping等。OpenFeign 的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</td></tr></tbody></table><h1 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h1><blockquote><p>openFeign 也是针对客户端设计的, 所以代码一般卸载客户端上</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--一般基础通用配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">## 指定服务名称，在nacos中的名字</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line"><span class="comment">#        register-enabled: true</span></span><br><span class="line"><span class="comment">#        watch:</span></span><br><span class="line"><span class="comment">#          enabled: true</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="comment">## yml文件中存在特殊字符，必须用单引号包含，否则启动报错</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderFeignMain80</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(OrderFeignMain80.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.utils.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区分大小写</span></span><br><span class="line"><span class="comment">// 这里需要和服务提供方的 spring.application.name 的值相同</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;cloud-payment-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentFeignService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    CommonResult&lt;Payment&gt; <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;create&quot;)</span></span><br><span class="line">    CommonResult <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.service.PaymentFeignService;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.utils.CommonResult;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderFeignController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>CommonResult create(@RequestBody Payment payment);</code> openFeign默认的传参方式就是JSON传参（@RequestBody），因此定义接口的时候可以不用@RequestBody注解标注，不过为了规范，一般都填上。</p></blockquote><blockquote><p>注意：因为 <code>openFeign</code>默认使用<code>JSON</code>传参方式，如果需要使用表单传参方式则改为<code>@SpringQueryMap</code><br><code>CommonResult create(@SpringQueryMap Payment payment);</code></p></blockquote><h2 id="OpenFeign超时设置"><a href="#OpenFeign超时设置" class="headerlink" title="OpenFeign超时设置"></a>OpenFeign超时设置</h2><p>openFeign底层默认超时判定时间是 1秒 , 如果超出 1秒就会抛出异常</p><p>所以在有必要的情况下, 可以自行修改超时时间</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment">## default 设置的全局超时时间，指定服务名称可以设置单个服务的超时时间</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">basic</span></span><br></pre></td></tr></table></figure><p>但是如果需要调用涉及到多个openFeign接口的调用呢？</p><p>比如下图的情况：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070123530.png" alt="image.png"></p><p>很明显，<code>ServiceA </code>和 <code>ServiceB </code>能够通过，但 <code>ServiceC </code>不能够通过</p><p>此时我们可以单独给 <code>serviceC </code>设置超时时间：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment">## default 设置的全局超时时间，指定服务名称可以设置单个服务的超时时间</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">basic</span></span><br><span class="line">      <span class="attr">cloud-order-service:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">50000</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">50000</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">basic</span></span><br></pre></td></tr></table></figure><blockquote><p>单独设置的优先级大于 <code>default</code> </p></blockquote><h2 id="如何开启日志增强？"><a href="#如何开启日志增强？" class="headerlink" title="如何开启日志增强？"></a>如何开启日志增强？</h2><p><code>openFeign</code>虽然提供了日志增强功能，但是默认是不显示任何日志的，不过开发者在调试阶段可以自己配置日志的级别。<br /><code>openFeign</code>的日志级别如下：</p><ul><li><code>**NONE**</code>：默认的，不显示任何日志;</li><li><code>**BASIC**</code>：仅记录请求方法、<code>URL</code>、响应状态码及执行时间;</li><li><code>**HEADERS**</code>：除了<code>BASIC</code>中定义的信息之外，还有请求和响应的头信息;</li><li><code>**FULL**</code>：除了<code>HEADERS</code>中定义的信息之外，还有请求和响应的正文及元数据。</li></ul><p>配置起来也很简单，步骤如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenfeignConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：这里的<code>logger</code>是<code>feign</code>包里的。同时记住把 <code>application.yml</code>中的配置<code>loggerLevel: basic</code>注释掉</p></blockquote><p>接着在 <code>application.yml</code>文件中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.zhazha.springcloud.service:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p><code>FULL</code>显示出来的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2022-08-08 20:20:28.650 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] ---&gt; GET http://cloud-payment-service/payment/get/1 HTTP/1.1</span></span><br><span class="line">2022-08-08 20:20:28.651 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] ---&gt; END HTTP (0-byte body)</span></span><br><span class="line">2022-08-08 20:20:28.664 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] &lt;--- HTTP/1.1 200 (12ms)</span></span><br><span class="line">2022-08-08 20:20:28.664 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] connection: keep-alive</span></span><br><span class="line">2022-08-08 20:20:28.664 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] content-type: application/json</span></span><br><span class="line">2022-08-08 20:20:28.665 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] date: Mon, 08 Aug 2022 12:20:28 GMT</span></span><br><span class="line">2022-08-08 20:20:28.665 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] keep-alive: timeout=60</span></span><br><span class="line">2022-08-08 20:20:28.665 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] transfer-encoding: chunked</span></span><br><span class="line">2022-08-08 20:20:28.665 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] </span></span><br><span class="line">2022-08-08 20:20:28.665 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] &#123;&quot;code&quot;:200,&quot;message&quot;:&quot;查询成功 port: 8001&quot;,&quot;data&quot;:&#123;&quot;id&quot;:1,&quot;serial&quot;:&quot;zhazha01&quot;&#125;&#125;</span></span><br><span class="line">2022-08-08 20:20:28.665 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] &lt;--- END HTTP (84-byte body)</span></span><br></pre></td></tr></table></figure><h1 id="OpenFeign工作原理"><a href="#OpenFeign工作原理" class="headerlink" title="OpenFeign工作原理"></a>OpenFeign工作原理</h1><p>大致原理图：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070123276.png" alt="image.png"></p><p>分为初始化和拦截两个部分</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在分析代码前，添加上<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070123345.png" alt="image.png"><br /><code>basePackages</code>，当然不加也行</p><p>从<code>@EnableFeignClients</code>注解入手分析</p><p>看到<code>@Import</code>注解，第一时间应当想到<code>ImportBeanDefinitionRegistrar</code>接口</p><blockquote><p>还需要想到<code>ImportSelector</code></p></blockquote><p>同时就需要了解改接口的作用主要目的就是：利用<code>registerBeanDefinitions</code>函数的<code>AnnotationMetadata importingClassMetadata</code>参数获取<code>@EnableFeignClients(basePackages = &quot;com.zhazha.springcloud.service&quot;)</code>注解的属性，然后使用<code>BeanDefinitionRegistry registry</code>去注册 <code>Bean Definition</code></p><blockquote><p>在本例子中<code>AnnotationMetadata importingClassMetadata</code>参数解析的是注解<code>EnableFeignClients</code>，在其他组件中，比如服务的发现与注册中寻找的是<code>@EnableDiscoveryClient</code>注解</p></blockquote><blockquote><p><code>AnnotationMetadata importingClassMetadata</code>可以获得<code>com.zhazha.springcloud.OrderFeignMain80</code>启动类上的注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry,</span></span><br><span class="line"><span class="params">BeanNameGenerator importBeanNameGenerator)</span> &#123;</span><br><span class="line"></span><br><span class="line">registerBeanDefinitions(importingClassMetadata, registry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register bean definitions as necessary based on the given annotation metadata of</span></span><br><span class="line"><span class="comment"> * the importing &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125; class.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that &#123;<span class="doctag">@link</span> BeanDefinitionRegistryPostProcessor&#125; types may &lt;em&gt;not&lt;/em&gt; be</span></span><br><span class="line"><span class="comment"> * registered here, due to lifecycle constraints related to &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125;</span></span><br><span class="line"><span class="comment"> * class processing.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The default implementation is empty.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> importingClassMetadata annotation metadata of the importing class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry current bean definition registry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <br />在本案例中，OpenFeign使用<code>@Import</code>导入的是<code>FeignClientsRegistrar</code>类<br />从下面函数入手分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">registerDefaultConfiguration(metadata, registry);</span><br><span class="line">registerFeignClients(metadata, registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一段代码主要分析到的是<code>defaultConfiguration</code>属性，该属性用来自定义所有Feign客户端的配置，使用<code>@Configuration</code>进行配置。当然也可以为某一个Feign客户端进行配置。具体配置方法见<code>@FeignClient</code>的<code>configuration</code>属性。</p><blockquote><p>没用到不过也注册了一个Bean，但不分析（懒）</p></blockquote><p>核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerFeignClients</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">LinkedHashSet&lt;BeanDefinition&gt; candidateComponents = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">// 获得启动类上的注解EnableFeignClients</span></span><br><span class="line">Map&lt;String, Object&gt; attrs = metadata.getAnnotationAttributes(EnableFeignClients.class.getName());</span><br><span class="line">       <span class="comment">// 获取该注解的 clients 属性，看看是否有被@feignClient 注解标记的类</span></span><br><span class="line">       <span class="comment">// 我们项目中并未使用该注解的clients属性，所以获取为 clients.length 长度为 0</span></span><br><span class="line"><span class="keyword">final</span> Class&lt;?&gt;[] clients = attrs == <span class="literal">null</span> ? <span class="literal">null</span> : (Class&lt;?&gt;[]) attrs.get(<span class="string">&quot;clients&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (clients == <span class="literal">null</span> || clients.length == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">// 这段代码主要目的就是扫描 basePackages 注解的包路径，本案例中我主动添加了 com.zhazha.springcloud.service</span></span><br><span class="line">           <span class="comment">// 路径，所以会扫描该路径下的所有 FeignClient 注解标记的类</span></span><br><span class="line"><span class="type">ClassPathScanningCandidateComponentProvider</span> <span class="variable">scanner</span> <span class="operator">=</span> getScanner();</span><br><span class="line">scanner.setResourceLoader(<span class="built_in">this</span>.resourceLoader);</span><br><span class="line">scanner.addIncludeFilter(<span class="keyword">new</span> <span class="title class_">AnnotationTypeFilter</span>(FeignClient.class));</span><br><span class="line">           <span class="comment">// 源码在下面标记 ① 的地方</span></span><br><span class="line">Set&lt;String&gt; basePackages = getBasePackages(metadata);</span><br><span class="line"><span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">               <span class="comment">// 将扫描出来的类都添加到 Set 集合中</span></span><br><span class="line">               <span class="comment">// 在本案例中只能扫描到 PaymentFeignService 类</span></span><br><span class="line">               <span class="comment">// 只有他添加了 @FeignClient(value = &quot;cloud-payment-service&quot;) 注解</span></span><br><span class="line">candidateComponents.addAll(scanner.findCandidateComponents(basePackage));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; clazz : clients) &#123;</span><br><span class="line">candidateComponents.add(<span class="keyword">new</span> <span class="title class_">AnnotatedGenericBeanDefinition</span>(clazz));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (BeanDefinition candidateComponent : candidateComponents) &#123;</span><br><span class="line"><span class="keyword">if</span> (candidateComponent <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line"><span class="comment">// verify annotated class is an interface</span></span><br><span class="line"><span class="type">AnnotatedBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> (AnnotatedBeanDefinition) candidateComponent;</span><br><span class="line"><span class="type">AnnotationMetadata</span> <span class="variable">annotationMetadata</span> <span class="operator">=</span> beanDefinition.getMetadata();</span><br><span class="line">               <span class="comment">// @FeignClient 注解的类只能是接口</span></span><br><span class="line">Assert.isTrue(annotationMetadata.isInterface(), <span class="string">&quot;@FeignClient can only be specified on an interface&quot;</span>);</span><br><span class="line">               <span class="comment">// 拿到 FeignClient 注解的所有属性信息</span></span><br><span class="line">               <span class="comment">// 这里只能拿到value = &quot;cloud-payment-service&quot; 的值，其他都是默认的</span></span><br><span class="line">Map&lt;String, Object&gt; attributes = annotationMetadata</span><br><span class="line">.getAnnotationAttributes(FeignClient.class.getCanonicalName());</span><br><span class="line">               <span class="comment">// 此处 name = cloud-payment-service</span></span><br><span class="line">               <span class="comment">// 此处源码：看 ②</span></span><br><span class="line">               <span class="comment">// 可以明显看到优先级</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> getClientName(attributes);</span><br><span class="line">               <span class="comment">// 获取 FeignClient 注解configuration属性的值</span></span><br><span class="line">               <span class="comment">// 我们什么都没填，但还是注入了一个 bean</span></span><br><span class="line">registerClientConfiguration(registry, name, attributes.get(<span class="string">&quot;configuration&quot;</span>));</span><br><span class="line">               <span class="comment">// 核心代码 看 ③</span></span><br><span class="line">registerFeignClient(registry, annotationMetadata, attributes);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①<code>getBasePackages</code>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Set&lt;String&gt; <span class="title function_">getBasePackages</span><span class="params">(AnnotationMetadata importingClassMetadata)</span> &#123;</span><br><span class="line">Map&lt;String, Object&gt; attributes = importingClassMetadata</span><br><span class="line">.getAnnotationAttributes(EnableFeignClients.class.getCanonicalName());</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; basePackages = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String pkg : (String[]) attributes.get(<span class="string">&quot;value&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(pkg)) &#123;</span><br><span class="line">basePackages.add(pkg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String pkg : (String[]) attributes.get(<span class="string">&quot;basePackages&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(pkg)) &#123;</span><br><span class="line">basePackages.add(pkg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; clazz : (Class[]) attributes.get(<span class="string">&quot;basePackageClasses&quot;</span>)) &#123;</span><br><span class="line">basePackages.add(ClassUtils.getPackageName(clazz));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (basePackages.isEmpty()) &#123;</span><br><span class="line">basePackages.add(ClassUtils.getPackageName(importingClassMetadata.getClassName()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> basePackages;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② <code>getClientName</code>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">getClientName</span><span class="params">(Map&lt;String, Object&gt; client)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (client == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) client.get(<span class="string">&quot;contextId&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasText(value)) &#123;</span><br><span class="line">value = (String) client.get(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasText(value)) &#123;</span><br><span class="line">value = (String) client.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasText(value)) &#123;</span><br><span class="line">value = (String) client.get(<span class="string">&quot;serviceId&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(value)) &#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line"><span class="string">&quot;Either &#x27;name&#x27; or &#x27;value&#x27; must be provided in @&quot;</span> + FeignClient.class.getSimpleName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③<code>registerFeignClient</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个函数是注册类本体</span></span><br><span class="line"><span class="comment">// 第二个是 PaymentService 上的注解元信息，在registerFeignClient方法体中只做了 getClassName 这一项操作</span></span><br><span class="line"><span class="comment">// 注解 @FeignClient 的属性 key value 我们只配置了 value -&gt; cloud-payment-service</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">registerFeignClient</span><span class="params">(BeanDefinitionRegistry registry, AnnotationMetadata annotationMetadata,</span></span><br><span class="line"><span class="params">Map&lt;String, Object&gt; attributes)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 PaymentService 的类名 com.zhazha.springcloud.service.PaymentFeignService</span></span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> annotationMetadata.getClassName();</span><br><span class="line">        <span class="comment">// PaymentService 的类加载器</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ClassUtils.resolveClassName(className, <span class="literal">null</span>);</span><br><span class="line"><span class="type">ConfigurableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> registry <span class="keyword">instanceof</span> ConfigurableBeanFactory</span><br><span class="line">? (ConfigurableBeanFactory) registry : <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// contextId = cloud-payment-service</span></span><br><span class="line"><span class="type">String</span> <span class="variable">contextId</span> <span class="operator">=</span> getContextId(beanFactory, attributes);</span><br><span class="line">        <span class="comment">// name = cloud-payment-service</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> getName(attributes);</span><br><span class="line"><span class="type">FeignClientFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FeignClientFactoryBean</span>();</span><br><span class="line">factoryBean.setBeanFactory(beanFactory);</span><br><span class="line">factoryBean.setName(name);</span><br><span class="line">factoryBean.setContextId(contextId);</span><br><span class="line">factoryBean.setType(clazz);</span><br><span class="line">        <span class="comment">// 判断application.yml是否设置了 feign.client.refresh-enabled 配置项，我们这里没配置</span></span><br><span class="line">factoryBean.setRefreshableClient(isClientRefreshEnabled());</span><br><span class="line"><span class="type">BeanDefinitionBuilder</span> <span class="variable">definition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(clazz, () -&gt; &#123;</span><br><span class="line">factoryBean.setUrl(getUrl(beanFactory, attributes));</span><br><span class="line">factoryBean.setPath(getPath(beanFactory, attributes));</span><br><span class="line">factoryBean.setDecode404(Boolean.parseBoolean(String.valueOf(attributes.get(<span class="string">&quot;decode404&quot;</span>))));</span><br><span class="line"><span class="type">Object</span> <span class="variable">fallback</span> <span class="operator">=</span> attributes.get(<span class="string">&quot;fallback&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fallback != <span class="literal">null</span>) &#123;</span><br><span class="line">factoryBean.setFallback(fallback <span class="keyword">instanceof</span> Class ? (Class&lt;?&gt;) fallback</span><br><span class="line">: ClassUtils.resolveClassName(fallback.toString(), <span class="literal">null</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Object</span> <span class="variable">fallbackFactory</span> <span class="operator">=</span> attributes.get(<span class="string">&quot;fallbackFactory&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fallbackFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">factoryBean.setFallbackFactory(fallbackFactory <span class="keyword">instanceof</span> Class ? (Class&lt;?&gt;) fallbackFactory</span><br><span class="line">: ClassUtils.resolveClassName(fallbackFactory.toString(), <span class="literal">null</span>));</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 需要注意的 FeignClientFactoryBean 实现了 FactoryBean，所以如果需要定义一个对象时</span></span><br><span class="line">            <span class="comment">// 将会调用 FactoryBean 接口的 getObject 方法， 用于定义一个对象</span></span><br><span class="line">            <span class="comment">// 但这段代码并没有被立即调用</span></span><br><span class="line"><span class="keyword">return</span> factoryBean.getObject();</span><br><span class="line">&#125;);</span><br><span class="line">definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);</span><br><span class="line">definition.setLazyInit(<span class="literal">true</span>);</span><br><span class="line">validate(attributes);</span><br><span class="line"></span><br><span class="line"><span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> definition.getBeanDefinition();</span><br><span class="line">beanDefinition.setAttribute(FactoryBean.OBJECT_TYPE_ATTRIBUTE, className);</span><br><span class="line">        <span class="comment">// 注意看这一行，我们 feign 修饰的对象 PaymentService 并没有被注入，FactoryBean也没有调用 getObject</span></span><br><span class="line">beanDefinition.setAttribute(<span class="string">&quot;feignClientsRegistrarFactoryBean&quot;</span>, factoryBean);</span><br><span class="line"></span><br><span class="line"><span class="comment">// has a default, won&#x27;t be null</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">primary</span> <span class="operator">=</span> (Boolean) attributes.get(<span class="string">&quot;primary&quot;</span>);</span><br><span class="line"></span><br><span class="line">beanDefinition.setPrimary(primary);</span><br><span class="line"></span><br><span class="line">String[] qualifiers = getQualifiers(attributes);</span><br><span class="line"><span class="keyword">if</span> (ObjectUtils.isEmpty(qualifiers)) &#123;</span><br><span class="line">qualifiers = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; contextId + <span class="string">&quot;FeignClient&quot;</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 这里将 PaymentSercice 注入到 Spring 容器中</span></span><br><span class="line"><span class="type">BeanDefinitionHolder</span> <span class="variable">holder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(beanDefinition, className, qualifiers);</span><br><span class="line">BeanDefinitionReaderUtils.registerBeanDefinition(holder, registry);</span><br><span class="line">        <span class="comment">// 这里还是判断是否开启 feign.client.refresh-enabled </span></span><br><span class="line">        <span class="comment">// 这里我们没有配置，所以不走</span></span><br><span class="line">        <span class="comment">// 但实际上注入了 key = feign.Request.Options-cloud-payment-service 的 paymentService</span></span><br><span class="line">        <span class="comment">// 使用 refreshScope 创建Request.Options bean 定义</span></span><br><span class="line">registerOptionsBeanDefinition(registry, contextId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，注册完成，注意此时仅仅只是注册到 <code>DefaultListableBeanFactory</code>容器的 <code>beanDefinitionMap</code>中，并没有实例化！<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124495.png" alt="image.png"></p><blockquote><p>从这行代码判断出来的，并没有实例化它，实例化的话需要去拿到远程的实现对象</p></blockquote><p>而实例化的过程需要关注 Spring 异常熟悉的<code>org.springframework.context.support.AbstractApplicationContext#refresh</code>方法</p><p>我们来总结下，整个流程：</p><ol><li>使用<code>@Import</code>将<code>FeignClientsRegistrar</code>对象注入到Spring容器</li><li>使用<code>ClassPathScanningCandidateComponentProvider</code>扫描<code>FeignClient</code>注解的<code>BasePackages</code>属性所对应的所有对象，并将其存入<code>candidateComponents</code>容器中</li><li>遍历<code>candidateComponents</code>对象获取<code>FeignClient</code>注解的属性信息</li><li>创建<code>FeignClientFactoryBean</code>对象，并填充这些属性信息，该对象实现了<code>FactoryBean</code>为以后用于容器在初始化单例对象时调用该接口的<code>getObject</code>函数</li><li>创建<code>holder</code>对象，并以 key &#x3D; <code>com.zhazha.springcloud.service.PaymentFeignService</code>，value &#x3D; <code>PaymentFeignService</code>的 <code>beanDefinition</code>对象</li><li>这里虽然往容器中存入对象，但明摆着该<code>Bean</code>无法被使用，毕竟只是一个接口，需要特殊处理</li></ol><h2 id="实例化过程"><a href="#实例化过程" class="headerlink" title="实例化过程"></a>实例化过程</h2><p>从<code>OrderFeignController</code>开始入手接着去解析<code>controller</code>下面的<code>PaymentService</code>依赖</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124176.png" alt="image.png"></p><p>接着从 <code>BeanFactory</code>里面拿到<code>PaymentService</code>接口</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124388.png" alt="image.png"></p><p>最终他会回到上面我们分享过的源码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BeanDefinitionBuilder</span> <span class="variable">definition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(clazz, () -&gt; &#123;</span><br><span class="line">    factoryBean.setUrl(getUrl(beanFactory, attributes));</span><br><span class="line">    factoryBean.setPath(getPath(beanFactory, attributes));</span><br><span class="line">    factoryBean.setDecode404(Boolean.parseBoolean(String.valueOf(attributes.get(<span class="string">&quot;decode404&quot;</span>))));</span><br><span class="line">    <span class="type">Object</span> <span class="variable">fallback</span> <span class="operator">=</span> attributes.get(<span class="string">&quot;fallback&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (fallback != <span class="literal">null</span>) &#123;</span><br><span class="line">        factoryBean.setFallback(fallback <span class="keyword">instanceof</span> Class ? (Class&lt;?&gt;) fallback</span><br><span class="line">                                : ClassUtils.resolveClassName(fallback.toString(), <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">fallbackFactory</span> <span class="operator">=</span> attributes.get(<span class="string">&quot;fallbackFactory&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (fallbackFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">        factoryBean.setFallbackFactory(fallbackFactory <span class="keyword">instanceof</span> Class ? (Class&lt;?&gt;) fallbackFactory</span><br><span class="line">                                       : ClassUtils.resolveClassName(fallbackFactory.toString(), <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> factoryBean.getObject(); <span class="comment">// 会在这里创建一个对象</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接着就能看到核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> getTarget();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the target type of the Feign client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a &#123;<span class="doctag">@link</span> Feign&#125; client created with the specified data and the context</span></span><br><span class="line"><span class="comment"> * information</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">getTarget</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// FeignContext 在 org.springframework.cloud.openfeign.FeignAutoConfiguration#feignContext 中</span></span><br><span class="line">       <span class="comment">// 被注入到 Spring容器中</span></span><br><span class="line">       <span class="comment">// 对于 FeignContext 的说明：①</span></span><br><span class="line"><span class="type">FeignContext</span> <span class="variable">context</span> <span class="operator">=</span> beanFactory != <span class="literal">null</span> ? beanFactory.getBean(FeignContext.class)</span><br><span class="line">: applicationContext.getBean(FeignContext.class);</span><br><span class="line">Feign.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> feign(context);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasText(url)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (LOG.isInfoEnabled()) &#123;</span><br><span class="line">LOG.info(<span class="string">&quot;For &#x27;&quot;</span> + name + <span class="string">&quot;&#x27; URL not provided. Will try picking an instance via load-balancing.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!name.startsWith(<span class="string">&quot;http&quot;</span>)) &#123;</span><br><span class="line">url = <span class="string">&quot;http://&quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">url = name;</span><br><span class="line">&#125;</span><br><span class="line">url += cleanPath();</span><br><span class="line">           <span class="comment">// 这里将会创建一个代理对象 ②</span></span><br><span class="line"><span class="keyword">return</span> (T) loadBalance(builder, context, <span class="keyword">new</span> <span class="title class_">HardCodedTarget</span>&lt;&gt;(type, name, url));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(url) &amp;&amp; !url.startsWith(<span class="string">&quot;http&quot;</span>)) &#123;</span><br><span class="line">url = <span class="string">&quot;http://&quot;</span> + url;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="built_in">this</span>.url + cleanPath();</span><br><span class="line"><span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> getOptional(context, Client.class);</span><br><span class="line"><span class="keyword">if</span> (client != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (client <span class="keyword">instanceof</span> FeignBlockingLoadBalancerClient) &#123;</span><br><span class="line"><span class="comment">// not load balancing because we have a url,</span></span><br><span class="line"><span class="comment">// but Spring Cloud LoadBalancer is on the classpath, so unwrap</span></span><br><span class="line">client = ((FeignBlockingLoadBalancerClient) client).getDelegate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (client <span class="keyword">instanceof</span> RetryableFeignBlockingLoadBalancerClient) &#123;</span><br><span class="line"><span class="comment">// not load balancing because we have a url,</span></span><br><span class="line"><span class="comment">// but Spring Cloud LoadBalancer is on the classpath, so unwrap</span></span><br><span class="line">client = ((RetryableFeignBlockingLoadBalancerClient) client).getDelegate();</span><br><span class="line">&#125;</span><br><span class="line">builder.client(client);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyBuildCustomizers(context, builder);</span><br><span class="line"></span><br><span class="line"><span class="type">Targeter</span> <span class="variable">targeter</span> <span class="operator">=</span> get(context, Targeter.class);</span><br><span class="line"><span class="keyword">return</span> (T) targeter.target(<span class="built_in">this</span>, builder, context, <span class="keyword">new</span> <span class="title class_">HardCodedTarget</span>&lt;&gt;(type, name, url));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①<code>FeignContext</code>：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124287.png" alt="image.png"></p><p><code>FeignContext</code>继承了<code>NameContextFactory</code>抽象类</p><p>它的功能主要是为每一个<code>contextId</code>创建一个独立的<code>ApplicationContext</code><br />该对象在<code>FeignAutoConfiguration</code>配置类中将<code>FeignContext</code>注入到Spring容器中</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124564.png" alt="image.png"></p><p>② <code>feign.ReflectiveFeign#newInstance</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">newInstance</span><span class="params">(Target&lt;T&gt; target)</span> &#123;</span><br><span class="line">  Map&lt;String, MethodHandler&gt; nameToHandler = targetToHandlersByName.apply(target);</span><br><span class="line">  Map&lt;Method, MethodHandler&gt; methodToHandler = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;Method, MethodHandler&gt;();</span><br><span class="line">  List&lt;DefaultMethodHandler&gt; defaultMethodHandlers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;DefaultMethodHandler&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (Method method : target.type().getMethods()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Util.isDefault(method)) &#123;</span><br><span class="line">      <span class="type">DefaultMethodHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMethodHandler</span>(method);</span><br><span class="line">      defaultMethodHandlers.add(handler);</span><br><span class="line">      methodToHandler.put(method, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      methodToHandler.put(method, nameToHandler.get(Feign.configKey(target.type(), method)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> factory.create(target, methodToHandler);</span><br><span class="line">  <span class="type">T</span> <span class="variable">proxy</span> <span class="operator">=</span> (T) Proxy.newProxyInstance(target.type().getClassLoader(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123;target.type()&#125;, handler);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (DefaultMethodHandler defaultMethodHandler : defaultMethodHandlers) &#123;</span><br><span class="line">    defaultMethodHandler.bindTo(proxy);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此实例化结束</p><h2 id="OpenFeign负载均衡源码分析"><a href="#OpenFeign负载均衡源码分析" class="headerlink" title="OpenFeign负载均衡源码分析"></a>OpenFeign负载均衡源码分析</h2><p>前面的创建和实例化都结束了，现在是使用过程</p><p><code>feign.SynchronousMethodHandler#invoke</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object[] argv)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">  <span class="type">RequestTemplate</span> <span class="variable">template</span> <span class="operator">=</span> buildTemplateFromArgs.create(argv);</span><br><span class="line">  <span class="type">Options</span> <span class="variable">options</span> <span class="operator">=</span> findOptions(argv);</span><br><span class="line">  <span class="type">Retryer</span> <span class="variable">retryer</span> <span class="operator">=</span> <span class="built_in">this</span>.retryer.clone();</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 核心代码 ①</span></span><br><span class="line">      <span class="keyword">return</span> executeAndDecode(template, options);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RetryableException e) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        retryer.continueOrPropagate(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RetryableException th) &#123;</span><br><span class="line">        <span class="type">Throwable</span> <span class="variable">cause</span> <span class="operator">=</span> th.getCause();</span><br><span class="line">        <span class="keyword">if</span> (propagationPolicy == UNWRAP &amp;&amp; cause != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> cause;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> th;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">        logger.logRetry(metadata.configKey(), logLevel);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着会去这个函数：<code>feign.SynchronousMethodHandler#executeAndDecode</code></p><p>核心代码是：<code>response = client.execute(request, options);</code></p><p>接着进入这里：<code>org.springframework.cloud.openfeign.loadbalancer.FeignBlockingLoadBalancerClient#execute</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Response <span class="title function_">execute</span><span class="params">(Request request, Request.Options options)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">URI</span> <span class="variable">originalUri</span> <span class="operator">=</span> URI.create(request.url());</span><br><span class="line"><span class="type">String</span> <span class="variable">serviceId</span> <span class="operator">=</span> originalUri.getHost();</span><br><span class="line">Assert.state(serviceId != <span class="literal">null</span>, <span class="string">&quot;Request URI does not contain a valid hostname: &quot;</span> + originalUri);</span><br><span class="line"><span class="type">String</span> <span class="variable">hint</span> <span class="operator">=</span> getHint(serviceId);</span><br><span class="line">DefaultRequest&lt;RequestDataContext&gt; lbRequest = <span class="keyword">new</span> <span class="title class_">DefaultRequest</span>&lt;&gt;(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">RequestDataContext</span>(buildRequestData(request), hint));</span><br><span class="line">Set&lt;LoadBalancerLifecycle&gt; supportedLifecycleProcessors = LoadBalancerLifecycleValidator</span><br><span class="line">.getSupportedLifecycleProcessors(</span><br><span class="line">loadBalancerClientFactory.getInstances(serviceId, LoadBalancerLifecycle.class),</span><br><span class="line">RequestDataContext.class, ResponseData.class, ServiceInstance.class);</span><br><span class="line">supportedLifecycleProcessors.forEach(lifecycle -&gt; lifecycle.onStart(lbRequest));</span><br><span class="line">       <span class="comment">// 核心代码</span></span><br><span class="line"><span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> loadBalancerClient.choose(serviceId, lbRequest);</span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>进入服务选择函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; ServiceInstance <span class="title function_">choose</span><span class="params">(String serviceId, Request&lt;T&gt; request)</span> &#123;</span><br><span class="line">       <span class="comment">// 获取 loadbalancer策略 ①</span></span><br><span class="line">ReactiveLoadBalancer&lt;ServiceInstance&gt; loadBalancer = loadBalancerClientFactory.getInstance(serviceId);</span><br><span class="line"><span class="keyword">if</span> (loadBalancer == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">// 核心代码 ②</span></span><br><span class="line">Response&lt;ServiceInstance&gt; loadBalancerResponse = Mono.from(loadBalancer.choose(request)).block();</span><br><span class="line"><span class="keyword">if</span> (loadBalancerResponse == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> loadBalancerResponse.getServer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124233.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124671.png" alt="image.png"></p><p>最终发现负载均衡策略是<code>RoundRobinLoadBalancer</code>轮询</p><p>②<code>org.springframework.cloud.loadbalancer.core.RoundRobinLoadBalancer#choose</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Mono&lt;Response&lt;ServiceInstance&gt;&gt; <span class="title function_">choose</span><span class="params">(Request request)</span> &#123;</span><br><span class="line"><span class="type">ServiceInstanceListSupplier</span> <span class="variable">supplier</span> <span class="operator">=</span> serviceInstanceListSupplierProvider</span><br><span class="line">.getIfAvailable(NoopServiceInstanceListSupplier::<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">return</span> supplier.get(request).next()</span><br><span class="line">.map(serviceInstances -&gt; processInstanceResponse(supplier, serviceInstances));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>熟悉的接口：<code>org.springframework.cloud.loadbalancer.core.ReactorLoadBalancer</code><br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124706.png" alt="image.png"></p><p>回到<code>org.springframework.cloud.openfeign.loadbalancer.FeignBlockingLoadBalancerClient#execute</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Response <span class="title function_">execute</span><span class="params">(Request request, Request.Options options)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">URI</span> <span class="variable">originalUri</span> <span class="operator">=</span> URI.create(request.url());</span><br><span class="line"><span class="type">String</span> <span class="variable">serviceId</span> <span class="operator">=</span> originalUri.getHost();</span><br><span class="line"><span class="type">String</span> <span class="variable">hint</span> <span class="operator">=</span> getHint(serviceId);</span><br><span class="line">DefaultRequest&lt;RequestDataContext&gt; lbRequest = <span class="keyword">new</span> <span class="title class_">DefaultRequest</span>&lt;&gt;(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">RequestDataContext</span>(buildRequestData(request), hint));</span><br><span class="line">Set&lt;LoadBalancerLifecycle&gt; supportedLifecycleProcessors = LoadBalancerLifecycleValidator</span><br><span class="line">.getSupportedLifecycleProcessors(</span><br><span class="line">loadBalancerClientFactory.getInstances(serviceId, LoadBalancerLifecycle.class),</span><br><span class="line">RequestDataContext.class, ResponseData.class, ServiceInstance.class);</span><br><span class="line">supportedLifecycleProcessors.forEach(lifecycle -&gt; lifecycle.onStart(lbRequest));</span><br><span class="line">       <span class="comment">// 负载均衡，从多个服务提供者列表中选取一个</span></span><br><span class="line"><span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> loadBalancerClient.choose(serviceId, lbRequest);</span><br><span class="line">org.springframework.cloud.client.loadbalancer.Response&lt;ServiceInstance&gt; lbResponse = <span class="keyword">new</span> <span class="title class_">DefaultResponse</span>(</span><br><span class="line">instance);</span><br><span class="line">       <span class="comment">// 有默认的负载均衡策略，所以该分支不走</span></span><br><span class="line"><span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">// 计算出目标 ip 地址 ①</span></span><br><span class="line"><span class="type">String</span> <span class="variable">reconstructedUrl</span> <span class="operator">=</span> loadBalancerClient.reconstructURI(instance, originalUri).toString();</span><br><span class="line">       <span class="comment">// 创建请求</span></span><br><span class="line"><span class="type">Request</span> <span class="variable">newRequest</span> <span class="operator">=</span> buildRequest(request, reconstructedUrl);</span><br><span class="line"><span class="type">LoadBalancerProperties</span> <span class="variable">loadBalancerProperties</span> <span class="operator">=</span> loadBalancerClientFactory.getProperties(serviceId);</span><br><span class="line">       <span class="comment">// 最后玩这里走，进行请求处理</span></span><br><span class="line"><span class="keyword">return</span> executeWithLoadBalancerLifecycleProcessing(delegate, options, newRequest, lbRequest, lbResponse,</span><br><span class="line">supportedLifecycleProcessors, loadBalancerProperties.isUseRawStatusCodeInResponseData());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是 ip 从哪里获得？<br />从负载均衡这行<code>ServiceInstance instance = loadBalancerClient.choose(serviceId, lbRequest);</code>获取了目标服务的IP地址</p><p>接着在<br /><code>String reconstructedUrl = loadBalancerClient.reconstructURI(instance, originalUri).toString();</code></p><p>①<code>reconstructURI</code>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> URI <span class="title function_">doReconstructURI</span><span class="params">(ServiceInstance serviceInstance, URI original)</span> &#123;</span><br><span class="line">       <span class="comment">// host = 192.168.19.1 这是我们提供服务的服务器 ip 之一</span></span><br><span class="line"><span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> serviceInstance.getHost();</span><br><span class="line">       <span class="comment">// scheme = http</span></span><br><span class="line"><span class="type">String</span> <span class="variable">scheme</span> <span class="operator">=</span> Optional.ofNullable(serviceInstance.getScheme())</span><br><span class="line">.orElse(computeScheme(original, serviceInstance));</span><br><span class="line">       <span class="comment">// port = 8002</span></span><br><span class="line"><span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> computePort(serviceInstance.getPort(), scheme);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Objects.equals(host, original.getHost()) &amp;&amp; port == original.getPort()</span><br><span class="line">&amp;&amp; Objects.equals(scheme, original.getScheme())) &#123;</span><br><span class="line"><span class="keyword">return</span> original;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">// false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">encoded</span> <span class="operator">=</span> containsEncodedParts(original);</span><br><span class="line">       <span class="comment">// 组合完毕：http://192.168.19.1:8002/payment/get/1</span></span><br><span class="line"><span class="keyword">return</span> UriComponentsBuilder.fromUri(original).scheme(scheme).host(host).port(port).build(encoded).toUri();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终在这里处理请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Response <span class="title function_">executeWithLoadBalancerLifecycleProcessing</span><span class="params">(Client feignClient, Request.Options options,</span></span><br><span class="line"><span class="params">Request feignRequest, org.springframework.cloud.client.loadbalancer.Request lbRequest,</span></span><br><span class="line"><span class="params">org.springframework.cloud.client.loadbalancer.Response&lt;ServiceInstance&gt; lbResponse,</span></span><br><span class="line"><span class="params">Set&lt;LoadBalancerLifecycle&gt; supportedLifecycleProcessors, <span class="type">boolean</span> loadBalanced, <span class="type">boolean</span> useRawStatusCodes)</span></span><br><span class="line"><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">supportedLifecycleProcessors.forEach(lifecycle -&gt; lifecycle.onStartRequest(lbRequest, lbResponse));</span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>至此，大体上的源码分析完毕</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务发现 </tag>
            
            <tag> openFeign </tag>
            
            <tag> feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>004SpringCloud系列——负载均衡（三）</title>
      <link href="/2022/11/07/02springcloud/004SpringCloud%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2022/11/07/02springcloud/004SpringCloud%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是负载均衡？"><a href="#什么是负载均衡？" class="headerlink" title="什么是负载均衡？"></a>什么是负载均衡？</h1><p><strong>将工作负载分布到多个服务器来提高网站、应用、数据库或其他服务的性能和可靠性</strong></p><blockquote><p><strong>将处理分发给多个服务</strong></p></blockquote><br /><h1 id="客户端负载均衡和服务端负载均衡"><a href="#客户端负载均衡和服务端负载均衡" class="headerlink" title="客户端负载均衡和服务端负载均衡"></a>客户端负载均衡和服务端负载均衡</h1><p>常见的负载均衡方式有两种：</p><ul><li>服务端负载均衡</li><li>客户端负载均衡</li></ul><h2 id="服务端负载均衡"><a href="#服务端负载均衡" class="headerlink" title="服务端负载均衡"></a>服务端负载均衡</h2><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119910.png" alt="image.png"></p><p>所有客户端的请求都发送给一个组件，该组件存放着所有服务端清单，客户端的请求都会被改组件按照一定的策略转发给它所熟知的服务端</p><h2 id="客户端负载均衡"><a href="#客户端负载均衡" class="headerlink" title="客户端负载均衡"></a>客户端负载均衡</h2><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119278.png" alt="image.png"></p><p>客户端从注册中心获取服务列表清单，客户端在需要发送请求时拦截，接着按照一定的策略选取一个服务端，将请求发送给它</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><table><thead><tr><th>不同点</th><th>服务端负载均衡</th><th>客户端负载均衡</th></tr></thead><tbody><tr><td>是否需要建立负载均衡服务器</td><td>需要在客户端和服务端之间建立一个独立的负载均衡服务器。</td><td>将负载均衡的逻辑以代码的形式封装到客户端上，因此不需要单独建立负载均衡服务器。</td></tr><tr><td>是否需要服务注册中心</td><td>不需要服务注册中心。</td><td>需要服务注册中心。  在客户端负载均衡中，所有的客户端和服务端都需要将其提供的服务注册到服务注册中心上。</td></tr><tr><td>可用服务清单存储的位置</td><td>可用服务清单存储在位于客户端与服务器之间的负载均衡服务器上。</td><td>所有的客户端都维护了一份可用服务清单，这些清单都是从服务注册中心获取的。</td></tr><tr><td>负载均衡的时机</td><td>先将请求发送到负载均衡服务器，然后由负载均衡服务器通过负载均衡算法，在多个服务端之间选择一个进行访问；即在服务器端再进行负载均衡算法分配。  简单点说就是，先发送请求，再进行负载均衡。</td><td>在发送请求前，由位于客户端的服务负载均衡器（例如 Ribbon）通过负载均衡算法选择一个服务器，然后进行访问。  简单点说就是，先进行负载均衡，再发送请求。</td></tr><tr><td>客户端是否了解服务提供方信息</td><td>由于负载均衡是在客户端发送请求后进行的，因此客户端并不知道到底是哪个服务端提供的服务。</td><td>负载均衡是在客户端发送请求前进行的，因此客户端清楚的知道是哪个服务端提供的服务。</td></tr></tbody></table><blockquote><p>记住，客户端负载均衡和服务端负载均衡不都是代替关系，也可以是配合关系。从上图所示，我们知道客户端负载均衡有个前提：需要客户端（消费者）持有服务端（生产者）的列表，是对服务端的负载均衡，而不是客户端，所以客户端也可能卡顿，所以也需要nginx负载均衡。</p></blockquote><h1 id="负载均衡开始前"><a href="#负载均衡开始前" class="headerlink" title="负载均衡开始前"></a>负载均衡开始前</h1><p>创建新的项目<code>cloud-provider-payment8002</code>复制 <code>cloud-provider-payment8001</code>的源码和配置文件</p><p>修改：</p><p><code>application.yml</code>: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>             <span class="comment"># mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.zhazha.springcloud.entities</span>    <span class="comment"># 所有Entity别名类所在包</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 表示是否将自己注册进EurekaServer，默认为 true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否从EurekaServer抓取已有的注册信息，默认为 true 。单节点无所谓，</span></span><br><span class="line">    <span class="comment"># 集群必须设置为true才能配合 ribbon 使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># EurekaServer的地址</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure><p>这里我们仅需要修改端口 8001 -》 8002 其他配置不需要修改</p><p>接着先启动 7001 和 7002 而后启动 8001  8002 项目 最后启动 80 端口项目</p><p>打开网页：<a href="http://eureka7001.com:7001/">http://eureka7001.com:7001/</a></p><p>就能看到下列情况：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120312.png" alt="image.png"></p><p>出现两个服务的提供者</p><blockquote><p>有没有觉得这名字太长了？<br>修改下吧！<br>给 8001 项目的 <code>application.yml</code>添加<code>eureka.instance.instance-id=payment8001</code><br>为了更好的显示出 ip 还可以添加：<code>eureka.instance.prefer-ip-address=true</code><br>给8002项目也改上<code>eureka.instance.instance-id=payment8002</code> <code>eureka.instance.prefer-ip-address=true</code><br>重启项目就可以看到：<br><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120705.png" alt="image.png"></p></blockquote><p>访问：<a href="http://localhost/order/payment/get/1">http://localhost/order/payment/get/1</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120994.png" alt="image.png"></p><p>不管怎么刷新都是 8001 没有达到负载均衡的地步</p><p>为什么？</p><p>根源在 order80 项目 <br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120332.png" alt="image.png"><br />这里已经定死了只能访问 <code>8001</code></p><p>我们可以这么搞：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"><span class="comment">//定义服务端URL</span></span><br><span class="line"><span class="comment">//public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用微服务的名字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端通过RestTemplate调用服务端</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;payment/create&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">create</span><span class="params">(Payment payment)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改<code>public static final String PAYMENT_URL = &quot;http://CLOUD-PAYMENT-SERVICE&quot;;</code>这段</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加<code>@LoadBalanced</code>注解</p></blockquote><p>重启项目</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120220.png" alt="image.png"></p><p>此时测试发现是<code>轮询策略</code>，负载均衡成功~~~</p><p>这样修改，虽然实现了负载均衡，但却需要 <code>CLOUD-PAYMENT-SERVICE</code>微服务名字，将微服务彻底写死了</p><p>所以需要改造</p><h1 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h1><blockquote><p>基本已经被<code>LoadBalancer</code>代替，但理论大于实际，所以理论部分还是得过过</p></blockquote><h2 id="Ribbon是什么？"><a href="#Ribbon是什么？" class="headerlink" title="Ribbon是什么？"></a>Ribbon是什么？</h2><p>Netflix Ribbon 是 Netflix 公司发布的开源组件，其主要功能是<strong>提供客户端的负载均衡算法和服务调用</strong>。</p><blockquote><p>记住：这是<strong>客户端</strong>负载均衡算法</p></blockquote><h2 id="Ribbon有什么用？"><a href="#Ribbon有什么用？" class="headerlink" title="Ribbon有什么用？"></a>Ribbon有什么用？</h2><p>通过它，我们可以<strong>将面向服务的 REST 模板（RestTemplate）请求转换为客户端负载均衡的服务调用</strong>。</p><blockquote><p>说白了，就是在客户端拿到几个服务的列表，按照一定的策略选取一个服务，将请求转发给该服务。就这么简单<br>负载均衡的核心在于不把所有的请求都转发给一个服务，而是按照一定的策略将请求分发出去</p></blockquote><h2 id="Ribbon工作原理"><a href="#Ribbon工作原理" class="headerlink" title="Ribbon工作原理"></a>Ribbon工作原理</h2><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120784.png" alt="image.png"></p><ul><li>第一步：Ribbon 拦截所有标注@loadBalance注解的 RestTemplate。RestTemplate 是用来发送 HTTP 请求的。</li><li>第二步：将 Ribbon 默认的拦截器 LoadBalancerInterceptor 添加到 RestTemplate 的执行逻辑中，当 RestTemplate 每次发送 HTTP 请求时，都会被 Ribbon 拦截。</li><li>第三步：拦截后，Ribbon 会创建一个 ILoadBalancer 实例。</li><li>第四步：ILoadBalancer 实例会使用 RibbonClientConfiguration 完成自动配置。就会配置好 IRule，IPing，ServerList。</li><li>第五步：<strong>Ribbon 会从服务列表中选择一个服务，将请求转发给这个服务</strong>。</li></ul><blockquote><p>拦截 + 配置 + 选取 + 转发</p></blockquote><p>同时这张图片我们可以再次使用<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120348.png" alt="image.png"></p><p>从这里可以我们可以知道<br />Ribbon 会先从 Eureka Server（服务注册中心）去获取服务端列表，然后通过负载均衡策略将请求分摊给多个服务端，从而达到负载均衡的目的</p><p>同时前面说的 <code>IRule</code> 接口是 Ribbon 提供的负载均衡策略</p><p>它有 7 中默认的实现类，每个类都是一种负载均衡策略</p><table><thead><tr><th>序号</th><th>实现类</th><th>负载均衡策略</th></tr></thead><tbody><tr><td>1</td><td>RoundRobinRule</td><td>按照<strong>线性轮询</strong>策略，即按照一定的顺序依次选取服务实例</td></tr><tr><td>2</td><td>RandomRule</td><td><strong>随机</strong>选取一个服务实例</td></tr><tr><td>3</td><td>RetryRule</td><td>按照 RoundRobinRule（<strong>轮询</strong>）的策略来获取服务，如果获取的服务实例为 null 或已经失效，则在指定的时间之内<strong>不断地进行重试</strong>（重试时获取服务的策略还是 RoundRobinRule 中定义的策略），<strong>如果超过指定时间依然没获取到服务实例则返回 null</strong> 。</td></tr><tr><td>4</td><td>WeightedResponseTimeRule</td><td>WeightedResponseTimeRule 是 RoundRobinRule 的一个子类，它对 RoundRobinRule 的功能进行了扩展。  <strong>根据平均响应时间，来计算所有服务实例的权重，响应时间越短的服务实例权重越高，被选中的概率越大</strong>。刚启动时，如果统计信息不足，则使用线性轮询策略，等信息足够时，再切换到 WeightedResponseTimeRule。</td></tr><tr><td>5</td><td>BestAvailableRule</td><td>继承自 ClientConfigEnabledRoundRobinRule。<strong>先过滤点故障或失效的服务实例，然后再选择并发量最小的服务实例</strong>。</td></tr><tr><td>6</td><td>AvailabilityFilteringRule</td><td><strong>先过滤掉故障或失效的服务实例，然后再选择并发量较小的服务实例</strong>。</td></tr><tr><td>7</td><td>ZoneAvoidanceRule</td><td>默认的负载均衡策略，<strong>综合判断服务所在区域（zone）的性能和服务（server）的可用性，来选择服务实例</strong>。<strong>在没有区域的环境下，该策略与轮询（RandomRule）策略类似</strong>。</td></tr></tbody></table><h2 id="Ribbon怎么玩？-看看就好-不需要自己实现"><a href="#Ribbon怎么玩？-看看就好-不需要自己实现" class="headerlink" title="Ribbon怎么玩？(看看就好, 不需要自己实现)"></a>Ribbon怎么玩？(看看就好, 不需要自己实现)</h2><blockquote><p>注意，现在业界<code>Eureka</code>基本很少使用了，所以本篇讲的 <code>Ribbon（扩展版）</code>现阶段只有 <code>Nacos</code>在使用（而且新版本nacos也放弃使用Ribbon）<br>本篇也就稍微讲讲基于 zookeeper 做服务的注册和发现中心 的方式吧, 而不是 eureka</p></blockquote><p>首先, 第一步就是降级</p><p>将 springboot 降级, 修改 parent 项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再创建一个项目<code>cloud-provider-payment8001</code> 和 <code>8002</code></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120715.png" alt="image.png"></p><p>提供方的 pom</p><blockquote><p>这里只提供 8002 的配置和源码, 8001 基本相同, 只需要改下 server.port 端口就行</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端,这里不再使用Eureka进行服务注册，所以这里导入的是Zookeeper的相关依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 先排除自带的zookeeper --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加zookeeper3.8.0版本，注意这里要和 zookeeper 应用启动的版本一致 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">localhost:2181</span></span><br></pre></td></tr></table></figure><p>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8002</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(PaymentMain8002.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;springcloud: &quot;</span> + serverPort + <span class="string">&quot;\t\t&quot;</span> + UUID.randomUUID();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是修改 <code>cloud-consumer-order80</code></p><p>pom唯一的区别:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;!--</span> <span class="string">先排除自带的zookeeper</span> <span class="string">--&gt;</span></span><br><span class="line">    <span class="string">&lt;exclusions&gt;</span></span><br><span class="line">        <span class="string">&lt;exclusion&gt;</span></span><br><span class="line">            <span class="string">&lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span></span><br><span class="line">            <span class="string">&lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="string">&lt;/exclusion&gt;</span></span><br><span class="line">        <span class="string">&lt;!--</span> <span class="string">排除和不排除都一样,</span> <span class="string">低版本的</span> <span class="string">springcloud</span> <span class="string">底层默认就使用</span> <span class="string">ribbon</span> <span class="string">--&gt;</span></span><br><span class="line">        <span class="string">&lt;exclusion&gt;</span></span><br><span class="line">            <span class="string">&lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">        <span class="string">&lt;/exclusion&gt;</span></span><br><span class="line">    <span class="string">&lt;/exclusions&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderConsulController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INVOKE_URL</span> <span class="operator">=</span> <span class="string">&quot;http://cloud-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/&quot;</span>, String.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者调用支付服务(consule)---&gt;result:&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常简单</p><p>唯一需要注意的地方是别忘了<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120564.png" alt="image.png"></p><p>然后就有 ribbon 负载均衡了</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120311.png" alt="image.png"></p><p>可以看的出来这是轮询策略</p><h2 id="ribbon切换策略模式"><a href="#ribbon切换策略模式" class="headerlink" title="ribbon切换策略模式"></a>ribbon切换策略模式</h2><p>唯一需要注意的一点：</p><blockquote><p>注意：The CustomConfiguration clas must be a @Configuration class, but take care that it is not in a @ComponentScan for the main application context. Otherwise, it is shared by all the @RibbonClients. If you use @ComponentScan (or @SpringBootApplication), you need to take steps to avoid it being included (for instance, you can put it in a separate, non-overlapping package or specify the packages to scan explicitly in the @ComponentScan).</p></blockquote><p>大意是说，<code>ribbon</code>自定义的 配置必须放在 <code>@SpringBootApplication</code>注解或者说<code>@ComponentScan</code>注解<strong>能扫描到的包之外</strong>，否则你自定义的配置将被所有<code>@RibbonClients</code>注解共享</p><blockquote><p>由于 ribbon 是客户端负载均衡落地方式的一种, 所以代码的改造主要是在 <code>order80(客户端)</code>  项目上进行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.rule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.RandomRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfRule</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">myRule</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>记住, 策略必须放在 springboot 不能扫描到的包</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RibbonClient(value = &quot;cloud-provider-payment&quot;, configuration = &#123;MySelfRule.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span></span><br></pre></td></tr></table></figure><blockquote><p><code>cloud-provider-payment</code> 就是 <code>8001</code> 和 <code>8002</code> 的  <code>spring.application.name</code>, 主要的目的就是限定 <code>MySelfRule</code>负载均衡策略只针对 <code>cloud-provider-payment</code> 的服务提供方</p></blockquote><h3 id="还有哪些负载均衡策略"><a href="#还有哪些负载均衡策略" class="headerlink" title="还有哪些负载均衡策略?"></a>还有哪些负载均衡策略?</h3><table><thead><tr><th>策略名称</th><th>策略对应的类名</th><th>实现原理</th></tr></thead><tbody><tr><td>轮询策略（默认）</td><td>RoundRobinRule</td><td>轮询策略表示每次都顺序取下一个 provider，比如一共有 5 个provider，第 1 次取第 1 个，第 2次取第 2 个，第 3 次取第 3 个，以此类推</td></tr><tr><td>权重轮询策略</td><td>WeightedResponseTimeRule</td><td>1.根据每个 provider 的响应时间分配一个权重，响应时间越长，权重越小，被选中的可能性越低。2.原理：一开始为轮询策略，并开启一个计时器，每 30 秒收集一次每个 provider 的平均响应时间，当信息足够时，给每个 provider附上一个权重，并按权重随机选择provider，高权越重的 provider会被高概率选中。</td></tr><tr><td>随机策略</td><td>RandomRule</td><td>从 provider 列表中随机选择一个provider</td></tr><tr><td>最少并发数策略</td><td>BestAvailableRule</td><td>选择正在请求中的并发数最小的 provider，除非这个provider 在熔断中。</td></tr><tr><td>在“选定的负载均衡策略”基础上进行重试机制</td><td>RetryRule</td><td>1.“选定的负载均衡策略”这个策略是轮询策略RoundRobinRule2.该重试策略先设定一个阈值时间段，如果在这个阈值时间段内当选择 provider 不成功，则一直尝试采用“选定的负载均衡策略：轮询策略”最后选择一个可用的provider</td></tr><tr><td>可用性敏感策略</td><td>AvailabilityFilteringRule</td><td>过滤性能差的 provider,有 2种：第一种：过滤掉在 eureka 中处于一直连接失败 provider 第二种：过滤掉高并发的 provider</td></tr><tr><td>区域敏感性策略</td><td>ZoneAvoidanceRule</td><td>1.以一个区域为单位考察可用性，对于不可用的区域整个丢弃，从剩下区域中选可用的provider2.如果这个 ip 区域内有一个或多个实例不可达或响应变慢，都会降低该 ip 区域内其他 ip 被选中的权重。</td></tr></tbody></table><blockquote><p>实际上还有一部分用于 做注册中心专属的负载均衡策略. 比如 zookeepper 的 <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070121861.png" alt="image.png"><br>比如 旧版本的 nacos 也有属于自己的 ribbon 负载均衡策略</p></blockquote><h1 id="LoadBalancer负载均衡"><a href="#LoadBalancer负载均衡" class="headerlink" title="LoadBalancer负载均衡"></a>LoadBalancer负载均衡</h1><h2 id="需要知道什么？"><a href="#需要知道什么？" class="headerlink" title="需要知道什么？"></a>需要知道什么？</h2><p>新版本SpringCloud默认使用<code>LoadBalancer</code>的负载均衡，且是默认使用的</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070121044.png" alt="image.png"></p><p>启动这几个项目，然后访问：<a href="http://localhost/order/payment/get/1">http://localhost/order/payment/get/1</a><br />就会看到<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070121547.png" alt="image.png"></p><p>上面的端口不断在 8001 和 8002 之间来回 切换</p><p>可以发现其默认使用的也是 <strong>轮询</strong></p><p>而他本身也就提供了两种负载均衡模式：<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070121752.png" alt="image.png"></p><p>默认是<code>RoundRobinLoadBalancer</code>轮询</p><blockquote><p>如果引入 nacos，还是多个 <code>NacosLoadBalancer</code>方案</p></blockquote><h2 id="源码大体思路"><a href="#源码大体思路" class="headerlink" title="源码大体思路"></a>源码大体思路</h2><blockquote><p>可以使用 idea 的覆盖运行方式先将 <code>order80</code>项目运行起来，然后访问下网址：<a href="http://localhost/order/payment/get/1">http://localhost/order/payment/get/1</a> 最后在关闭微服务。<br>这样可以借助<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070121281.png" alt="image.png"><br>可以更加方便查看源码</p></blockquote><ol><li>使用<code>LoadBalancerInterceptorConfig</code> 配置<code>LoadBalancerInterceptor</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> LoadBalancerInterceptor <span class="title function_">loadBalancerInterceptor</span><span class="params">(LoadBalancerClient loadBalancerClient,</span></span><br><span class="line"><span class="params">                                                       LoadBalancerRequestFactory requestFactory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoadBalancerInterceptor</span>(loadBalancerClient, requestFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>ClientHttpRequestInterceptor</code>实现的<code>LoadBalancerInterceptor</code>拦截器拦截下请求</li><li><code>LoadBalancerInterceptor</code>接口会拦截客户端 http 请求</li><li><code>LoadBalancerInterceptor</code>内的拦截器源码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ClientHttpResponse <span class="title function_">intercept</span><span class="params">(<span class="keyword">final</span> HttpRequest request, <span class="keyword">final</span> <span class="type">byte</span>[] body,</span></span><br><span class="line"><span class="params">                                    <span class="keyword">final</span> ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">URI</span> <span class="variable">originalUri</span> <span class="operator">=</span> request.getURI();</span><br><span class="line">    <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> originalUri.getHost();</span><br><span class="line">    Assert.state(serviceName != <span class="literal">null</span>, <span class="string">&quot;Request URI does not contain a valid hostname: &quot;</span> + originalUri);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.loadBalancer.execute(serviceName, <span class="built_in">this</span>.requestFactory.createRequest(request, body, execution));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>最终代码走到核心接口<code>LoadBalancerClient</code>，核心类<code>BlockingLoadBalancerClient</code></li><li>然后是核心代码段：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">execute</span><span class="params">(String serviceId, LoadBalancerRequest&lt;T&gt; request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hint</span> <span class="operator">=</span> getHint(serviceId);</span><br><span class="line">    LoadBalancerRequestAdapter&lt;T, TimedRequestContext&gt; lbRequest = <span class="keyword">new</span> <span class="title class_">LoadBalancerRequestAdapter</span>&lt;&gt;(request,</span><br><span class="line">                                                                                                    buildRequestContext(request, hint));</span><br><span class="line">    Set&lt;LoadBalancerLifecycle&gt; supportedLifecycleProcessors = getSupportedLifecycleProcessors(serviceId);</span><br><span class="line">    supportedLifecycleProcessors.forEach(lifecycle -&gt; lifecycle.onStart(lbRequest));</span><br><span class="line">    <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> choose(serviceId, lbRequest);</span><br><span class="line">    <span class="keyword">return</span> execute(serviceId, serviceInstance, lbRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="怎么自定义？"><a href="#怎么自定义？" class="headerlink" title="怎么自定义？"></a>怎么自定义？</h2><p>首先如果需要自定义负载均衡策略，需要查看：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070121173.png" alt="image.png"></p><p>我们可以效仿上面两个已经实现的类自定义一个新的负载均衡策略</p><p>直接复制<code>RandomLoadBalancer</code>然后进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfRule</span> <span class="keyword">implements</span> <span class="title class_">ReactorServiceInstanceLoadBalancer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> String serviceId;</span><br><span class="line">ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MySelfRule</span><span class="params">(String serviceId, ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.serviceId = serviceId;</span><br><span class="line"><span class="built_in">this</span>.serviceInstanceListSupplierProvider = serviceInstanceListSupplierProvider;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;Response&lt;ServiceInstance&gt;&gt; <span class="title function_">choose</span><span class="params">(Request request)</span> &#123;</span><br><span class="line"><span class="type">ServiceInstanceListSupplier</span> <span class="variable">supplier</span> <span class="operator">=</span> serviceInstanceListSupplierProvider</span><br><span class="line">.getIfAvailable(NoopServiceInstanceListSupplier::<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">return</span> supplier.get(request).next()</span><br><span class="line">.map(serviceInstances -&gt; processInstanceResponse(supplier, serviceInstances));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Response&lt;ServiceInstance&gt; <span class="title function_">processInstanceResponse</span><span class="params">(ServiceInstanceListSupplier supplier,</span></span><br><span class="line"><span class="params">  List&lt;ServiceInstance&gt; serviceInstances)</span> &#123;</span><br><span class="line">Response&lt;ServiceInstance&gt; serviceInstanceResponse = getInstanceResponse(serviceInstances);</span><br><span class="line"><span class="keyword">if</span> (supplier <span class="keyword">instanceof</span> SelectedInstanceCallback &amp;&amp; serviceInstanceResponse.hasServer()) &#123;</span><br><span class="line">((SelectedInstanceCallback) supplier).selectedServiceInstance(serviceInstanceResponse.getServer());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> serviceInstanceResponse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Response&lt;ServiceInstance&gt; <span class="title function_">getInstanceResponse</span><span class="params">(List&lt;ServiceInstance&gt; instances)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (instances.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">log.warn(<span class="string">&quot;No servers available for service: &quot;</span> + serviceId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EmptyResponse</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> ThreadLocalRandom.current().nextInt(arr.length);</span><br><span class="line"><span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> instances.get(arr[index] % instances.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultResponse</span>(instance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心算法随便写的，就三行代码<br /><code>private int[] arr = &#123;3, 1, 4, 1, 5, 9, 2, 6, 5&#125;;</code><br /><code>int index = ThreadLocalRandom.current().nextInt(arr.length);</code><br /><code>ServiceInstance instance = instances.get(arr[index] % instances.size());</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRuleConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ReactorServiceInstanceLoadBalancer <span class="title function_">reactorServiceInstanceLoadBalancer</span><span class="params">(Environment environment, LoadBalancerClientFactory loadBalancerClientFactory)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MySelfRule</span>(name, loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>记住：这里不要添加注解 <code>@Configuration</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LoadBalancerClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;, configuration = MyRuleConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nacos和loadbalancer"><a href="#nacos和loadbalancer" class="headerlink" title="nacos和loadbalancer"></a>nacos和loadbalancer</h2><h3 id="服务的提供者"><a href="#服务的提供者" class="headerlink" title="服务的提供者"></a>服务的提供者</h3><p>创建两个项目：<code>cloud-provider02-payment8001</code>和<code>cloud-provider02-payment8002</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code>: <code>8001</code>项目</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>             <span class="comment"># mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"><span class="comment">#        namespace: public</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.zhazha.springcloud.entities</span>    <span class="comment"># 所有Entity别名类所在包</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code>: <code>8002</code>项目的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>             <span class="comment"># mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"><span class="comment">#        namespace: public</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.zhazha.springcloud.entities</span>    <span class="comment"># 所有Entity别名类所在包</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(value = &quot;com.zhazha.springcloud.dao&quot;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8001_2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(PaymentMain8001_2.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.SelectProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentDao</span> &#123;</span><br><span class="line"><span class="meta">@Insert(&quot;insert into payment(serial) values (#&#123;serial&#125;)&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span>;</span><br><span class="line"><span class="comment">//@Select(&quot;select * from payment p where p.id = #&#123;id&#125;&quot;)</span></span><br><span class="line">Payment <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SelectProvider(type = PaymentProvider.class, method = &quot;getAll&quot;)</span></span><br><span class="line">List&lt;Payment&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.jdbc.SQL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentProvider</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SQL</span>().SELECT(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">.FROM(<span class="string">&quot;payment&quot;</span>).toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.entities.Payment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span>;</span><br><span class="line">Payment <span class="title function_">getPaymentById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.dao.PaymentDao;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> paymentDao.create(payment);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Payment <span class="title function_">getPaymentById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> paymentDao.getPaymentById(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.utils.CommonResult;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回给前端的结果集</span></span><br><span class="line"><span class="comment"> * 下面的 RequestBody 注解如果不加上， restTemplate 的 postForObject 将无法保存参数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> payment</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;create&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span> &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.create(payment);</span><br><span class="line">log.info(<span class="string">&quot;******插入结果：&quot;</span> + result);</span><br><span class="line"><span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>, <span class="string">&quot;插入数据库成功 port: &quot;</span> + serverPort, result);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>, <span class="string">&quot;插入数据库失败&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;get/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">getPaymentByID</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line"><span class="type">Payment</span> <span class="variable">payment</span> <span class="operator">=</span> paymentService.getPaymentById(id);</span><br><span class="line">log.info(<span class="string">&quot;******插入结果：&quot;</span> + payment);</span><br><span class="line"><span class="keyword">if</span> (payment != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>, <span class="string">&quot;查询成功 port: &quot;</span> + serverPort, payment);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>, <span class="string">&quot;没有查询记录&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;discovery&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">discovery</span><span class="params">()</span> &#123;</span><br><span class="line">List&lt;String&gt; services = <span class="built_in">this</span>.discoveryClient.getServices();</span><br><span class="line"><span class="keyword">for</span> (String service : services) &#123;</span><br><span class="line">log.info(<span class="string">&quot;*********** service: &quot;</span> + service);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">log.info(<span class="string">&quot;service application host = &#123;&#125;, port = &#123;&#125;, uri = &#123;&#125;&quot;</span>, instance.getHost(), instance.getPort(), instance.getUri());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.discoveryClient;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhazha.springcloud.dao.PaymentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;payment&quot;</span> <span class="attr">id</span>=<span class="string">&quot;PaymentMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">column</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPaymentById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;PaymentMap&quot;</span>&gt;</span></span><br><span class="line">        select * from payment p where p.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="服务的消费者"><a href="#服务的消费者" class="headerlink" title="服务的消费者"></a>服务的消费者</h3><p>创建项目：<code>cloud-consumer02-order80</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service02</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">&#x27;127.0.0.1:8848&#x27;</span></span><br><span class="line"><span class="comment">#      server-addr: 192.168.133.128:8847  #集群 nginx 负载均衡访问 nacos</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"><span class="comment">#        namespace: public</span></span><br><span class="line"><span class="comment">#    loadbalancer:</span></span><br><span class="line"><span class="comment">#      enabled: true</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.rule.LoadBalancerConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.annotation.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@LoadBalancerClient(configuration = LoadBalancerConfig.class, value = &quot;cloud-payment-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80_2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        SpringApplication.run(OrderMain80_2.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.utils.CommonResult;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"><span class="comment">//定义服务端URL</span></span><br><span class="line"><span class="comment">//public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用微服务的名字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://cloud-payment-service&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端通过RestTemplate调用服务端</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;payment/create&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(Payment payment)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义<code>Rule</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.rule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.RandomLoadBalancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.ReactorServiceInstanceLoadBalancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.ServiceInstanceListSupplier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.support.LoadBalancerClientFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadBalancerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ReactorServiceInstanceLoadBalancer <span class="title function_">loadBalancer</span><span class="params">(Environment environment, LoadBalancerClientFactory loadBalancerClientFactory)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomLoadBalancer</span>(loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070121863.png" alt="image.png"></p><p>成功了</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 负载均衡 </tag>
            
            <tag> nacos </tag>
            
            <tag> Ribbon </tag>
            
            <tag> LoadBalancer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>003spring-cloud整合dubbo使用nacos做注册中心</title>
      <link href="/2022/11/07/02springcloud/003spring-cloud%E6%95%B4%E5%90%88dubbo%E4%BD%BF%E7%94%A8nacos%E5%81%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
      <url>/2022/11/07/02springcloud/003spring-cloud%E6%95%B4%E5%90%88dubbo%E4%BD%BF%E7%94%A8nacos%E5%81%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="nacos安装和入门"><a href="#nacos安装和入门" class="headerlink" title="nacos安装和入门"></a>nacos安装和入门</h1><p><a href="https://juejin.cn/post/7119484969621127205">nacos简单入个门</a></p><h1 id="nacos-需要准备的地方"><a href="#nacos-需要准备的地方" class="headerlink" title="nacos 需要准备的地方"></a>nacos 需要准备的地方</h1><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070118320.png" alt="image.png"></p><h1 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring-cloud-nacos-dubbo-producer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring-cloud-nacos-dubbo-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring-cloud-nacos-dubbo-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="创建-api-项目"><a href="#创建-api-项目" class="headerlink" title="创建 api 项目"></a>创建 api 项目</h1><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070118652.png" alt="image.png"></p><p>这个项目主要是给服务的提供方和消费方提供一个公共的接口协议（接口参数）</p><h1 id="服务的提供方"><a href="#服务的提供方" class="headerlink" title="服务的提供方"></a>服务的提供方</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-nacos-dubbo-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-nacos-dubbo-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>bootstrap.yml</code> 这个文件主要给后期将我们的 <code>application.yml</code>配置上传到 <code>nacos</code>上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">allow-circular-references:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-producer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos的分组，不会修改 dubbo 注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos 的分组，不会修改dubbo注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">com.zhazha.producer.service.impl</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="comment"># dubbo 协议名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="comment"># dubbo 协议端口（ -1 表示自增端口，从 20880 开始）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的命名空间</span></span><br><span class="line">    <span class="string">parameters[namespace]:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的分组</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 关闭 dubbo 在线运维功能，该功能主要通过 telnet 方式进行服务的权重调整</span></span><br><span class="line">    <span class="attr">qos-enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>注意看注释的地方</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosDubboProducerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(NacosDubboProducerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.producer.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.api.HelloService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.DubboService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DubboService</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line">log.info(<span class="string">&quot;nacos-dubbo-producer&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;nacos-dubbo-producer&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务的提供方步骤结束</p><h1 id="服务的消费方"><a href="#服务的消费方" class="headerlink" title="服务的消费方"></a>服务的消费方</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-nacos-dubbo-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-nacos-dubbo-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>bootstrap.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">allow-circular-references:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos的分组，不会修改 dubbo 注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos 的分组，不会修改dubbo注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line"><span class="comment">#  scan:</span></span><br><span class="line"><span class="comment">#    base-packages: com.zhazha.producer.service.impl</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="comment"># dubbo 协议名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="comment"># dubbo 协议端口（ -1 表示自增端口，从 20880 开始）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的命名空间</span></span><br><span class="line">    <span class="string">parameters[namespace]:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的分组</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 关闭 dubbo 在线运维功能，该功能主要通过 telnet 方式进行服务的权重调整</span></span><br><span class="line">    <span class="attr">qos-enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>注意上面注释的地方</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosDubboConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(NacosDubboConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.api.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.DubboReference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DubboReference</span></span><br><span class="line"><span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;sayHi&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> helloService.sayHi();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目需要准备的就这些了</p><p>调用成功：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070118727.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119107.png" alt="image.png"></p><p>同时 <code>dubbo </code>也会在 配置中心记录一些数据</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119972.png" alt="image.png"></p><h1 id="配置上传到-nacos"><a href="#配置上传到-nacos" class="headerlink" title="配置上传到 nacos"></a>配置上传到 <code>nacos</code></h1><p>现在将<code>application.yml</code>内的内容上传到 <code>nacos</code>配置中心上</p><h2 id="创建专用于配置的命名空间"><a href="#创建专用于配置的命名空间" class="headerlink" title="创建专用于配置的命名空间"></a>创建专用于配置的命名空间</h2><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119619.png" alt="image.png"></p><h2 id="提供方配置修改"><a href="#提供方配置修改" class="headerlink" title="提供方配置修改"></a>提供方配置修改</h2><blockquote><p>忘记 <code>dubbo</code> 会占用配置中心了，所以另外新建一个，</p></blockquote><p><code>bootstrap.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-producer</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">allow-circular-references:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">de98a7a1-8814-44c5-a635-e19872132371</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>去新建配置：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119938.png" alt="image.png"></p><p><code>dubbo-producer.yaml</code>填入内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-producer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos的分组，不会修改 dubbo 注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos 的分组，不会修改dubbo注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">com.zhazha.producer.service.impl</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="comment"># dubbo 协议名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="comment"># dubbo 协议端口（ -1 表示自增端口，从 20880 开始）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的命名空间</span></span><br><span class="line">    <span class="string">parameters[namespace]:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的分组</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br></pre></td></tr></table></figure><h2 id="消费方配置修改"><a href="#消费方配置修改" class="headerlink" title="消费方配置修改"></a>消费方配置修改</h2><p><code>bootstrap.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-consumer</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">allow-circular-references:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">de98a7a1-8814-44c5-a635-e19872132371</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>在nacos上创建<code>dubbo-consumer.yaml</code></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119750.png" alt="image.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos的分组，不会修改 dubbo 注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos 的分组，不会修改dubbo注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line"><span class="comment">#  scan:</span></span><br><span class="line"><span class="comment">#    base-packages: com.zhazha.producer.service.impl</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="comment"># dubbo 协议名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="comment"># dubbo 协议端口（ -1 表示自增端口，从 20880 开始）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的命名空间</span></span><br><span class="line">    <span class="string">parameters[namespace]:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的分组</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 关闭 dubbo 在线运维功能，该功能主要通过 telnet 方式进行服务的权重调整</span></span><br><span class="line">    <span class="attr">qos-enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>最后<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119984.png" alt="image.png"></p><blockquote><p>前面的入门篇已经讲过了，nacos配置中心的名字必须怎样，回到入门篇去看<br><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119862.png" alt="image.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务发现 </tag>
            
            <tag> 注册中心 </tag>
            
            <tag> 服务注册 </tag>
            
            <tag> nacos </tag>
            
            <tag> CAP </tag>
            
            <tag> 服务消费方 </tag>
            
            <tag> 服务提供方 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>002SpringCloud系列——nacos入门（二）</title>
      <link href="/2022/11/07/02springcloud/002SpringCloud%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94nacos%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/11/07/02springcloud/002SpringCloud%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94nacos%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="nacos学习"><a href="#nacos学习" class="headerlink" title="nacos学习"></a><code>nacos</code>学习</h1><h2 id="一、nacos是什么？"><a href="#一、nacos是什么？" class="headerlink" title="一、nacos是什么？"></a>一、<code>nacos</code>是什么？</h2><p><code>Nacos</code> 英文全称为 <code>Dynamic Naming and Configuration Service</code>，是一个由阿里巴巴团队使用 Java 语言开发的开源项目。</p><p><code>Nacos</code> 是一个更易于帮助构建云原生应用的动态<strong>服务发现</strong>、<strong>配置管理</strong>和<strong>服务管理</strong>平台（参考自 <a href="https://nacos.io/zh-cn/index.html">Nacos 官网</a>）。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070115461.png" alt="image.png"></p><blockquote><p>总结下来主要做三件事：</p><ol><li>动态服务发现</li><li>服务管理</li><li>配置管理</li></ol></blockquote><h3 id="nacos-名字的由来（了解）"><a href="#nacos-名字的由来（了解）" class="headerlink" title="nacos 名字的由来（了解）"></a><code>nacos </code>名字的由来（了解）</h3><p><code>Nacos</code> 的命名是由 3 部分组成：</p><table><thead><tr><th>组成部分</th><th>全称</th><th>描述</th></tr></thead><tbody><tr><td><code>Na</code></td><td><code>naming/nameServer</code></td><td>即服务注册中心，与 <code>Spring Cloud Eureka</code><br /> 的功能类似。</td></tr><tr><td><code>co</code></td><td><code>configuration</code></td><td>即配置中心，与 <code>Spring Cloud Config</code><br />+<code>Spring Cloud Bus</code><br /> 的功能类似。</td></tr><tr><td><code>s</code></td><td><code>service</code></td><td>即服务，表示 <code>Nacos</code><br /> 实现的服务注册中心和配置中心都是以服务为核心的。</td></tr></tbody></table><p>我们可以将 <code>Nacos</code> 理解成服务注册中心和配置中心的组合体，它可以替换 <a href="http://m.biancheng.net/springcloud/eureka.html">Eureka</a> 作为服务注册中心，实现服务的注册与发现；还可以替换 <a href="http://m.biancheng.net/springcloud/config.html">Spring Cloud Config</a> 作为配置中心，实现配置的动态刷新。</p><p><code>Nacos</code> 作为服务注册中心经历了十年“双十一”的洪峰考验，具有简单易用、稳定可靠、性能卓越等优点，可以帮助用户更敏捷、容易地构建和管理微服务应用。</p><p><code>Nacos</code> 支持几乎所有主流类型“服务”的发现、配置和管理：</p><ul><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/">Kubernetes Service</a></li><li><a href="https://grpc.io/docs/what-is-grpc/core-concepts#service-definition">gRPC </a>&amp; <a href="https://dubbo.apache.org/zh/">Dubbo RPC Service</a></li><li><code>Spring Cloud RESTful Service</code></li></ul><p>转载自：<a href="http://m.biancheng.net/springcloud/nacos.html">Nacos：Spring Cloud Alibaba服务注册与配置中心（非常详细） (biancheng.net)</a></p><p><img src="https://nacos.io/img/nacosMap.jpg#crop=0&crop=0&crop=1&crop=1&id=BJikK&originHeight=1198&originWidth=1880&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="二、为什么使用Nacos？"><a href="#二、为什么使用Nacos？" class="headerlink" title="二、为什么使用Nacos？"></a>二、为什么使用<code>Nacos</code>？</h2><blockquote><p>或者说 <code>nacos</code> 有什么优势？</p></blockquote><ol><li><code>eureka 2.0</code>闭源 </li><li>开箱即用，上手简洁，暂时也没发现有太大的坑 </li><li><code>nacos</code>使用的<code>raft</code>协议,<code>nacos</code>集群的一致性要远大于<code>eureka</code>集群 </li><li>因为<code>nacos</code>功能更加丰富，社区更加活跃 </li><li>背靠国内大厂（经受双十一的考验），中英文文档 </li><li>界面美观 </li><li>支持 <code>k8s</code></li></ol><h2 id="三、nacos的架构"><a href="#三、nacos的架构" class="headerlink" title="三、nacos的架构"></a>三、<code>nacos</code>的架构</h2><h3 id="基本架构及概念（了解）"><a href="#基本架构及概念（了解）" class="headerlink" title="基本架构及概念（了解）"></a>基本架构及概念（了解）</h3><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116664.jpeg"></p><p>这张图通过三个部分查看</p><p>第一个部分是 <code>Multi-Datacenter Nacos Cluster</code> 的 <code>Nacos Server</code> 这是 <code>Nacos</code> 的核心</p><p>第二部分是 <code>Nacos</code> 的 <code>Console</code> 控制中心</p><p>第三部分是外部的 <code>Provider</code>、<code>Consumer</code></p><ul><li><code>Nameserver</code>：解决<code>namespace</code>到<code>clusterid</code>的路由问题，解决用户环境与<code>nacos</code>物理环境映射问题</li><li><code>Provider APP</code>：是指提供可复用和可调用服务的应用方。</li><li><code>Comsumer APP</code>：是指会发起对某个服务调用的应用方。</li><li><code>OpenAPI</code>：暴露标准<code>Rest</code>风格<code>HTTP</code>接口，简单易用，方便多语言集成</li><li><code>Naming Service</code>：提供分布式系统中所有对象(<code>Object</code>)、实体(<code>Entity</code>)的“名字”到关联的元数据之间的映射管理服务，例如 <code>ServiceName</code> -&gt; <code>Endpoints Info, Distributed Lock Name</code> -&gt; <code>Lock Owner/Status Info</code>, <code>DNS Domain Name</code> -&gt; <code>IP List</code>, 服务发现和 <code>DNS</code> 就是名字服务的2大场景。</li><li><code>Configuration Service</code>：在服务或者应用运行过程中，提供动态配置或者元数据以及配置管理的服务提供者。</li><li>一致性协议：解决不同数据，不同一致性要求情况下，不同一致性机制</li><li><code>Console</code>：易用控制台，做服务管理、配置管理等操作</li></ul><h3 id="逻辑架构及组件介绍（了解）"><a href="#逻辑架构及组件介绍（了解）" class="headerlink" title="逻辑架构及组件介绍（了解）"></a>逻辑架构及组件介绍（了解）</h3><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116388.png"></p><ul><li>服务管理：实现服务<code>CRUD</code>，域名<code>CRUD</code>，服务健康状态检查，服务权重管理等功能</li><li>配置管理：实现配置管<code>CRUD</code>，版本管理，灰度管理，监听管理，推送轨迹，聚合数据等功能</li><li>元数据管理：提供元数据<code>CURD</code> 和打标能力</li><li>插件机制：实现三个模块可分可合能力，实现扩展点<code>SPI</code>机制</li><li>事件机制：实现异步化事件通知，<code>sdk</code>数据变化异步通知等逻辑</li><li>日志模块：管理日志分类，日志级别，日志可移植性（尤其避免冲突），日志格式，异常码+帮助文档</li><li>回调机制：<code>sdk</code>通知数据，通过统一的模式回调用户处理。接口和数据结构需要具备可扩展性</li><li>寻址模式：解决<code>ip</code>，域名，<code>nameserver</code>、广播等多种寻址模式，需要可扩展</li><li>推送通道：解决server与存储、<code>server</code>间、<code>server</code>与<code>sdk</code>间推送性能问题</li><li>容量管理：管理每个租户，分组下的容量，防止存储被写爆，影响服务可用性</li><li>流量管理：按照租户，分组等多个维度对请求频率，长链接个数，报文大小，请求流控进行控制</li><li>缓存机制：容灾目录，本地缓存，<code>server</code>缓存机制。容灾目录使用需要工具</li><li>启动模式：按照单机模式，配置模式，服务模式，<code>dns</code>模式，或者<code>all</code>模式，启动不同的程序<code>+UI</code></li><li>一致性协议：解决不同数据，不同一致性要求情况下，不同一致性机制</li><li>存储模块：解决数据持久化、非持久化存储，解决数据分片问题</li><li><code>Nameserver</code>：解决<code>namespace</code>到<code>clusterid</code>的路由问题，解决用户环境与<code>nacos</code>物理环境映射问题</li><li><code>CMDB</code>：解决元数据存储，与三方<code>cmdb</code>系统对接问题，解决应用，人，资源关系</li><li><code>Metrics</code>：暴露标准<code>metrics</code>数据，方便与三方监控系统打通</li><li><code>Trace</code>：暴露标准<code>trace</code>，方便与<code>SLA</code>系统打通，日志白平化，推送轨迹等能力，并且可以和计量计费系统打通</li><li>接入管理：相当于阿里云开通服务，分配身份、容量、权限过程</li><li>用户管理：解决用户管理，登录，<code>sso</code>等问题</li><li>权限管理：解决身份识别，访问控制，角色管理等问题</li><li>审计系统：扩展接口方便与不同公司审计系统打通</li><li>通知系统：核心数据变更，或者操作，方便通过<code>SMS</code>系统打通，通知到对应人数据变更</li><li><code>OpenAPI</code>：暴露标准<code>Rest</code>风格<code>HTTP</code>接口，简单易用，方便多语言集成</li><li><code>Console</code>：易用控制台，做服务管理、配置管理等操作</li><li><code>SDK</code>：多语言<code>sdk</code></li><li><code>Agent</code>：<code>dns-f</code>类似模式，或者与<code>mesh</code>等方案集成</li><li><code>CLI</code>：命令行对产品进行轻量化管理，像<code>git</code>一样好用</li></ul><h3 id="nacos-目前的功能"><a href="#nacos-目前的功能" class="headerlink" title="nacos 目前的功能"></a><code>nacos</code> 目前的功能</h3><p><a href="https://nacos.io/zh-cn/docs/feature-list.html">feature-list (nacos.io)</a></p><h3 id="nacos两大组件"><a href="#nacos两大组件" class="headerlink" title="nacos两大组件"></a><code>nacos</code>两大组件</h3><p>与 <code>Eureka</code> 类似，<code>Nacos</code> 也采用 <code>CS</code>（<code>Client/Server</code>，客户端&#x2F;服务器）架构，它包含两大组件，如下表。</p><table><thead><tr><th>组件</th><th>描述</th><th>功能</th></tr></thead><tbody><tr><td><code>Nacos Server</code></td><td><code>Nacos</code><br /> 服务端，与 <code>Eureka Server</code><br /> 不同，<code>Nacos Server</code><br /> 由阿里巴巴团队使用 <code>Java</code><br /> 语言编写并将 <code>Nacos Server</code><br /> 的下载地址给用户，用户只需要直接下载并运行即可。</td><td><code>Nacos Server</code><br /> 可以作为服务注册中心，帮助 <code>Nacos Client</code><br /> 实现服务的注册与发现。</td></tr><tr><td></td><td></td><td><code>Nacos Server</code><br /> 可以作为配置中心，帮助 <code>Nacos Client</code><br /> 在不重启的情况下，实现配置的动态刷新。</td></tr><tr><td><code>Nacos Client</code></td><td><code>Nacos</code><br /> 客户端，通常指的是微服务架构中的各个服务，由用户自己搭建，可以使用多种语言编写。</td><td><code>Nacos Client</code><br /> 通过添加依赖 <code>spring-cloud-starter-alibaba-nacos-discovery</code><br />，在服务注册中心（<code>Nacos Server</code><br />）中实现服务的注册与发现。</td></tr><tr><td></td><td></td><td><code>Nacos Client</code><br /> 通过添加依赖 <code>spring-cloud-starter-alibaba-nacos-config</code><br />，在配置中心（<code>Nacos Server</code><br />）中实现配置的动态刷新。</td></tr></tbody></table><h3 id="CAP原则"><a href="#CAP原则" class="headerlink" title="CAP原则"></a><code>CAP</code>原则</h3><p><code>CAP</code>原理主要讲的是在一个分布式系统中的一致性（<code>Consistency</code>），可用性（<code>Availability</code>）和分区容忍性（也称分区容错性）（<code>Partition tolerance</code>），这三点只能满足两点</p><p>其中</p><p>①一致性：对于客户端的每次读操作，要么读到的是最新的数据，要么读取失败。换句话说，一致性是站在分布式系统的角度，对访问本系统的客户端的一种承诺：要么我给您返回一个错误，要么我给你返回绝对一致的最新数据，不难看出，其强调的是数据正确。</p><p>②可用性：任何客户端的请求都能得到响应数据，不会出现响应错误。换句话说，可用性是站在分布式系统的角度，对访问本系统的客户的另一种承诺：我一定会给您返回数据，不会给你返回错误，但不保证数据最新，强调的是不出错。</p><p>③分区容忍性：由于分布式系统通过网络进行通信，网络是不可靠的。当任意数量的消息丢失或延迟到达时，系统仍会继续提供服务，不会挂掉。换句话说，分区容忍性是站在分布式系统的角度，对访问本系统的客户端的再一种承诺：我会一直运行，不管我的内部出现何种数据同步问题，强调的是不挂掉。</p><p>可以看出这三点中有一点必须满足，<code>分区容忍性Partition tolerance</code>，否则系统只要丢失掉一个节点，整个分布式系统都将无法工作</p><p>所以对于一个分布式组件来说，要么满足<code>AP</code>，要么满足<code>CP</code></p><p>而众所周知的 <code>zookeeper</code> 满足了 <code>CP</code>，抛弃了 <code>A</code></p><p><code>Eurake</code>满足了 <code>AP</code>，保证了 <code>C</code> 的最终一致性</p><p>而本文 的 <code>nacos</code> 默认启动 <code>AP</code>，同时也支持<code>CP</code></p><h3 id="nacos和一致性算法"><a href="#nacos和一致性算法" class="headerlink" title="nacos和一致性算法"></a><code>nacos</code>和一致性算法</h3><h4 id="为什么-nacos-需要一致性算法？"><a href="#为什么-nacos-需要一致性算法？" class="headerlink" title="为什么 nacos 需要一致性算法？"></a>为什么 <code>nacos</code> 需要一致性算法？</h4><p><code>nacos</code> 为了尽量减少用户的部署和运营成本，做到用户只需要一个包就可以快速启动<code>nacos</code>单机或者集群，因此 <code>nacos</code> 需要存储一些数据。</p><p><code>nacos</code>在单机下存储数据问题不大，但是在集群下就需要一些一致性算法帮助各个节点进行数据同步，就不得不引入现存的一些共识算法咯</p><h3 id="为什么-nacos-选择raft以及distro？"><a href="#为什么-nacos-选择raft以及distro？" class="headerlink" title="为什么 nacos 选择raft以及distro？"></a>为什么 <code>nacos</code> 选择<code>raft</code>以及<code>distro</code>？</h3><h4 id="raft共识算法"><a href="#raft共识算法" class="headerlink" title="raft共识算法"></a>raft共识算法</h4><p><code>raft</code> 协议简单入门看这里：（了解）</p><p><a href="https://juejin.cn/post/7116445621082390565">https://juejin.cn/post/7116445621082390565</a></p><ul><li><code>nacos</code>作为<strong>服务发现注册中心</strong>而言：</li></ul><p>而服务发现注册中心<strong>必须要保证可用性</strong>，而<strong>强一致性协议的情况下，如果集群可用的节点数没有过半的话，可能导致注册中心在部分时间内不可用</strong></p><p>所以最终<code>nacos</code>选择了 <code>AP</code> 并配合 <strong>最终一致性</strong> 作为 服务发现注册中心 的底层共识算法</p><blockquote><p>以上针对 <code>nacos</code> 非持久化数据而言，对于持久化数据来说，就不需要选择<code>AP</code>，可以配合强一致性共识算法</p></blockquote><ul><li><code>nacos</code> 作为配置中心的而言：</li></ul><p>配置数据中心必须保证绝大多数节点的配置都是一致的，否则可能导致配置不同或者配置丢失引起分布式系统中的节点出现严重的问题，所以对于配置数据中心而言，配置必须使用强一致性</p><p>所以 <code>nacos</code> 同时支持 <code>AP</code> 和 <code>CP</code></p><p>那为什么 <code>nacos</code> 选择 <code>raft</code> 和 <code>distro</code> 呢？</p><p>首先 <code>raft</code> 是强一致性共识算法，而且很好理解，其次 <code>nacos</code> 背靠阿里，实现了另一套基于<code>raft</code>的算法 <code>JRaft</code></p><p><code>JRaft</code>支持多 <code>RaftGroup</code>, 也可以为 <code>nacos</code> 后面提供多数据分片带来了可能</p><h4 id="distro协议"><a href="#distro协议" class="headerlink" title="distro协议"></a><code>distro</code>协议</h4><p><code>**distro**</code>** 协议是阿里巴巴自研的⼀个最终⼀致性协议<strong>，而最终⼀致性协议有很多，比如 <code>Gossip</code>、 <code>Eureka</code> 内的数据同步算法。而 <code>distro</code> 算法是集 <code>Gossip</code> 以及 <code>Eureka</code> 协议的优点并加以优化而出来的，对于原生的 <code>Gossip</code>，</strong>由于随机选取发送消息的节点，也就不可避免的存在消息重复发送给同⼀节点的情况，增加了网络的传输的压力，也给消息节点带来额外的处理负载<strong>，而 <code>distro</code> 算法引入了 <code>Server</code> 的概念，</strong>每个节点负责⼀部分数据以及将自己的数据同步给其他节点，有效的降低了消息冗余的问题**。</p><h2 id="四、怎么装？"><a href="#四、怎么装？" class="headerlink" title="四、怎么装？"></a>四、怎么装？</h2><p>去 <code>git</code> 上下载</p><p><a href="https://github.com/alibaba/nacos/releases/tag/2.1.0">Release 2.1.0 (Apr 29, 2022) · alibaba&#x2F;nacos (github.com)</a></p><h3 id="Linux-Unix-Mac下启动方式"><a href="#Linux-Unix-Mac下启动方式" class="headerlink" title="Linux/Unix/Mac下启动方式"></a><code>Linux/Unix/Mac</code>下启动方式</h3><p>启动命令(<code>standalone</code>代表着单机模式运行，非集群模式):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure><p>如果您使用的是<code>ubuntu</code>系统，或者运行脚本报错提示[[符号找不到，可尝试如下运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash startup.sh -m standalone</span><br></pre></td></tr></table></figure><h3 id="window下启动"><a href="#window下启动" class="headerlink" title="window下启动"></a><code>window</code>下启动</h3><p>请进入目录 <code>D:\programs\env\nacos-server-2.1.0_2\nacos\bin</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p>单机启动</p><p>可以在控制台看到</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116516.png" alt="image.png"></p><blockquote><p>这里我使用的是 <code>docker</code> 安装的 <code>nacos</code>，后面会讲</p></blockquote><blockquote><p><del>这里有个坑，</del><code>~~application.properties~~</code><del>里面的几个属性都是无效的，不知道是不是我没弄清楚什么。。。</del></p></blockquote><blockquote><p>可以在<code>bootstrap.yml</code>中配置</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos.config.data-id</span>=<span class="string">example</span></span><br><span class="line"><span class="attr">nacos.config.group</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="attr">nacos.config.auto-refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p><a href="http://localhost:8080/config/get"><br /></a></p><h3 id="docker上安装nacos的坑"><a href="#docker上安装nacos的坑" class="headerlink" title="docker上安装nacos的坑"></a><code>docker</code>上安装<code>nacos</code>的坑</h3><p>如果你选择在 <code>docker</code> 上安装 <code>nacos</code> ， 你只需要下载 <code>nacos/nacos-server</code> 这个镜像包</p><p>然后你会看到 <code>docker hub</code> 上的 <code>quick start</code>:</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116274.png" alt="image.png"></p><p>你跟着做，你会发现 <code>nacos</code> 启动成功了，但你 <code>spring-boot</code> 项目怎么都无法启动成功</p><p>如果你回到 <code>nacos</code> 官方文档，又会看到另一个方式：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116906.png" alt="image.png"></p><p>需要你去 <code>github</code> 上 <code>clone</code> 项目</p><p>如果你没梯子，会很麻烦，而且也很复杂</p><p>那我只想要 <code>docker hub</code> 上的 <code>nacos</code> 怎么办？</p><p><a href="https://github.com/nacos-group/nacos-docker">nacos-group&#x2F;nacos-docker: This project contains a Docker image meant to facilitate the deployment of Nacos . (github.com)</a></p><p>看上面网址</p><p>这里会有个 <code>quick start</code>：</p><p><code>docker run --name nacos-quick -e MODE=standalone -p 8848:8848 -p 9848:9848 -d nacos/nacos-server:2.0.2</code></p><p>你会发现问题</p><p>多了个端口 <code>9848</code></p><p>对， 这才是对的。。。</p><p>然后你回去看 <code>nacos</code> 的镜像配置</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116314.png" alt="image.png"></p><p>咦，不是只暴露了一个端口么？ 怎么还要另一个端口？</p><p>答案在这里：</p><p><a href="https://nacos.io/zh-cn/docs/2.0.0-compatibility.html">Nacos 2.0.0 兼容性文档</a></p><p><code>Nacos2.0</code>版本相比<code>1.X</code>新增了<code>gRPC</code>的通信方式，因此需要增加<code>2个端口</code>。新增端口是在配置的主端口<code>(server.port)</code>基础上，进行一定偏移量自动生成。</p><table><thead><tr><th>端口</th><th>与主端口的偏移量</th><th>描述</th></tr></thead><tbody><tr><td><code>9848</code></td><td><code>1000</code></td><td>客户端<code>gRPC</code><br />请求服务端端口，用于客户端向服务端发起连接和请求</td></tr><tr><td><code>9849</code></td><td><code>1001</code></td><td>服务端<code>gRPC</code><br />请求服务端端口，用于服务间同步等</td></tr></tbody></table><blockquote><p>好吧，我直接 <code>nacos 2.1</code> 的，谁会没事去关注兼容问题，害~ 我没话说了，下次一定跟官网走。。。</p></blockquote><h3 id="github-上-nacos-docker-需要注意的地方"><a href="#github-上-nacos-docker-需要注意的地方" class="headerlink" title="github 上 nacos-docker 需要注意的地方"></a><code>github </code>上 <code>nacos-docker</code> 需要注意的地方</h3><p>在<code>github</code>上的 <code>nacos-docker</code> 这个项目会三种方式告诉你如何启动 <code>nacos</code></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116364.png" alt="image.png"></p><ul><li>单机模式 <code>Derby</code>:     这种模式是极简模式，数据没法持久化存储，适合开发环境。</li><li>单机模式 <code>MySQL</code>:(支持<code>MySQL5.7</code>和<code>MySQL8.0</code>，我们这里学习<code>MySQL5.7</code>安装模式，因为当前主流还是<code>MySQL5.7</code>)     这种模式支持数据持久化，数据会存储到MySQL中，适合生产环境。</li><li>集群模式:     这种模式适合生产环境并且服务节点个数较多，不存在单点故障问题。</li></ul><blockquote><p>注意上面使用 <code>mysql </code>的方式启动需要 <code>mysql </code>表结构，而表结构在 <code>nacos </code>官方的项目中<br><a href="https://github.com/alibaba/nacos/blob/develop/config/src/main/resources/META-INF/nacos-db.sql">https://github.com/alibaba/nacos/blob/develop/config/src/main/resources/META-INF/nacos-db.sql</a></p></blockquote><h2 id="四、springboot整合nacos"><a href="#四、springboot整合nacos" class="headerlink" title="四、springboot整合nacos"></a>四、<code>springboot</code>整合<code>nacos</code></h2><h3 id="nacos配置中心"><a href="#nacos配置中心" class="headerlink" title="nacos配置中心"></a><code>nacos</code>配置中心</h3><p>nacos上面需要这样：</p><ol><li>新建命名空间</li></ol><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116206.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116668.png" alt="image.png"></p><p>配置列表的内容是：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116453.png" alt="image.png"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116119.png" alt="image.png"></p><p>首先创建 <code>springboot</code> <code>maven</code>项目</p><p><code>pom.xml</code> 如下：（这里是 <code>maven pom</code> 项目，注意自己去创建一个新模块 导入 <code>dependencyManagement</code> 内的依赖）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring-boot-nacos-config<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-config-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">f4d95375-72ac-4197-9314-87b7fc0d0530</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><blockquote><p>这里需要注意，命名空间需要填入 <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117698.png" alt="image.png"><br>而不是 <code>namespace: spring-boot</code> </p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.spring.context.<span class="keyword">annotation</span>.config.NacosPropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@NacosPropertySource(dataId = <span class="string">&quot;nacos-config.properties&quot;</span>, groupId = <span class="string">&quot;spring-boot-config&quot;</span>, autoRefreshed = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosConfigApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> static void main(String[] args) throws Exception &#123;</span><br><span class="line">SpringApplication.run(NacosConfigApplication.<span class="keyword">class</span>, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.config.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.config.<span class="keyword">annotation</span>.NacosValue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</span><br><span class="line"><span class="keyword">import</span> static org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMethod.GET;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NacosValue(value = <span class="string">&quot;<span class="subst">$&#123;useLocalCache:false&#125;</span>&quot;</span>, autoRefreshed = true)</span></span><br><span class="line"><span class="keyword">private</span> boolean useLocalCache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = <span class="string">&quot;/get&quot;</span>, method = GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> boolean <span class="keyword">get</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> useLocalCache;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117555.png" alt="image.png"></p><p>成了</p><blockquote><p>注意 <code>autoRefreshed = true</code> ，这样微服务才随时能感知 <code>nacos </code>配置的变化</p></blockquote><h3 id="nacos服务发现"><a href="#nacos服务发现" class="headerlink" title="nacos服务发现"></a><code>nacos</code>服务发现</h3><h4 id="服务提供端"><a href="#服务提供端" class="headerlink" title="服务提供端"></a>服务提供端</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-nacos-discovery-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>巨坑：<code>nacos </code>的 <code>springboot </code>包中的<code>spring-context-support</code>依赖不向前兼容，导致项目启动报错：<br><code>com.sun.proxy.$Proxy27 cannot be cast to class java.util.Map (com.sun.proxy.$Proxy27 is in unnamed module of loader &#39;app&#39;; java.util.Map is in module java.base of loader &#39;bootstrap&#39;)</code><br>看了下，就差了一个版本：<code>1.0.10</code> 人都傻了</p></blockquote><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-producer</span></span><br><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">*</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosDiscoveryApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> static void main(String[] args) throws Exception &#123;</span><br><span class="line">SpringApplication.run(NacosDiscoveryApplication.<span class="keyword">class</span>, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.<span class="keyword">annotation</span>.NacosInjected;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.exception.NacosException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.naming.NamingService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NacosInjected</span></span><br><span class="line"><span class="keyword">private</span> NamingService namingService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(<span class="string">&quot;/register&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> boolean getServiceName() throws NacosException &#123;</span><br><span class="line">namingService.registerInstance(<span class="string">&quot;example&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务，访问 <a href="http://127.0.0.1:8080/register">http://127.0.0.1:8080/register</a> 注册服务</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117299.png" alt="image.png"></p><h4 id="服务消费端"><a href="#服务消费端" class="headerlink" title="服务消费端"></a>服务消费端</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-nacos-dicovery-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-consumer</span></span><br><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">*</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosDiscoveryApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(NacosDiscoveryApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.annotation.NacosInjected;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.exception.NacosException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.naming.NamingService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.naming.pojo.Instance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscoveryController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NacosInjected</span></span><br><span class="line"><span class="keyword">private</span> NamingService namingService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Instance&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@RequestParam</span> String serviceName)</span> <span class="keyword">throws</span> NacosException &#123;</span><br><span class="line"><span class="keyword">return</span> namingService.getAllInstances(serviceName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117210.png" alt="image.png"></p><p>成功了</p><h2 id="五、springcloud-整合-nacos"><a href="#五、springcloud-整合-nacos" class="headerlink" title="五、springcloud 整合 nacos"></a>五、<code>springcloud</code> 整合 <code>nacos</code></h2><h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-nacos-config-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里需要注意添加：<code>spring-cloud-starter-bootstrap</code>，这一点官网没说，给的例子也是较为低的 <code>spring-boot </code>版本，这点需要注意</p><p><code>nacos </code>官方都说了 要用到 <code>bootstrap.yml </code>配置文件</p><p>新建 <code>bootstrap.yml </code>文件，填入下面代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">properties</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">spring-cloud-config</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br></pre></td></tr></table></figure><blockquote><p><code>namespace </code>在这里能看到： <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117620.png" alt="image.png"></p></blockquote><p>在 <code>application.yml</code> 文件中填入代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudNacosConfigApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(SpringCloudNacosConfigApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.config.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;user.id:&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;user.password:&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;get&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">&quot;username = %s, password = %s\n&quot;</span>, username, password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里只能使用<code>@Value</code>，如果使用<code>@NacosValue</code>注解，无效</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117864.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117924.png" alt="image.png"></p><blockquote><p>这里需要注意：配置文件名必须是 <code>spring.application.name</code>+ <code>spring.profiles.active</code> + <code>.</code> + <code>spring.cloud.nacos.config.file-extension</code><br>比如你的 <code>application</code>名字是 <code>zhazha</code>，然后 <code>active </code>写成 <code>dev</code>，最后<code>file-extension</code> 写上 <code>yaml</code> 或者 <code>properties </code>(目前只支持这两种)</p></blockquote><p>然后你会发现不成功</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117840.png" alt="image.png"></p><p>为什么？</p><blockquote><p>如果你是新手可以直接搜索：“springcloud nacos 配置中心 坑”调整下时间，近期一年的搜索就会找到解决方法</p></blockquote><p>问题很简单，<code>spring-boot </code>从 版本开始就将 <code>bootstrap.yml </code>剥离出去了，所以需要添加包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样 <code>bootstrap.yml </code>配置文件才会生效</p><p>重新启动，就可以了</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117207.png" alt="image.png"></p><blockquote><p>很多时候不要去嘲讽那些守旧的人，特别是<code>java8</code>程序员，他们吃过的盐比我们吃过的饭还多。哈哈哈</p></blockquote><h3 id="nacos服务发现-1"><a href="#nacos服务发现-1" class="headerlink" title="nacos服务发现"></a><code>nacos</code>服务发现</h3><h4 id="服务提供端-1"><a href="#服务提供端-1" class="headerlink" title="服务提供端"></a>服务提供端</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-nacos-discovery-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p><code>bootstrap.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-producer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudNacosProducerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(SpringCloudNacosProducerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sayHi</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;producer: &quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目后将会在这里看到：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117652.png" alt="image.png"></p><p>可以访问：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070118429.png" alt="image.png"></p><h4 id="服务的消费端"><a href="#服务的消费端" class="headerlink" title="服务的消费端"></a>服务的消费端</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-nacos-discovery-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p><code>bootstrap.yml</code> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(NacosConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ConsumerController</span><span class="params">(RestTemplate restTemplate)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.restTemplate = restTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;consumer/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">consumer</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8080/get?name=&#123;name&#125;&quot;</span>, String.class, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070118463.png" alt="image.png"></p><p>成功了</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务发现 </tag>
            
            <tag> 注册中心 </tag>
            
            <tag> 服务注册 </tag>
            
            <tag> nacos </tag>
            
            <tag> CAP </tag>
            
            <tag> 一致性算法 </tag>
            
            <tag> 共识算法 </tag>
            
            <tag> raft </tag>
            
            <tag> paxos </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001SpringCloud系列——Eureka和其他方案（一）</title>
      <link href="/2022/11/07/02springcloud/001SpringCloud%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94Eureka%E5%92%8C%E5%85%B6%E4%BB%96%E6%96%B9%E6%A1%88%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/11/07/02springcloud/001SpringCloud%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94Eureka%E5%92%8C%E5%85%B6%E4%BB%96%E6%96%B9%E6%A1%88%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>仅用于当字典查</p><h1 id="Eureka的理论部分"><a href="#Eureka的理论部分" class="headerlink" title="Eureka的理论部分"></a>Eureka的理论部分</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>Eureka是一个服务注册和发现的<strong>注册中心</strong></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070112403.png"></p><p>需要注意上图在 Eureka Server 和 Service Provider 这两个部分可以做集群</p><p>Service Provider 先将自己的服务注册到注册中心 Eureka Server 中，接着 Service Consumer 也注册到 注册中心中，然后根据自己的需要选择服务</p><p>注册中心将服务提供者的地址发送给 Service Consumer 中，Service Consumer在根据地址远程调用 Service Provider</p><h2 id="Eureka-Server-和-Eureka-Client-的故事"><a href="#Eureka-Server-和-Eureka-Client-的故事" class="headerlink" title="Eureka Server 和 Eureka Client 的故事"></a>Eureka Server 和 Eureka Client 的故事</h2><p>我们以房东和租户之间的关系来对照 Eureka Server 和 Eureka Client 之间的关系</p><table><thead><tr><th>租户每 30 天需要交房租给房东</th><th>Eureka Client 每 30 秒对 Eureka Server 发送一次心跳包</th></tr></thead><tbody><tr><td>租户如果90天（也就是3个月）没交房租，房子和押金都会被房东收回</td><td>Eureka Server 发现某个 Eureka Client 超过 90 秒都没发送心跳包，Eureka Server会从注册表中把该 Eureka Client 删除</td></tr></tbody></table><h1 id="整合Eureka（单机）"><a href="#整合Eureka（单机）" class="headerlink" title="整合Eureka（单机）"></a>整合Eureka（单机）</h1><h2 id="父项目"><a href="#父项目" class="headerlink" title="父项目"></a>父项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.zhazha.springcloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springcloud_study_parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;cloud-provider-payment8001&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.7.1&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2021.0.3&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2021.1&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;8.0.29&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.2.11&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.13.1&lt;/version&gt;</span><br><span class="line">                &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.17.2&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.18.24&lt;/version&gt;</span><br><span class="line">                &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;finalName&gt;springcloud_study_parent&lt;/finalName&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.7.1&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">                    &lt;addResources&gt;true&lt;/addResources&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="创建-api-项目"><a href="#创建-api-项目" class="headerlink" title="创建 api 项目"></a>创建 api 项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud_study_parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.22&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.8.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud.entities;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Payment implements Serializable &#123;</span><br><span class="line">private Long id;</span><br><span class="line">private String serial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.zhazha.springcloud.utils;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class CommonResult&lt;T&gt; implements Serializable &#123;</span><br><span class="line">private Integer code;</span><br><span class="line">private String message;</span><br><span class="line">private T data;</span><br><span class="line"></span><br><span class="line">public CommonResult(Integer code, String message) &#123;</span><br><span class="line">this.code = code;</span><br><span class="line">this.message = message;</span><br><span class="line">this.data = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建注册中心项目"><a href="#创建注册中心项目" class="headerlink" title="创建注册中心项目"></a>创建注册中心项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud_study_parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-eureka-server7001&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7001</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false # false表示不向注册中心注册自己</span><br><span class="line">    fetch-registry: false # false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class EurekaMain7001 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(EurekaMain7001.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud_study_parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-provider-payment8001&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-payment-service</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver             # mysql驱动包</span><br><span class="line">    url: jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapperLocations: classpath:mapper/*.xml</span><br><span class="line">  type-aliases-package: com.zhazha.springcloud.entities    # 所有Entity别名类所在包</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line"></span><br><span class="line">#Eureka配置</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    # 表示是否将自己注册进EurekaServer，默认为 true</span><br><span class="line">    register-with-eureka: true</span><br><span class="line">    # 是否从EurekaServer抓取已有的注册信息，默认为 true 。单节点无所谓，</span><br><span class="line">    # 集群必须设置为true才能配合 ribbon 使用负载均衡</span><br><span class="line">    fetch-registry: true</span><br><span class="line">    # EurekaServer的地址</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:7001/eureka</span><br></pre></td></tr></table></figure><p>mybatis的Mapper xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.zhazha.springcloud.dao.PaymentDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap type=&quot;payment&quot; id=&quot;PaymentMap&quot;&gt;</span><br><span class="line">        &lt;result property=&quot;id&quot; column=&quot;id&quot; jdbcType=&quot;BIGINT&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;serial&quot; column=&quot;serial&quot; jdbcType=&quot;VARCHAR&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;getPaymentById&quot; resultMap=&quot;PaymentMap&quot;&gt;</span><br><span class="line">        select * from payment p where p.id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(value = &quot;com.zhazha.springcloud.dao&quot;)</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class PaymentMain8001 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(PaymentMain8001.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud.dao;</span><br><span class="line"></span><br><span class="line">import com.zhazha.springcloud.entities.Payment;</span><br><span class="line">import org.apache.ibatis.annotations.Insert;</span><br><span class="line">import org.apache.ibatis.annotations.Param;</span><br><span class="line">import org.apache.ibatis.annotations.SelectProvider;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface PaymentDao &#123;</span><br><span class="line">@Insert(&quot;insert into payment(serial) values (#&#123;serial&#125;)&quot;)</span><br><span class="line">int create(Payment payment);</span><br><span class="line">//@Select(&quot;select * from payment p where p.id = #&#123;id&#125;&quot;)</span><br><span class="line">Payment getPaymentById(@Param(&quot;id&quot;) Long id);</span><br><span class="line"></span><br><span class="line">@SelectProvider(type = PaymentProvider.class, method = &quot;getAll&quot;)</span><br><span class="line">List&lt;Payment&gt; getAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud.dao;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.jdbc.SQL;</span><br><span class="line"></span><br><span class="line">public class PaymentProvider &#123;</span><br><span class="line">public String getAll() &#123;</span><br><span class="line">return new SQL().SELECT(&quot;*&quot;)</span><br><span class="line">.FROM(&quot;payment&quot;).toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意 <code>public String getAll()</code>函数必须是 <code>public</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud.service;</span><br><span class="line"></span><br><span class="line">import com.zhazha.springcloud.entities.Payment;</span><br><span class="line"></span><br><span class="line">public interface PaymentService &#123;</span><br><span class="line">int create(Payment payment);</span><br><span class="line">Payment getPaymentById(Long id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud.service.impl;</span><br><span class="line"></span><br><span class="line">import com.zhazha.springcloud.dao.PaymentDao;</span><br><span class="line">import com.zhazha.springcloud.entities.Payment;</span><br><span class="line">import com.zhazha.springcloud.service.PaymentService;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class PaymentServiceImpl implements PaymentService &#123;</span><br><span class="line">@Resource</span><br><span class="line">private PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int create(Payment payment) &#123;</span><br><span class="line">return paymentDao.create(payment);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public Payment getPaymentById(Long id) &#123;</span><br><span class="line">return paymentDao.getPaymentById(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line">import com.zhazha.springcloud.entities.Payment;</span><br><span class="line">import com.zhazha.springcloud.service.PaymentService;</span><br><span class="line">import com.zhazha.springcloud.utils.CommonResult;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">@RequestMapping(&quot;payment&quot;)</span><br><span class="line">public class PaymentController &#123;</span><br><span class="line">@Resource</span><br><span class="line">private PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 返回给前端的结果集</span><br><span class="line"> * 下面的 RequestBody 注解如果不加上， restTemplate 的 postForObject 将无法保存参数</span><br><span class="line"> * @param payment</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@PostMapping(value = &quot;create&quot;)</span><br><span class="line">public CommonResult create(@RequestBody Payment payment) &#123;</span><br><span class="line">Integer result = paymentService.create(payment);</span><br><span class="line">log.info(&quot;******插入结果：&quot; + result);</span><br><span class="line">if (result &gt; 0) &#123;</span><br><span class="line">return new CommonResult(200, &quot;插入数据库成功&quot;, result);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return new CommonResult(444, &quot;插入数据库失败&quot;, null);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@GetMapping(value = &quot;get/&#123;id&#125;&quot;)</span><br><span class="line">public CommonResult getPaymentByID(@PathVariable(&quot;id&quot;) Long id) &#123;</span><br><span class="line">Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">log.info(&quot;******插入结果：&quot; + payment);</span><br><span class="line">if (payment != null) &#123;</span><br><span class="line">return new CommonResult(200, &quot;查询成功&quot;, payment);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return new CommonResult(444, &quot;没有查询记录&quot;, null);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>@RequestBody</code>和<code>@ResponseBody</code>的功能</p><p>如果不使用 <code>@RequestBody</code>每个属性对应一个参数，参数在请求的URL中</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070112109.png"></p><p>如果使用 <code>@RequestBody</code>的话，一个实体对应一个参数，参数不在请求的URL中</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070112323.png"></p><ul><li><code>@RequestBody</code>的作用是：读取<code>Request</code>请求的<code>body</code>部分数据，使用系统默认配置的<code>HttpMessageConverter</code>进行解析，然后把相应的数据绑定到要返回的对象上，再把<code>HttpMessageConverter</code>返回的对象数据绑定到 <code>controller</code>中方法的参数上；</li><li><code>@ResponseBody</code>的作用是：用于将<code>Controller</code>的方法返回的对象，通过适当的<code>HttpMessageConverter</code>转换为指定格式后，写入到Response对象的body数据区。返回的数据不是<code>html</code>标签的页面，而是其他某种格式的数据时（如<code>json</code>、<code>xml</code>等）使用</li></ul><p>添加日志显示 mybatis sql:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  file:</span><br><span class="line">  # 日志保存位置</span><br><span class="line">    path: D:\programs\codes\java\springcloud_study_parent\logs</span><br><span class="line">  level:</span><br><span class="line">    # 某包下日志打印 level</span><br><span class="line">    com:</span><br><span class="line">      zhazha:</span><br><span class="line">        springcloud:</span><br><span class="line">          dao: debug</span><br></pre></td></tr></table></figure><p>访问： <a href="http://localhost:7001/">http://localhost:7001/</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070112524.png"></p><p>就能够看到上面已经发现了我们的 8001 项目</p><p>可以访问：</p><p><a href="http://localhost:8001/payment/get/2">http://localhost:8001/payment/get/2</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070112312.png"></p><h2 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h2><p>maven pom.xml:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud_study_parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.zhazha.springcloud&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-consumer-order80&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--eureka-client--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.zhazha.springcloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--boot web actuator--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--一般通用配置--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>application.yml:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-order-service</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    #表示是否将自己注册进EurekaServer默认为true。</span><br><span class="line">    register-with-eureka: true</span><br><span class="line">    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span><br><span class="line">    fetchRegistry: true</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:7001/eureka</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class MainApp80 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">SpringApplication.run(MainApp80.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">@LoadBalanced</span><br><span class="line">public RestTemplate restTemplate() &#123;</span><br><span class="line">return new RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line">import com.zhazha.springcloud.dto.CommonResult;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">@RequestMapping(&quot;consumer&quot;)</span><br><span class="line">public class OrderController &#123;</span><br><span class="line"></span><br><span class="line">@Resource</span><br><span class="line">private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">public static final String INVOKE_URL = &quot;http://CLOUD-PAYMENT-SERVICE&quot;;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;payment/get/&#123;id&#125;&quot;)</span><br><span class="line">public CommonResult get(@PathVariable(&quot;id&quot;) Long id) &#123;</span><br><span class="line">return restTemplate.getForObject(INVOKE_URL + &quot;/payment/get/&#123;id&#125;&quot;, CommonResult.class, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;payment/eureka&quot;)</span><br><span class="line">public String orderEureka() &#123;</span><br><span class="line">return &quot;order80: &quot; + restTemplate.getForObject(INVOKE_URL + &quot;/payment/eureka&quot;, String.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问: <a href="http://localhost:8080/consumer/payment/get/2">http://localhost:8080/consumer/payment/get/2</a></p><h1 id="整合Eureka（集群）"><a href="#整合Eureka（集群）" class="headerlink" title="整合Eureka（集群）"></a>整合<code>Eureka</code>（集群）</h1><h2 id="eureka-server集群"><a href="#eureka-server集群" class="headerlink" title="eureka server集群"></a>eureka server集群</h2><p>整合<code>Eureka</code>集群的大体思路是：</p><p><code>Eureka</code>的注册中心是无法自己给自己注册的，但是多个注册中心是可以相互注册的</p><p>比如 <code>注册中心A</code> 不能将自己注册到<code>注册中心A</code>，但是可以将自己注册到 <code>注册中心B</code>，而<code>注册中心B</code>也可以将自己注册给<code>注册中心A</code></p><p>现在我们先新建两个项目试试</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070112315.png"></p><p>将 7001 项目中的配置和源码复制到 7002 中</p><p>接着只要修改：</p><p>port <strong>:</strong> 7001</p><p>hostname <strong>:</strong> eureka7001.com</p><p>defaultZone <strong>: http:&#x2F;&#x2F;</strong> eureka7002.com:7002&#x2F;eureka&#x2F;</p><p>这三个就可以了</p><p>7001：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7001</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka7001.com #eureka服务端的实例名称</span><br><span class="line">  client:</span><br><span class="line">    # false表示不向注册中心注册自己</span><br><span class="line">    register-with-eureka: false</span><br><span class="line">    # false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="line">    fetch-registry: false</span><br><span class="line">    service-url:</span><br><span class="line">      # 设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span><br><span class="line">      # defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br><span class="line">      defaultZone: http://eureka7002.com:7002/eureka/</span><br></pre></td></tr></table></figure><p>7002:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7002</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka7002.com #eureka服务端的实例名称</span><br><span class="line">  client:</span><br><span class="line">    # false表示不向注册中心注册自己</span><br><span class="line">    register-with-eureka: false</span><br><span class="line">    # false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="line">    fetch-registry: false</span><br><span class="line">    service-url:</span><br><span class="line">      # 设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span><br><span class="line">      # defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka/</span><br></pre></td></tr></table></figure><h2 id="eureka服务提供方集群"><a href="#eureka服务提供方集群" class="headerlink" title="eureka服务提供方集群"></a>eureka服务提供方集群</h2><p>最后服务的注册项目： 8001 <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070112022.png">需要修改一部分配置：</p><p>defaultZone <strong>: http:&#x2F;&#x2F;</strong> eureka7001.com:7001&#x2F;eureka&#x2F;,<a href="http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</a> <em>#将服务注册到 Eureka Server 集群</em></p><p>然后再创建一个<code>cloud-provider-payment8002</code>, 配置基本一样</p><p>**</p><p>完整代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-payment-service</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    url: jdbc:mysql://localhost:3306/springcloud2022?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br><span class="line">#Eureka配置</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    # 表示是否将自己注册进EurekaServer，默认为 true</span><br><span class="line">    register-with-eureka: true</span><br><span class="line">    # 是否从EurekaServer抓取已有的注册信息，默认为 true 。单节点无所谓，</span><br><span class="line">    # 集群必须设置为true才能配合 ribbon 使用负载均衡</span><br><span class="line">    fetch-registry: true</span><br><span class="line">    # EurekaServer的地址</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7001.com:7002/eureka</span><br><span class="line">mybatis:</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">  mapper-locations: classpath:mapper/*.xml</span><br><span class="line">logging:</span><br><span class="line">  file:</span><br><span class="line">    path: D:\programs\codes\java\springcloud_study_parent\logs</span><br><span class="line">  level:</span><br><span class="line">    com:</span><br><span class="line">      zhazha:</span><br><span class="line">        springcloud:</span><br><span class="line">          dao: debug</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8002</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-payment-service</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    url: jdbc:mysql://localhost:3306/springcloud2022?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br><span class="line">#Eureka配置</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    # 表示是否将自己注册进EurekaServer，默认为 true</span><br><span class="line">    register-with-eureka: true</span><br><span class="line">    # 是否从EurekaServer抓取已有的注册信息，默认为 true 。单节点无所谓，</span><br><span class="line">    # 集群必须设置为true才能配合 ribbon 使用负载均衡</span><br><span class="line">    fetch-registry: true</span><br><span class="line">    # EurekaServer的地址</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7001.com:7002/eureka</span><br><span class="line">mybatis:</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">  mapper-locations: classpath:mapper/*.xml</span><br><span class="line">logging:</span><br><span class="line">  file:</span><br><span class="line">    path: D:\programs\codes\java\springcloud_study_parent\logs</span><br><span class="line">  level:</span><br><span class="line">    com:</span><br><span class="line">      zhazha:</span><br><span class="line">        springcloud:</span><br><span class="line">          dao: debug</span><br></pre></td></tr></table></figure><p>修改 <code>hosts </code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 eureka7001.com</span><br><span class="line">127.0.0.1 eureka7002.com</span><br></pre></td></tr></table></figure><p>这里我们需要注意</p><p><code>@LoadBalanced</code>这个注解, 开启客户端负载均衡. 这个之后会讲</p><p>接着访问: <a href="http://localhost/consumer/payment/eureka">http://localhost/consumer/payment/eureka</a> 就能看到 8001 和 8002 轮询出现</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113018.png"></p><p>这里就没截图 8002 了</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113433.png"></p><p>成功了，而且是两个<code>Eureka Server</code> 都有</p><p>这里就不粘贴 <code>eureka02.com</code>的界面了</p><p>从图中需要知道的信息：</p><p><code>eureka.instance.hostname=eureka7001.com</code>这个配置最后会显示在</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113724.png"></p><p><code>spring.application.name=cloud-payment-service</code>这个配置最后会显示在<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113624.png"></p><h2 id="Eureka的自我保护机制"><a href="#Eureka的自我保护机制" class="headerlink" title="Eureka的自我保护机制"></a>Eureka的自我保护机制</h2><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113420.png"></p><p>紧急情况！ EUREKA 可能不正确地声称实例已启动，但实际上并未启动。续订少于阈值，因此为了安全起见，实例不会过期。</p><p>有时候我们能够在 Eureka 注册中心页面上看到上面这样的警告</p><p>这表明注册中心（7001）没有收到服务的提供者（8001）的心跳包，但实际的服务还会显示在 注册中心页面中</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113814.png"></p><p>Eureka 注册中心的虽然记录下服务提供者的信息，但实际上已经无法继续提供服务了</p><p>这是 Eureka 自我保护机制的策略：“好死不如赖活”</p><p>这种情况存在弊端，服务的消费端可能会正巧需要获得该服务，导致服务调用失败。此时，我们可以通过客户端的容错机制来解决此问题，比如：Ribbon和Hystrix</p><p>如果需要关闭 Eureka 的自我保护机制，则可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  server:</span><br><span class="line">    enable-self-preservation: false # false 关闭 Eureka 的自我保护机制，默认是开启,一般不建议大家修改</span><br></pre></td></tr></table></figure><h3 id="修改心跳包的周期"><a href="#修改心跳包的周期" class="headerlink" title="修改心跳包的周期"></a>修改心跳包的周期</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">instance:</span><br><span class="line">  #心跳检测与续约时间</span><br><span class="line">  #开发时设置小点，保证服务关闭后注册中心及时剔除服务</span><br><span class="line">  #Eureka客户端向服务端发送心跳的时间间隔，单位为秒（默认是30秒）</span><br><span class="line">  lease-renewal-interval-in-seconds: 1</span><br><span class="line">  #Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒（默认是90秒），超时将剔除服务</span><br><span class="line">  lease-expiration-duration-in-seconds: 2</span><br></pre></td></tr></table></figure><h3 id="主机名称-服务名称修改"><a href="#主机名称-服务名称修改" class="headerlink" title="主机名称:服务名称修改"></a>主机名称:服务名称修改</h3><p>自定义一个客户端的名字</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113270.png"></p><p>只需要在 application.yml 文件中加上:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    instance-id: payment8001</span><br></pre></td></tr></table></figure><h3 id="访问信息有IP信息提示"><a href="#访问信息有IP信息提示" class="headerlink" title="访问信息有IP信息提示"></a>访问信息有IP信息提示</h3><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113450.png"></p><p>如果你左下角蓝色长方形中的网址没有 ip 显示则需要:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br></pre></td></tr></table></figure><h2 id="使用DiscoveryClient服务发现"><a href="#使用DiscoveryClient服务发现" class="headerlink" title="使用DiscoveryClient服务发现"></a>使用<code>DiscoveryClient</code>服务发现</h2><ol><li>在 application 启动类上添加<code>@EnableDiscoveryClient</code>注解</li><li>去controller里面注入</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Resource</span><br><span class="line">private DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">@RequestMapping(value = &quot;discovery&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Object discovery() &#123;</span><br><span class="line">    List&lt;String&gt; services = this.discoveryClient.getServices();</span><br><span class="line">    for (String service : services) &#123;</span><br><span class="line">        log.info(&quot;*********** service: &quot; + service);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;CLOUD-PAYMENT-SERVICE&quot;);</span><br><span class="line">    for (ServiceInstance instance : instances) &#123;</span><br><span class="line">        log.info(&quot;service application host = &#123;&#125;, port = &#123;&#125;, uri = &#123;&#125;&quot;, instance.getHost(), instance.getPort(), instance.getUri());</span><br><span class="line">    &#125;</span><br><span class="line">    return this.discoveryClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.z.s.controller.PaymentController: *********** service: cloud-payment-service</span><br><span class="line">c.z.s.controller.PaymentController: service application host = 192.168.19.1, port = 8001, uri = http://192.168.19.1:8001</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;services&quot;: [</span><br><span class="line">    &quot;cloud-payment-service&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;order&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Eureka停更"><a href="#Eureka停更" class="headerlink" title="Eureka停更"></a>Eureka停更</h2><p>Eureka 目前已经停更好几年了，很多公司也早早转移战场</p><p>目前市面上的代替方案有很多：</p><ol><li>zookeeper（CP） paxos 共识</li><li>consul（CP） raft 共识</li><li>nacos（CP、AP） jraft + distro ★ 推荐使用</li></ol><h1 id="zookeeper代替方案"><a href="#zookeeper代替方案" class="headerlink" title="zookeeper代替方案"></a>zookeeper代替方案</h1><h2 id="zk启动"><a href="#zk启动" class="headerlink" title="zk启动"></a>zk启动</h2><p>直接在 linux 的 docker 环境下启动</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113964.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.9&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  zoo1:</span><br><span class="line">    image: zookeeper:3.8.0</span><br><span class="line">    restart: always</span><br><span class="line">    hostname: zoo1</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;2181:2181&quot;</span><br><span class="line">    environment:</span><br><span class="line">      ZOO_MY_ID: 1</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/root/zookeeper/zoo.cfg:/conf/zoo.cfg&quot;</span><br><span class="line">    privileged: true</span><br><span class="line">    container_name: zoo1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/data</span><br><span class="line">dataLogDir=/datalog</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line">autopurge.snapRetainCount=3</span><br><span class="line">autopurge.purgeInterval=0</span><br><span class="line">maxClientCnxns=60</span><br><span class="line">standaloneEnabled=true</span><br><span class="line">admin.enableServer=true</span><br><span class="line">server.1=localhost:2888:3888;2181</span><br></pre></td></tr></table></figure><p><code>docker compose up -d</code> 创建并启动 <code>zookeeper</code></p><p>这里需要注意 zookeeper 的版本 3.8.0</p><p>如果在window下启动, 需要修改 <code>zoo_sample.cfg</code>为 <code>zoo.cfg</code></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113616.png"></p><p>然后在控制台下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.cmd</span><br></pre></td></tr></table></figure><h2 id="zk服务提供方"><a href="#zk服务提供方" class="headerlink" title="zk服务提供方"></a>zk服务提供方</h2><p>创建项目：</p><p><code>cloud-provider-payment8004</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud_study_parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-provider-payment8004&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- SpringBoot整合zookeeper客户端,这里不再使用Eureka进行服务注册，所以这里导入的是Zookeeper的相关依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt;</span><br><span class="line">            &lt;!-- 先排除自带的zookeeper --&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--添加zookeeper3.8.0版本，注意这里要和 zookeeper 应用启动的版本一致 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 热部署依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>这里 <code>zookeeper </code>的版本 <code>jar </code>包 是 <code>3.8.0</code>，要和 <code>docker </code>的 <code>zookeeper </code>版本一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class PaymentMain8004 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">SpringApplication.run(PaymentMain8004.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class PaymentController &#123;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">private String serverPort;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;payment/zk&quot;)</span><br><span class="line">public String paymentZk() &#123;</span><br><span class="line">    return &quot;springcloud with zookeeper:&quot;+serverPort+&quot;\t&quot;+ UUID.randomUUID();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们能够看到 zookeeper 中被注册的服务：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114008.png"></p><p>访问：<a href="http://localhost:8004/payment/zk">http://localhost:8004/payment/zk</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114257.png"></p><p>当我们关闭 8004 项目，zookeeper 会一定时间内心跳验证</p><p>然后立即删除掉服务</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114613.png"></p><p>这和Eureka不相同</p><p>zookeeper CP 与 Eureka AP</p><p>再久一点连 <code>service</code> 节点都没了</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd798a5c807a4c89b0d00c9edcdb6881~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="zk服务消费方"><a href="#zk服务消费方" class="headerlink" title="zk服务消费方"></a>zk服务消费方</h2><p>创建 <code>cloud-consumerzk-order80</code> 项目</p><p><code>pom.xml</code> 和 8004 项目一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-consumer-order</span><br><span class="line">  cloud:</span><br><span class="line">    zookeeper:</span><br><span class="line">      connect-string: 192.168.0.155:2181</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class OrderZKMain80 &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">@LoadBalanced</span><br><span class="line">public RestTemplate restTemplate() &#123;</span><br><span class="line">return new RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">SpringApplication.run(OrderZKMain80.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class OrderZKController &#123;</span><br><span class="line"></span><br><span class="line">public static final String INVOKE_URL = &quot;http://cloud-provider-payment&quot;;</span><br><span class="line"></span><br><span class="line">@Resource</span><br><span class="line">private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/consumer/payment/zk&quot;)</span><br><span class="line">public String paymentInfo() &#123;</span><br><span class="line">return restTemplate.getForObject(INVOKE_URL + &quot;/payment/zk&quot;, String.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost/consumer/payment/zk">http://localhost/consumer/payment/zk</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114708.png"></p><p>远程调用成功</p><h1 id="Consul代替方案"><a href="#Consul代替方案" class="headerlink" title="Consul代替方案"></a>Consul代替方案</h1><h2 id="Consul是什么？"><a href="#Consul是什么？" class="headerlink" title="Consul是什么？"></a>Consul是什么？</h2><p>Consul包含多个组件,但是作为一个整体,为你的基础设施提供<strong>服务发现</strong>和<strong>服务配置</strong>的工具.他提供以下关键特性:</p><ul><li><strong>服务发现</strong> Consul的客户端可用提供一个服务,比如 api 或者mysql ,另外一些客户端可用使用Consul去发现一个指定服务的提供者.通过DNS或者HTTP应用程序可用很容易的找到他所依赖的服务.</li><li><strong>健康检查</strong> Consul客户端可用提供任意数量的健康检查,指定一个服务(比如:webserver是否返回了200 OK 状态码)或者使用本地节点(比如:内存使用是否大于90%). 这个信息可由operator用来监视集群的健康.被服务发现组件用来避免将流量发送到不健康的主机.</li><li><strong>Key&#x2F;Value存储</strong> 应用程序可用根据自己的需要使用Consul的层级的Key&#x2F;Value存储.比如动态配置,功能标记,协调,领袖选举等等,简单的HTTP API让他更易于使用.</li><li><strong>安全服务通信</strong>：Consul可以为服务生成和分发TLS证书，以建立相互的TLS连接。意图可用于定义允许哪些服务通信。服务分割可以很容易地进行管理，其目的是可以实时更改的，而不是使用复杂的网络拓扑和静态防火墙规则。</li><li><strong>多数据中心</strong>: Consul支持开箱即用的多数据中心.这意味着用户不需要担心需要建立额外的抽象层让业务扩展到多个区域.</li></ul><p>Consul面向DevOps和应用开发者友好.是他适合现代的弹性的基础设施.</p><p>需要注意它是用 golang 写的</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114129.png"></p><ol><li>节点分类</li></ol><!----><ol><li><ol><li>Consul 分为 Client 和 Server两种节点(所有的节点也被称为Agent)，其中Server 节点保存数据，Client 负责健康检查及转发数据请求到Server。所有的 Server 节点组成了一个集群，他们之间运行 Raft 协议，通过共识仲裁选举出 Leader。所有的业务数据都通过 Leader 写入到集群中做持久化，当有半数以上的节点存储了该数据后，Server集群才会返回ACK，从而保障了数据的强一致性。所有的 Follower 会跟随 Leader 的脚步，保证其有最新的数据副本</li></ol></li></ol><!----><ol start="2"><li>数据中心内部通信</li></ol><!----><ol><li><ol><li>Consul 数据中心内部的所有节点通过 Gossip 协议（8301端口）维护成员关系，这也被叫做LAN GOSSIP。当数据中心内部发生拓扑变化时，存活的节点们能够及时感知，比如Server节点down掉后，Client 就会将对应Server节点从可用列表中剥离出去。集群内数据的读写请求既可以直接发到Server，也可以通过 Client 转发到Server，请求最终会到达 Leader 节点。在允许数据轻微陈旧的情况下，读请求也可以在普通的Server节点完成，集群内数据的读写和复制都是通过8300端口完成</li></ol></li></ol><!----><ol start="3"><li>跨数据中心通信</li></ol><!----><ol><li><ol><li>Consul支持多数据中心，上图中有两个 DataCenter，他们通过网络互联，注意为了提高通信效率，只有Server节点才加入跨数据中心的通信。跨数据中心的 Gossip 协议使用8302端口，也被称为WAN GOSSIP，是全局范围内唯一的。通常情况下，不同的Consul数据中心之间不会复制数据。当请求另一个数据中心的资源时，Server 会将其转发到目标数据中心的随机Server 节点，该节点随后可以转发给本地 Leader 处理</li></ol></li></ol><table><thead><tr><th><strong>端口</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>8300</td><td>RPC 调用</td></tr><tr><td>8301</td><td>数据中心内部 GOSSIP 协议使用</td></tr><tr><td>8302</td><td>跨数据中心 GOSSIP 协议使用</td></tr><tr><td>8500</td><td>HTTP API 和 Web 接口使用</td></tr><tr><td>8600</td><td>用于 DNS 服务端</td></tr></tbody></table><h2 id="Consul服务的注册与发现"><a href="#Consul服务的注册与发现" class="headerlink" title="Consul服务的注册与发现"></a>Consul服务的注册与发现</h2><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114096.png"></p><p>绿色方框是服务的注册中心，使用 raft 共识算法选举出 leader 和 follower 两种节点</p><p>红色是服务的注册方，consul 的 client模式 将服务注册到注册中心</p><p>蓝色是服务的消费方，consul client 去注册中心拿服务信息，接着识别信息远程调用红色节点的服务</p><p>dubbo经典调用关系.jpg</p><h2 id="springcloud整合Consul"><a href="#springcloud整合Consul" class="headerlink" title="springcloud整合Consul"></a>springcloud整合Consul</h2><h3 id="服务的提供方"><a href="#服务的提供方" class="headerlink" title="服务的提供方"></a>服务的提供方</h3><p>创建<code>cloud-providerconsul-payment8006</code>项目</p><p>添加<code>pom.xml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud_study_parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-providerconsul-payment8006&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;&lt;!--SpringCloud consul-server --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- SpringBoot整合Web组件 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--日常通用jar包配置--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8006</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consul-provider-payment</span><br><span class="line">  cloud:</span><br><span class="line">    consul:</span><br><span class="line">      port: 8500</span><br><span class="line">      host: 127.0.0.1</span><br><span class="line">      discovery:</span><br><span class="line">        service-name: service-producer</span><br></pre></td></tr></table></figure><table><thead><tr><th>If you use <a href="https://docs.spring.io/spring-cloud-consul/docs/current/reference/html/#spring-cloud-consul-config">Spring Cloud Consul Config</a>, and you have set spring.cloud.bootstrap.enabled&#x3D;true or spring.config.use-legacy-processing&#x3D;true or use spring-cloud-starter-bootstrap, then the above values will need to be placed in bootstrap.yml instead of application.yml.</th></tr></thead></table><p>这里需要注意到，如果是开启了 bootstrap 主键，则需要将 上面的 配置从 application.yml 转移到 bootstrap.yml 中</p><p>To disable the Consul Discovery Client you can set spring.cloud.consul.discovery.enabled to false. Consul Discovery Client will also be disabled when spring.cloud.discovery.enabled is set to false.</p><p>并且如果你需要禁止 Consul Discovery Client（也就是我们现在这个项目）去发现服务，可以<code>spring.cloud.consul.discovery.enabled </code>设置为<code> false</code></p><p>To disable the service registration you can set spring.cloud.consul.discovery.register to false.</p><p>同时呢，要禁止服务注册，你可以设置 <code>spring.cloud.consul.discovery.register</code>为 <code>false</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class PaymentConsulMain8006 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">SpringApplication.run(PaymentConsulMain8006.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:8500/">http://localhost:8500/</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114418.png"></p><p>可以看到<code>spring.cloud.consul.discovery.service-name=service-producer</code>配置决定了 service 中的名字，<strong>后期客户端会根据这个名称来进行服务调用。</strong></p><p>而我们的 <code>spring.application.name=consul-provider-payment-8006</code>出现在<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114458.png"></p><p>表示 <code>service-producer</code>下面有一个叫<code>consul-provider-payment-8006</code>的实例</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114951.png"></p><h3 id="服务的消费方"><a href="#服务的消费方" class="headerlink" title="服务的消费方"></a>服务的消费方</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;!--SpringCloud consul-server --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!-- SpringBoot整合Web组件 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--日常通用jar包配置--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">           &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">           &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">###consul服务端口号</span><br><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-consumer-order</span><br><span class="line">  ####consul注册中心地址</span><br><span class="line">  cloud:</span><br><span class="line">    consul:</span><br><span class="line">      host: 127.0.0.1</span><br><span class="line">      port: 8500</span><br><span class="line">      discovery:</span><br><span class="line">        #hostname: 127.0.0.1</span><br><span class="line">        service-name: $&#123;spring.application.name&#125;</span><br></pre></td></tr></table></figure><p>这里我们如果要把消费端变得更加纯粹，可以添加<code>spring.cloud.consul.discovery.register=false</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class OrderConsulMain80 &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">@LoadBalanced</span><br><span class="line">public RestTemplate restTemplate() &#123;</span><br><span class="line">return new RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">SpringApplication.run(OrderConsulMain80.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class OrderConsulController &#123;</span><br><span class="line"></span><br><span class="line">// 服务的提供的 spring.cloud.consul.discovery.service-name=service-producer </span><br><span class="line">// 配置决定了，服务的消费方使用的地址</span><br><span class="line">// 这里的地址不再是服务提供方的 spring.application.name</span><br><span class="line">public static final String INVOKE_URL = &quot;http://service-producer&quot;;</span><br><span class="line"></span><br><span class="line">@Resource</span><br><span class="line">private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;consumer/payment/consul&quot;)</span><br><span class="line">public String paymentInfo() &#123;</span><br><span class="line">return restTemplate.getForObject(INVOKE_URL + &quot;/payment/consul&quot;, String.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>下期</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eureka </tag>
            
            <tag> zookeeper </tag>
            
            <tag> consul </tag>
            
            <tag> 服务发现 </tag>
            
            <tag> 注册中心 </tag>
            
            <tag> 服务注册 </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-Springboot自定义配置类</title>
      <link href="/2022/11/04/04springboot/01Springboot%E8%87%AA%E5%AE%9A%E4%B9%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%B1%BB/"/>
      <url>/2022/11/04/04springboot/01Springboot%E8%87%AA%E5%AE%9A%E4%B9%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.yuque.com/attachments/yuque/0/2022/mmap/22744322/1665395912889-b60fb6ee-288d-4269-8fd6-6f8a92a6a5f2.mmap">Springboot自定义配置类.mmap</a></p><p><a href="https://www.yuque.com/attachments/yuque/0/2022/docx/22744322/1665396003640-0ef35eda-8083-4864-84ef-b532c184abc7.docx">Springboot自定义配置类.docx</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于笔记是由MindManager转过来的，所以可能会有点乱，可以直接看上面的 mmap 脑图</p><h1 id="Springboot自定义配置类"><a href="#Springboot自定义配置类" class="headerlink" title="Springboot自定义配置类"></a>Springboot自定义配置类</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>本文参考官方文档: </p><p><a href="https://docs.spring.io/spring-boot/docs/2.6.x/reference/html/configuration-metadata.html">https://docs.spring.io/spring-boot/docs/2.6.x/reference/html/configuration-metadata.html</a></p><h1 id="2-7-x以前的版本"><a href="#2-7-x以前的版本" class="headerlink" title="2.7.x以前的版本"></a>2.7.x以前的版本</h1><h2 id="引出相关知识"><a href="#引出相关知识" class="headerlink" title="引出相关知识"></a>引出相关知识</h2><p>我们可以通过反射子类得到父类的接口</p><p>但我们无法通过任何机制通过父类获得子类</p><h3 id="什么是SPI？"><a href="#什么是SPI？" class="headerlink" title="什么是SPI？"></a>什么是<code>SPI</code>？</h3><ul><li><p>简单点：根据接口找到实现类</p></li><li><p>全名叫<code>Service Provider Interface</code></p><p>是JDK内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL和PostgreSQL都有不同的实现提供给用户，而<strong>Java的SPI机制可以为某个接口寻找服务实现</strong>。<strong>Java中SPI机制主要思想是将装配的控制权移到程序之外</strong>，在模块化设计中这个机制尤其重要，其核心思想就是解耦。</p></li></ul><h3 id="SPI怎么玩"><a href="#SPI怎么玩" class="headerlink" title="SPI怎么玩?"></a><code>SPI</code>怎么玩?</h3><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211050150742.png" alt="image-20221105015035572"></p><h3 id="总结下SPI做了什么？"><a href="#总结下SPI做了什么？" class="headerlink" title="总结下SPI做了什么？"></a>总结下SPI做了什么？</h3><ol><li>功能: 根据接口找实现类</li><li>有接口和实现类的 key value 键值对</li><li>根据条件选实现类</li></ol><p>那么 springboot 自动配置类呢?</p><ul><li><p>肯定有个接口, 实现类</p></li><li><p>肯定有记录机制, 记录着接口和实现类</p><ul><li><p><code>META-INF/spring.factories</code></p></li><li><p>&#96;&#96;&#96;properties<br>org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;<br>com.mycorp.libx.autoconfigure.LibXAutoConfiguration,<br>com.mycorp.libx.autoconfigure.LibXWebAutoConfiguration</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 可以从众多实现类中挑选出符合要求的实现类</span><br><span class="line">  </span><br><span class="line">  - `Conditional`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; 记住这并不意味着springboot使用的SPI机制加载类</span><br><span class="line"></span><br><span class="line">## 回到springboot自动配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![](https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070029822.png)</span><br><span class="line"></span><br><span class="line">&gt; 注意：**自动配置类只能以这种方式加载**。确保他们被定义在特定的包空间，并且**确保他们永远不是组件扫描的目标**。除此之外，**自动配置类不需要开启主键扫描以找到额外的组件。应该改用特定的`@Import`注解。** </span><br><span class="line"></span><br><span class="line">   - 如果你提供特定的web配置，你的类可能需要在`WebMvcAutoConfiguration`之后加载。 </span><br><span class="line"></span><br><span class="line">   - 如果你的配置需要以特定的顺序加载，你可以使用`@AutoConfigureAfter` or `@AutoConfigureBefore`注解。  </span><br><span class="line"></span><br><span class="line">   - &gt; **记住这种方式保证的顺序不能被SpringBoot的组件扫描注解扫描，而是使用`spring.factories`或者`@import`注解导入 否则你会发现顺序不生效**</span><br><span class="line"></span><br><span class="line">   - 就像标准的`@Configuration`类一样，自动配置类被加载的循序只影响他们Bean被定义的顺序。随后创建这些 bean 的顺序不受影响，由每个 bean 的依赖关系和任何 `@DependsOn`  关系决定。  </span><br><span class="line"></span><br><span class="line">   - 如果你想要序排序特定的彼此不应该有任何直接了解的的自动配置。你也可以使用 `@AutoConfigureOrder`注解。该注解就像`@Order`注解一样有相同的语义，为自动配置类提供特定的顺序。 </span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">     ### 条件注解</span><br><span class="line"></span><br><span class="line">     你总是想要去包含一个或多个`@Conditional`注解在你的自动配置类上。`@ConditionalOnMissingBean`注解是一个常见例子，被用于在他们不满足于默认配置时，开发人员重写自动配置&lt;br /&gt;spring boot 包含多个`@Conditional`注解，你可以在你的代码中，通过`@Configuration`类或者个人的`@Bean` 方法重用这些注解。这些注解包括:</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">     | Class Conditions               | 类条件         |</span><br><span class="line">     | ------------------------------ | -------------- |</span><br><span class="line">     | Bean Conditions                | Bean条件       |</span><br><span class="line">     | Property Conditions            | 属性条件       |</span><br><span class="line">     | Resource Conditions            | 资源条件       |</span><br><span class="line">     | Web Application Conditions     | web应用条件    |</span><br><span class="line">     | SpEL Expression ConditionsSpEL | SpEL表达式条件 |</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">     - #### Class Conditions </span><br><span class="line"></span><br><span class="line">        -  使用场景 </span><br><span class="line">           </span><br><span class="line">           - 一般用来表示你是否导入了某个模块</span><br><span class="line">        - `@ConditionalOnClass`  and `@ConditionalOnMissingClass`注解类根据指定类的存在或者不存在而包含。 &lt;br /&gt;由于注解元由ASM解析的事实，你可以使用value属性去引用真实的类，即使该类可能不存在于application的classpath上。&lt;br /&gt;如果你比较喜欢使用字符串去指定类名，你也可以使用 name 属性。 </span><br><span class="line"></span><br><span class="line">           ![image.png](https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042224947.png)</span><br><span class="line"></span><br><span class="line">           - `@ConditionalOnClass(ConnectionFactory.class)` 和 `@ConditionalOnClass(name)`</span><br><span class="line">        -  `@ConditionalOnClass`的这种机制不适用于`@Bean`方法 </span><br><span class="line">           </span><br><span class="line">           -  为了处理这种情况，可以使用单独的`Configuration` 类来隔离条件，间接的使函数可以使用`@ConditionalOnClass`，如下例所示： </span><br><span class="line">```java</span><br><span class="line">@Configuration(proxyBeanMethods = false)</span><br><span class="line">// Some conditions ...</span><br><span class="line">public class MyAutoConfiguration &#123;</span><br><span class="line">    // Auto-configured beans ...</span><br><span class="line">    @Configuration(proxyBeanMethods = false)</span><br><span class="line">    @ConditionalOnClass(SomeService.class)</span><br><span class="line">    public static class SomeServiceConfiguration &#123;</span><br><span class="line">        @Bean</span><br><span class="line">        @ConditionalOnMissingBean</span><br><span class="line">        public SomeService someService() &#123;</span><br><span class="line">            return new SomeService();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>注意：在函数上使用<code>@ConditionalOnBean</code> and <code>@ConditionalOnMissingBean</code>注解不会阻止创建配置类。但是 在类上使用<code>Conditional</code>和标记每个包含使用注解的<code>@Bean</code>函数的唯一不同之处在于, 如果<code>Conditional</code>不匹配，会防止配置类注册为<code>bean</code>。  </p></blockquote><ul><li><h3 id="Bean-Conditions"><a href="#Bean-Conditions" class="headerlink" title="Bean Conditions"></a>Bean Conditions</h3><ul><li>使用场景 <ul><li><p>主要用来判断Bean是否已经存在 </p><p> <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042225183.png" alt="image.png"></p></li></ul></li><li><code>@ConditionalOnBean</code> 和 <code>@ConditionalOnMissingBean</code>注解让bean根据指定的bean的存在与否而包含。你可以使用 value 属性借助类型指定beans 或者 使用name安装名称去指定beans。search属性可以让你限制搜索Bean时应考虑的ApplicationContext层次结构。  </li><li>当注解在@Bean标注的方法上时，目标类型默认返回方法的类型，</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods  = false)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> SomeService <span class="title function_">someService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SomeService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><pre><code>  - 在上面的例子中，如果在ApplicationContext中没有包含SomeService类型的Bean时，SomeService将被创建。  -  Tip：你需要非常小心的添加Bean定义的顺序，因为这些条件是根据到目前为止已经处理过的内容进行评估的。出于这个原因，我们建议在自动配置类上只使用@ConditionalOnBean和@ConditionalOnMissingBean注解（因为这些注解可以保证在任何用户定义的Bean定义被添加后加载）。   -  如果你的Bean的具体类实现了一个接口，那么Bean方法的返回类型应该是具体类而不是接口。 </code></pre><ul><li><h3 id="Property-Conditions"><a href="#Property-Conditions" class="headerlink" title="Property Conditions"></a>Property Conditions</h3><ul><li><code>@ConditionalOnProperty</code>注解让配置基于Spring环境属性而被包含。使用前缀和名称属性来指定应该被检查的属性。默认情况下，任何存在且不等于false的属性都被匹配。你也可以通过使用havingValue和matchIfMissing属性创建更高级的检查。 </li><li>prefix+name or prefix+value属性 <ul><li>用于查到，定位application.yml中的key</li></ul></li><li>havingValue属性 <ul><li>用来比较<code>application,yml</code>中的value值</li></ul></li><li>matchIfMissing属性 <ul><li>用来表示如果<code>application.yml</code>中没有写配置的情况下，是否加载我们的自动配置类 <ul><li><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042224924.png" alt="image.png"></li><li>这种情况是否自动加载该模块？</li><li>true：加载</li><li>false：不加载</li></ul></li></ul></li></ul></li><li><h3 id="Resource-Conditions"><a href="#Resource-Conditions" class="headerlink" title="Resource Conditions"></a>Resource Conditions</h3><ul><li><code>@ConditionalOnResource</code>注解让配置仅在特定资源存在时才被包含。资源可以通过使用通常的Spring约定来指定，如下面的例子所示：<code>file:/home/user/test.dat</code>。</li></ul></li><li><h3 id="Web-Application-Conditions"><a href="#Web-Application-Conditions" class="headerlink" title="Web Application Conditions"></a>Web Application Conditions</h3><ul><li><code>@ConditionalOnWebApplication</code>和<code>@ConditionalOnNotWebApplication</code>注解允许根据应用是否是 “Web应用 “来包含配置。基于Servlet的Web应用是指任何使用Spring <code>WebApplicationContext</code>、定义会话范围或具有可配置<code>WebEnvironment</code>的应用。反应式Web应用是指任何使用<code>ReactiveWebApplicationContext</code>或具有<code>ConfigurableReactiveWebEnvironment</code>的应用。</li><li><code>@ConditionalOnWarDeployment</code>注解允许根据应用程序是否是被部署到容器中的传统WAR应用程序而包含配置。这个条件将不符合使用嵌入式服务器运行的应用程序。</li></ul></li><li><h3 id="SpEL-Expression-Conditions"><a href="#SpEL-Expression-Conditions" class="headerlink" title="SpEL Expression Conditions"></a>SpEL Expression Conditions</h3><ul><li><code>@ConditionalOnExpression</code>注解允许根据SpEL表达式的结果来包含配置。</li><li>在表达式中引用Bean将导致该Bean在上下文刷新处理中很早就被初始化。因此，该Bean将没有资格进行后处理（比如配置属性绑定），其状态可能是不完整的。</li></ul></li><li><p>模块命名 </p><ul><li>你应该确保为你的starter提供一个合适的命名空间。不要以“spring-boot”作为你模块开头的名字，即便你使用不同的Maven groupId。在未来，我们可能为您的项目提供官方的支持</li><li>根据经验，你需要在starter模块之后命名一个组合模块。例如，假设你为“acme”创建一个starter，你命名自动配置模块 “acme-spring-boot”，和starter模块为 “acme-spring-boot-starter”，如果你只有一个结合了两者的模块，命名它为“acme-spring-boot-starter”</li></ul></li><li><p>配置Key </p><ul><li>创建Properties</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(value  = &quot;example&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleProperties</span> &#123;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>使用Annotation Processor生成你的元数据 </li><li>使用注解处理器生成您自己的元数据<br />你可以很简单的从<code>@ConfigurationProperties</code>注释的项目中使用“spring-boot-configuration-processor” jar包生成你的配置元数据文件。该jar包含一个你的项目编译时调用的java注解处理器 <ul><li>配置注解处理器 <ul><li>添加依赖</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>如果你在你的项目中使用AspectJ，你需要确保注解处理器只运行一次。有几种方法可以做到这一点。在Maven中，你可以明确配置maven-apt-plugin，只在那里添加对注释处理器的依赖。你也可以让AspectJ插件运行所有处理，并在<code>maven-compiler-plugin</code>配置中禁用注释处理，如下所示 </p></li><li><p>如果你在项目中使用Lombok，你需要确保其注释处理器在<code>spring-boot-configuration-processor</code>之前运行。要用Maven做到这一点，你可以使用Maven编译器插件的<code>annotationProcessors</code>属性按正确顺序列出注释处理器。如果不使用该属性，注释处理器由classpath上的可用依赖项拾取，请确保lombok依赖项定义在<code>spring-boot-configuration-processor</code>依赖项之前。 </p></li><li><p>自动元数据生成 </p><ul><li><code>@ConfigurationProperties</code> 注释的类和方法。如果该类也被<code>@ConstructorBinding</code>注解，那么预计会有一个构造函数，并且每个构造函数参数会创建一个属性。否则，属性是通过标准的getter和setter的存在来发现的，并对集合和map类型进行特殊处理（即使只有一个getter存在，也会被发现）。注解处理器也支持使用<code>@Data、@Value、@Getter和@Setter</code> lombok注释。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my.server&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServerProperties</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Name of the server.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IP address to listen to.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Port to listener to.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9797</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.ip;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIp</span><span class="params">(String ip)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ip = ip;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPort</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.port;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPort</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// fold:off</span></span><br></pre></td></tr></table></figure><ul><li>注释处理器应用一些启发式方法来从源模型中提取默认值。默认值必须以静态方式提供。特别是，不要引用另一个类中定义的常量。另外，注释处理器不能自动检测 <code>Enums</code> 和 <code>Collectionss</code> 的默认值。对于无法检测到默认值的情况，应提供手动元数据。考虑以下示例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my.messaging&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessagingProperties</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; addresses = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">ContainerType</span> <span class="variable">containerType</span> <span class="operator">=</span> ContainerType.SIMPLE;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getAddresses</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.addresses;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddresses</span><span class="params">(List&lt;String&gt; addresses)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.addresses = addresses;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ContainerType <span class="title function_">getContainerType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.containerType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContainerType</span><span class="params">(ContainerType containerType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.containerType = containerType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ContainerType</span> &#123;</span><br><span class="line">        SIMPLE, DIRECT</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>为了记录上述类中属性的默认值，您可以将以下内容添加到模块的手动元数据中：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my.messaging.addresses&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;a&quot;</span><span class="punctuation">,</span> <span class="string">&quot;b&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my.messaging.container-type&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;simple&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure><ul><li>嵌套属性 <ul><li>注释处理器自动将内部类视为嵌套属性。我们可以为它创建一个子命名空间，而不是在命名空间的根目录记录 ip 和端口。考虑更新的示例：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my.server&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServerProperties</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Host <span class="title function_">getHost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.host;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHost</span><span class="params">(Host host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Host</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> String ip;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getIp</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.ip;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIp</span><span class="params">(String ip)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.ip = ip;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPort</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.port;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPort</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.port = port;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>前面的例子为<code>my.server.name</code>、<code>my.server.host.ip</code>和<code>my.server.host.port</code>属性产生元数据信息。你可以在一个字段上使用<code>@NestedConfigurationProperty</code>注解来表示一个普通的（非内部）类应该被当作是嵌套的。</p></li><li><p>这对集合和map没有影响，因为这些类型被自动识别，并且为它们中的每一个生成一个元数据属性。</p><ul><li>添加额外的元数据 <ul><li>Spring Boot的配置文件处理是相当灵活的，通常情况下，可能存在未与<code>@ConfigurationProperties</code> Bean绑定的属性。你也可能需要调整现有键的一些属性。为了支持这种情况并让你提供自定义的 “提示”，注解处理器自动将<code>META-INF/additional-spring-configuration-metadata.json</code>中的项目合并到主元数据文件中。</li><li>如果你引用了一个已经被自动检测到的属性，那么描述、默认值和废弃信息将被覆盖，如果指定的话。如果手动属性声明在当前模块中没有被识别，它将被作为一个新的属性添加。</li><li><code>additional-spring-configuration-metadata.json</code>文件的格式与常规的<code>spring-configuration-metadata.json</code>完全相同。附加属性文件是可选的。如果你没有任何附加属性，请不要添加该文件。</li></ul></li></ul></li><li><p>“autoconfigure”模块 </p><ul><li>autoconfigure模块包含了开始使用该库所需的一切。它还可能包含配置键的定义（如<code>@ConfigurationProperties</code>）和任何可用于进一步定制组件初始化方式的回调接口。 <ul><li>你应该把对库的依赖标记为可选的，这样你就可以更容易地把自动配置模块纳入你的项目中。如果你这样做，该库就不会被提供，而且在默认情况下，Spring Boot会退缩。</li></ul></li><li>Spring Boot使用注释处理器来收集元数据文件（<code>META-INF/spring-autoconfigure-metadata.properties</code>）中的自动配置条件。如果该文件存在，它被用来急切地过滤不匹配的自动配置，这将改善启动时间。建议在包含自动配置的模块中添加以下依赖关系。</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果你在应用程序中直接定义了自动配置，请确保配置spring-boot-maven-plugin，以防止repackage目标将依赖关系加入fat jar中。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="相关包的作用"><a href="#相关包的作用" class="headerlink" title="相关包的作用"></a>相关包的作用</h2><h3 id="spring-boot-autoconfigure包"><a href="#spring-boot-autoconfigure包" class="headerlink" title="spring-boot-autoconfigure包"></a>spring-boot-autoconfigure包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过灵活的Auto-configuration注解使SpringBoot中的功能实现模块化和可被替换扩展。</li><li>spring-boot-autoconfigure思路类似SPI(Service Provider Interface)，都是不同的实现类实现了定义的接口，加载时候去查找classpath下的实现类，不同在于前者使用autoconfigure实现后者使用的是ServiceLoader。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070020091.png"></p><h3 id="spring-boot-configuration-processor包"><a href="#spring-boot-configuration-processor包" class="headerlink" title="spring-boot-configuration-processor包"></a>spring-boot-configuration-processor包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spring-boot-configuration-processor的作用是生成配置的元数据信息，即META-INF目录下的spring-configuration-metadata.json文件，从而告诉spring这个jar包中有哪些自定义的配置</li><li>其中spring-configuration-metadata.json文件是在编译的时候自动生成的</li></ul><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070019590.png"></p><h3 id="spring-boot-autoconfigure-processor包"><a href="#spring-boot-autoconfigure-processor包" class="headerlink" title="spring-boot-autoconfigure-processor包"></a>spring-boot-autoconfigure-processor包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070026766.png"></p><ul><li>这个文件需要手动创建</li><li>在启动时会读取这个文件，先根据条件情况加载，这样不会出现任何配置类都加载一边的情况，加快spring启动的速度</li><li>spring-boot会通过spring-boot的SPI机制，获得所有自动装配配置主类信息</li></ul><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211051956312.png" alt="image-20221105195559287"></p><h2 id="怎么玩"><a href="#怎么玩" class="headerlink" title="怎么玩?"></a>怎么玩?</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ul><li><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042225778.png" alt="image.png"></li><li>上面这种结构是我故意的，其实最好的结构是直接使用“example-spring-boot-starter”作为项目，而非内部的子模块”example-spring-boot-autoconfiguation”</li><li>我这样的做的目的是看到过一个开源项目，使用的就是Spring的AutoConfiguration这种形式，组合整个项目</li></ul><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ul><li>基础依赖包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>还可以添加lombok依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>  -  不过这个依赖需要首先被项目加载，然后才是annotation processor</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>可以spring-boot-autoconfigure-processor包，在启动是根据条件判断是否加载部分配置类 <ul><li>加快springboot启动速度</li></ul></li><li>完整依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>总共有四个必须的角色 <ul><li>properties对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;com.zhazha.example&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">enable</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8777</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Host</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>自动配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.service.ExampleTools;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Configuration 这个注解最好别加，加了可能被 spring 注解扫描器扫描到</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = ExampleProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(value = SpringApplication.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;com.zhazha.example&quot;, name = &quot;enable&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> ExampleTools <span class="title function_">exampleTools</span><span class="params">(ExampleProperties properties)</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;加载 Example&quot;</span>);</span><br><span class="line">        <span class="type">ExampleTools</span> <span class="variable">exampleTools</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExampleTools</span>();</span><br><span class="line">        exampleTools.setUsername(properties.getUsername());</span><br><span class="line">        exampleTools.setPassword(properties.getPassword());</span><br><span class="line">        exampleTools.setHost(properties.getHost());</span><br><span class="line">        <span class="keyword">return</span> exampleTools;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>  - 注意：@Configuration 这个注解最好别加，加了可能被 spring 注解扫描器扫描到 </code></pre><ul><li>需要自动配置，在外部项目使用的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.autoconfiguration.ExampleProperties;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleTools</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> ExampleProperties.Host host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户名为：&quot;</span> + username + <span class="string">&quot;&gt;&gt;&gt;&quot;</span> + <span class="string">&quot;密码为：&quot;</span> + password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">host</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;host: &quot;</span> + host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>spring.factories</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.zhazha.autoconfiguration.ExampleAutoConfiguration</span><br></pre></td></tr></table></figure><ul><li>创建spring-autoconfigure-metadata.properties（可选）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.zhazha.autoconfiguration.ExampleAutoConfiguration=</span><br><span class="line">com.zhazha.autoconfiguration.ExampleAutoConfiguration.ConditionalOnClass=org.springframework.boot.SpringApplication</span><br></pre></td></tr></table></figure><ul><li>maven安装自动配置项目到maven仓库 <ul><li><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042225550.png" alt="image.png"></li><li>也可以使用mvn clean install -Dmaven.test.skip&#x3D;true </li><li>install之后会发现 <ul><li><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042224215.png" alt="image.png"></li></ul></li><li>多创建了一个文件，该文件就是spring-boot-configuration-processor这个包自动创建的 </li><li>主要功能：application,yml的提示</li></ul></li></ul><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ul><li>使用方式就非常简单了 </li><li><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042225731.png" alt="image.png"></li><li>application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">com:</span></span><br><span class="line">  <span class="attr">zhazha:</span></span><br><span class="line">    <span class="attr">example:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">zhazha</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">host:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8088</span></span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhazha.service.ExampleTools;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            SpringApplication.run(Application.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Resource</span></span><br><span class="line">        <span class="keyword">private</span> ExampleTools exampleTools;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> exampleTools.hello();</span><br><span class="line">            <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> exampleTools.host();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;example: &quot;</span> + <span class="string">&quot;\t hello: &quot;</span> + hello + <span class="string">&quot; \t host: &quot;</span> + host + <span class="string">&quot;\t random: &quot;</span> + <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><ul><li>项目根据Spring AutoConfiguration形式进行组合 <ul><li>项目结构 <ul><li><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042226908.png" alt="image.png"></li><li>example-spring-boot <ul><li>这是主项目</li></ul></li><li>example-spring-boot-autoconfiguation <ul><li>这个项目带着自动配置功能</li><li>该项目可以自己启动，因为有启动类，也可以在example-spring-boot项目中启动，然后使用</li></ul></li></ul></li><li>example-spring-boot-autoconfiguation自动配置项目 <ul><li>依赖</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>properties类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;com.zhazha.example&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean enable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>加载类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration.<span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.autoconfiguration.ModuleApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportBeanDefinitionRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleModuleLoader</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(registry);</span><br><span class="line">        <span class="type">int</span> <span class="variable">scan</span> <span class="operator">=</span> scanner.scan(ModuleApplication.class.getPackageName());</span><br><span class="line">        System.err.println(<span class="string">&quot;example-autoconfiguration 模块加载了 &quot;</span> + scan + <span class="string">&quot;个类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>核心代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(registry);</span><br><span class="line"><span class="type">int</span> <span class="variable">scan</span> <span class="operator">=</span> scanner.scan(ModuleApplication.class.getPackageName());</span><br><span class="line">System.err.println(<span class="string">&quot;example-autoconfiguration 模块加载了 &quot;</span> + scan + <span class="string">&quot;个类&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p>就是不知道这种方式加载的类是否存在问题 </p></li><li><p>是否还有更优解 </p></li><li><p>自动配置类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.autoconfiguration.<span class="keyword">module</span>.ExampleModuleLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = ExampleProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;com.zhazha.example&quot;, name = &quot;enable&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="meta">@Import(ExampleModuleLoader.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleAutoConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建META-INF文件 <ul><li>spring.factories</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.zhazha.autoconfiguration.config.ExampleAutoConfiguration</span><br></pre></td></tr></table></figure><ul><li>spring-autoconfigure-metadata.properties</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.zhazha.autoconfiguration.config.ExampleAutoConfiguration=</span><br><span class="line">com.zhazha.autoconfiguration.config.ExampleAutoConfiguration.ConditionalOnClass=org.springframework.boot.SpringApplication</span><br></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModuleService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">module</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;zhazha ModuleService&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.autoconfiguration.service.ModuleService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Module01Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ModuleService moduleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;module01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">module01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;module-1 \t &quot;</span> + moduleService.<span class="keyword">module</span>() + <span class="string">&quot;\t&quot;</span> + <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>启动类（可选）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModuleApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    SpringApplication.run(ModuleApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>example-spring-boot <ul><li>依赖</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>example-spring-boot-autoconfiguation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line">com:</span><br><span class="line">  zhazha:</span><br><span class="line">    example:</span><br><span class="line">      enable: true</span><br></pre></td></tr></table></figure><ul><li><p>我们的自动配置项目在这里被启动</p></li><li><p>启动类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            SpringApplication.run(ExampleApplication.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.autoconfiguration.service.ModuleService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> ModuleService moduleService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping(&quot;index&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index Controller\t&quot;</span> + moduleService.<span class="keyword">module</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义一个Jasync的spring-boot-starter <ul><li>背景 <ul><li>jasync如果按照官方自动配置，会报错</li></ul></li><li>步骤 <ul><li>依赖</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha.jasync<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasync-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-r2dbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jasync-sql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasync-r2dbc-mysql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><ul><li>需要添加，防止maven报错</li><li>主要原因是：子模块的父项目不是原本的父项目，而是其他父项目</li><li>在这个例子中，我们子项目的父项目是spring-boot-parent，所以需要添加</li></ul></li><li>true <ul><li>这个也是需要添加的 </li><li>maven的scope的编译模式会传递依赖，所以需要使用这项功能阻止依赖被传递到外部项目中（provider等模式不传递依赖） </li><li>依赖</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-r2dbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jasync-sql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasync-r2dbc-mysql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>而上面的两个包之所以不需要添加optional是因为需要有这两个包，外部需要有这两个包 </p><ul><li>properties类</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix  = &quot;com.zhazha.jasync&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JasyncProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">enabled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li><p>决定了配置最终是否在主项目中使用</p><ul><li>自动配置类</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.jasync.r2dbc.mysql.JasyncConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.github.jasync.sql.db.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.github.jasync.sql.db.mysql.pool.MySQLConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> io.r2dbc.pool.ConnectionPool;</span><br><span class="line"><span class="keyword">import</span> io.r2dbc.pool.ConnectionPoolConfiguration;</span><br><span class="line"><span class="keyword">import</span> io.r2dbc.spi.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> io.r2dbc.spi.ConnectionFactoryOptions;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureOrder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.PropertyMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.r2dbc.connection.R2dbcTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.ReactiveTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@AutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = JasyncAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ConnectionFactory.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;com.zhazha.jasync&quot;, name = &quot;enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(value = Ordered.HIGHEST_PRECEDENCE + 12)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JasyncAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    ConnectionPool <span class="title function_">connectionFactory</span><span class="params">(R2dbcProperties properties)</span> &#123;</span><br><span class="line">        <span class="type">JasyncConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> createConnectionFactory(properties);</span><br><span class="line">        R2dbcProperties.<span class="type">Pool</span> <span class="variable">pool</span> <span class="operator">=</span> properties.getPool();</span><br><span class="line">        <span class="type">PropertyMapper</span> <span class="variable">map</span> <span class="operator">=</span> PropertyMapper.get().alwaysApplyingWhenNonNull();</span><br><span class="line">        ConnectionPoolConfiguration.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> ConnectionPoolConfiguration.builder(connectionFactory);</span><br><span class="line">        map.from(pool.getMaxIdleTime()).to(builder::maxIdleTime);</span><br><span class="line">        map.from(pool.getMaxLifeTime()).to(builder::maxLifeTime);</span><br><span class="line">        map.from(pool.getMaxAcquireTime()).to(builder::maxAcquireTime);</span><br><span class="line">        map.from(pool.getMaxCreateConnectionTime()).to(builder::maxCreateConnectionTime);</span><br><span class="line">        map.from(pool.getInitialSize()).to(builder::initialSize);</span><br><span class="line">        map.from(pool.getMaxSize()).to(builder::maxSize);</span><br><span class="line">        map.from(pool.getValidationQuery()).whenHasText().to(builder::validationQuery);</span><br><span class="line">        map.from(pool.getValidationDepth()).to(builder::validationDepth);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConnectionPool</span>(builder.build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JasyncConnectionFactory <span class="title function_">createConnectionFactory</span><span class="params">(R2dbcProperties properties)</span> &#123;</span><br><span class="line">        <span class="type">ConnectionFactoryOptions</span> <span class="variable">connectionFactoryOptions</span> <span class="operator">=</span> ConnectionFactoryOptions.parse(properties.getUrl());</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(</span><br><span class="line">                properties.getUsername(),</span><br><span class="line">                Objects.requireNonNull(connectionFactoryOptions.getValue(ConnectionFactoryOptions.HOST)).toString(),</span><br><span class="line">                (Integer) connectionFactoryOptions.getValue(ConnectionFactoryOptions.PORT),</span><br><span class="line">                properties.getPassword(),</span><br><span class="line">                (String) connectionFactoryOptions.getValue(ConnectionFactoryOptions.DATABASE));</span><br><span class="line">        <span class="type">JasyncConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JasyncConnectionFactory</span>(<span class="keyword">new</span> <span class="title class_">MySQLConnectionFactory</span>(configuration));</span><br><span class="line">        <span class="keyword">return</span> connectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ReactiveTransactionManager <span class="title function_">transactionManager</span><span class="params">(ConnectionPool factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R2dbcTransactionManager</span>(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这个类不能被spring boot 组件扫描器扫描到</p></li><li><p>只能被spring.factories 或者 @import注解被spring注入</p></li><li><p>所以我把@AutoConfiguration注释掉了</p></li><li><p>创建META-INF&#x2F;spring.factories </p><ul><li>内容</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.zhazha.jasync.config.JasyncAutoConfiguration</span><br></pre></td></tr></table></figure><h1 id="2-7-x新版本"><a href="#2-7-x新版本" class="headerlink" title="2.7.x新版本"></a>2.7.x新版本</h1><h2 id="有什么变化？"><a href="#有什么变化？" class="headerlink" title="有什么变化？"></a>有什么变化？</h2><p>之前：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070032774.png" alt="image-20221107003224611"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070032112.png" alt="image-20221107003238956"></p><p>之后是这样:</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070049101.png" alt="image-20221107004909991"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070049330.png" alt="image-20221107004932572"></p><p>当然你也可以将 <code>@AutoConfiguration</code> 这个注解注释掉，还是会成功。不过我看到的案例都添加了该注解</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070050891.png" alt="image-20221107005019751"></p><ul><li>新版本推荐使用<code>@AutoConfiguration</code>代替 <code>spring.factories</code> 方式</li><li>使用<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>代替<code>META-INF/spring.factories</code> <ul><li>内容从key value变成value</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.mycorp.libx.autoconfigure.LibXAutoConfiguration</span><br><span class="line">com.mycorp.libx.autoconfigure.LibXWebAutoConfiguration </span><br></pre></td></tr></table></figure><ul><li>还可以使用“#”添加你的注释 </li><li>旧版本的spring.factories可能在未来的版本被放弃 </li><li>使用@AutoConfiguration注解的before, beforeName, after and afterName属性来确定加载顺序 <ul><li>当然 @AutoConfigureBefore and @AutoConfigureAfter这两个注解还可以使用 </li><li>before表示还未被加载的自动配置类</li><li>after表示已经被加载的自动配置类</li><li>这里的还未和已经以被@AutoConfiguration注解的类被加载的那一瞬间为基准</li><li>这种，自动配置类之间能够规定配置类的加载顺序，可以保证A类和B类之间的加载顺序</li></ul></li><li>使用@AutoConfigureOrder注解来指定在自动配置类之间的顺序 <ul><li>这种虽然也能规定加载顺序，但是和前面的那种明确保证A类和B类之间的加载顺序关系不同，是统一的顺序</li><li>只会影响自动配置类之间的顺序，不会影响AnnotationConfigApplicationContext.register(Class…)的注册顺序</li></ul></li></ul><h2 id="怎么做？"><a href="#怎么做？" class="headerlink" title="怎么做？"></a>怎么做？</h2><ul><li><p>删除spring.factories改用org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><p> org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><ul><li><p>内容</p><p>com.zhazha.autoconfiguration.config.ExampleAutoConfiguration</p></li></ul></li><li><p>修改自动配置类的注解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.autoconfiguration.<span class="keyword">module</span>.ExampleModuleLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = ExampleProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;com.zhazha.example&quot;, name = &quot;enable&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="meta">@Import(ExampleModuleLoader.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleAutoConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>从Configuration到AutoConfiguration </li><li>但实际上这个注解可以不需要</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.autoconfiguration.<span class="keyword">module</span>.ExampleModuleLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@AutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = ExampleProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;com.zhazha.example&quot;, name = &quot;enable&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="meta">@Import(ExampleModuleLoader.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleAutoConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@AutoConfiguration</code>这个注解不是 <code>@Configuration</code>注解的代替品, 它只用于springboot项目启动时</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211050510048.png" alt="image-20221105051008793"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动配置 </tag>
            
            <tag> SPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步和同步的区别是什么？</title>
      <link href="/2022/11/04/01%E9%AB%98%E5%B9%B6%E5%8F%91/001%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2022/11/04/01%E9%AB%98%E5%B9%B6%E5%8F%91/001%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="异步和同步的区别是什么？"><a href="#异步和同步的区别是什么？" class="headerlink" title="异步和同步的区别是什么？"></a>异步和同步的区别是什么？</h1><p>一起探讨探讨这么判断是否有问题？</p><h2 id="前提或者说是共识"><a href="#前提或者说是共识" class="headerlink" title="前提或者说是共识"></a>前提或者说是共识</h2><p>学习异步和同步你可能需要了解一些前提</p><ol><li>异步、同步是指两个及以上有交织的个体间的事情（有交织是指有为同一间事情付出过，或者是表示有因果关系的）</li><li>异步、同步是相对事件（需要有对照才能判断）</li><li>需要规定某个时间段内发生（你不可能要求两个个体在任何时间都处于同步或者异步的情况，同卵双胞胎都做不到）</li></ol><p>了解这两点，你才能了解什么是异步、同步。</p><h1 id="异步和同步是什么？"><a href="#异步和同步是什么？" class="headerlink" title="异步和同步是什么？"></a>异步和同步是什么？</h1><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><ol><li>前提：两个个体</li><li>时间和事件是否相同</li></ol><p><strong>异步相当于：两个有交织的个体 相同的时间，不同的事件 and 相同的事件，不同的时间（强调交错）</strong></p><p><strong>同步相当于：两个有交织的个体 相同的时间，相同的事件 and 相同的事件，相同的时间（强调相同）</strong></p><h2 id="探索过程"><a href="#探索过程" class="headerlink" title="探索过程"></a>探索过程</h2><p>异步和同步，我们需要拆开看</p><p>首先了解什么是 “异”什么是“同”？</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de38a2ef79064ba9b3bd6d9e3c586e0a~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/874e2def73d1485ba1bebb04ce11811c~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>分别表示<strong>不同和相同</strong>两个概念</p><p>那么步呢？</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d91751c40f4e4d06a26e549b6b2db8b3~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>我觉得表示阶段；**步长；阶段 ** 或者更加宽泛点我们可以认为是 <strong>动作和时间</strong></p><p>再宽泛点我们可以认为是 <strong>事件和时间</strong></p><p><strong>综合起来就表示：</strong></p><p><strong>异步相当于：两个有交织的个体 相同的时间，不同的事件 and 相同的事件，不同的时间（强调交错）</strong></p><p><strong>同步相当于：两个有交织的个体 相同的时间，相同的事件 and 相同的事件，相同的时间（强调相同）</strong></p><p>PS: 这里的时间表示某段时间，而不是一直都是这样</p><blockquote><p>也就是说，两个有交织的个体是在同一时间段内（同步）还是错位时间段内（异步）为同一件事情花费精力</p></blockquote><p>现在带入现实生活中去看看：</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><blockquote><p>案例转载自：<a href="https://blog.csdn.net/chenyang_wei/article/details/124102547">从小白到高手，10 图教你同步与异步</a></p></blockquote><h2 id="第一个案例"><a href="#第一个案例" class="headerlink" title="第一个案例"></a>第一个案例</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf5262011c534dfb946b0770e7a4cc97~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>首先老板在数钱的时候你还没搬砖</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13e7ce707aff43d09be65c579bb9f7ec~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>如果你只看这段时间的话，你可以认为他是异步，包括底下这段也是</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77f284d5731742368a6c76a3d2c2fc9c~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><blockquote><p>当然你要说数钱是个 IO 操作那么，上图这段需要两根柱子，一根是程序阻塞等待，另一根是DMA处理IO操作。同步异步本身就随时发生着，这就跟爱因斯坦相对论一样，看你参考系分的细不细咯。</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab11c1a415594931965381fdd9fd6b34~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>上面这段很明显的看出来是 相同时间，相同事件，这是同步操作</p><p>老板阻塞等待你搬砖完毕，都是再为你搬砖花费精力，只不过你花的多，他花的少而已</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0935abe18fa441efaa167e5245e2119b~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>下图这段是相同时间，不同事件并且他们是有交织的，或者说他们是有因果关系的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f10f28a7fcb44dc1a3e5889c30857bc3~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="第二个案例"><a href="#第二个案例" class="headerlink" title="第二个案例"></a>第二个案例</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21b044b521db419981959bd8a310c252~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f41c6e0a9074c9580fa434f5d90090e~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="第三个案例"><a href="#第三个案例" class="headerlink" title="第三个案例"></a>第三个案例</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f2a0f2561424682bb2c9c78732cd01a~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34876efdc9a34ebe87f7866a9dd5677d~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d16196d74864b0ab739a92991b0f7fa~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="第四个案例"><a href="#第四个案例" class="headerlink" title="第四个案例"></a>第四个案例</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27a4e1353cd84a46ba83a8cdb747225d~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41460c920b1c44bba2ab92f82f90f802~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f6fe0a60a614de69a8f046f2668b661~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><blockquote><p>最后需要注意的是，并不是所有的情况下异步都一定比同步高效，还需要结合具体业务以及IO的复杂度具体情况具体分析。</p></blockquote><blockquote><p>由于是很久以前记得笔记，忘记是哪个大佬设计的图片，所以不好意思，没有留图片转发地址</p></blockquote><h1 id="并发和并行的区别是什么？"><a href="#并发和并行的区别是什么？" class="headerlink" title="并发和并行的区别是什么？"></a>并发和并行的区别是什么？</h1><p>如果某个系统支持两个或者多个动作（Action）<strong>同时存在</strong>，那么这个系统就是一个<strong>并发系统</strong>。如果某个系统支持两个或者多个动作<strong>同时执行</strong>，那么这个系统就是一个<strong>并行系统</strong>。并发系统与并行系统这两个定义之间的关键差异在于<strong>“存在”</strong>这个词。<br />在并发程序中可以同时拥有两个或者多个线程。这意味着，如果程序在单核处理器上运行，那么这两个线程将交替地换入或者换出内存。这些线程是同时“存在”的——每个线程都处于执行过程中的某个状态。如果程序能够并行执行，那么就一定是运行在多核处理器上。此时，程序中的每个线程都将分配到一个独立的处理器核上，因此可以同时运行。<br />我相信你已经能够得出结论——<strong>“并行”概念是“并发”概念的一个子集</strong>。也就是说，你可以编写一个拥有多个线程或者进程的并发程序，但如果没有多核处理器来执行这个程序，那么就不能以并行方式来运行代码。因此，凡是在求解单个问题时涉及多个执行流程的编程模式或者执行行为，都属于并发编程的范畴。<br />摘自：《并发的艺术》 — 〔美〕布雷谢斯</p>]]></content>
      
      
      <categories>
          
          <category> 高并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 同步 </tag>
            
            <tag> 异步 </tag>
            
            <tag> 并行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还用什么mybatis？这些方法不香么？</title>
      <link href="/2022/11/04/03ORM/01%E8%BF%98%E7%94%A8%E4%BB%80%E4%B9%88mybatis%EF%BC%9F%E8%BF%99%E4%BA%9B%E6%96%B9%E6%B3%95%E4%B8%8D%E9%A6%99%E4%B9%88%EF%BC%9F/"/>
      <url>/2022/11/04/03ORM/01%E8%BF%98%E7%94%A8%E4%BB%80%E4%B9%88mybatis%EF%BC%9F%E8%BF%99%E4%BA%9B%E6%96%B9%E6%B3%95%E4%B8%8D%E9%A6%99%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>XML，还是XML，无数的XML，mybatis你是否已经写烦了？<br>那有什么办法解决呢？</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li>注解(用的比较多？)</li><li>mybatis 的 SQL 语句构建器(不好用)</li><li>整合mybatis-dynamic-sql(不好用)</li><li>fluent-mybatis(还不错, 可惜起步慢了)</li><li>jpa + queryDSL(最舒服)</li></ol><h1 id="着手落地各种方案"><a href="#着手落地各种方案" class="headerlink" title="着手落地各种方案"></a>着手落地各种方案</h1><h2 id="搭个基础架构"><a href="#搭个基础架构" class="headerlink" title="搭个基础架构"></a>搭个基础架构</h2><h2 id="解决方案：注解"><a href="#解决方案：注解" class="headerlink" title="解决方案：注解"></a>解决方案：注解</h2>]]></content>
      
      
      <categories>
          
          <category> ORM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> jpa </tag>
            
            <tag> hibernate </tag>
            
            <tag> XML </tag>
            
            <tag> DSL </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
