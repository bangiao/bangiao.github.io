<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kotlin的集合操作</title>
      <link href="/2022/12/03/07kotlin/kotlin%E7%9A%84%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/12/03/07kotlin/kotlin%E7%9A%84%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>想要定义 kotlin 的集合比较简单, 你想要什么集合, 就给什么集合后面添加 <code>Of</code> 就出来了, setOf, hashSetOf, ArrayListOf, listOf, MapOf… 所以本文不讲如何创建集合了</p></blockquote><h1 id="集合转换"><a href="#集合转换" class="headerlink" title="集合转换"></a>集合转换</h1><blockquote><p>把旧集合通过某种方式转化成<strong>新的</strong>集合</p></blockquote><h2 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h2><h3 id="map-和-mapTo-拿出一个个元素转化成新的"><a href="#map-和-mapTo-拿出一个个元素转化成新的" class="headerlink" title="map 和 mapTo: 拿出一个个元素转化成新的"></a>map 和 mapTo: 拿出一个个元素转化成新的</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b8645c5afb741a68df48f081c4c8797~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>转化, 把 <code>T</code> 转化 成 <code>R</code>, 然后再存入到一个新的集合中</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> Iterable<span class="type">&lt;T&gt;</span>.<span class="title">map</span><span class="params">(transform: (<span class="type">T</span>) -&gt; <span class="type">R</span>)</span></span>: List&lt;R&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> mapTo(ArrayList&lt;R&gt;(collectionSizeOrDefault(<span class="number">10</span>)), transform)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R, C : MutableCollection&lt;in R&gt;</span>&gt; Iterable<span class="type">&lt;T&gt;</span>.<span class="title">mapTo</span><span class="params">(destination: <span class="type">C</span>, transform: (<span class="type">T</span>) -&gt; <span class="type">R</span>)</span></span>: C &#123;</span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> <span class="keyword">this</span>)</span><br><span class="line">        <span class="comment">// ******************</span></span><br><span class="line">        destination.add(transform(item))</span><br><span class="line">    <span class="keyword">return</span> destination</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>destination: 是 <code>ArrayList</code> 类型<br>transform: 是转化函数</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = (<span class="number">1.</span><span class="number">.10</span>).toMutableList()</span><br><span class="line"><span class="keyword">val</span> map: List&lt;<span class="built_in">Double</span>&gt; = list.map &#123;</span><br><span class="line">   it * <span class="number">0.9</span></span><br><span class="line">&#125;</span><br><span class="line">println(map) <span class="comment">// [0.9, 1.8, 2.7, 3.6, 4.5, 5.4, 6.3, 7.2, 8.1, 9.0]</span></span><br></pre></td></tr></table></figure><h3 id="mapIndexed-带索引的映射"><a href="#mapIndexed-带索引的映射" class="headerlink" title="mapIndexed 带索引的映射"></a>mapIndexed 带索引的映射</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ffb765785f7484f9ea1bd33b0aebf18~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R, C : MutableCollection&lt;in R&gt;</span>&gt; Iterable<span class="type">&lt;T&gt;</span>.<span class="title">mapIndexedTo</span><span class="params">(destination: <span class="type">C</span>, transform: (<span class="type">index</span>: <span class="type">Int</span>, <span class="type">T</span>) -&gt; <span class="type">R</span>)</span></span>: C &#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (item <span class="keyword">in</span> <span class="keyword">this</span>)</span><br><span class="line">        <span class="comment">// ******************</span></span><br><span class="line">        destination.add(transform(checkIndexOverflow(index++), item))</span><br><span class="line">    <span class="keyword">return</span> destination</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> indexed = list.mapIndexed &#123; index, i -&gt;</span><br><span class="line">   <span class="string">&quot;k: <span class="variable">$index</span> v: <span class="variable">$i</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [k: 0 v: 1, k: 1 v: 2, k: 2 v: 3, k: 3 v: 4, k: 4 v: 5, k: 5 v: 6, k: 6 v: 7, k: 7 v: 8, k: 8 v: 9, k: 9 v: 10]</span></span><br><span class="line">println(indexed)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> notNullList: List&lt;<span class="built_in">Byte</span>&gt; = list.mapNotNull &#123;</span><br><span class="line">   <span class="keyword">if</span> (it % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="literal">null</span></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      it.toByte()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [1, 3, 5, 7, 9]</span></span><br><span class="line">println(notNullList)</span><br></pre></td></tr></table></figure><h2 id="zip-多个集合整合成一个"><a href="#zip-多个集合整合成一个" class="headerlink" title="zip 多个集合整合成一个"></a>zip 多个集合整合成一个</h2><h3 id="zip-pair"><a href="#zip-pair" class="headerlink" title="zip pair"></a>zip pair</h3><p>源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R, V&gt;</span> Iterable<span class="type">&lt;T&gt;</span>.<span class="title">zip</span><span class="params">(other: <span class="type">Iterable</span>&lt;<span class="type">R</span>&gt;, transform: (<span class="type">a</span>: <span class="type">T</span>, <span class="type">b</span>: <span class="type">R</span>) -&gt; <span class="type">V</span>)</span></span>: List&lt;V&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> first = iterator()</span><br><span class="line">    <span class="keyword">val</span> second = other.iterator()</span><br><span class="line">    <span class="keyword">val</span> list = ArrayList&lt;V&gt;(minOf(collectionSizeOrDefault(<span class="number">10</span>), other.collectionSizeOrDefault(<span class="number">10</span>)))</span><br><span class="line">    <span class="keyword">while</span> (first.hasNext() &amp;&amp; second.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// ******************</span></span><br><span class="line">        list.add(transform(first.next(), second.next()))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据方法简单的分析, 发现 <code>T</code> 发起的 <code>zip合拢</code> 操作, 将 <code>R</code> 类型的集合的数据, 借助 <code>transform</code> 函数, 将 <code>T</code> 和 <code>R</code> 传入 转化处新的类型 <code>V</code>, 而返回的接口类型是 <code>List&lt;V&gt;</code> 是 <code>ArrayList</code> 类型</p><p>使用方法: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> colors = listOf(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;brown&quot;</span>, <span class="string">&quot;grey&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> animals = listOf(<span class="string">&quot;fox&quot;</span>, <span class="string">&quot;bear&quot;</span>, <span class="string">&quot;wolf&quot;</span>)</span><br><span class="line">println(animals zip colors) <span class="comment">// [(fox, red), (bear, brown), (wolf, grey)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> twoAnimal = listOf(<span class="string">&quot;fox&quot;</span>, <span class="string">&quot;bear&quot;</span>)</span><br><span class="line">colors.zip(twoAnimal) <span class="comment">// [(red, fox), (brown, bear)]</span></span><br></pre></td></tr></table></figure><p>上面这段代码走的是 <code>zip(other) &#123; t1, t2 -&gt; t1 to t2 &#125;</code> 也就是说, 默认走的是 <code>Pair</code>, 也就是说将 <code>Pair</code> 存入到 <code>ArrayList</code> 中</p><h3 id="zip-自定义方法拦截映射"><a href="#zip-自定义方法拦截映射" class="headerlink" title="zip 自定义方法拦截映射"></a>zip 自定义方法拦截映射</h3><p>那么现在给个自定义方式的 <code>zip</code>, <code>public inline fun &lt;T, R, V&gt; Iterable&lt;T&gt;.zip(other: Iterable&lt;R&gt;, transform: (a: T, b: R) -&gt; V): List&lt;V&gt;</code></p><p>使用方法: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> colors = listOf(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;brown&quot;</span>, <span class="string">&quot;grey&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> animals = listOf(<span class="string">&quot;fox&quot;</span>, <span class="string">&quot;bear&quot;</span>, <span class="string">&quot;wolf&quot;</span>)</span><br><span class="line">println(colors.zip(animals) &#123; color, animal -&gt;</span><br><span class="line">   <span class="string">&quot;^<span class="variable">$color</span>, <span class="variable">$animal</span>^&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="unzip-解开-pair"><a href="#unzip-解开-pair" class="headerlink" title="unzip 解开 pair"></a>unzip 解开 pair</h3><p><code>unzip</code> 函数: 解开 <code>Pair</code> 的 <code>first</code> 和 <code>second</code></p><p>源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> Iterable<span class="type">&lt;Pair&lt;T, R&gt;</span>&gt;.<span class="title">unzip</span><span class="params">()</span></span>: Pair&lt;List&lt;T&gt;, List&lt;R&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> expectedSize = collectionSizeOrDefault(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">val</span> listT = ArrayList&lt;T&gt;(expectedSize)</span><br><span class="line">    <span class="keyword">val</span> listR = ArrayList&lt;R&gt;(expectedSize)</span><br><span class="line">    <span class="keyword">for</span> (pair <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// ******************</span></span><br><span class="line">        listT.add(pair.first)</span><br><span class="line">        listR.add(pair.second)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> listT to listR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numberPairs = listOf(<span class="string">&quot;one&quot;</span> to <span class="number">1</span>, <span class="string">&quot;two&quot;</span> to <span class="number">2</span>, <span class="string">&quot;three&quot;</span> to <span class="number">3</span>, <span class="string">&quot;four&quot;</span> to <span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> pair = numberPairs.unzip()</span><br><span class="line">println(pair.first) <span class="comment">// [one, two, three, four]</span></span><br><span class="line">println(pair.second) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="associate-关联-把元素拆分成两个存放到新的集合中"><a href="#associate-关联-把元素拆分成两个存放到新的集合中" class="headerlink" title="associate 关联: 把元素拆分成两个存放到新的集合中"></a>associate 关联: 把元素拆分成两个存放到新的集合中</h2><h3 id="associate"><a href="#associate" class="headerlink" title="associate"></a>associate</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77c0c315ebcb4e228be9792f451281df~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>看起来就是把 <code>T</code> 按照某种方式分割成 <code>k</code> 和 <code>v</code> 然后存储到 <code>Pair</code> 中</p><p>使用方式: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> associate = numbers.associate &#123; Pair(it.length, it) &#125;</span><br><span class="line">println(associate) <span class="comment">// &#123;3=two, 5=three, 4=four&#125;</span></span><br></pre></td></tr></table></figure><p><code>associateTo(LinkedHashMap&lt;K, V&gt;(capacity), transform)</code> 他的返回值为 <code>LinkedHashMap</code></p><p>源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, K, V, M : MutableMap&lt;in K, in V&gt;</span>&gt; Iterable<span class="type">&lt;T&gt;</span>.<span class="title">associateTo</span><span class="params">(destination: <span class="type">M</span>, transform: (<span class="type">T</span>) -&gt; <span class="type">Pair</span>&lt;<span class="type">K</span>, V&gt;)</span></span>: M &#123;</span><br><span class="line">    <span class="keyword">for</span> (element <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// ******************</span></span><br><span class="line">        destination += transform(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> destination</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看其源码果然这样</p><p>不过值得注意的是 <code>associateTo</code></p><h3 id="associateTo-提供集合和自定义拆解方法"><a href="#associateTo-提供集合和自定义拆解方法" class="headerlink" title="associateTo: 提供集合和自定义拆解方法"></a>associateTo: 提供集合和自定义拆解方法</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> hashMap = numbers.associateTo(HashMap(<span class="number">10</span>)) &#123;</span><br><span class="line">   Pair(it.length, it)</span><br><span class="line">&#125;</span><br><span class="line">println(hashMap) <span class="comment">// &#123;3=two, 5=three, 4=four&#125;</span></span><br></pre></td></tr></table></figure><h3 id="associateBy-借助集合元素获得-Key"><a href="#associateBy-借助集合元素获得-Key" class="headerlink" title="associateBy: 借助集合元素获得 Key"></a>associateBy: 借助集合元素获得 <code>Key</code></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> associateBy = numbers.associateBy &#123; it.length &#125;</span><br><span class="line">println(associateBy) <span class="comment">// &#123;3=two, 5=three, 4=four&#125;</span></span><br></pre></td></tr></table></figure><p>源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, K, M : MutableMap&lt;in K, in T&gt;</span>&gt; Iterable<span class="type">&lt;T&gt;</span>.<span class="title">associateByTo</span><span class="params">(destination: <span class="type">M</span>, keySelector: (<span class="type">T</span>) -&gt; <span class="type">K</span>)</span></span>: M &#123;</span><br><span class="line">    <span class="keyword">for</span> (element <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// ******************</span></span><br><span class="line">        destination.put(keySelector(element), element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> destination</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="associateWith-根据集合元素的值计算出-value"><a href="#associateWith-根据集合元素的值计算出-value" class="headerlink" title="associateWith: 根据集合元素的值计算出 value"></a>associateWith: 根据集合元素的值计算出 value</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/609df853585a4651b4533d0ecb88fdec~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> associateWith = numbers.associateWith &#123;</span><br><span class="line">   it.length</span><br><span class="line">&#125;</span><br><span class="line">println(associateWith) <span class="comment">// &#123;one=3, two=3, three=5, four=4&#125;</span></span><br></pre></td></tr></table></figure><p>源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;K, V, M : MutableMap&lt;in K, in V&gt;</span>&gt; Iterable<span class="type">&lt;K&gt;</span>.<span class="title">associateWithTo</span><span class="params">(destination: <span class="type">M</span>, valueSelector: (<span class="type">K</span>) -&gt; <span class="type">V</span>)</span></span>: M &#123;</span><br><span class="line">    <span class="keyword">for</span> (element <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// ******************</span></span><br><span class="line">        destination.put(element, valueSelector(element))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> destination</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="associateBy-自定义-key-和-自定义-value-方式"><a href="#associateBy-自定义-key-和-自定义-value-方式" class="headerlink" title="associateBy: 自定义 key 和 自定义 value 方式"></a>associateBy: 自定义 key 和 自定义 value 方式</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67698ad513a946d2b3b0d12833817e12~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line">println(numbers.associateBy(&#123; it.length &#125;, &#123; it.toUpperCase() &#125;)) <span class="comment">// &#123;3=TWO, 5=THREE, 4=FOUR&#125;</span></span><br></pre></td></tr></table></figure><p>源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, K, V&gt;</span> Iterable<span class="type">&lt;T&gt;</span>.<span class="title">associateBy</span><span class="params">(keySelector: (<span class="type">T</span>) -&gt; <span class="type">K</span>, valueTransform: (<span class="type">T</span>) -&gt; <span class="type">V</span>)</span></span>: Map&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> capacity = mapCapacity(collectionSizeOrDefault(<span class="number">10</span>)).coerceAtLeast(<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> associateByTo(LinkedHashMap&lt;K, V&gt;(capacity), keySelector, valueTransform)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, K, V, M : MutableMap&lt;in K, in V&gt;</span>&gt; Iterable<span class="type">&lt;T&gt;</span>.<span class="title">associateByTo</span><span class="params">(destination: <span class="type">M</span>, keySelector: (<span class="type">T</span>) -&gt; <span class="type">K</span>, valueTransform: (<span class="type">T</span>) -&gt; <span class="type">V</span>)</span></span>: M &#123;</span><br><span class="line">    <span class="keyword">for</span> (element <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="comment">// 关键代码: </span></span><br><span class="line">        destination.put(keySelector(element), valueTransform(element))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> destination</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="flatten-将集合的子集合全部拿出来创建成新的集合"><a href="#flatten-将集合的子集合全部拿出来创建成新的集合" class="headerlink" title="flatten: 将集合的子集合全部拿出来创建成新的集合"></a>flatten: 将集合的子集合全部拿出来创建成新的集合</h2><blockquote><p><code>List&lt;List&lt;String&gt;&gt;</code></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numberSets = listOf(setOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), setOf(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), setOf(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">val</span> flatten = numberSets.flatten()</span><br><span class="line">println(flatten) <span class="comment">// [1, 2, 3, 4, 5, 6, 1, 2]</span></span><br></pre></td></tr></table></figure><p>源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Iterable<span class="type">&lt;Iterable&lt;T&gt;</span>&gt;.<span class="title">flatten</span><span class="params">()</span></span>: List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> result = ArrayList&lt;T&gt;()</span><br><span class="line">    <span class="keyword">for</span> (element <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        result.addAll(element)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="flatMap-将子List拿出来addAll到一个新的集合中"><a href="#flatMap-将子List拿出来addAll到一个新的集合中" class="headerlink" title="flatMap: 将子List拿出来addAll到一个新的集合中"></a>flatMap: 将子List拿出来addAll到一个新的集合中</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/333700052ffd4ed1b17b3ee341b4ec38~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> containers = listOf(</span><br><span class="line">   listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>),</span><br><span class="line">   listOf(<span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>, <span class="string">&quot;six&quot;</span>),</span><br><span class="line">   listOf(<span class="string">&quot;seven&quot;</span>, <span class="string">&quot;eight&quot;</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">val</span> flatMap = containers.flatMap &#123;</span><br><span class="line">   it</span><br><span class="line">&#125;</span><br><span class="line">println(flatMap) <span class="comment">// [one, two, three, four, five, six, seven, eight]</span></span><br></pre></td></tr></table></figure><p>源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> Iterable<span class="type">&lt;T&gt;</span>.<span class="title">flatMap</span><span class="params">(transform: (<span class="type">T</span>) -&gt; <span class="type">Iterable</span>&lt;<span class="type">R</span>&gt;)</span></span>: List&lt;R&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> flatMapTo(ArrayList&lt;R&gt;(), transform)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R, C : MutableCollection&lt;in R&gt;</span>&gt; Iterable<span class="type">&lt;T&gt;</span>.<span class="title">flatMapTo</span><span class="params">(destination: <span class="type">C</span>, transform: (<span class="type">T</span>) -&gt; <span class="type">Iterable</span>&lt;<span class="type">R</span>&gt;)</span></span>: C &#123;</span><br><span class="line">    <span class="keyword">for</span> (element <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> list = transform(element)</span><br><span class="line">        destination.addAll(list)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> destination</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其他的函数就不演示了, 和上面的 Map 和 associate 差不多</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ce25e02f420c4f7fabdb277e968b2560~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="joinToString-字符串打印方式自定义"><a href="#joinToString-字符串打印方式自定义" class="headerlink" title="joinToString: 字符串打印方式自定义"></a>joinToString: 字符串打印方式自定义</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc7539c7c489407d9b31342764d7fc36~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> joinToString =</span><br><span class="line">   numbers.joinToString(separator = <span class="string">&quot;^&quot;</span>, prefix = <span class="string">&quot;#&quot;</span>, postfix = <span class="string">&quot;#&quot;</span>, transform = &#123; it.toUpperCase() &#125;)</span><br><span class="line">println(joinToString) <span class="comment">// #ONE^TWO^THREE^FOUR#</span></span><br></pre></td></tr></table></figure><p>源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Iterable<span class="type">&lt;T&gt;</span>.<span class="title">joinToString</span><span class="params">(separator: <span class="type">CharSequence</span> = <span class="string">&quot;, &quot;</span>, prefix: <span class="type">CharSequence</span> = <span class="string">&quot;&quot;</span>, postfix: <span class="type">CharSequence</span> = <span class="string">&quot;&quot;</span>, limit: <span class="type">Int</span> = <span class="number">-1</span>, truncated: <span class="type">CharSequence</span> = <span class="string">&quot;...&quot;</span>, transform: ((<span class="type">T</span>) -&gt; <span class="type">CharSequence</span>)? = <span class="literal">null</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, A : Appendable&gt;</span> Iterable<span class="type">&lt;T&gt;</span>.<span class="title">joinTo</span><span class="params">(buffer: <span class="type">A</span>, separator: <span class="type">CharSequence</span> = <span class="string">&quot;, &quot;</span>, prefix: <span class="type">CharSequence</span> = <span class="string">&quot;&quot;</span>, postfix: <span class="type">CharSequence</span> = <span class="string">&quot;&quot;</span>, limit: <span class="type">Int</span> = <span class="number">-1</span>, truncated: <span class="type">CharSequence</span> = <span class="string">&quot;...&quot;</span>, transform: ((<span class="type">T</span>) -&gt; <span class="type">CharSequence</span>)? = <span class="literal">null</span>)</span></span>: A &#123;</span><br><span class="line">    <span class="comment">// buffer ==&gt; StringBuilder</span></span><br><span class="line">    buffer.append(prefix)</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (element <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (++count &gt; <span class="number">1</span>) buffer.append(separator)</span><br><span class="line">        <span class="keyword">if</span> (limit &lt; <span class="number">0</span> || count &lt;= limit) &#123;</span><br><span class="line">            buffer.appendElement(element, transform)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果 count 大于 limit 的话, 直接加入阶段字符串</span></span><br><span class="line">    <span class="keyword">if</span> (limit &gt;= <span class="number">0</span> &amp;&amp; count &gt; limit) buffer.append(truncated)</span><br><span class="line">    <span class="comment">// 加入结尾标志</span></span><br><span class="line">    buffer.append(postfix)</span><br><span class="line">    <span class="keyword">return</span> buffer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h1><blockquote><p>根据接受的lambda返回的 true or false 来产生新的集合</p></blockquote><h2 id="filter-分析每个元素是否满足某种条件"><a href="#filter-分析每个元素是否满足某种条件" class="headerlink" title="filter: 分析每个元素是否满足某种条件"></a>filter: 分析每个元素是否满足某种条件</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe63a72acf1246f49b5dfabc462a7227~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>从遍历元素, 然后判断元素是否满足某种条件返回 boolean 类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line">println(numbers.filter &#123; it.length &gt; <span class="number">3</span> &#125;) <span class="comment">// [three, four]</span></span><br></pre></td></tr></table></figure><p>过滤 map 的条件是否满足</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/161e19f0b9444ba8b3b2db41f854f4f1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbersMap = mapOf(<span class="string">&quot;key1&quot;</span> to <span class="number">1</span>, <span class="string">&quot;key2&quot;</span> to <span class="number">2</span>, <span class="string">&quot;key3&quot;</span> to <span class="number">3</span>, <span class="string">&quot;key11&quot;</span> to <span class="number">11</span>)</span><br><span class="line">println(numbersMap.filter &#123; (key, value) -&gt;</span><br><span class="line">   key.endsWith(<span class="string">&quot;1&quot;</span>) &amp;&amp; value &gt; <span class="number">3</span></span><br><span class="line">&#125;) <span class="comment">// &#123;key11=11&#125;</span></span><br></pre></td></tr></table></figure><h2 id="filterIsInstance-根据类型过滤"><a href="#filterIsInstance-根据类型过滤" class="headerlink" title="filterIsInstance: 根据类型过滤"></a>filterIsInstance: 根据类型过滤</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="number">1</span>, <span class="string">&quot;two&quot;</span>, <span class="number">3.0</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> list = numbers.filterIsInstance&lt;<span class="built_in">Double</span>&gt;()</span><br><span class="line">println(list)</span><br></pre></td></tr></table></figure><p>源码: </p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef1f37d594bf4834ae11300e6e1739fb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="partition-根据某种条件分割一个集合为多个集合"><a href="#partition-根据某种条件分割一个集合为多个集合" class="headerlink" title="partition: 根据某种条件分割一个集合为多个集合"></a>partition: 根据某种条件分割一个集合为多个集合</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> partition = numbers.partition &#123; it.length &gt; <span class="number">3</span> &#125;</span><br><span class="line">println(partition.first)</span><br><span class="line">println(partition.second)</span><br></pre></td></tr></table></figure><p>源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Iterable<span class="type">&lt;T&gt;</span>.<span class="title">partition</span><span class="params">(predicate: (<span class="type">T</span>) -&gt; <span class="type">Boolean</span>)</span></span>: Pair&lt;List&lt;T&gt;, List&lt;T&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> first = ArrayList&lt;T&gt;()</span><br><span class="line">    <span class="keyword">val</span> second = ArrayList&lt;T&gt;()</span><br><span class="line">    <span class="keyword">for</span> (element <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">// 核心代码在这里</span></span><br><span class="line">        <span class="keyword">if</span> (predicate(element)) &#123;</span><br><span class="line">            first.add(element)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            second.add(element)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Pair(first, second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="any-all-none-验证集合是否满足某个条件"><a href="#any-all-none-验证集合是否满足某个条件" class="headerlink" title="any all none 验证集合是否满足某个条件"></a>any all none 验证集合是否满足某个条件</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line">println(numbers.any &#123; it.startsWith(<span class="string">&quot;t&quot;</span>) &#125;) <span class="comment">// true 只要有一个元素满足条件就返回true</span></span><br><span class="line">println(numbers.none &#123; it.length &lt; <span class="number">2</span> &#125;) <span class="comment">// 如果有一个条件满足就返回 false , 否则返回 true</span></span><br><span class="line">println(numbers.all &#123; it.length == <span class="number">3</span> &#125;) <span class="comment">// 所有都要满足条件才会返回 true, 否则返回false</span></span><br></pre></td></tr></table></figure><h1 id="groupby-分组"><a href="#groupby-分组" class="headerlink" title="groupby 分组"></a>groupby 分组</h1><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc039ec9870e44b0be4ec3b58d9ac10a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>可以根据集合中的元素计算出分组的<code>key</code>, 然后存放满足该<code>key</code>的 <code>List</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> groupBy = numbers.groupBy &#123; it.length &#125;.toSortedMap &#123; o1, o2 -&gt; o1 - o2 &#125;</span><br><span class="line">println(groupBy) <span class="comment">// &#123;3=[one, two], 4=[four, five], 5=[three]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> groupBy1 = numbers.groupBy(&#123; it.length &#125;) &#123;</span><br><span class="line">   it.toUpperCase()</span><br><span class="line">&#125;</span><br><span class="line">println(groupBy1) <span class="comment">// &#123;3=[ONE, TWO], 5=[THREE], 4=[FOUR, FIVE]&#125;</span></span><br></pre></td></tr></table></figure><p>grouping: 根据 value 获得 key</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>, <span class="string">&quot;six&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> grouping = numbers.groupingBy &#123; it.length &#125;</span><br><span class="line">println(grouping.keyOf(<span class="string">&quot;six&quot;</span>)) <span class="comment">// 3</span></span><br><span class="line">println(grouping.keyOf(<span class="string">&quot;three&quot;</span>)) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h1 id="取集合的⼀部分"><a href="#取集合的⼀部分" class="headerlink" title="取集合的⼀部分"></a>取集合的⼀部分</h1><h2 id="Slice-取一部分集合的元素-索引从0开始"><a href="#Slice-取一部分集合的元素-索引从0开始" class="headerlink" title="Slice: 取一部分集合的元素(索引从0开始)"></a>Slice: 取一部分集合的元素(索引从0开始)</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>, <span class="string">&quot;six&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> slice = numbers.slice(<span class="number">0.</span><span class="number">.3</span>) <span class="comment">// [one, two, three, four]</span></span><br><span class="line">println(slice)</span><br><span class="line"><span class="keyword">val</span> slice1 = numbers.slice(<span class="number">3.</span><span class="number">.5</span>) <span class="comment">// [four, five, six]</span></span><br><span class="line">println(slice1)</span><br></pre></td></tr></table></figure><h2 id="take-从头开始取前n个元素"><a href="#take-从头开始取前n个元素" class="headerlink" title="take: 从头开始取前n个元素"></a>take: 从头开始取前n个元素</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>, <span class="string">&quot;six&quot;</span>)</span><br><span class="line">println(numbers.take(<span class="number">1</span>)) <span class="comment">// [one]</span></span><br><span class="line">println(numbers.take(<span class="number">2</span>)) <span class="comment">// [one, two]</span></span><br><span class="line">println(numbers.take(<span class="number">6</span>)) <span class="comment">// [one, two, three, four, five, six]</span></span><br></pre></td></tr></table></figure><h2 id="drop-从头开始删除前n个元素"><a href="#drop-从头开始删除前n个元素" class="headerlink" title="drop: 从头开始删除前n个元素"></a>drop: 从头开始删除前n个元素</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>, <span class="string">&quot;six&quot;</span>)</span><br><span class="line">println(numbers.drop(<span class="number">1</span>)) <span class="comment">// 从前面开始删除前1个</span></span><br><span class="line">println(numbers.drop(<span class="number">2</span>)) <span class="comment">// 从前面开始删除前2个</span></span><br></pre></td></tr></table></figure><h2 id="Chunked-分块"><a href="#Chunked-分块" class="headerlink" title="Chunked: 分块"></a>Chunked: 分块</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13]]</span></span><br><span class="line"><span class="comment">[3, 12, 21, 30, 25]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">val</span> numbers = (<span class="number">0.</span><span class="number">.13</span>).toList()</span><br><span class="line"><span class="keyword">val</span> chunked: List&lt;List&lt;<span class="built_in">Int</span>&gt;&gt; = numbers.chunked(<span class="number">3</span>)</span><br><span class="line">println(chunked) <span class="comment">// [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13]]</span></span><br><span class="line"><span class="keyword">val</span> chunked1 = numbers.chunked(<span class="number">3</span>) &#123; list -&gt;</span><br><span class="line">   list.sum()</span><br><span class="line">&#125;</span><br><span class="line">println(chunked1) <span class="comment">// [3, 12, 21, 30, 25]</span></span><br></pre></td></tr></table></figure><h2 id="Windowed-步长自定义的分块函数"><a href="#Windowed-步长自定义的分块函数" class="headerlink" title="Windowed: 步长自定义的分块函数"></a>Windowed: 步长自定义的分块函数</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> windowed = numbers.windowed(<span class="number">3</span>, step = <span class="number">1</span>, partialWindows = <span class="literal">false</span>) &#123; list -&gt;</span><br><span class="line">   list.map &#123; it.toUpperCase() &#125;</span><br><span class="line">&#125;</span><br><span class="line">println(windowed) <span class="comment">// [[ONE, TWO, THREE], [TWO, THREE, FOUR], [THREE, FOUR, FIVE]]</span></span><br></pre></td></tr></table></figure><h2 id="subList-从集合里找一个子集返回"><a href="#subList-从集合里找一个子集返回" class="headerlink" title="subList: 从集合里找一个子集返回"></a>subList: 从集合里找一个子集返回</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>, <span class="string">&quot;six&quot;</span>)</span><br><span class="line">println(numbers.javaClass) <span class="comment">// class java.util.Arrays$ArrayList</span></span><br><span class="line"><span class="keyword">val</span> subList = numbers.subList(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">println(subList.javaClass) <span class="comment">// class java.util.AbstractList$RandomAccessSubList</span></span><br><span class="line">println(subList) <span class="comment">// [one, two]</span></span><br></pre></td></tr></table></figure><h1 id="取单个元素"><a href="#取单个元素" class="headerlink" title="取单个元素"></a>取单个元素</h1><h2 id="elementAt-按位置取"><a href="#elementAt-按位置取" class="headerlink" title="elementAt: 按位置取"></a>elementAt: 按位置取</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = linkedSetOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>)</span><br><span class="line">println(numbers.elementAt(<span class="number">0</span>)) <span class="comment">// one</span></span><br><span class="line">println(numbers.elementAt(<span class="number">3</span>)) <span class="comment">// four</span></span><br></pre></td></tr></table></figure><h2 id="first-和-last"><a href="#first-和-last" class="headerlink" title="first 和 last"></a>first 和 last</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = linkedSetOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>)</span><br><span class="line">println(numbers.first()) <span class="comment">// one</span></span><br><span class="line">println(numbers.last()) <span class="comment">// five</span></span><br></pre></td></tr></table></figure><h2 id="first-and-last-按条件取一个"><a href="#first-and-last-按条件取一个" class="headerlink" title="first and last: 按条件取一个"></a>first and last: 按条件取一个</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = linkedSetOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>)</span><br><span class="line">println(numbers.first &#123; it.length == <span class="number">4</span> &#125;) <span class="comment">// four</span></span><br></pre></td></tr></table></figure><h2 id="find-根据条件取一个"><a href="#find-根据条件取一个" class="headerlink" title="find: 根据条件取一个"></a>find: 根据条件取一个</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">println(numbers.find &#123; it &gt; <span class="number">3</span> &#125;) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="random-随机取一个"><a href="#random-随机取一个" class="headerlink" title="random: 随机取一个"></a>random: 随机取一个</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> number = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">println(number.random()) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="检测存在与否"><a href="#检测存在与否" class="headerlink" title="检测存在与否"></a>检测存在与否</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">println(numbers.contains(<span class="number">2</span>))</span><br><span class="line">println(numbers.containsAll(listOf(<span class="number">3</span>, <span class="number">4</span>)))</span><br></pre></td></tr></table></figure><blockquote><p>还有 <code>isEmpty</code> 和 <code>isNotEmpty</code> 就不做测试了</p></blockquote><h1 id="集合排序"><a href="#集合排序" class="headerlink" title="集合排序"></a>集合排序</h1><p><code>Comparable</code> 主要给类实现用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Program</span>(<span class="keyword">val</span> version: <span class="built_in">Int</span>) : Comparable&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">compareTo</span><span class="params">(other: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = <span class="keyword">this</span>.version - other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> program = Program(<span class="number">13</span>)</span><br><span class="line">   println(program &gt; <span class="number">10</span>)</span><br><span class="line">   println(program &gt; <span class="number">13</span>)</span><br><span class="line">   println(program &lt; <span class="number">20</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以不使用<code>Comparable</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Program</span>(<span class="keyword">val</span> version: <span class="built_in">Int</span>) &#123;</span><br><span class="line">   <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">compareTo</span><span class="params">(program2: <span class="type">Program</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.version - program2.version</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">compareTo</span><span class="params">(i: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.version - i</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> program1 = Program(<span class="number">13</span>)</span><br><span class="line">   <span class="keyword">val</span> program2 = Program(<span class="number">14</span>)</span><br><span class="line">   println(program1 &gt; program2)</span><br><span class="line">   program1 &gt; <span class="number">14</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>倒序和随机顺序</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>)</span><br><span class="line">println(numbers) <span class="comment">// [one, two, three, four]</span></span><br><span class="line">println(numbers.reversed()) <span class="comment">// [four, three, two, one]</span></span><br><span class="line">println(numbers.asReversed()) <span class="comment">// [four, three, two, one]</span></span><br><span class="line">println(numbers.shuffled()) <span class="comment">// [four, one, three, two]</span></span><br></pre></td></tr></table></figure><h1 id="集合聚合操作"><a href="#集合聚合操作" class="headerlink" title="集合聚合操作"></a>集合聚合操作</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="number">6</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">4</span>)</span><br><span class="line">println(<span class="string">&quot;Count: <span class="subst">$&#123;numbers.count()&#125;</span>&quot;</span>) <span class="comment">// Count: 4</span></span><br><span class="line">println(<span class="string">&quot;Max: <span class="subst">$&#123;numbers.maxOrNull()&#125;</span>&quot;</span>) <span class="comment">// Max: 42</span></span><br><span class="line">println(<span class="string">&quot;Min: <span class="subst">$&#123;numbers.minOrNull()&#125;</span>&quot;</span>) <span class="comment">// Min: 4</span></span><br><span class="line">println(<span class="string">&quot;Average: <span class="subst">$&#123;numbers.average()&#125;</span>&quot;</span>) <span class="comment">// Average: 15.5</span></span><br><span class="line">println(<span class="string">&quot;Sum: <span class="subst">$&#123;numbers.sum()&#125;</span>&quot;</span>) <span class="comment">// Sum: 62</span></span><br></pre></td></tr></table></figure><h2 id="fold-有初始化值R和集合T的某种组合的结果R返回回去"><a href="#fold-有初始化值R和集合T的某种组合的结果R返回回去" class="headerlink" title="fold: 有初始化值R和集合T的某种组合的结果R返回回去"></a>fold: 有初始化值R和集合T的某种组合的结果R返回回去</h2><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e144e6a18974df093b3b7561e935126~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="reduce-把集合的第一个值当作S-然后和集合的每个元素T做某种操作最后返回-S"><a href="#reduce-把集合的第一个值当作S-然后和集合的每个元素T做某种操作最后返回-S" class="headerlink" title="reduce: 把集合的第一个值当作S, 然后和集合的每个元素T做某种操作最后返回 S"></a>reduce: 把集合的第一个值当作S, 然后和集合的每个元素T做某种操作最后返回 S</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e5170d0faac4da587d88b68697e587f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h1 id="set相关操作"><a href="#set相关操作" class="headerlink" title="set相关操作"></a>set相关操作</h1><h2 id="联合-union-、-交集-intersect-和-差集-subtract"><a href="#联合-union-、-交集-intersect-和-差集-subtract" class="headerlink" title="联合 union 、 交集 intersect 和 差集 subtract"></a>联合 union 、 交集 intersect 和 差集 subtract</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> numbers = setOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>)</span><br><span class="line"><span class="comment">// 合并两个集合</span></span><br><span class="line">println(numbers union setOf(<span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>)) <span class="comment">// [one, two, three, four, five]</span></span><br><span class="line"><span class="comment">// 找交集</span></span><br><span class="line">println(numbers intersect setOf(<span class="string">&quot;one&quot;</span>)) <span class="comment">// [one] </span></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line">println(numbers subtract setOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;three&quot;</span>)) <span class="comment">// [two]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> 集合转换 </tag>
            
            <tag> map映射 </tag>
            
            <tag> mapTo </tag>
            
            <tag> mapIndexed </tag>
            
            <tag> zip </tag>
            
            <tag> zip pair </tag>
            
            <tag> unzip </tag>
            
            <tag> associate </tag>
            
            <tag> associateTo </tag>
            
            <tag> associateBy </tag>
            
            <tag> associateWith </tag>
            
            <tag> flatten </tag>
            
            <tag> flatMap </tag>
            
            <tag> joinToString </tag>
            
            <tag> 过滤 </tag>
            
            <tag> filter </tag>
            
            <tag> filterInstance </tag>
            
            <tag> partition </tag>
            
            <tag> any </tag>
            
            <tag> all </tag>
            
            <tag> none </tag>
            
            <tag> groupby </tag>
            
            <tag> 分组 </tag>
            
            <tag> slice </tag>
            
            <tag> take </tag>
            
            <tag> drop </tag>
            
            <tag> Chunked </tag>
            
            <tag> Windowed </tag>
            
            <tag> subList </tag>
            
            <tag> elementAt </tag>
            
            <tag> first </tag>
            
            <tag> last </tag>
            
            <tag> find </tag>
            
            <tag> random </tag>
            
            <tag> 集合排序 </tag>
            
            <tag> 集合取一个元素 </tag>
            
            <tag> 集合聚合操作 </tag>
            
            <tag> fold </tag>
            
            <tag> reduce </tag>
            
            <tag> set相关操作 </tag>
            
            <tag> 联合 </tag>
            
            <tag> union </tag>
            
            <tag> 交集 </tag>
            
            <tag> intersect </tag>
            
            <tag> 差集 </tag>
            
            <tag> subtract </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十一、kotlin的协程(一)</title>
      <link href="/2022/12/03/07kotlin/%E5%8D%81%E4%B8%80%E3%80%81kotlin%E7%9A%84%E5%8D%8F%E7%A8%8B(%E4%B8%80)/"/>
      <url>/2022/12/03/07kotlin/%E5%8D%81%E4%B8%80%E3%80%81kotlin%E7%9A%84%E5%8D%8F%E7%A8%8B(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="学习的前提"><a href="#学习的前提" class="headerlink" title="学习的前提"></a>学习的前提</h1><ol><li><code>java</code>线程需要大概知道点</li><li><strong>协程是线程执行的任务, 协程和用户线程的区别在于, 协程背靠强大的编译器, 协程有专属于协程的调度器和一堆方便好用的函数, 用户可以在一定的范围下把协程给自己想要的线程执行</strong></li><li>了解什么是挂起? 挂起的意思是保存上下文环境, 将协程暂停, 挂起, 然后线程继续做别的事情</li><li>线程负责执行, 协程负责任务</li></ol><h1 id="协程是什么"><a href="#协程是什么" class="headerlink" title="协程是什么?"></a>协程是什么?</h1><p>我觉得协程是一种开发人员可以自行决定代码在何处<strong>挂起</strong>、何处<strong>恢复</strong>的功能</p><p>如果我就这么说你肯定会不满意！为什么？</p><p>因为上面定义的是 <code>Generator</code> 类型的协程 ，是 <code>python</code> <code>JavaScript</code> <code>lua</code> 的协程</p><p>这种线程不支持真正的多线程</p><blockquote><p><code>python</code>有多线程，但不支持多线程并发（<code>GIL</code>）</p></blockquote><p>对于 <code>kotlin</code> 来说协程即满足了上面的挂起和恢复功能，还满足了 切线程</p><h2 id="协程的分类"><a href="#协程的分类" class="headerlink" title="协程的分类"></a>协程的分类</h2><p>在市面上, 协程的概念没有特别明细, 各个编程语言设计者都有自己的想法和思路, 虽然协程的实现细节可能不一样, 但大体分类还是能区分出来的</p><h3 id="协程按照有栈和无栈分类"><a href="#协程按照有栈和无栈分类" class="headerlink" title="协程按照有栈和无栈分类"></a>协程按照有栈和无栈分类</h3><p>有栈协程: 这种协程和线程一样, 有着自己的线程栈</p><p>有栈协程可以在任意函数调用层任意的位置调度, 而无栈协程在这方面表现的力不从心, 市面上的 <code>golang</code> 就是有栈协程实现的, 不过<br><code>golang</code>做了很多的优化, 每个协程栈的大小最小是<code>4k</code>, 和线程的 上百<code>kb</code> 级别对比起来, 轻了很多很多</p><p>无栈协程: 无栈协程, 一般没有记录的协程栈, 主要存储的数据都在状态机或者闭包的方式实现, <code>kotlin</code>通常被认为是无栈协程, 使用状态机代替协程栈, 它在挂起函数的挂起点生成一个状态机记录协程数据</p><h3 id="按照调度的控制权分类"><a href="#按照调度的控制权分类" class="headerlink" title="按照调度的控制权分类"></a>按照调度的控制权分类</h3><p>这种方式我们分为: 对称协程和非对称协程</p><p>对称协程: 任何一个协程都是独立的, 平等的, 调度的权利可以在协程和协程间转移, 就像 <code>golang</code> , 他就是对称协程, 借助 <code>channel</code> 来转移调度权</p><p>非对称协程: 协程和协程之间的调度权是调度与被调度, 所以是不对等的</p><h1 id="为什么使用协程-或者说协程的优势是什么"><a href="#为什么使用协程-或者说协程的优势是什么" class="headerlink" title="为什么使用协程? 或者说协程的优势是什么?"></a>为什么使用协程? 或者说协程的优势是什么?</h1><p>答: 协程的优势在于</p><ol><li>精细化调度, 前一秒还在用 <code>UI</code> 线程执行一些 <code>UI</code> 更新的操作, 后一秒发现任务需要 阻塞, 该阻塞任务就切给其他线程去执行了, <code>UI</code>线程继续刷新<code>UI</code></li><li>像写一般代码一样写出异步代码, 更加便捷的写出高并发代码</li><li>如果协程库底层实现了属于协程的非阻塞 <code>IO</code> 函数的话, 协程还合适 <code>IO</code> 操作</li><li>协程自身的上下文切换不需要陷入到内核中, 而且协程的使用使得 <strong>线程</strong> 的数量变少, 减少了上下文切换需要的频率</li></ol><h2 id="协程和线程的分工再明细些"><a href="#协程和线程的分工再明细些" class="headerlink" title="协程和线程的分工再明细些"></a>协程和线程的分工再明细些</h2><p>协程并不是取代线程而产生的, 协程抽象于线程, 线程是<code>CPU</code>的最小单元, 从另一个角度看, 线程分割了<code>CPU</code>的执行力, <strong>协程是组织好的代码流程</strong>, 协程需要线程执行, 但又不会直接操控线程, 而是借助协程调度器(看源码是借助<code>Interruptor</code>), 调度的协程</p><h1 id="协程基础"><a href="#协程基础" class="headerlink" title="协程基础"></a>协程基础</h1><h2 id="Hello协程"><a href="#Hello协程" class="headerlink" title="Hello协程"></a>Hello协程</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GlobalScope启动的线程可能存在问题, 需要添加该注解表示下</span></span><br><span class="line"><span class="meta">@DelicateCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// 创建一个全局的协程空间, 该协程的声明周期会直到 app 结束后才会释放, 所以需要注意这点, 该函数更 new Thread 一样</span></span><br><span class="line">   GlobalScope.launch &#123;</span><br><span class="line">      <span class="comment">// 挂起函数, 主线程执行到这里, 会挂起该作用域的协程, 然后主线程跳出该协程作用域</span></span><br><span class="line">      delay(<span class="number">1000</span>)</span><br><span class="line">      <span class="comment">// 等待协程被挂起 1 sec 后, 执行下面代码</span></span><br><span class="line">      println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: 1&quot;</span>) <span class="comment">// Thread[DefaultDispatcher-worker-1,5,main]: 1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 主线程遇到上面的 挂起函数后, 直接跳到这里, 执行打印</span></span><br><span class="line">   println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: 2&quot;</span>) <span class="comment">// Thread[main,5,main]: 2</span></span><br><span class="line">   <span class="comment">// 主线程等待 2 sec</span></span><br><span class="line">   Thread.sleep(<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对上面代码的解读:</p><ol><li><p><code>delay</code> 是挂起函数, 和线程中的 <code>Thread.Sleep(...)</code> 一样, 但是挂起函数只能给协程执行的, 不能给普通线程执行, 否则会报错</p></li><li><p><strong>遇到挂起函数后, 协程其实还不会被挂起, 除非协程遇到异步调用</strong>, 而上面的 <code>delay(1000)</code> 恰恰是异步调用, 这里将会产生一个挂起点, 协程将被挂起</p></li></ol><blockquote><p>在 kotlin 1.5 中 <code>GlobalScope</code> 已经被 <code>kotlin</code> 团队指出存在问题, 所以使用的时候需要注意, 考虑好, <code>GlobalScope</code> 申请的协程是否在另一个地方也被使用, 或者你申请的协程是否同时被另一个人使用? <code>GlobalScope</code> 申请的协程会跟着<code>app</code>同生共死, 即使你没用再使用它, 它还是在, 并且 <code>GlobalScope</code> 获取的协程无法 <code>cancel</code> 取消, 所以需要使用的话请慎重考虑其带来的后果</p></blockquote><h2 id="挂起函数"><a href="#挂起函数" class="headerlink" title="挂起函数"></a>挂起函数</h2><h3 id="什么是挂起函数"><a href="#什么是挂起函数" class="headerlink" title="什么是挂起函数?"></a>什么是挂起函数?</h3><p>在<code>kotlin</code>中 被 <code>suspend</code> 标记的函数叫<strong>挂起函数</strong></p><p><strong><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F3994917-421263f1f0e41d16.png&refer=http%3A%2F%2Fupload-images.jianshu.io&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1650228753&t=a500c9cf960ad108ea0a153fea9154a4" alt="img"></strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">()</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>如果代码反编译成<code>java</code>代码, 就成为: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> static <span class="keyword">final</span> Object f(Continuation $completion) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Unit</span>.INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现 <strong>挂起函数</strong> 的区别了 <code>Continuation</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Continuation</span>&lt;<span class="type">in T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> context: CoroutineContext</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)</span></span> <span class="comment">// 将某个步骤的结果传递给 result</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CoroutineContext</code>可以看成是协程存储部分功能的集合</p><p><strong>该接口非常的明显了, 存储的是一个协程上下文和一个用于异步操作结束协程恢复调用使用的函数<code>resumeWith</code></strong></p><h3 id="为什么要使用挂起函数"><a href="#为什么要使用挂起函数" class="headerlink" title="为什么要使用挂起函数?"></a>为什么要使用挂起函数?</h3><p>协程遇到挂起函数并且<strong>遇到异步操作</strong>, 协程就会被挂起, 但<strong>线程不会被阻塞, 可以去运行其他协程或者处理其他事物</strong></p><blockquote><p>挂起函数, 未必就一定会挂起协程, 只有在挂起函数内部出现<strong>异步操作</strong>才会被挂起, 我们把挂起函数内部的异步操作叫做<strong>挂起点</strong></p></blockquote><blockquote><p>这样的好处就是这条线程不会被阻塞, 真正阻塞的是协程, 该线程可以继续做其他操作</p></blockquote><h3 id="怎么去除suspend-普通函数怎么调用挂起函数"><a href="#怎么去除suspend-普通函数怎么调用挂起函数" class="headerlink" title="怎么去除suspend(普通函数怎么调用挂起函数)"></a>怎么去除<code>suspend</code>(普通函数怎么调用挂起函数)</h3><p>我们都知道, 挂起函数有一个接口<code>Continuation</code>, 如果我们要在普通函数中调用挂起函数的话</p><p>需要我们定义一个自己的<code>Continuation</code></p><p>比如: 我要在不在 <code>main</code> 函数上头添加<code>suspend</code>关键字的话, 我们可以</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">suspend</span> &#123;</span><br><span class="line">coroutineScope &#123;</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread().name&#125;</span>: zhazha&quot;</span>)</span><br><span class="line"><span class="keyword">return</span><span class="symbol">@coroutineScope</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 在这里创建一个对象 Continuation</span></span><br><span class="line">&#125;.startCoroutineCancellable(<span class="keyword">object</span> : Continuation&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> context: CoroutineContext</span><br><span class="line"><span class="keyword">get</span>() = EmptyCoroutineContext</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">Int</span>&gt;)</span></span> &#123;</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread().name&#125;</span>: <span class="subst">$&#123;result.getOrNull()&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但其实上面那种方式也是创建一个协程的方式, 只不过它比较复杂而已, 我们有了更简单的方式创建一个协程</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> continuation = <span class="keyword">suspend</span> &#123;</span><br><span class="line">    log(<span class="string">&quot;in coroutine&quot;</span>)</span><br><span class="line">    <span class="number">5</span></span><br><span class="line">&#125;.createCoroutine(<span class="keyword">object</span> : Continuation&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> context: CoroutineContext</span><br><span class="line">    <span class="keyword">get</span>() = Dispatchers.IO</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">Int</span>&gt;)</span></span> &#123;</span><br><span class="line">        log(<span class="string">&quot;resumeWith result = <span class="variable">$result</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">continuation.resume(<span class="built_in">Unit</span>)</span><br></pre></td></tr></table></figure><p>当然你也可以变成创建了个<code>Continuation</code></p><p>直接这么执行:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thread &#123;</span><br><span class="line">    continuation.resume(<span class="built_in">Unit</span>)</span><br><span class="line">&#125;.join()</span><br></pre></td></tr></table></figure><p>如果不在<code>main</code>上添加<code>suspend</code>还可以使用<code>CoroutinesScope</code>去创建</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CoroutineScope(Dispatchers.IO).launch &#123; </span><br><span class="line">    coroutineScope &#123;</span><br><span class="line">        println(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果你的协程需要等待时，使用 <code>runBlocking</code> 的方式</p></blockquote><h2 id="runBlocking-协程作用域构建"><a href="#runBlocking-协程作用域构建" class="headerlink" title="runBlocking: 协程作用域构建"></a><code>runBlocking</code>: 协程作用域构建</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DelicateCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// 下面的 this: CoroutineScope 就是协程作用域</span></span><br><span class="line">   <span class="comment">// 在后台启动⼀个新的协程并继续</span></span><br><span class="line">   GlobalScope.launch &#123;</span><br><span class="line">      delay(<span class="number">1000</span>) <span class="comment">// ⾮阻塞的等待 1 秒钟（默认时间单位是毫秒）</span></span><br><span class="line">      println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: 1&quot;</span>) <span class="comment">// 在延迟后打印输出</span></span><br><span class="line">   &#125;</span><br><span class="line">   println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: 2&quot;</span>) <span class="comment">// 协程已在等待, 主线程还在继续执行</span></span><br><span class="line">   <span class="comment">// 另一个协程作用域</span></span><br><span class="line">   runBlocking &#123;</span><br><span class="line">      <span class="comment">// 挂起协程, 但由于 runBlocking 的效果, 里面的子协程必须全部执行完毕才会释放主线程, 所以主线程一直阻塞在 delay(2000)</span></span><br><span class="line">      delay(<span class="number">2000</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>runBlocking</code> 申请了个协程作用域, 该函数阻塞了主线程, 直到 <code>runBlocking</code> 作用域内的子协程全部执行结束, 记住是子线程</li></ol><blockquote><p>记笔记: <code>runBlocking</code> 会阻塞主线程, 一般时候没人敢用, 仅仅在测试的时候用用就得了, 一般情况下考虑使用 <code>coroutineScope</code></p></blockquote><p>下面的代码中使用 <code>GlobalScope.launch</code> 将不再是 <code>runBlocking</code> 的子协程, 所以不受 <code>runBlocking</code> 的约束</p><blockquote><p>在源码中你会发现这样:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DelicateCoroutinesApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">object</span> GlobalScope : CoroutineScope &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns [EmptyCoroutineContext].</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> coroutineContext: CoroutineContext</span><br><span class="line">        <span class="keyword">get</span>() = EmptyCoroutineContext</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出 <code>GlobalScope</code> 有自己的协程上下文, 而我们的 <code>runBlocking</code> 他有自己的协程上下文, 这俩协程上下文压根不同, 所以 <code>runBlocking</code> 无法阻塞 <code>GlobalScope</code> 启动的协程</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DelicateCoroutinesApi</span></span><br><span class="line"><span class="comment">// 申请一个阻塞执行线程的协程作用域</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">   <span class="comment">// 使用全局协程执行下面代码</span></span><br><span class="line">   GlobalScope.launch &#123;</span><br><span class="line">      <span class="comment">// 挂起函数, 挂起了协程</span></span><br><span class="line">      delay(<span class="number">1000</span>)</span><br><span class="line">      <span class="comment">// 挂起完毕后, 线程开始执行下面的打印</span></span><br><span class="line">      println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: 1&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 主线程执行打印</span></span><br><span class="line">   println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: 2&quot;</span>)</span><br><span class="line">   <span class="comment">// 主线程挂起等待</span></span><br><span class="line">   delay(<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以上面的<code>delay(2000)</code>如果被注释掉, 则主线程直接退出</p><p>如果是这样:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">   launch &#123;</span><br><span class="line">      delay(<span class="number">1000</span>)</span><br><span class="line">      println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: 1&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: 2&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则, 主线程会等待 <code>launch</code> 函数的子线程结束</p><p>如果需要 <code>GlobalScope.launch</code> 被主线程等待, 则需要把返回值的 <code>Job</code> 提出来, 然后<code>job.join()</code></p><h2 id="等待协程结束-job"><a href="#等待协程结束-job" class="headerlink" title="等待协程结束(job)"></a>等待协程结束(<code>job</code>)</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DelicateCoroutinesApi</span></span><br><span class="line"><span class="comment">// 由于 job.join() 是挂起函数, 所以调用该挂起函数的函数也要是挂起函数</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> job = GlobalScope.launch &#123;</span><br><span class="line">      delay(<span class="number">1000</span>)</span><br><span class="line">      println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: 1&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: 2&quot;</span>)</span><br><span class="line">   job.join()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在前面 <code>GlobalScope.launch</code> 中, 我们发现其实类似于我们启动一个 <code>Thread</code> 线程, 他是全局的, 不能够监管的, 所以还是尽量少用 <code>GlobalScope.launch</code> 这种全局方式</p></blockquote><h2 id="结构化并发"><a href="#结构化并发" class="headerlink" title="结构化并发"></a>结构化并发</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread().name&#125;</span>: 0&quot;</span>)</span><br><span class="line">launch &#123;</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread().name&#125;</span>: 1&quot;</span>)</span><br><span class="line">launch &#123;</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread().name&#125;</span>: 2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">launch &#123;</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread().name&#125;</span>: 3&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main <span class="meta">@coroutine</span>#<span class="number">1</span>: <span class="number">0</span></span><br><span class="line">main <span class="meta">@coroutine</span>#<span class="number">2</span>: <span class="number">1</span></span><br><span class="line">main <span class="meta">@coroutine</span>#<span class="number">3</span>: <span class="number">3</span></span><br><span class="line">main <span class="meta">@coroutine</span>#<span class="number">4</span>: <span class="number">2</span></span><br></pre></td></tr></table></figure><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fcdn.ancii.com%2Farticle%2Fimage%2Fv1%2FQj%2Fzb%2FRO%2FORzjbQVFJasX5aR2DaTg2_Zx5KSH75KdTtVIpx5BAia9LyPTgZZSHVXLmD0EXF8rqx7I6wNKrfm8sZfDDWa_VVi2VTSs7pccZdNATAby1js.jpg&refer=http%3A%2F%2Fcdn.ancii.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1650383334&t=4d9ef356fbf0c3ef35200847fe8bf1d3" alt="img"></p><p>我们还可以用下面这段代码看看, kotlin协程底层怎么设计的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Starting a coroutine block...&quot;</span>) <span class="comment">// 启动一个父协程, 并且开启协程作用域</span></span><br><span class="line">    runBlocking &#123;</span><br><span class="line">        println(<span class="string">&quot; Coroutine block started&quot;</span>) <span class="comment">// 协程作用域开始位置</span></span><br><span class="line">        launch &#123;</span><br><span class="line">            println(<span class="string">&quot;  1/ First coroutine start&quot;</span>) <span class="comment">// 启动子协程</span></span><br><span class="line">            delay(<span class="number">100</span>) <span class="comment">// 延迟挂起 100ms</span></span><br><span class="line">            println(<span class="string">&quot;  1/ First coroutine end&quot;</span>) <span class="comment">// 第一个子协程结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        launch &#123;</span><br><span class="line">            println(<span class="string">&quot;  2/ Second coroutine start&quot;</span>) <span class="comment">// 第二个子协程</span></span><br><span class="line">            delay(<span class="number">50</span>) <span class="comment">// 延迟挂起 50 ms</span></span><br><span class="line">            println(<span class="string">&quot;  2/ Second coroutine end&quot;</span>) <span class="comment">// 第二个子协程结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        println(<span class="string">&quot; Two coroutines have been launched&quot;</span>) <span class="comment">// 协程作用域结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Back from the coroutine block&quot;</span>) <span class="comment">// 结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Starting a coroutine block…</span><br><span class="line"> Coroutine block started</span><br><span class="line"> Two coroutines have been launched</span><br><span class="line">  1/ First coroutine start</span><br><span class="line">  2/ Second coroutine start</span><br><span class="line">  2/ Second coroutine end</span><br><span class="line">  1/ First coroutine end</span><br><span class="line">Back from the coroutine block</span><br></pre></td></tr></table></figure><p>这样上面的 <code>runBlocking</code> 就能够控制内部的子协程, 直到子协程结束, 线程才会退出该协程作用域</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7dd762d1317e47c3be40a48b771dc481~tplv-k3u1fbpfcp-zoom-1.image" alt="img"></p><blockquote><p><a href="https://silica.io/understanding-kotlin-coroutines/5/">图片代码出处</a></p></blockquote><h2 id="coroutineScope-作用域构建"><a href="#coroutineScope-作用域构建" class="headerlink" title="coroutineScope: 作用域构建"></a><code>coroutineScope</code>: 作用域构建</h2><p>除了上面的 <code>runBlocking</code> 外, <code>kotlin</code> 还提供了<code>coroutineScope</code> 用于构建协程作用域</p><p><code>coroutineScope</code> 和 <code>runBlocking</code> 一样, 会保证协程作用域内的子协程执行完毕后, 才会结束该作用域</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   println(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">   coroutineScope &#123;</span><br><span class="line">      delay(<span class="number">1000</span>)</span><br><span class="line">      println(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   println(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="runBlocking-和-coroutineScope-的区别"><a href="#runBlocking-和-coroutineScope-的区别" class="headerlink" title="runBlocking 和 coroutineScope 的区别"></a><code>runBlocking</code> 和 <code>coroutineScope</code> 的区别</h3><p><code>runBlocking</code> 会阻塞主线程在该协程作用域中, 而 <code>coroutineScope</code> 不会, 他是挂起函数, 不会阻塞线程, 而会释放线程, 用于其他用途使用, 但是如果释放的线程此时没事干, 还是会滞留在 <code>coroutineScope</code> 作用域内, 只不过该线程随时有空罢了</p><blockquote><p>假设上面的主线程是 <code>UI</code> 线程的话, 你还使用 <code>runBlocking</code> , 完蛋了, <code>UI</code> 线程阻塞, <code>app</code>卡顿. 但是我学 <code>kotlin</code> 不是用于 <code>android</code> 所以读者自测</p></blockquote><h2 id="协程的取消与超时"><a href="#协程的取消与超时" class="headerlink" title="协程的取消与超时"></a>协程的取消与超时</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> scope = CoroutineScope(Dispatchers.Unconfined)</span><br><span class="line">   scope.launch &#123;</span><br><span class="line">      repeat(<span class="number">100000</span>) &#123;</span><br><span class="line">         delay(<span class="number">1000</span>) <span class="comment">// 因为有延迟中断操作才会取消</span></span><br><span class="line">         println(<span class="string">&quot;ping&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   TimeUnit.SECONDS.sleep(<span class="number">6</span>)</span><br><span class="line">   scope.cancel()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>如果协程执行的是 <code>CPU 密集</code> 计算的话, 则取消不会生效</strong></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line"><span class="keyword">val</span>  job = launch(Dispatchers.Default) &#123;</span><br><span class="line"><span class="keyword">var</span> nextPrintTime = startTime</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class="line">println(<span class="string">&quot;job: I&#x27;m sleeping <span class="subst">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class="line">nextPrintTime += <span class="number">500L</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">delay(<span class="number">1300L</span>)</span><br><span class="line">println(<span class="string">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">job.cancelAndJoin()</span><br><span class="line">println(<span class="string">&quot;main: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意, 只要协程没有进入协程的异步操作, 也不会让协程结束</p><blockquote><p>协程遇到<code>Thread.current.Sleep(500)</code>也不会导致协程去修改 <code>isActive</code> 属性，因为这段代码<code>sleep</code>的是线程而不是协程</p></blockquote><h3 id="结束计算中协程的方式"><a href="#结束计算中协程的方式" class="headerlink" title="结束计算中协程的方式"></a>结束计算中协程的方式</h3><p>可以使用 <code>isActive</code> 让计算中的协程停止:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line"><span class="keyword">val</span>  job = launch(Dispatchers.Default) &#123;</span><br><span class="line"><span class="keyword">var</span> nextPrintTime = startTime</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span> &amp;&amp; isActive) &#123;</span><br><span class="line"><span class="keyword">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class="line">println(<span class="string">&quot;job: I&#x27;m sleeping <span class="subst">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class="line">nextPrintTime += <span class="number">500L</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">delay(<span class="number">1300L</span>)</span><br><span class="line">println(<span class="string">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">job.cancelAndJoin()</span><br><span class="line">println(<span class="string">&quot;main: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们修改成下面的代码, 则协程不会退出</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line"><span class="keyword">val</span> job = launch &#123;</span><br><span class="line"><span class="keyword">var</span> nextPrintTime = startTime</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (isActive) &#123;</span><br><span class="line"><span class="keyword">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread().name&#125;</span>: I&#x27;m sleeping <span class="subst">$&#123;i++&#125;</span> isActive = <span class="variable">$isActive</span>...&quot;</span>)</span><br><span class="line">nextPrintTime += <span class="number">500L</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">delay(<span class="number">1300L</span>)</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread().name&#125;</span>: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">job.cancelAndJoin()</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread().name&#125;</span>: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将代码中的 <code>while(i &lt; 10)</code> 和 协程的 <code>Dispatcher.Default</code> 去掉</p><p>这里的 <code>main</code> 协程不会有时间停止下来执行下面这段代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delay(<span class="number">1300L</span>)</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread().name&#125;</span>: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">job.cancelAndJoin()</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread().name&#125;</span>: Now I can quit.&quot;</span>)</span><br></pre></td></tr></table></figure><p>为什么会这样？</p><p>我们给<code>jvm</code>添加参数 <code>-ea</code> 让 <code>kotlin</code> 进入调试模式</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/80818d43407447c9bfc2fc876f62f263~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>此时，我们将看到这样的打印：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main @coroutine#2: I&#x27;m sleeping 0 isActive = true...</span><br><span class="line">main @coroutine#2: I&#x27;m sleeping 1 isActive = true...</span><br><span class="line">main @coroutine#2: I&#x27;m sleeping 2 isActive = true...</span><br></pre></td></tr></table></figure><p>我们可以很直观的发现，一直都是我们的 <code>main @coroutine#2</code> 协程在执行</p><p>而我们前面能够正常退出的代码呢？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DefaultDispatcher-worker-1 @coroutine#2: job: I&#x27;m sleeping 0 ...</span><br><span class="line">DefaultDispatcher-worker-1 @coroutine#2: job: I&#x27;m sleeping 1 ...</span><br><span class="line">DefaultDispatcher-worker-1 @coroutine#2: job: I&#x27;m sleeping 2 ...</span><br><span class="line">main @coroutine#1: main: I&#x27;m tired of waiting!</span><br><span class="line">main @coroutine#1: main: Now I can quit.</span><br></pre></td></tr></table></figure><p>这里能够保证 <code>cancelAndJoin</code> 这段代码有另一个线程的另一个协程在执行</p><p>然后我们把 <code>while(i &lt; 6)</code> 代码添加上去</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line">   <span class="keyword">val</span>  job = launch &#123;</span><br><span class="line">      <span class="keyword">var</span> nextPrintTime = startTime</span><br><span class="line">      <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">      <span class="keyword">while</span> (i &lt; <span class="number">6</span> &amp;&amp; isActive) &#123;</span><br><span class="line">         <span class="keyword">if</span> (System.currentTimeMillis() &gt;= nextPrintTime) &#123;</span><br><span class="line">            println(<span class="string">&quot;job: I&#x27;m sleeping <span class="subst">$&#123;i++&#125;</span> ...&quot;</span>)</span><br><span class="line">            nextPrintTime += <span class="number">500L</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   delay(<span class="number">1300L</span>)</span><br><span class="line">   println(<span class="string">&quot;main: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">   job.cancelAndJoin()</span><br><span class="line">   println(<span class="string">&quot;main: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">job: I&#x27;m sleeping 0 ...</span><br><span class="line">job: I&#x27;m sleeping 1 ...</span><br><span class="line">job: I&#x27;m sleeping 2 ...</span><br><span class="line">job: I&#x27;m sleeping 3 ...</span><br><span class="line">job: I&#x27;m sleeping 4 ...</span><br><span class="line">job: I&#x27;m sleeping 5 ...</span><br><span class="line">main: I&#x27;m tired of waiting!</span><br><span class="line">main: Now I can quit.</span><br></pre></td></tr></table></figure><p>诶，可以正常停止，为什么会这样？</p><p>很简单，<code>i</code> 的条件满足了，而且 <code>job</code> 打印多了不是？ 明显不是协程 <code>cancel</code> 导致的线程结束</p><p>这里可能还会有一个需要纠结的问题点：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6374b328c08745939b541e165a61b9e7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>上图中 <code>delay</code> 不是挂起的协程么？线程不是没挂起么？</p><p>为什么后面的 三行 代码不会被线程执行呢？</p><p>而是变成线程在 <code>delay</code> 这里等待么？ 那岂不是阻塞了线程？ 矛盾是不是？</p><p>答案很简单， <code>delay</code> 虽然挂起的协程，但你没告诉<code>kotlin</code> <code>delay</code> 内部真正的延迟代码到底是哪个线程执行？</p><p>所以最后还是 <code>main</code> 线程 在执行 <code>delay</code> 的等待</p><h3 id="在-finally-中释放资源"><a href="#在-finally-中释放资源" class="headerlink" title="在 finally 中释放资源"></a>在 <code>finally</code> 中释放资源</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> job = launch &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">repeat(<span class="number">1000</span>) &#123;</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: job: I&#x27;m sleeping <span class="variable">$it</span> ...&quot;</span>)</span><br><span class="line">delay(<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">repeat(<span class="number">1000</span>) &#123;</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: I&#x27;m running finally <span class="subst">$&#123;it&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">delay(<span class="number">1300</span>)</span><br><span class="line">job.cancelAndJoin()</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span> is finished&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Thread[main,5,main]: job: I&#x27;m sleeping 0 ...</span><br><span class="line">Thread[main,5,main]: job: I&#x27;m sleeping 1 ...</span><br><span class="line">Thread[main,5,main]: job: I&#x27;m sleeping 2 ...</span><br><span class="line">Thread[main,5,main]: I&#x27;m running finally 0</span><br><span class="line">Thread[main,5,main]: I&#x27;m running finally 1</span><br><span class="line">Thread[main,5,main]: I&#x27;m running finally ...</span><br><span class="line">Thread[main,5,main]: I&#x27;m running finally 998</span><br><span class="line">Thread[main,5,main]: I&#x27;m running finally 999</span><br><span class="line">Thread[main,5,main] is finished</span><br></pre></td></tr></table></figure><p>一千次循环, 每次循环延迟<code>500ms</code>, 等待<code>1300ms</code>, 所以它会打印<strong>3次</strong>(<code>println</code>先打印的, 所以<strong>3次</strong>), 等到<code>1300ms</code>后, <code>job</code>被取消后, 协程就退出了, 此时<code>finally</code>还会执行</p><blockquote><p>还是那句话, 协程执行代码都来不及, 怎么会有时间执行下面的<code>cancelAndJoin</code>函数呢?</p></blockquote><p>为什么会这样呢?</p><p>前面说的过, 协程在执行<code>计算密集型</code>代码时, 协程不会被结束</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">repeat(<span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isActive) &#123;</span><br><span class="line">        println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: I&#x27;m running finally <span class="subst">$&#123;it&#125;</span>&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span><span class="symbol">@repeat</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们添加上面这样的代码, 协程直接被退出</p><h4 id="不能取消的代码块NonCancellable"><a href="#不能取消的代码块NonCancellable" class="headerlink" title="不能取消的代码块NonCancellable"></a>不能取消的代码块<code>NonCancellable</code></h4><ul><li>为什么需要它?</li></ul><p>看下面这段代码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">val</span> job = launch &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         repeat(<span class="number">1000</span>) &#123;</span><br><span class="line">            println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: I&#x27;m sleeping <span class="variable">$it</span> ...&quot;</span>)</span><br><span class="line">            delay(<span class="number">500</span>)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: I&#x27;m running finally&quot;</span>)</span><br><span class="line">         delay(<span class="number">1000L</span>)</span><br><span class="line">         println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: And I&#x27;ve just delayed for 1 sec because I&#x27;m non-cancellable&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   delay(<span class="number">1000</span>)</span><br><span class="line">   println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">   job.cancelAndJoin()</span><br><span class="line">   println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现<code>println(&quot;$&#123;Thread.currentThread()&#125;: And I&#39;ve just delayed for 1 sec because I&#39;m non-cancellable&quot;)</code> 这段代码不执行, 说明协程虽然收到了<code>cancel</code>指示, 将标志修改为<code>isActive == false</code>状态, 但此时协程还有任务需要进行, 不会立即取消, 当协程遇到<code>delay</code>函数被挂起, 一被挂起就会被<code>cancelAndJoin</code>函数的<code>Join</code>功能认为协程已经处理结束, 直接强制执行<code>cancel</code>功能结束掉协程</p><p>解决方案是添加协程功能<code>NonCancellable</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">val</span> job = launch &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         repeat(<span class="number">1000</span>) &#123;</span><br><span class="line">            println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: I&#x27;m sleeping <span class="variable">$it</span> ...&quot;</span>)</span><br><span class="line">            delay(<span class="number">500</span>)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         withContext(NonCancellable) &#123;</span><br><span class="line">            println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: I&#x27;m running finally&quot;</span>)</span><br><span class="line">            delay(<span class="number">1000L</span>)</span><br><span class="line">            println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: And I&#x27;ve just delayed for 1 sec because I&#x27;m non-cancellable&quot;</span>)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   delay(<span class="number">1300</span>)</span><br><span class="line">   println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: I&#x27;m tired of waiting!&quot;</span>)</span><br><span class="line">   job.cancelAndJoin()</span><br><span class="line">   println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: Now I can quit.&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式可以让协程正在执行<code>NonCancellable</code>标记的代码时, 不会被<code>cancel</code>掉</p><h3 id="超时取消-使用时间延迟的方式取消协程"><a href="#超时取消-使用时间延迟的方式取消协程" class="headerlink" title="超时取消(使用时间延迟的方式取消协程)"></a>超时取消(使用时间延迟的方式取消协程)</h3><blockquote><p>前面的 <code>Executors.newScheduledThreadPool(1).schedule</code> 代码去延迟1300L毫秒, 在这里我们也可以使用</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test07</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> result = withTimeout(<span class="number">1300L</span>) &#123;</span><br><span class="line">        repeat(<span class="number">1000</span>) &#123;</span><br><span class="line">            println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread().name&#125;</span>: I&#x27;m sleeping ...&quot;</span>)</span><br><span class="line">            delay(<span class="number">500L</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">&quot;Done&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这种方式会报错一个错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main <span class="meta">@coroutine</span>#<span class="number">1</span>: I<span class="string">&#x27;m sleeping ...</span></span><br><span class="line"><span class="string">main @coroutine#1: I&#x27;</span>m sleeping ...</span><br><span class="line">main <span class="meta">@coroutine</span>#<span class="number">1</span>: I<span class="string">&#x27;m sleeping ...</span></span><br><span class="line"><span class="string">kotlinx.coroutines.TimeoutCancellationException: Timed out waiting for 1300 ms</span></span><br></pre></td></tr></table></figure><p><code>withTimeout</code>还有返回值, 但是上面的代码并没有得到返回值</p><p>我们还可以用<code>withTimeoutOrNull</code> 这样就不会报错了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test08</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> result = withTimeoutOrNull(<span class="number">1300L</span>) &#123;</span><br><span class="line">        repeat(<span class="number">1000</span>) &#123;</span><br><span class="line">            println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread().name&#125;</span>: I&#x27;m sleeping ...&quot;</span>)</span><br><span class="line">            delay(<span class="number">500L</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">&quot;Done&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main @coroutine#1: I&#x27;m sleeping ...</span><br><span class="line">main @coroutine#1: I&#x27;m sleeping ...</span><br><span class="line">main @coroutine#1: I&#x27;m sleeping ...</span><br><span class="line">null</span><br></pre></td></tr></table></figure><p>直接打印出了 <code>null</code></p><h2 id="组合挂起函数"><a href="#组合挂起函数" class="headerlink" title="组合挂起函数"></a>组合挂起函数</h2><h3 id="async-并发"><a href="#async-并发" class="headerlink" title="async 并发"></a><code>async</code> 并发</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">doSomethingUsefulOne</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    delay(<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">13</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">doSomethingUsefulTwo</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    delay(<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">14</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = coroutineScope &#123;</span><br><span class="line">    <span class="keyword">val</span> time1 = measureTimeMillis &#123;</span><br><span class="line">        <span class="keyword">val</span> one = doSomethingUsefulOne()</span><br><span class="line">        <span class="keyword">val</span> two = doSomethingUsefulTwo()</span><br><span class="line">        println(one + two)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;<span class="variable">$time1</span> ms&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> time02 = measureTimeMillis &#123;</span><br><span class="line">        <span class="keyword">val</span> one = async &#123; doSomethingUsefulOne() &#125;</span><br><span class="line">        <span class="keyword">val</span> two = async &#123; doSomethingUsefulTwo() &#125;</span><br><span class="line">        println(<span class="string">&quot;<span class="subst">$&#123;one.await() + two.await()&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;<span class="variable">$time02</span> ms&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面这段函数将 两个 协程子任务 的 <code>delay</code> 做了同步延迟, 这样最多只要等待一秒时间就延迟结束了, 但如果是串行执行的话, 则需要 <code>delay</code> 两秒</p></blockquote><p><code>async</code> 和 <code>launch</code> 的区别在于, <code>async</code> 可以接收其内部 作用域 的返回值</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f54698530f4a47e1ab0ef77ddff15772~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d0bf8ca2a7534f1a961dc313e6b3bebf~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>多了个</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">await</span><span class="params">()</span></span>: T</span><br></pre></td></tr></table></figure><p>函数, 用于接受返回值</p><h4 id="延迟启动-async-CoroutineStart-LAZY"><a href="#延迟启动-async-CoroutineStart-LAZY" class="headerlink" title="延迟启动 async(CoroutineStart.LAZY)"></a>延迟启动 <code>async</code>(<code>CoroutineStart.LAZY</code>)</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">doSomethingUsefulOne</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    delay(<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">13</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">doSomethingUsefulTwo</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    delay(<span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">14</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> time = measureTimeMillis &#123;</span><br><span class="line">        <span class="comment">// 协程延迟运行</span></span><br><span class="line">        <span class="keyword">val</span> one = async(start = CoroutineStart.LAZY) &#123; doSomethingUsefulOne() &#125;</span><br><span class="line">        <span class="keyword">val</span> two = async(start = CoroutineStart.LAZY) &#123; doSomethingUsefulTwo() &#125;</span><br><span class="line">        <span class="comment">// 协程在这里正式启动</span></span><br><span class="line">        one.start()</span><br><span class="line">        two.start()</span><br><span class="line">        <span class="comment">// 等待两个协程任务执行完毕</span></span><br><span class="line">        println(<span class="string">&quot;I answer is <span class="subst">$&#123;one.await() + two.await()&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Completed in <span class="variable">$time</span> ms&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异步风格的函数"><a href="#异步风格的函数" class="headerlink" title="异步风格的函数"></a>异步风格的函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DelicateCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">somethingUsefulOneAsync</span><span class="params">()</span></span> = GlobalScope.async &#123;</span><br><span class="line">    doSomethingUsefulOne()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DelicateCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">somethingUsefulTwoAsync</span><span class="params">()</span></span> = GlobalScope.async &#123;</span><br><span class="line">    doSomethingUsefulTwo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DelicateCoroutinesApi</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> time = measureTimeMillis &#123;</span><br><span class="line">        <span class="keyword">val</span> one = somethingUsefulOneAsync()</span><br><span class="line">        <span class="keyword">val</span> two = somethingUsefulTwoAsync()</span><br><span class="line">        println(<span class="string">&quot;The answer is <span class="subst">$&#123;one.await() + two.await()&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;Completed in <span class="variable">$time</span> ms&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的编写协程的方式不被推荐</p><p>因为需要<code>somethingUsefulOneAsync</code>和<code>somethingUsefulTwoAsync</code>的结果来计算</p><p>如果<code>One</code>函数失败, 则<code>Two</code>函数也不能执行, 反之亦然</p><p>但是在上面的代码中, 可能会出现 <code>One</code> 出现异常, 但是被全局异常捕获了, 虽然 <code>One</code> 函数不再执行, 但是不影响程序执行 <code>Two</code>函数, 该执行的还是会继续执行</p><p>所以我们需要一个协程作用域框住这两个函数, 这样就能做到多个协程的原子性, 也就是所谓的<code>一荣俱荣, 一耻具耻</code></p><blockquote><p>这种情况我没有合适的环境演示, 交给你们了, 不过在没有所谓的全局异常捕获器时, 不会发生上面的问题, 不过既然 <code>One</code>和<code>Two</code>两个业务的代码有严重的依赖, 肯定是需要一个类似事务一样的功能管理下的</p></blockquote><p>那么要解决上面问题的方法就很简单了, 给个更大的协程作用域将<code>One</code>和<code>Two</code>包裹起来就好</p><h3 id="异步结构化并发"><a href="#异步结构化并发" class="headerlink" title="异步结构化并发"></a>异步结构化并发</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">concurrentSum</span><span class="params">()</span></span> : <span class="built_in">Int</span> = coroutineScope &#123;</span><br><span class="line">    <span class="keyword">val</span> one = async &#123; doSomethingUsefulOne() &#125;</span><br><span class="line">    <span class="keyword">val</span> two = async &#123; doSomethingUsefulTwo() &#125;</span><br><span class="line">    one.await() + two.await()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    <span class="keyword">val</span> measureTimeMillis = measureTimeMillis &#123;</span><br><span class="line">        println(concurrentSum())</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;<span class="variable">$measureTimeMillis</span> ms&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 kotlin 中, 推荐使用上面这种方式</p><p>这样做的好处是, 在 <code>coroutineScope</code> 作用域内的所有协程, 只要在该作用域内抛出了异常, 就会取消该作用域内的所有协程</p><blockquote><p>这种方式如果内部有个协程不能因为一个异常终止, 可以考虑使用前面的 <strong>### 不能取消的协程</strong> <code>withContext(NonCancellable)</code></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">concurrentSum</span><span class="params">()</span></span>: <span class="built_in">Int</span> = coroutineScope &#123;</span><br><span class="line">    <span class="keyword">val</span> one = async &#123; doSomethingUsefulOne() &#125;</span><br><span class="line">    <span class="keyword">val</span> two = async &#123; doSomethingUsefulTwo() &#125;</span><br><span class="line">    launch &#123;</span><br><span class="line">        withContext(NonCancellable) &#123;</span><br><span class="line">            repeat(<span class="number">3</span>) &#123;</span><br><span class="line">                delay(<span class="number">1000</span>)</span><br><span class="line">                println(<span class="string">&quot;delay 1 sec&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    launch &#123;</span><br><span class="line">        println(<span class="string">&quot;抛出运行时异常终止协程&quot;</span>)</span><br><span class="line">        <span class="keyword">throw</span> RuntimeException(<span class="string">&quot;抛出运行时异常终止协程&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    one.await() + two.await()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> measureTimeMillis = measureTimeMillis &#123;</span><br><span class="line">        println(concurrentSum())</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;<span class="variable">$measureTimeMillis</span> ms&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终的输出结果是:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">抛出运行时异常终止协程</span><br><span class="line">delay 1 sec</span><br><span class="line">delay 1 sec</span><br><span class="line">delay 1 sec</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.RuntimeException: 抛出运行时异常终止协程</span><br></pre></td></tr></table></figure><p>结果显示, 不会立即结束该作用域, 而是等到 延迟3秒后, 再抛出</p><h2 id="协程上下文调度器"><a href="#协程上下文调度器" class="headerlink" title="协程上下文调度器"></a>协程上下文调度器</h2><h3 id="协程上下文-当作ArrayList类似的集合就好"><a href="#协程上下文-当作ArrayList类似的集合就好" class="headerlink" title="协程上下文(当作ArrayList类似的集合就好)"></a>协程上下文(当作<code>ArrayList</code>类似的集合就好)</h3><blockquote><p>协程的上下文是 <code>CoroutineContext</code> 它负责在协程的调度过程中存储一些中间元素, 而他的主要元素是 <strong><code>Job</code></strong> 、<strong>调度器(<code>coroutine dispatcher</code>)<strong>、</strong>协程的名字(<code>CoroutineName</code>)</strong> 和 <strong>协程异常(<code>CoroutineExceptionHandler</code>)</strong>, 它可以做 加法 减法 组合</p></blockquote><blockquote><p><strong>我们可以把协程上下文调度器看作是一个集合, 一个容器</strong>, 里面存放的 <strong><code>Job</code></strong> 、<strong>调度器(<code>coroutine  dispatcher</code>)<strong>、</strong>协程的名字(<code>CoroutineName</code>)</strong> 和 <strong>协程异常(<code>CoroutineExceptionHandler</code>)</strong></p></blockquote><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F1211741-0bcfd77e12d83378.png&refer=http%3A%2F%2Fupload-images.jianshu.io&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1650228753&t=35a01b0990cfa57f33b5453a9fbe1169" alt="img"></p><h3 id="调度器和线程"><a href="#调度器和线程" class="headerlink" title="调度器和线程"></a>调度器和线程</h3><p>调度器的主要作用是将协程安排给线程执行, 至于是哪个线程, 由调度器决定, 它可以限制协程在一个特定的线程中执行, 或将它分派给一个线程池执行又或者是不受任何限制的执行</p><p>所有的协程构建器<code>launch</code>或者<code>async</code>都有一个参数叫<code>CoroutineContext</code>, 主要的目的是分派哪个类型的调度器给构建器使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExperimentalCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="comment">// 前面的数字是打印的顺序</span></span><br><span class="line">    launch &#123; <span class="comment">// 运⾏在⽗协程的上下⽂中，即 runBlocking 主协程</span></span><br><span class="line">        <span class="comment">// 3 main runBlocking      : I&#x27;m working in thread main</span></span><br><span class="line">        println(<span class="string">&quot;main runBlocking      : I&#x27;m working in thread <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    launch(Dispatchers.Unconfined) &#123; <span class="comment">// 不受限的 -- 将⼯作在主线程中</span></span><br><span class="line">        <span class="comment">// 1 Unconfined            : I&#x27;m working in thread main</span></span><br><span class="line">        println(<span class="string">&quot;Unconfined            : I&#x27;m working in thread <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    launch(Dispatchers.Default) &#123; <span class="comment">// 将会获取默认调度器 DefaultDispatcher</span></span><br><span class="line">        <span class="comment">// 2 Default               : I&#x27;m working in thread DefaultDispatcher-worker-1</span></span><br><span class="line">        println(<span class="string">&quot;Default               : I&#x27;m working in thread <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> context = newSingleThreadContext(<span class="string">&quot;MyOwnThread&quot;</span>)</span><br><span class="line">    launch(context) &#123; <span class="comment">// 将使它获得⼀个新的线程, 该线程是专属线程, 当线程资源非常昂贵, 如果不再使用, 则需要 close 掉</span></span><br><span class="line">        <span class="comment">// 4 newSingleThreadContext: I&#x27;m working in thread MyOwnThread</span></span><br><span class="line">        println(<span class="string">&quot;newSingleThreadContext: I&#x27;m working in thread <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    context.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印详情都在注释里了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Unconfined            : I&#x27;m working in thread main</span><br><span class="line">Default               : I&#x27;m working in thread DefaultDispatcher-worker-1</span><br><span class="line">main runBlocking      : I&#x27;m working in thread main</span><br><span class="line">newSingleThreadContext: I&#x27;m working in thread MyOwnThread</span><br></pre></td></tr></table></figure><p>我们依次分析:</p><ol><li><p><code>launch &#123; …… &#125;</code>: 其中的协程上下文(和调度器)继承自 <code>runBlocking</code> 的上下文</p></li><li><p><code>Dispatchers.Unconfined</code>: 一个特殊的调度器, 它的特点是不指定协程必须在哪个线程执行, 来者不拒, 哪个线程执行它, 它就是哪个线程在执行</p></li><li><p><code>launch(Dispatchers.Default)</code>: 与 <code>GlobalScope.launch</code> 使用的相同的线程池</p></li><li><p><code>newSingleThreadContext</code>: 使用这种方式, 将会创建一个专属线程, 用于协程的执行, 但是线程是个比较昂贵的资源, 所以如果不再使用了, 这种方式的线程需要 <code>close</code> 掉, 或者设计成顶层属性, 给整个系统使用</p></li></ol><h3 id="线程池作为调度器"><a href="#线程池作为调度器" class="headerlink" title="线程池作为调度器"></a>线程池作为调度器</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DelicateCoroutinesApi</span></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">   Executors.newFixedThreadPool(<span class="number">5</span>).asCoroutineDispatcher().use &#123;dispatcher -&gt;</span><br><span class="line">      List(<span class="number">1000</span>) &#123;</span><br><span class="line">         GlobalScope.launch(dispatcher) &#123;</span><br><span class="line">            log(i++)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;.forEach &#123;</span><br><span class="line">         it.join()</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   TimeUnit.SECONDS.sleep(<span class="number">1</span>)</span><br><span class="line">   log(<span class="string">&quot;i = <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到上面这段代码, 你是否对调度器有了新的认识???</p><h3 id="⾮受限调度器-vs-受限调度器"><a href="#⾮受限调度器-vs-受限调度器" class="headerlink" title="⾮受限调度器 vs 受限调度器"></a>⾮受限调度器 vs 受限调度器</h3><p>当协程调度器是 <code>Dispatchers.Unconfined</code> 时, 调度器不会执行协程在特定种类的线程中运行, 如果是受限调度器的话, 执行之前是 <code>IO 线程</code>, 挂起恢复之后还是 <code>IO 线程</code>执行</p><blockquote><p>非受限调度器是 &#x3D;&gt; 假设协程挂起前运行协程的线程是<code>t1</code>, 在协程挂起恢复后运行协程的线程可能是<code>t1</code>也可能是别的任意协程</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    launch(Dispatchers.Unconfined) &#123;</span><br><span class="line">        println(<span class="string">&quot;Unconfined      : I&#x27;m working in thread <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">        delay(<span class="number">500</span>)</span><br><span class="line">        println(<span class="string">&quot;Unconfined      : After delay in thread <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    launch &#123;</span><br><span class="line">        println(<span class="string">&quot;main runBlocking: I&#x27;m working in thread <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">        delay(<span class="number">1000</span>)</span><br><span class="line">        println(<span class="string">&quot;main runBlocking: After delay in thread <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终他会输出:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Unconfined      : I&#x27;m working in thread main @coroutine#2</span><br><span class="line">main runBlocking: I&#x27;m working in thread main @coroutine#3</span><br><span class="line">Unconfined      : After delay in thread kotlinx.coroutines.DefaultExecutor @coroutine#2</span><br><span class="line">main runBlocking: After delay in thread main @coroutine#3</span><br></pre></td></tr></table></figure><p>看到了没? 因为 <code>Unconfined</code> 做了个 <code>delay</code> 之后线程就变了, 而对照组没有任何的变化, 还是 <code>main</code> 线程在执行</p><p>为什么会变化呢? 因为协程在遇到 <code>delay</code> 之后<code>main</code>就已经去执行别的任务了, 剩下的事情由执行挂起函数的线程在执行<code>kotlinx.coroutines.DefaultExecutor</code>, 等到<code>Unconfined</code>协程恢复之后, 随机安排线程执行该协程</p><p>还有很多方式证明上面这条特性:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    launch(Dispatchers.Unconfined) &#123;</span><br><span class="line">        println(<span class="string">&quot;Unconfined      : I&#x27;m working in thread <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">        withContext(Dispatchers.IO) &#123;&#125;</span><br><span class="line">        println(<span class="string">&quot;Unconfined      : After delay in thread <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    launch &#123;</span><br><span class="line">        println(<span class="string">&quot;main runBlocking: I&#x27;m working in thread <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">        withContext(Dispatchers.IO) &#123;&#125;</span><br><span class="line">        println(<span class="string">&quot;main runBlocking: After delay in thread <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Unconfined      : I&#x27;m working in thread main</span><br><span class="line">Unconfined      : After delay in thread DefaultDispatcher-worker-1</span><br><span class="line">main runBlocking: I&#x27;m working in thread main</span><br><span class="line">main runBlocking: After delay in thread main</span><br></pre></td></tr></table></figure><blockquote><p>如果是受限调度器执行的协程, 在协程挂起前面都是同一个线程</p><p>但, 如果是非受限调度器, 则挂起前后不是同一个线程</p></blockquote><h3 id="调试协程和线程"><a href="#调试协程和线程" class="headerlink" title="调试协程和线程"></a>调试协程和线程</h3><blockquote><p>协程可以在一个线程上挂起在另一个线程上恢复, ide可没这么智能, 没办法全程跟踪发现协程某时某刻到底在干啥</p></blockquote><h4 id="使用-idea-特殊插件调试"><a href="#使用-idea-特殊插件调试" class="headerlink" title="使用 idea 特殊插件调试"></a>使用 idea 特殊插件调试</h4><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea768da5886447a58246a959e4c724d8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>使用<code>Coroutine</code>调试器，你可以：</p><ol><li>检查每个<code>Coroutine</code>的状态</li><li>查看运行和挂起的<code>Coroutines</code>的局部变量和捕获变量的值</li><li>查看完整的协程创建栈以及协程内部的调⽤栈。栈包含所有带有变量的栈帧，甚⾄包含那些在标准调试期间会丢失的栈帧</li><li>获取包含每个协程的状态以及栈信息的完整报告。要获取它，请右键单击 <code>Coroutines</code> 选项卡，然后点击 <code>Get Coroutines Dump</code></li></ol><h4 id="打印日志的方式调试"><a href="#打印日志的方式调试" class="headerlink" title="打印日志的方式调试"></a>打印日志的方式调试</h4><p>没什么好说的, <code>print</code> or <code>log</code> 把想要打印出来的信息打印出来完事</p><p><code>kotlin</code> 为了用户更好的使用日志调试, 增加了 <code>-Dkotlinx.coroutines.debug</code> 参数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123;</span><br><span class="line">    withContext(Dispatchers.IO) &#123;</span><br><span class="line">        println(<span class="string">&quot;IO      :  2 <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    println(<span class="string">&quot;main: 0 <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    launch(Dispatchers.Unconfined) &#123;</span><br><span class="line">        println(<span class="string">&quot;Unconfined      : 1 <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">        doSomething()</span><br><span class="line">        println(<span class="string">&quot;Unconfined      : 3 <span class="subst">$&#123;Thread.currentThread().name&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用前:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">main: 0 <span class="title">main</span></span></span><br><span class="line"><span class="function"><span class="title">Unconfined</span>      : 1 <span class="title">main</span></span></span><br><span class="line"><span class="function"><span class="title">IO</span>      :  2 <span class="title">DefaultDispatcher</span>-<span class="title">worker</span>-1</span></span><br><span class="line"><span class="function"><span class="title">Unconfined</span>      : 3 <span class="title">DefaultDispatcher</span>-<span class="title">worker</span>-1</span></span><br></pre></td></tr></table></figure><p>使用后:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">main: 0 <span class="title">main</span> @<span class="title">coroutine</span>#1</span></span><br><span class="line"><span class="function"><span class="title">Unconfined</span>      : 1 <span class="title">main</span> @<span class="title">coroutine</span>#2</span></span><br><span class="line"><span class="function"><span class="title">IO</span>      :  2 <span class="title">DefaultDispatcher</span>-<span class="title">worker</span>-1 @<span class="title">coroutine</span>#2</span></span><br><span class="line"><span class="function"><span class="title">Unconfined</span>      : 3 <span class="title">DefaultDispatcher</span>-<span class="title">worker</span>-1 @<span class="title">coroutine</span>#2</span></span><br></pre></td></tr></table></figure><p>会发现多出了 <code>@coroutine#1</code> <code>@coroutine#2</code> 之类的字符, 这些就是协程标识符, 其中<code>@coroutine#1</code>就是主协程, 由 <code>runBlocking</code> 给予, 而 <code>@coroutine#2</code> 是子协程</p><blockquote><p>标识符只有在调试模式才能出现, 除了<code>-Dkotlinx.coroutines.debug</code> 外, 给VM增加 <code>-ea</code> 参数也能进入调试模式, 也可以打印出协程的名字</p></blockquote><h3 id="一个协程在多个线程之间跳转"><a href="#一个协程在多个线程之间跳转" class="headerlink" title="一个协程在多个线程之间跳转"></a>一个协程在多个线程之间跳转</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">(msg: <span class="type">String</span>)</span></span> = println(<span class="string">&quot;[<span class="subst">$&#123;Thread.currentThread().name&#125;</span>] <span class="variable">$msg</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExperimentalCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    newSingleThreadContext(<span class="string">&quot;ctx1&quot;</span>).use &#123; ctx1 -&gt;</span><br><span class="line">        newSingleThreadContext(<span class="string">&quot;ctx2&quot;</span>).use &#123; ctx2 -&gt;</span><br><span class="line">            runBlocking(ctx1) &#123;</span><br><span class="line">                log(<span class="string">&quot;Started in ctx1&quot;</span>)</span><br><span class="line">                withContext(ctx2) &#123;</span><br><span class="line">                    log(<span class="string">&quot;Working in ctx2&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                log(<span class="string">&quot;Back to ctx1&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ctx1 @coroutine#<span class="number">1</span>] Started <span class="keyword">in</span> ctx1</span><br><span class="line">[ctx2 @coroutine#<span class="number">1</span>] Working <span class="keyword">in</span> ctx2</span><br><span class="line">[ctx1 @coroutine#<span class="number">1</span>] Back to ctx1</span><br></pre></td></tr></table></figure><p>他展示了同一个协程在不同线程间执行的情况, 并且 上面使用了 <code>use</code> , 这样 <code>newSingleThreadContext</code> 申请的线程不用我们手动 <code>close</code></p><h3 id="子协程"><a href="#子协程" class="headerlink" title="子协程"></a>子协程</h3><p>当父协程被取消之后, 子协程都会递归取消</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test02</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> request = launch &#123;</span><br><span class="line">        <span class="keyword">val</span> job1 = launch &#123;</span><br><span class="line">            println(<span class="string">&quot;job1: I have my own context and execute independently!&quot;</span>)</span><br><span class="line">            delay(<span class="number">1000</span>)</span><br><span class="line">            println(<span class="string">&quot;job1: I am not affected by cancellation of the request&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> job2 = launch(coroutineContext) &#123;</span><br><span class="line">            delay(<span class="number">100</span>)</span><br><span class="line">            println(<span class="string">&quot;job2: I am a child of the request coroutine&quot;</span>)</span><br><span class="line">            delay(<span class="number">1000</span>)</span><br><span class="line">            println(<span class="string">&quot;job2: 父协程被取消, 这一行不会执行&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        job1.join()</span><br><span class="line">        job2.join()</span><br><span class="line">    &#125;</span><br><span class="line">    delay(<span class="number">500</span>)</span><br><span class="line">    request.cancel()</span><br><span class="line">    delay(<span class="number">1000</span>)</span><br><span class="line">    println(<span class="string">&quot;main: Who has survived request cancellation?&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">job1: I have my own context and execute independently!</span><br><span class="line">job2: I am a child of the request coroutine</span><br><span class="line">main: Who has survived request cancellation?</span><br></pre></td></tr></table></figure><h3 id="为协程取名"><a href="#为协程取名" class="headerlink" title="为协程取名"></a>为协程取名</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>:<span class="built_in">Unit</span> = runBlocking(CoroutineName(<span class="string">&quot;main&quot;</span>)) &#123;</span><br><span class="line">    log(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> v1 = async(CoroutineName(<span class="string">&quot;v1 coroutine&quot;</span>)) &#123;</span><br><span class="line">        delay(<span class="number">500</span>)</span><br><span class="line">        log(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        <span class="number">255</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> v2 = async(CoroutineName(<span class="string">&quot;v2 coroutine&quot;</span>)) &#123;</span><br><span class="line">        delay(<span class="number">1000</span>)</span><br><span class="line">        log(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">        <span class="number">7</span></span><br><span class="line">    &#125;</span><br><span class="line">    log(<span class="string">&quot;4 result = <span class="subst">$&#123;v1.await() + v2.await()&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组合协程上下⽂中的元素"><a href="#组合协程上下⽂中的元素" class="headerlink" title="组合协程上下⽂中的元素"></a>组合协程上下⽂中的元素</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    launch(Dispatchers.Default + CoroutineName(<span class="string">&quot;test&quot;</span>)) &#123;</span><br><span class="line">        log(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组合上下文, 将协程名字改成 <code>test</code></p><p><code>[DefaultDispatcher-worker-1 @test#2] 1</code></p><h3 id="协程的上下文继承"><a href="#协程的上下文继承" class="headerlink" title="协程的上下文继承"></a>协程的上下文继承</h3><p>如果新的协程在另一个协程的<code>CoroutineScope</code> 中创建, 则我们成新协程叫子协程, 而另一个协程叫父协程, 此时子协程上下文除<code>Job</code> 外都会继承至父协程, 而<code>Job</code>将会是父协程<code>Job</code> 的子作业, 但<code>Job</code> 是新的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">val</span> scope = CoroutineScope(Dispatchers.IO + Job() + CoroutineName(<span class="string">&quot;test&quot;</span>))</span><br><span class="line">   <span class="keyword">val</span> job = scope.launch &#123;</span><br><span class="line">      log(<span class="string">&quot;1 <span class="subst">$&#123;coroutineContext[Job]&#125;</span>&quot;</span>)</span><br><span class="line">      launch &#123;</span><br><span class="line">         log(<span class="string">&quot;2 <span class="subst">$&#123;coroutineContext[Job]&#125;</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   job.join()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[DefaultDispatcher-worker-<span class="number">1</span> @test#<span class="number">2</span>] <span class="number">1</span> &quot;test#<span class="number">2</span>&quot;:StandaloneCoroutine&#123;Active&#125;@<span class="number">3</span>eb7ab0f</span><br><span class="line">[DefaultDispatcher-worker-<span class="number">3</span> @test#<span class="number">3</span>] <span class="number">2</span> &quot;test#<span class="number">3</span>&quot;:StandaloneCoroutine&#123;Active&#125;@<span class="number">33</span>bb030c</span><br></pre></td></tr></table></figure><h3 id="线程本地数据"><a href="#线程本地数据" class="headerlink" title="线程本地数据"></a>线程本地数据</h3><p>我们知道 <code>ThreadLocal</code> 其实是在 <code>Thread</code> 中定义的一个变量<code>Map</code>， 使得该<code>Map</code>和我们的线程绑定在一起</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eadcc05f9c214d2e98c36fca6765cb74~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>只要我们 <code>new</code> 出一个 <code>Thread</code> 线程， 那么就会有一个 <code>threadLocals</code>的字段，但这个字段可能是 <code>null</code>， 如果我们调用了 <code>Threadlocal</code> 的 <code>set</code>、<code>get</code> 方法时才会创建他</p><p>不过讨论这个没啥用，但是我们可以借助这种方法，将 <code>ThreadLocal</code> 绑定在 <code>协程</code> 上， why？为什么要这么玩？</p><p>这里需要注意，<code>kotlin</code>的协程和线程可不是一对一的，是多对多</p><p>可能出现 <code>协程1</code> 此刻绑定 <code>线程1</code> 下一刻 <code>协程1</code> 便绑定于 <code>线程2</code> </p><p>这样令 <code>ThreadLocal</code> 很难做啊。。。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df2a211fb4714bb1b7a85bc9563efcd8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> threadLocal: ThreadLocal&lt;String?&gt; = ThreadLocal&lt;String?&gt;()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    threadLocal.<span class="keyword">set</span>(<span class="string">&quot;main&quot;</span>)</span><br><span class="line">    log(<span class="string">&quot;1 <span class="subst">$&#123;threadLocal.get()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> job = launch(Dispatchers.Default + threadLocal.asContextElement(<span class="string">&quot;launch&quot;</span>)) &#123;</span><br><span class="line">        log(<span class="string">&quot;2 <span class="subst">$&#123;threadLocal.get()&#125;</span>&quot;</span>)</span><br><span class="line">        yield()</span><br><span class="line">        log(<span class="string">&quot;3 <span class="subst">$&#123;threadLocal.get()&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    job.join()</span><br><span class="line">    log(<span class="string">&quot;4 <span class="subst">$&#123;threadLocal.get()&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[main @coroutine#<span class="number">1</span>] <span class="number">1</span> main</span><br><span class="line">[DefaultDispatcher-worker-<span class="number">1</span> @coroutine#<span class="number">2</span>] <span class="number">2</span> launch</span><br><span class="line">[DefaultDispatcher-worker-<span class="number">2</span> @coroutine#<span class="number">2</span>] <span class="number">3</span> launch</span><br><span class="line">[main @coroutine#<span class="number">1</span>] <span class="number">4</span> main</span><br></pre></td></tr></table></figure><p>请注意：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[DefaultDispatcher-worker-1 @coroutine#2] 2 launch</span><br><span class="line">[DefaultDispatcher-worker-2 @coroutine#2] 3 launch</span><br></pre></td></tr></table></figure><p>在不同的 <code>Thread</code> 有着相同的 <code>ThreadLocal</code> 值</p><p>但会出现新的问题, 协程无法判断 <code>ThreadLocal</code> 此时是否还是可用的, 是不是该协程可以访问的存在, 所以 <code>kotlin</code> 提供了一个方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threadLocal.ensurePresent()</span><br></pre></td></tr></table></figure><p>检测 <code>ThreadLocal</code> 是否存在于当前的协程上下文中, 如果不存在则抛出异常 <code>IllegalStateException</code></p><blockquote><p><code>ThreadLocal</code>还有个有⼀个关键限制，即：当⼀个<strong>线程</strong>局部变量变化(<strong>注意不是协程改变的</strong>)时，则这个新值不会传播给协程调⽤者（因为上下⽂元素⽆法追踪所有 <code>ThreadLocal</code> 对象访问），并且下次挂起时更新的值将丢失</p></blockquote><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><blockquote><p>扩展知识, 本篇幅新手最好别看, 等学的差不多开始分析源码了, 再来</p></blockquote><h2 id="拦截器的作用是什么"><a href="#拦截器的作用是什么" class="headerlink" title="拦截器的作用是什么?"></a>拦截器的作用是什么?</h2><p>在kotlin中的拦截器可以拦截恢复调用, 所以也可以拦截我们的协程, 将协程交给我们想要的线程执行</p><h2 id="拦截器怎么用"><a href="#拦截器怎么用" class="headerlink" title="拦截器怎么用?"></a>拦截器怎么用?</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">launch(LogInterceptor()) &#123;</span><br><span class="line">log(<span class="string">&quot;launch ...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LogInterceptor</span> : <span class="type">ContinuationInterceptor</span> &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> key: CoroutineContext.Key&lt;*&gt;</span><br><span class="line"><span class="keyword">get</span>() = ContinuationInterceptor</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">interceptContinuation</span><span class="params">(continuation: <span class="type">Continuation</span>&lt;<span class="type">T</span>&gt;)</span></span>: Continuation&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> LogContinuation(continuation)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LogContinuation</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">private</span> <span class="keyword">val</span> continuation: Continuation&lt;T&gt;) : Continuation&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> context: CoroutineContext</span><br><span class="line"><span class="keyword">get</span>() = continuation.context</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">log(<span class="string">&quot;intercept before&quot;</span>)</span><br><span class="line">continuation.resumeWith(result)</span><br><span class="line">log(<span class="string">&quot;intercept after&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们需要知道 <code>Continuation</code> 是什么?</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Continuation</span>&lt;<span class="type">in T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">val</span> context: CoroutineContext</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现, 他有一个接口, 存放了一个协程上下文和<code>resumeWith</code>函数, 看这接口大概的用处应该是为了回调使用的</p><p>现在我们适量的往 源码 里探下, </p><p>从 launch 函数开始分析:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">launch</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    context: <span class="type">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class="line"><span class="params"><span class="function">    start: <span class="type">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class="line"><span class="params"><span class="function">    block: <span class="type">suspend</span> <span class="type">CoroutineScope</span>.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: Job &#123;</span><br><span class="line">    <span class="comment">// 组合协程上下文 , 这里可以把 CoroutineContext 当作一个 ArrayList</span></span><br><span class="line">    <span class="keyword">val</span> newContext = newCoroutineContext(context)</span><br><span class="line">    <span class="keyword">val</span> coroutine = <span class="keyword">if</span> (start.isLazy)</span><br><span class="line">        LazyStandaloneCoroutine(newContext, block) <span class="keyword">else</span></span><br><span class="line">        StandaloneCoroutine(newContext, active = <span class="literal">true</span>)</span><br><span class="line">    coroutine.start(start, coroutine, block)</span><br><span class="line">    <span class="keyword">return</span> coroutine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的 <code>LogInterceptor</code> 被存放在 <code>context</code> 中, 现在我们只要跟着它走, 就一定能找到 <code>ContinuationInterceptor</code> 拦截的关键时刻</p><p>上面那段代码记住 <code>start: CoroutineStart = CoroutineStart.DEFAULT</code>, 这段代码, 用户后续判断</p><p><code>newContext</code> 我们可以将其当作 <code>ArrayList</code>, 用于组合多个 <code>Element</code> 参数 (前面说过的, 协程上下文可以组合的)</p><p>下面是协程上下文组合的函数, 可以不用看</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(context: <span class="type">CoroutineContext</span>)</span></span>: CoroutineContext =</span><br><span class="line">    <span class="keyword">if</span> (context === EmptyCoroutineContext) <span class="keyword">this</span> <span class="keyword">else</span> <span class="comment">// fast path -- avoid lambda creation</span></span><br><span class="line">        context.fold(<span class="keyword">this</span>) &#123; acc, element -&gt;</span><br><span class="line">            <span class="keyword">val</span> removed = acc.minusKey(element.key)</span><br><span class="line">            <span class="keyword">if</span> (removed === EmptyCoroutineContext) element <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// make sure interceptor is always last in the context (and thus is fast to get when present)</span></span><br><span class="line">                <span class="keyword">val</span> interceptor = removed[ContinuationInterceptor]</span><br><span class="line">                <span class="keyword">if</span> (interceptor == <span class="literal">null</span>) CombinedContext(removed, element) <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">val</span> left = removed.minusKey(ContinuationInterceptor)</span><br><span class="line">                    <span class="keyword">if</span> (left === EmptyCoroutineContext) CombinedContext(element, interceptor) <span class="keyword">else</span></span><br><span class="line">                        CombinedContext(CombinedContext(left, element), interceptor)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>回到核心需要分析的代码</p><p>核心代码在这里 <code>coroutine.start(start, coroutine, block)</code> 我们跟进去看看, 记住第二个参数里面存着我们的 <code>LogInterceptor</code> 拦截器的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> <span class="title">startCoroutineImpl</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    start: <span class="type">CoroutineStart</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    receiver: <span class="type">R</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    completion: <span class="type">Continuation</span>&lt;<span class="type">T</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    onCancellation: ((<span class="type">cause</span>: <span class="type">Throwable</span>) -&gt; <span class="type">Unit</span>)?,</span></span></span><br><span class="line"><span class="params"><span class="function">    block: <span class="type">suspend</span> <span class="type">R</span>.() -&gt; <span class="type">T</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span> = <span class="keyword">when</span> (start) &#123;</span><br><span class="line">    CoroutineStart.DEFAULT -&gt; block.startCoroutineCancellable(receiver, completion, onCancellation)</span><br><span class="line">    CoroutineStart.ATOMIC -&gt; block.startCoroutine(receiver, completion)</span><br><span class="line">    CoroutineStart.UNDISPATCHED -&gt; block.startCoroutineUndispatched(receiver, completion)</span><br><span class="line">    CoroutineStart.LAZY -&gt; <span class="built_in">Unit</span> <span class="comment">// will start lazily</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面我们记住的代码: <code>start: CoroutineStart = CoroutineStart.DEFAULT</code> 你看这不是对上了么? 走的</p><p><code>CoroutineStart.DEFAULT -&gt; block.startCoroutineCancellable(receiver, completion, onCancellation)</code></p><p>最终我们找到了这段代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R, T&gt;</span> <span class="params">(<span class="keyword">suspend</span> (R)</span></span> -&gt; T).startCoroutineCancellable(</span><br><span class="line">    receiver: R, completion: Continuation&lt;T&gt;,</span><br><span class="line">    onCancellation: ((cause: Throwable) -&gt; <span class="built_in">Unit</span>)? = <span class="literal">null</span></span><br><span class="line">) =</span><br><span class="line">    runSafely(completion) &#123;</span><br><span class="line">        createCoroutineUnintercepted(receiver, completion).intercepted().resumeCancellableWith(Result.success(<span class="built_in">Unit</span>), onCancellation)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>createCoroutineUnintercepted</code> 没办法分析, 不过看起来不像, 我们就跟进 <code>intercepted</code> </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">actual</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Continuation<span class="type">&lt;T&gt;</span>.<span class="title">intercepted</span><span class="params">()</span></span>: Continuation&lt;T&gt; =</span><br><span class="line">    (<span class="keyword">this</span> <span class="keyword">as</span>? ContinuationImpl)?.intercepted() ?: <span class="keyword">this</span></span><br></pre></td></tr></table></figure><p>进入后看到最终的代码了: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">intercepted</span><span class="params">()</span></span>: Continuation&lt;Any?&gt; =</span><br><span class="line">    intercepted</span><br><span class="line">        ?: (context[ContinuationInterceptor]?.interceptContinuation(<span class="keyword">this</span>) ?: <span class="keyword">this</span>)</span><br><span class="line">            .also &#123; intercepted = it &#125;</span><br></pre></td></tr></table></figure><p><code>ContinuationInterceptor</code> 就跟我们前面的 </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LogInterceptor</span> : <span class="type">ContinuationInterceptor</span> &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> key: CoroutineContext.Key&lt;*&gt;</span><br><span class="line"><span class="keyword">get</span>() = ContinuationInterceptor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> key 值一样, 而上面的操作就跟下面的操作一个样</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Element&gt; context = new ArrayList();</span><br><span class="line">intercepted = context[ContinuationInterceptor];</span><br></pre></td></tr></table></figure><p>最终拿到了我们的 <code>LogInterceptor</code> 并且返回了</p><p>最终会回到这里: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R, T&gt;</span> <span class="params">(<span class="keyword">suspend</span> (R)</span></span> -&gt; T).startCoroutineCancellable(</span><br><span class="line">    receiver: R, completion: Continuation&lt;T&gt;,</span><br><span class="line">    onCancellation: ((cause: Throwable) -&gt; <span class="built_in">Unit</span>)? = <span class="literal">null</span></span><br><span class="line">) =</span><br><span class="line">    runSafely(completion) &#123;</span><br><span class="line">        createCoroutineUnintercepted(receiver, completion).intercepted().resumeCancellableWith(Result.success(<span class="built_in">Unit</span>), onCancellation)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们把上面代码稍微改下, 更好理解 <code>LogInterceptor.resumeCancellableWith(Result.success(Unit), onCancellation)</code></p><p>很明显了, 我们跟进<code>resumeCancellableWith</code> 函数, 发现: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Continuation<span class="type">&lt;T&gt;</span>.<span class="title">resumeCancellableWith</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    result: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    onCancellation: ((<span class="type">cause</span>: <span class="type">Throwable</span>) -&gt; <span class="type">Unit</span>)? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: <span class="built_in">Unit</span> = <span class="keyword">when</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">is</span> DispatchedContinuation -&gt; resumeCancellableWith(result, onCancellation)</span><br><span class="line">    <span class="keyword">else</span> -&gt; resumeWith(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是 <code>LogInterceptor</code> 调用的   <code>resumeCancellableWith</code> 函数, 所以 <code>this</code> 明显不是 <code>is DispatchedContinuation</code> , 我们的代码只会走 <code>else -&gt; resumeWith(result)</code> </p><p>最后你会发现它回到我们的代码了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LogContinuation</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">private</span> <span class="keyword">val</span> continuation: Continuation&lt;T&gt;) : Continuation&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> context: CoroutineContext</span><br><span class="line"><span class="keyword">get</span>() = continuation.context</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码回到这个函数</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumeWith</span><span class="params">(result: <span class="type">Result</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">log(<span class="string">&quot;intercept before&quot;</span>)</span><br><span class="line">continuation.resumeWith(result)</span><br><span class="line">log(<span class="string">&quot;intercept after&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着执行完 <code>resumeWith</code> 我们定义的函数</p>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步 </tag>
            
            <tag> 协程 </tag>
            
            <tag> 无栈协程 </tag>
            
            <tag> 有栈协程 </tag>
            
            <tag> 调度 </tag>
            
            <tag> 挂起函数 </tag>
            
            <tag> suspend </tag>
            
            <tag> runBlocking </tag>
            
            <tag> 协程作用域 </tag>
            
            <tag> 等待协程结束 </tag>
            
            <tag> job </tag>
            
            <tag> 结构化并发 </tag>
            
            <tag> coroutineScope </tag>
            
            <tag> 协程取消 </tag>
            
            <tag> 协程超时 </tag>
            
            <tag> NonCancellable </tag>
            
            <tag> 超时取消 </tag>
            
            <tag> 组合挂起函数 </tag>
            
            <tag> async </tag>
            
            <tag> 异步结构化并发 </tag>
            
            <tag> 协程上下文调度器 </tag>
            
            <tag> 调度器 </tag>
            
            <tag> 协程上下文 </tag>
            
            <tag> 线程 </tag>
            
            <tag> 协程和线程的区别 </tag>
            
            <tag> 线程池 </tag>
            
            <tag> 非受限调度器 </tag>
            
            <tag> 受限调度器 </tag>
            
            <tag> 调试协程 </tag>
            
            <tag> idea插件调试 </tag>
            
            <tag> 日志 </tag>
            
            <tag> 子协程 </tag>
            
            <tag> 协程取名 </tag>
            
            <tag> 协程上下文继承 </tag>
            
            <tag> 线程本地数据 </tag>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十一、kotlin的协程(二)——冷流flow</title>
      <link href="/2022/12/03/07kotlin/%E5%8D%81%E4%B8%80%E3%80%81kotlin%E7%9A%84%E5%8D%8F%E7%A8%8B(%E4%BA%8C)%E2%80%94%E2%80%94%E5%86%B7%E6%B5%81flow/"/>
      <url>/2022/12/03/07kotlin/%E5%8D%81%E4%B8%80%E3%80%81kotlin%E7%9A%84%E5%8D%8F%E7%A8%8B(%E4%BA%8C)%E2%80%94%E2%80%94%E5%86%B7%E6%B5%81flow/</url>
      
        <content type="html"><![CDATA[<h1 id="协程的异步流"><a href="#协程的异步流" class="headerlink" title="协程的异步流"></a>协程的异步流</h1><h2 id="为什么要有异步流"><a href="#为什么要有异步流" class="headerlink" title="为什么要有异步流?"></a>为什么要有异步流?</h2><p>挂起函数可以异步返回单个值, 但如果需要<strong>返回多个值</strong>怎么办? 此时便可以使用异步流</p><p>以前没有异步流的情况下, 我们使用传统方式将会是下面这样:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span>: List&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">val</span> list = mutableListOf&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">   <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">      TimeUnit.MILLISECONDS.sleep(<span class="number">200</span>)</span><br><span class="line">      list.add(i)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = simple().forEach&#123; value -&gt; println(value) &#125;</span><br></pre></td></tr></table></figure><p>随着我们不断学习, 发现还有一种比较好用的方式达到异步返回的功能: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span>: Sequence&lt;<span class="built_in">Int</span>&gt; = sequence &#123;</span><br><span class="line">   <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">      TimeUnit.MILLISECONDS.sleep(<span class="number">200</span>)</span><br><span class="line">      yield(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    simple().forEach &#123; i -&gt; log(<span class="string">&quot;<span class="variable">$i</span>&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>前面说过了, <code>Sequence</code> 的好处非常明显, 不会产生额外的临时集合, 也不会需要等待其他元素再执行下一步骤的函数</p></blockquote><p>对比下两种方式你会发现, <code>List</code>的方式是等半天一下子同时(几乎)打印, 而 <code>Sequence</code> 的方式是一个一个一个的打印出来</p><blockquote><p>这就涉及集合的两种操作方式了, 一种是一个集合的元素同时完成某个函数比如: <code>filter</code> 函数的过滤效果, 然后过滤后的元素当成一个整体再给新的函数 比如: <code>map</code> 函数操作, 这是一种集合类型的操作</p><p>第二种是每个集合的元素独立的, 元素不等待整个集合都执行完 <code>filter</code> 函数, 而是 自己 做完 <code>filter</code> 和 <code>map</code> 最后 <code>forEach</code> 打印出去, 不等待其它元素</p></blockquote><p>现在我们学习了 协程, 发现上面这段代码的 <code>TimeUnit.MILLISECONDS.sleep(200)</code> 其实是阻塞了主线程, 这是不对的, 如果运行 这段代码的线程是 <code>UI</code> 线程呢? 此时 <code>UI</code> 将会在执行 <code>sleep</code> 而阻塞, 用户将会看到<code>app</code>卡顿, 所以我们需要改造, 借助协程改造</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span> = flow&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">      delay(<span class="number">100</span>)</span><br><span class="line">      emit(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    simple().collect &#123; value -&gt; log(<span class="string">&quot;<span class="variable">$value</span>&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的好处在于, 遇到类似于 <code>delay</code> 这种操作时, 主线程不会阻塞, 而是交给后台线程执行</p><p>源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">flow</span><span class="params">(<span class="meta">@BuilderInference</span> block: <span class="type">suspend</span> <span class="type">FlowCollector</span>&lt;<span class="type">T</span>&gt;.() -&gt; <span class="type">Unit</span>)</span></span>: Flow&lt;T&gt; = SafeFlow(block)</span><br></pre></td></tr></table></figure><p>会发现参数<code>suspend</code>, 所以我们可以不需要添加额外的<code>suspend</code></p><p>而 <code>flow</code> 使用 <code>emit</code> 添加值, 使用 <code>collect</code> 收集值</p><h2 id="flow-是冷流（需要启动开关collect函数）"><a href="#flow-是冷流（需要启动开关collect函数）" class="headerlink" title="flow 是冷流（需要启动开关collect函数）"></a>flow 是冷流（需要启动开关collect函数）</h2><p>它跟 <code>sequence</code> 一样, 只有在调用 <code>collect</code>(末端操作) 时才会执行</p><blockquote><p>这和 <code>JavaScript</code> 的 <code>generator</code> 一个德行，<code>yield</code>函数不会被执行，直到调用了 <code>next</code>函数才会执行</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let i = <span class="number">1</span></span><br><span class="line">function *generator() &#123;</span><br><span class="line"><span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">console.log(`zhazha $&#123;i&#125;`)</span><br><span class="line">yield i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = generator();</span><br><span class="line"></span><br><span class="line">console.log(gen.next().value)</span><br><span class="line">console.log(gen.next().value)</span><br></pre></td></tr></table></figure><p>控制台：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zhazha 0</span><br><span class="line">0</span><br><span class="line">zhazha 1</span><br><span class="line">1</span><br></pre></td></tr></table></figure></blockquote><p>而 <code>kotlin flow</code> 在“偷懒”方面的表现和 <code>JavaScript generator</code> 一模一样</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">generator</span><span class="params">()</span></span> = flow &#123;</span><br><span class="line">repeat(<span class="number">1000</span>) &#123;</span><br><span class="line">println(<span class="string">&quot;repeat <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">emit(it)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> gen = generator()</span><br><span class="line"><span class="keyword">val</span> take = gen.take(<span class="number">3</span>)</span><br><span class="line">take.collect &#123;</span><br><span class="line">println(it)</span><br><span class="line">&#125;</span><br><span class="line">take.collect &#123;</span><br><span class="line">println(it)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">repeat 0</span><br><span class="line">0</span><br><span class="line">repeat 1</span><br><span class="line">1</span><br><span class="line">repeat 2</span><br><span class="line">2</span><br><span class="line">repeat 0</span><br><span class="line">0</span><br><span class="line">repeat 1</span><br><span class="line">1</span><br><span class="line">repeat 2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>但是在便利方面不及 <code>JavaScript</code>，我还是比较喜欢 <code>next</code></p><h2 id="flow-取消"><a href="#flow-取消" class="headerlink" title="flow 取消"></a>flow 取消</h2><h3 id="超时流取消"><a href="#超时流取消" class="headerlink" title="超时流取消"></a>超时流取消</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span> = flow&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">      delay(<span class="number">1000</span>)</span><br><span class="line">      log(<span class="string">&quot;emit <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">      emit(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   withTimeout(<span class="number">2500</span>) &#123;</span><br><span class="line">      simple().collect &#123; value -&gt; log(<span class="string">&quot;<span class="variable">$value</span>&quot;</span>) &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流取消检测"><a href="#流取消检测" class="headerlink" title="流取消检测"></a>流取消检测</h3><p><code>flow</code> 对每个元素的 <code>emit</code> 都有 <code>ensureActive</code> 检测, 好做取消, 这意味着我们的 <code>flow</code> 中的循环是可以取消的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> = flow&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123;</span><br><span class="line">      log(<span class="string">&quot;emit <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">      emit(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   foo().collect &#123; value -&gt;</span><br><span class="line">      <span class="keyword">if</span> (value == <span class="number">3</span>) &#123;</span><br><span class="line">         cancel()</span><br><span class="line">      &#125;</span><br><span class="line">      log(<span class="string">&quot;main <span class="variable">$value</span>&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[main] emit <span class="number">1</span></span><br><span class="line">[main] main <span class="number">1</span></span><br><span class="line">[main] emit <span class="number">2</span></span><br><span class="line">[main] main <span class="number">2</span></span><br><span class="line">[main] emit <span class="number">3</span></span><br><span class="line">[main] main <span class="number">3</span></span><br><span class="line">[main] emit <span class="number">4</span></span><br><span class="line">Exception <span class="keyword">in</span> thread &quot;main&quot; kotlinx.coroutines.JobCancellationException: BlockingCoroutine was cancelled; job=BlockingCoroutine&#123;Cancelled&#125;@<span class="number">3712</span>b94</span><br></pre></td></tr></table></figure><p>我们在 <code>main</code> 函数中取消了 <code>flow</code> , 所以上面控制台打印最后到 <code>emit 4</code> 结束</p><p>但为了提高性能, 有些方式申请的 <code>flow</code> 并没有取消检测, 比如 <code>range.asFLow</code>,</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 就下面这种方式</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple02</span><span class="params">()</span></span> = (<span class="number">1.</span><span class="number">.20</span>).asFlow()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   simple02().collect &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="number">3</span> == it) &#123;</span><br><span class="line">         cancel()</span><br><span class="line">      &#125;</span><br><span class="line">      log(it)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[main] <span class="number">1</span></span><br><span class="line">[main] <span class="number">2</span></span><br><span class="line">[main] <span class="number">3</span></span><br><span class="line">[main] <span class="number">4</span></span><br><span class="line">[main] ... 省略</span><br><span class="line">[main] <span class="number">20</span></span><br><span class="line">Exception <span class="keyword">in</span> thread &quot;main&quot; kotlinx.coroutines.JobCancellationException: BlockingCoroutine was cancelled; job=BlockingCoroutine&#123;Cancelled&#125;@<span class="number">5</span>d76b067</span><br></pre></td></tr></table></figure><h3 id="让繁忙的协程可以取消"><a href="#让繁忙的协程可以取消" class="headerlink" title="让繁忙的协程可以取消"></a>让繁忙的协程可以取消</h3><p>前面说了, 协程是可以取消的 ,需要使用 <code>ensureActive</code> 判断, 所以我们可以考虑主动给他加上取消检测功能</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple03</span><span class="params">()</span></span> = (<span class="number">1.</span><span class="number">.20</span>).asFlow()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    simple03().onEach &#123; currentCoroutineContext().ensureActive() &#125;.collect &#123; value -&gt;</span><br><span class="line">       <span class="keyword">if</span> (value == <span class="number">3</span>) &#123;</span><br><span class="line">          cancel()</span><br><span class="line">       &#125;</span><br><span class="line">       log(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样<code>flow</code> 就可以取消了</p><p>同时 <code>kotlin</code> 还提供了 <code>cancellable</code> 这种方式添加取消检测:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple03</span><span class="params">()</span></span> = (<span class="number">1.</span><span class="number">.20</span>).asFlow()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   simple03().cancellable().collect &#123; value -&gt;</span><br><span class="line">      <span class="keyword">if</span> (value == <span class="number">3</span>) &#123;</span><br><span class="line">         cancel()</span><br><span class="line">      &#125;</span><br><span class="line">      log(value)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[main] <span class="number">1</span></span><br><span class="line">[main] <span class="number">2</span></span><br><span class="line">[main] <span class="number">3</span></span><br><span class="line">Exception <span class="keyword">in</span> thread &quot;main&quot; kotlinx.coroutines.JobCancellationException: BlockingCoroutine was cancelled; job=BlockingCoroutine&#123;Cancelled&#125;@<span class="number">4</span>e7dc304</span><br></pre></td></tr></table></figure><p>上面那两种方式底层原理都一样的</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13416afdf59b460c853509188bfba389~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="flow-的创建方式"><a href="#flow-的创建方式" class="headerlink" title="flow 的创建方式"></a>flow 的创建方式</h2><ol><li><code>flow &#123;&#125;</code></li><li><code>flowOf</code></li><li><code>.asFlow </code></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).asFlow().collect &#123; value -&gt; log(<span class="string">&quot;<span class="variable">$value</span>&quot;</span>) &#125;</span><br></pre></td></tr></table></figure><h2 id="中间流操作符"><a href="#中间流操作符" class="headerlink" title="中间流操作符"></a>中间流操作符</h2><ol><li>transform</li><li>take</li></ol><blockquote><p>这些操作和 <code>sequence</code> 的方式一样, 有中间操作, 在中间操作时, 流元素不会被操作, 等到末端流操作时才会一起执行掉, 而且是一个元素一个元素单独执行(除特殊函数外)</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arrayOf(<span class="string">&quot;zhazha&quot;</span>, <span class="string">&quot;heihei&quot;</span>, <span class="string">&quot;xixi&quot;</span>).asFlow().filter &#123; s -&gt; s.startsWith(<span class="string">&quot;z&quot;</span>) &#125;</span><br><span class="line">   .map &#123; value -&gt; value.first().toUpperCase() &#125;.collect &#123; value -&gt; log(<span class="string">&quot;<span class="variable">$value</span>&quot;</span>) &#125;</span><br></pre></td></tr></table></figure><h3 id="变换运算符-类似Map-Filter"><a href="#变换运算符-类似Map-Filter" class="headerlink" title="变换运算符(类似Map + Filter)"></a>变换运算符(类似Map + Filter)</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> flow = (<span class="number">1.</span><span class="number">.3</span>).asFlow().transform &#123; value -&gt;</span><br><span class="line"><span class="keyword">if</span> (value % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">emit(value)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">emit((value + <span class="number">1</span>) * <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">flow.collect &#123;</span><br><span class="line">println(it)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行流操作之前, 包装下元素</p><h3 id="限⻓操作符"><a href="#限⻓操作符" class="headerlink" title="限⻓操作符"></a>限⻓操作符</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">number</span><span class="params">()</span></span> = flow&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      emit(<span class="number">1</span>)</span><br><span class="line">      emit(<span class="number">2</span>)</span><br><span class="line">      log(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line">      emit(<span class="number">3</span>)</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      log(<span class="string">&quot;finally xixi&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">val</span> sum = number().take(<span class="number">2</span>).reduce &#123; accumulator, value -&gt;</span><br><span class="line">      accumulator + value</span><br><span class="line">   &#125;</span><br><span class="line">   println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="末端流操作符"><a href="#末端流操作符" class="headerlink" title="末端流操作符"></a>末端流操作符</h2><ol><li><code>toList</code> <code>toSet</code></li><li><code>first</code>  <code>single</code></li><li><code>reduce</code> <code>fold</code></li></ol><blockquote><p>总体来说和 <code>List</code> 或者 <code>sequence</code> 差不多</p></blockquote><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>求和案例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sum = (<span class="number">1.</span><span class="number">.5</span>).asFlow()</span><br><span class="line">        .map &#123; it * it &#125;</span><br><span class="line">        .reduce &#123; a, b -&gt; a + b &#125;</span><br><span class="line">    println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>55</p><h2 id="Flow是有序的"><a href="#Flow是有序的" class="headerlink" title="Flow是有序的"></a>Flow是有序的</h2><p>除非使用了对多个flow进行操作的特殊运算符，否则flow的每个单独集合都是按顺序进行的。collection直接在协程中运行，该协程调用终端操作。此时在默认情况下，不会有新的协程被启动。所有的中间操作将以从上游到下游的顺序处理emit过的value，最后再交给末端操作符操作</p><p>请参见以下示例，该示例过滤偶数并将其映射到字符串：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    (<span class="number">1.</span><span class="number">.5</span>).asFlow()</span><br><span class="line">        .filter &#123;</span><br><span class="line">            println(<span class="string">&quot;Filter <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">            it % <span class="number">2</span> == <span class="number">0</span>              </span><br><span class="line">        &#125;</span><br><span class="line">        .map &#123;</span><br><span class="line">            println(<span class="string">&quot;Map <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">            <span class="string">&quot;string <span class="variable">$it</span>&quot;</span></span><br><span class="line">        &#125;.collect &#123; </span><br><span class="line">            println(<span class="string">&quot;Collect <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Filter 1</span><br><span class="line">Filter 2</span><br><span class="line">Map 2</span><br><span class="line">Collect string 2</span><br><span class="line">Filter 3</span><br><span class="line">Filter 4</span><br><span class="line">Map 4</span><br><span class="line">Collect string 4</span><br><span class="line">Filter 5</span><br></pre></td></tr></table></figure><h2 id="Flow上下文"><a href="#Flow上下文" class="headerlink" title="Flow上下文"></a>Flow上下文</h2><p>Collection of a flow always happens in the context of the calling coroutine. For example, if there is a <code>simple</code> flow, then the following code runs in the context specified by the author of this code, regardless of the implementation details of the <code>simple</code> flow:</p><p>flow的collection过程总是发生在调用协程的上下文中。比如有一个simple flow，然后以下代码在开发者指定的上下文中运行，而不论 simple flow的实现细节如何</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">withContext(context) &#123;</span><br><span class="line">    simple().collect &#123; value -&gt;</span><br><span class="line">        println(value) <span class="comment">// run in the specified context</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>simple</code> 流的信息将被 <code>context</code> 上下文保存</strong></p><p>因此，在 flow {…} 构建器中的代码运行在相应的 <code>flow collect</code> 提供的上下文中</p><p>例如：</p><p>考虑 simple 函数打印了调用该函数的 线程 然后 <code>emit</code> 了 三个数字：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">(msg: <span class="type">String</span>)</span></span> = println(<span class="string">&quot;[<span class="subst">$&#123;Thread.currentThread().name&#125;</span>] <span class="variable">$msg</span>&quot;</span>)</span><br><span class="line">           </span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span>: Flow&lt;<span class="built_in">Int</span>&gt; = flow &#123;</span><br><span class="line">    log(<span class="string">&quot;Started simple flow&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">        emit(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    simple().collect &#123; value -&gt; log(<span class="string">&quot;Collected <span class="variable">$value</span>&quot;</span>) &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[main @coroutine#1] Started simple flow</p><p>[main @coroutine#1] Collected 1</p><p>[main @coroutine#1] Collected 2</p><p>[main @coroutine#1] Collected 3</p><p>由于，从主线程调用 <code>simple.collect</code> 函数，也在主线程中调用 <code>simple flow</code> 的主体。这是快速运行或异步代码的理想默认形式，它不关心执行的上下文并且不会阻塞调用者。</p><h2 id="flow-的-collect-和-emit-必须在同一个协程上下文"><a href="#flow-的-collect-和-emit-必须在同一个协程上下文" class="headerlink" title="flow 的 collect 和 emit 必须在同一个协程上下文"></a>flow 的 collect 和 emit 必须在同一个协程上下文</h2><blockquote><p>flow 不是协程安全的，所以会报错<code>IllegalStateException</code></p></blockquote><p>前面说过的，<code>flow</code>借助上下文保存属性，但很多时候我们的 <code>UI-updaing</code> 代码需要执行在 <code>Dispatcher.Main</code>中，在执行 <strong>CPU 计算型</strong>代码的时候需要在 <code>Dispatcher.Default</code> 导致上下文变了，这会引起 <code>flow</code> 报错</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span>: Flow&lt;<span class="built_in">Int</span>&gt; = flow &#123;</span><br><span class="line">    <span class="comment">// 将 kotlin协程调整到 CPU 消费型（计算型） 上下文中</span></span><br><span class="line">    kotlinx.coroutines.withContext(Dispatchers.Default) &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>) <span class="comment">// 假设我们在这里做了CPU计算操作</span></span><br><span class="line">            emit(i) <span class="comment">// 将计算结果 emit</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    simple().collect &#123; value -&gt; println(value) &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.IllegalStateException: Flow invariant <span class="keyword">is</span> violated:</span><br><span class="line">Flow was collected <span class="keyword">in</span> [CoroutineId(<span class="number">1</span>), <span class="string">&quot;coroutine#1&quot;</span>:BlockingCoroutine&#123;Active&#125;@5511c7f8, <span class="symbol">BlockingEventLoop@</span>2eac3323],</span><br><span class="line">but emission happened <span class="keyword">in</span> [CoroutineId(<span class="number">1</span>), <span class="string">&quot;coroutine#1&quot;</span>:DispatchedCoroutine&#123;Active&#125;@2dae0000, Dispatchers.Default].</span><br><span class="line">Please refer to <span class="string">&#x27;flow&#x27;</span> documentation or use <span class="string">&#x27;flowOn&#x27;</span> instead</span><br><span class="line">at ...</span><br></pre></td></tr></table></figure><p>异常已经给出解决方案了, 使用 <code>flowOn</code></p><h3 id="flowOn保证协程安全"><a href="#flowOn保证协程安全" class="headerlink" title="flowOn保证协程安全"></a><code>flowOn</code>保证协程安全</h3><p><code>flowOn</code>将执行此流的上下文更改为给定的上下文</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span>: Flow&lt;<span class="built_in">Int</span>&gt; = flow &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>)</span><br><span class="line">        log(<span class="string">&quot;Emitting <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">        emit(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.flowOn(Dispatchers.Default) <span class="comment">// 使用正确的方式改变协程的上下文</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    simple().collect &#123; value -&gt;</span><br><span class="line">        log(<span class="string">&quot;Collected <span class="variable">$value</span>&quot;</span>) </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[DefaultDispatcher-worker-2 @coroutine#2] Emitting 1</p><p>[main @coroutine#1] Collected 1</p><p>[DefaultDispatcher-worker-2 @coroutine#2] Emitting 2</p><p>[main @coroutine#1] Collected 2</p><p>[DefaultDispatcher-worker-2 @coroutine#2] Emitting 3</p><p>[main @coroutine#1] Collected 3</p><p>仔细看 flowOn 函数的注释：</p><p>改变上下文到flow被执行所给定的上下文中。该函数是可组合的，并且只影响前面没有上下文的操作，该函数是上下文保存的：上下文不会影响到下游操作</p><p>例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">withContext(Dispatchers.Main) &#123;</span><br><span class="line">    <span class="keyword">val</span> singleValue = intFlow <span class="comment">// 如果上下文没有特别执行过，将会在IO上下文中执行</span></span><br><span class="line">        .map &#123; ... &#125; <span class="comment">// 将会在IO上下文中执行</span></span><br><span class="line">        .flowOn(Dispatchers.IO)</span><br><span class="line">        .filter &#123; ... &#125; <span class="comment">// 将会在Default上下文中执行</span></span><br><span class="line">        .flowOn(Dispatchers.Default)</span><br><span class="line">        .single() <span class="comment">// 将会在Main上下文中执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>flowOn</code> 是可以做组合的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">withContext(Dispatchers.Main) &#123;</span><br><span class="line">    <span class="keyword">val</span> singleValue = intFlow <span class="comment">// will be executed on IO if context wasn&#x27;t specified before</span></span><br><span class="line">        .map &#123; ... &#125; <span class="comment">// Will be executed in IO</span></span><br><span class="line">        .flowOn(Dispatchers.IO)</span><br><span class="line">        .filter &#123; ... &#125; <span class="comment">// Will be executed in Default</span></span><br><span class="line">        .flowOn(Dispatchers.Default)</span><br><span class="line">        .single() <span class="comment">// Will be executed in the Main</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得看下上面代码中的英文</p><h3 id="buffer缓冲"><a href="#buffer缓冲" class="headerlink" title="buffer缓冲"></a>buffer缓冲</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span>: Flow&lt;<span class="built_in">Int</span>&gt; = flow &#123;</span><br><span class="line">   <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">      delay(<span class="number">100</span>)</span><br><span class="line">      emit(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">val</span> time = measureTimeMillis &#123;</span><br><span class="line">      simple().collect &#123; value -&gt;</span><br><span class="line">         delay(<span class="number">300</span>)</span><br><span class="line">         println(value)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   println(<span class="string">&quot;Collected in <span class="variable">$time</span> ms&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常情况下, 我们执行完上面的代码需要 1200ms+ 但是我们可以考虑使用 buffer</p><blockquote><p>前面的 <code>flowOn</code> 就这利用这种方式实现的, 只不过前面的是隐式的, 这里是显示的 </p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span>: Flow&lt;<span class="built_in">Int</span>&gt; = flow &#123;</span><br><span class="line">   <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">      delay(<span class="number">100</span>)</span><br><span class="line">      emit(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">val</span> time = measureTimeMillis &#123;</span><br><span class="line">      simple().buffer().collect &#123; value -&gt;</span><br><span class="line">         delay(<span class="number">300</span>)</span><br><span class="line">         println(value)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   println(<span class="string">&quot;Collected in <span class="variable">$time</span> ms&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>simple().buffer().collect</code> 这样之后执行时间将会是 <code>1000ms</code>左右</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">  delay(<span class="number">100</span>)</span><br><span class="line">  emit(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他类似于起三个协程, 同时等待 100 之后一起 <code>emit</code> 出去</p><p>这样的话, 我们的代码只要等待 3 次 <code>300ms</code> 外加上 一次 <code>100ms</code> 就完事了, 节省了 2 次 <code>100ms</code> 的等待</p><p>为了不阻塞主线程, 我们还可以, 让别的线程去等待 <code>delay</code> 函数, 就像下面这样: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span>: Flow&lt;<span class="built_in">Int</span>&gt; = flow &#123;</span><br><span class="line">   <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">      delay(<span class="number">100</span>)</span><br><span class="line">      emit(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">val</span> time = measureTimeMillis &#123;</span><br><span class="line">      launch &#123;</span><br><span class="line">         simple().buffer().collect &#123; value -&gt;</span><br><span class="line">            delay(<span class="number">300</span>)</span><br><span class="line">            log(value) </span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   println(<span class="string">&quot;Collected in <span class="variable">$time</span> ms&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳过中间比较耗时的操作"><a href="#跳过中间比较耗时的操作" class="headerlink" title="跳过中间比较耗时的操作"></a>跳过中间比较耗时的操作</h3><p>有些情况下我们并不需要知道所有的流操作是否，我们只要知道中间的流操作的部分结果或者部分操作状态的更新，此时我们可以使用 <code>conflate</code> 跳过中间的部分操作</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple02</span><span class="params">()</span></span>: Flow&lt;<span class="built_in">Int</span>&gt; = flow &#123;</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>) &#123;</span><br><span class="line">delay(<span class="number">100</span>) <span class="comment">// pretend we are asynchronously waiting 100 ms</span></span><br><span class="line">emit(i) <span class="comment">// emit next value</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line"><span class="keyword">val</span> time = measureTimeMillis &#123;</span><br><span class="line">simple02()</span><br><span class="line">.conflate() <span class="comment">// conflate emissions, don&#x27;t process each one</span></span><br><span class="line">.collect &#123; value -&gt;</span><br><span class="line">delay(<span class="number">300</span>) <span class="comment">// pretend we are processing it for 300 ms</span></span><br><span class="line">println(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="string">&quot;Collected in <span class="variable">$time</span> ms&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">main: 1</span></span><br><span class="line"><span class="function"><span class="title">main</span>: 3</span></span><br><span class="line"><span class="function"><span class="title">main</span>: 6</span></span><br><span class="line"><span class="function"><span class="title">main</span>: 9</span></span><br><span class="line"><span class="function"><span class="title">main</span>: 10</span></span><br><span class="line"><span class="function"><span class="title">main</span>: <span class="title">Collected</span> <span class="title">in</span> 1778 <span class="title">ms</span></span></span><br></pre></td></tr></table></figure><h2 id="处理最新的值"><a href="#处理最新的值" class="headerlink" title="处理最新的值"></a>处理最新的值</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span>: Flow&lt;<span class="built_in">Int</span>&gt; = flow &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">        delay(<span class="number">100</span>) <span class="comment">// 假装我们异步等待了 100 毫秒</span></span><br><span class="line">        emit(i) <span class="comment">// 发射下一个值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> time = measureTimeMillis &#123;</span><br><span class="line">        simple()</span><br><span class="line">            .collectLatest &#123; value -&gt; <span class="comment">// 取消并重新发射最后一个值</span></span><br><span class="line">                println(<span class="string">&quot;Collecting <span class="variable">$value</span>&quot;</span>) </span><br><span class="line">                delay(<span class="number">300</span>) <span class="comment">// 假装我们花费 300 毫秒来处理它</span></span><br><span class="line">                println(<span class="string">&quot;Done <span class="variable">$value</span>&quot;</span>) </span><br><span class="line">            &#125; </span><br><span class="line">    &#125;   </span><br><span class="line">    println(<span class="string">&quot;Collected in <span class="variable">$time</span> ms&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Collecting 1</span><br><span class="line">Collecting 2</span><br><span class="line">Collecting 3</span><br><span class="line">Done 3</span><br><span class="line">Collected in 777 ms</span><br></pre></td></tr></table></figure><h2 id="组合多个流"><a href="#组合多个流" class="headerlink" title="组合多个流"></a>组合多个流</h2><h3 id="Zip"><a href="#Zip" class="headerlink" title="Zip"></a>Zip</h3><p>就像在 <code>kotlin</code> 标准库中的 <code>Sequence.zip</code> 扩展函数一样，flows 也有一个 <code>zip</code> 操作，该操作 组合两个 <code>flows</code> 相应的值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   (<span class="number">1.</span><span class="number">.3</span>).asFlow()</span><br><span class="line">      .zip(flowOf(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>)) &#123; a, b -&gt;</span><br><span class="line">         <span class="string">&quot;<span class="variable">$a</span> -&gt; <span class="variable">$b</span>&quot;</span></span><br><span class="line">      &#125;.collect(::println)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1 -&gt; one<br>2 -&gt; two<br>3 -&gt; three</p><h3 id="Combine"><a href="#Combine" class="headerlink" title="Combine"></a>Combine</h3><p>当流代表一个变量或者操作的最新值时，他可能被需要执行一个取决于相对应流最新值的计算，并且每当上游flows发出一个值时，重新计算它。相应的运算符族称为组合。</p><h2 id="展平Flow"><a href="#展平Flow" class="headerlink" title="展平Flow"></a>展平Flow</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">requestFlow</span><span class="params">(i: <span class="type">Int</span>)</span></span>: Flow&lt;String&gt; = flow &#123;</span><br><span class="line">   emit(<span class="string">&quot;<span class="variable">$i</span>: First&quot;</span>)</span><br><span class="line">   delay(<span class="number">500</span>) <span class="comment">// wait 500 ms</span></span><br><span class="line">   emit(<span class="string">&quot;<span class="variable">$i</span>: Second&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">val</span> flow: Flow&lt;Flow&lt;String&gt;&gt; = (<span class="number">1.</span><span class="number">.3</span>).asFlow().map &#123; requestFlow(it) &#125;</span><br><span class="line">   flow.collect(::println)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意： <code>Flow&lt;Flow&lt;String&gt;&gt;</code> 没有被展平成一个 Flow</p><p>很多情况，我们需要将多个 Flow 合并成一个 Flow，那么有什么方法呢？</p><h3 id="flatMapConcat"><a href="#flatMapConcat" class="headerlink" title="flatMapConcat"></a><code>flatMapConcat</code></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OptIn(FlowPreview::class)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line"><span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line">(<span class="number">1.</span><span class="number">.3</span>).asFlow().onEach &#123; delay(<span class="number">100</span>) &#125;</span><br><span class="line">.flatMapConcat &#123; requestFlow(it) &#125;</span><br><span class="line">.collect &#123; value -&gt;</span><br><span class="line">println(<span class="string">&quot;<span class="variable">$value</span> at <span class="subst">$&#123;System.currentTimeMillis() - startTime&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26af81bbb8ae490087db1c8c45750912~tplv-k3u1fbpfcp-watermark.image" alt="图片.png"></p><p>可以看到，多个 <code>Flow</code> 被整合成一个 <code>Flow&lt;String&gt;</code></p><p>1: First at 198 ms from start<br>1: Second at 747 ms from start<br>2: First at 858 ms from start<br>2: Second at 1370 ms from start<br>3: First at 1480 ms from start<br>3: Second at 1986 ms from start</p><h3 id="flatMapMerge-并发组合流"><a href="#flatMapMerge-并发组合流" class="headerlink" title="flatMapMerge 并发组合流"></a><code>flatMapMerge</code> 并发组合流</h3><p>还有一种展平的方式<code>flatMapMerge</code>, 它利用了并发的方式, 将多个流组合成一个流, 但有限制, 合并的流不能超过 <code>DEFAULT_CONCURRENCY</code> , 默认是16个, 我们可以在 <code>jvm</code> 上用 <code>DEFAULT_CONCURRENCY_PROPERTY_NAME</code> 属性进行修改</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">println(measureTimeMillis &#123;</span><br><span class="line">   (<span class="number">1.</span><span class="number">.3</span>).asFlow().onEach &#123; delay(<span class="number">100</span>) &#125;.flatMapMerge(<span class="number">3</span>) &#123; requestFlow(it) &#125;.collect &#123; value -&gt; log(value) &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>你会发现时间明显变少 前面两种方式分别是 <code>19xxms 18xxms</code> , 而我们这里通常在 <code>9xxms</code>, 少了一半的时间</p><p>1: First at 210 ms from start<br>2: First at 286 ms from start<br>3: First at 397 ms from start<br>1: Second at 728 ms from start<br>2: Second at 789 ms from start<br>3: Second at 919 ms from start</p><p>注意，这里的打印就和上面的<code>flatMapConcat</code>不相同了</p><h3 id="flatMapLatest"><a href="#flatMapLatest" class="headerlink" title="flatMapLatest"></a><code>flatMapLatest</code></h3><p>与 <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect-latest.html">collectLatest</a> 操作符类似（在<a href="https://book.kotlincn.net/text/flow.html#%E5%A4%84%E7%90%86%E6%9C%80%E6%96%B0%E5%80%BC">“处理最新值”</a> 小节中已经讨论过），也有相对应的“最新”展平模式，在发出新流后立即取消先前流的收集。 这由 <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-latest.html">flatMapLatest</a> 操作符来实现。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OptIn(ExperimentalCoroutinesApi::class)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line">   (<span class="number">1.</span><span class="number">.3</span>).asFlow().onEach &#123; delay(<span class="number">100</span>) &#125;</span><br><span class="line">      .flatMapLatest &#123; requestFlow(it) &#125;</span><br><span class="line">      .collect &#123;</span><br><span class="line">         println(<span class="string">&quot;<span class="variable">$it</span> at <span class="subst">$&#123;System.currentTimeMillis() - startTime&#125;</span> ms from start&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1: First at 265 ms from start<br>2: First at 381 ms from start<br>3: First at 485 ms from start<br>3: Second at 996 ms from start</p><blockquote><p>注意，<a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-latest.html">flatMapLatest</a> 在一个新值到来时取消了块中的所有代码 (本示例中的 <code>&#123; requestFlow(it) &#125;</code>）。 这在该特定示例中不会有什么区别，由于调用 <code>requestFlow</code> 自身的速度是很快的，不会发生挂起， 所以不会被取消。然而，如果我们要在块中调用诸如 <code>delay</code> 之类的挂起函数，这将会被表现出来。</p></blockquote><h2 id="流异常"><a href="#流异常" class="headerlink" title="流异常"></a>流异常</h2><p><code>Flow</code>出现异常的处理方法</p><h3 id="collect-函数使用-try-和-catch"><a href="#collect-函数使用-try-和-catch" class="headerlink" title="collect 函数使用 try 和 catch"></a>collect 函数使用 try 和 catch</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span>: Flow&lt;<span class="built_in">Int</span>&gt; = flow &#123;</span><br><span class="line">   <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">      println(<span class="string">&quot;Emitting <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">      emit(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      simple().collect &#123;</span><br><span class="line">         println(it)</span><br><span class="line">         check(it &lt;= <span class="number">1</span>) &#123; <span class="string">&quot;Collected <span class="variable">$it</span>&quot;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">      e.printStackTrace()</span><br><span class="line">      println(<span class="string">&quot;Caught <span class="variable">$e</span>&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在收集器内部出现了异常，被 <code>try catch</code> 捕获</p><h3 id="捕获任何异常"><a href="#捕获任何异常" class="headerlink" title="捕获任何异常"></a>捕获任何异常</h3><p>在非末端函数中的异常也会被捕获</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span> = flow &#123;</span><br><span class="line">   <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">      println(<span class="string">&quot;Emitting <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">      emit(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;.map &#123; value -&gt;</span><br><span class="line">   check(value &lt;= <span class="number">1</span>) &#123; <span class="string">&quot;Crashed on <span class="variable">$value</span>&quot;</span> &#125;</span><br><span class="line">   <span class="string">&quot;string <span class="variable">$value</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      simple().collect &#123;</span><br><span class="line">         println(it)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">      println(<span class="string">&quot;Caught <span class="variable">$e</span>&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流异常的透明性"><a href="#流异常的透明性" class="headerlink" title="流异常的透明性"></a>流异常的透明性</h2><p>上面的代码存在一个问题。</p><p>从 try、catch 代码块中的 flow 构建器中emit的值是违反异常透明的</p><p>换句话说，流的异常不应给交给调用它的地调用方去处理，而是交给<code>flow</code>自己去解决</p><h3 id="透明捕获"><a href="#透明捕获" class="headerlink" title="透明捕获"></a>透明捕获</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span>: Flow&lt;String&gt; = </span><br><span class="line">    flow &#123;</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">            println(<span class="string">&quot;Emitting <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">            emit(i) <span class="comment">// 发射下一个值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .map &#123; value -&gt;</span><br><span class="line">        check(value &lt;= <span class="number">1</span>) &#123; <span class="string">&quot;Crashed on <span class="variable">$value</span>&quot;</span> &#125;</span><br><span class="line">        <span class="string">&quot;string <span class="variable">$value</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    simple()</span><br><span class="line">        .<span class="keyword">catch</span> &#123; e -&gt; emit(<span class="string">&quot;Caught <span class="variable">$e</span>&quot;</span>) &#125; <span class="comment">// 发射一个异常</span></span><br><span class="line">        .collect &#123; value -&gt; println(value) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这种方式捕获异常只能捕获catch函数前面的异常，如果 <code>collect</code> 报错的话，无法被 <code>catch</code> 函数捕获</p><p>如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span>: Flow&lt;<span class="built_in">Int</span>&gt; = flow &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">        println(<span class="string">&quot;Emitting <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">        emit(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    simple()</span><br><span class="line">        .<span class="keyword">catch</span> &#123; e -&gt; println(<span class="string">&quot;Caught <span class="variable">$e</span>&quot;</span>) &#125; <span class="comment">// 不会捕获下游异常</span></span><br><span class="line">        .collect &#123; value -&gt;</span><br><span class="line">            check(value &lt;= <span class="number">1</span>) &#123; <span class="string">&quot;Collected <span class="variable">$value</span>&quot;</span> &#125;                 </span><br><span class="line">            println(value) </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明式的异常捕获"><a href="#声明式的异常捕获" class="headerlink" title="声明式的异常捕获"></a>声明式的异常捕获</h3><p>我们可以将 <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html">catch</a> 操作符的声明性与处理所有异常的期望相结合，将 <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html">collect</a> 操作符的代码块移动到 <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/on-each.html">onEach</a> 中，并将其放到 <code>catch</code> 操作符之前。收集该流必须由调用无参的 <code>collect()</code> 来触发</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span> = flow &#123;</span><br><span class="line">   <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.3</span>) &#123;</span><br><span class="line">      delay(<span class="number">100</span>)</span><br><span class="line">      emit(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    simple().onEach &#123;</span><br><span class="line">       check(it &lt;= <span class="number">2</span>)</span><br><span class="line">       log(it)</span><br><span class="line">    &#125;.<span class="keyword">catch</span> &#123; cause -&gt; log(<span class="string">&quot;Cause <span class="variable">$cause</span>&quot;</span>) &#125;.collect()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>flow</code> 中 <code>on</code> 开头的函数, 类似于 <code>JavaScript</code> 中的 事件触发, 比如 <code>onClick</code> 就是鼠标点击, <code>OnEach</code> 就是在遍历的时候触发</p></blockquote><h2 id="完成流-命令式和声明式"><a href="#完成流-命令式和声明式" class="headerlink" title="完成流(命令式和声明式)"></a>完成流(命令式和声明式)</h2><h3 id="命令式"><a href="#命令式" class="headerlink" title="命令式"></a>命令式</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span> = (<span class="number">1.</span><span class="number">.3</span>).asFlow()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      simple().collect &#123; value -&gt; log(value) &#125;</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      log(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span> = (<span class="number">1.</span><span class="number">.3</span>).asFlow()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   simple().onCompletion &#123; cause -&gt;</span><br><span class="line">      log(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">   &#125;.collect &#123; value -&gt; log(value) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明式的好处, 在于还可以发现我们的流有没有异常</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simple</span><span class="params">()</span></span> = flow &#123;</span><br><span class="line">   <span class="keyword">for</span> (i <span class="keyword">in</span> (<span class="number">1.</span><span class="number">.3</span>)) &#123;</span><br><span class="line">      delay(<span class="number">100</span>)</span><br><span class="line">      check(i &lt;= <span class="number">1</span>) &#123; <span class="string">&quot;错误&quot;</span> &#125;</span><br><span class="line">      emit(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    simple().onCompletion &#123; cause -&gt;</span><br><span class="line">       <span class="keyword">if</span> (cause != <span class="literal">null</span>) &#123;</span><br><span class="line">          log(<span class="string">&quot;Flow completed with <span class="variable">$cause</span>&quot;</span>)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;.<span class="keyword">catch</span> &#123; cause -&gt;</span><br><span class="line">       log(<span class="string">&quot;Caught exception <span class="variable">$cause</span>&quot;</span>)</span><br><span class="line">    &#125;.collect &#123; value -&gt; log(value) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>onCompletion</code>不会处理流的异常，它可以被用于观察是否发生异常</p><p>所以不要企图使用 <code>onCompletion</code> 处理异常</p><h2 id="指定flow在给定的协程上运行-launchIn"><a href="#指定flow在给定的协程上运行-launchIn" class="headerlink" title="指定flow在给定的协程上运行: launchIn"></a>指定flow在给定的协程上运行: <code>launchIn</code></h2><p>前面的 <code>collect</code> 收集器有个缺点, <code>collect</code> 后面的代码会等待</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟事件流</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">events</span><span class="params">()</span></span>: Flow&lt;<span class="built_in">Int</span>&gt; = (<span class="number">1.</span><span class="number">.3</span>).asFlow().onEach &#123; delay(<span class="number">100</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   events()</span><br><span class="line">      .onEach &#123; event -&gt; println(<span class="string">&quot;Event: <span class="variable">$event</span>&quot;</span>) &#125;</span><br><span class="line">      .collect() <span class="comment">// &lt;--- 线程将在这里等待</span></span><br><span class="line">   println(<span class="string">&quot;Done&quot;</span>) <span class="comment">// &lt;--- 这里的代码不能第一时间执行到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如上面你的代码最终会打印出下面的情况：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[main] Event: <span class="number">1</span></span><br><span class="line">[main] Event: <span class="number">2</span></span><br><span class="line">[main] Event: <span class="number">3</span></span><br><span class="line">[main] Done</span><br></pre></td></tr></table></figure><p><code>println(&quot;Done&quot;)</code>被延迟了</p><p>明明不在流上的操作，却阻塞了 <code>Done</code></p><p>如果不想要 <code>collect</code> 等待的话, 则可以使用  <code>launchIn(coroutineScope)</code> </p><p>让任务在单独的协程中执行</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟事件流</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">events</span><span class="params">()</span></span>: Flow&lt;<span class="built_in">Int</span>&gt; = (<span class="number">1.</span><span class="number">.3</span>).asFlow().onEach &#123; delay(<span class="number">100</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    events().onEach &#123; event-&gt; log(<span class="string">&quot;Event: <span class="variable">$event</span>&quot;</span>) &#125;</span><br><span class="line">       .launchIn(<span class="keyword">this</span>)</span><br><span class="line">   log(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[main] Done</span><br><span class="line">[main] Event: <span class="number">1</span></span><br><span class="line">[main] Event: <span class="number">2</span></span><br><span class="line">[main] Event: <span class="number">3</span></span><br></pre></td></tr></table></figure><p><code>Done</code> 最先输出了</p><p>咱们还可以把流给其他协程执行, 让他在后台执行</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">val</span> job = events().onEach &#123; event -&gt; log(<span class="string">&quot;Event: <span class="variable">$event</span>&quot;</span>) &#125;</span><br><span class="line">      .launchIn(CoroutineScope(Dispatchers.Default))</span><br><span class="line">   log(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">   job.join()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流取消检测-1"><a href="#流取消检测-1" class="headerlink" title="流取消检测"></a>流取消检测</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span>: Flow&lt;<span class="built_in">Int</span>&gt; = flow &#123; </span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123;</span><br><span class="line">        println(<span class="string">&quot;Emitting <span class="variable">$i</span>&quot;</span>) </span><br><span class="line">        emit(i) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    foo().collect &#123; value -&gt; </span><br><span class="line">        <span class="keyword">if</span> (value == <span class="number">3</span>) cancel()  </span><br><span class="line">        println(value)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常情况下， Flow 都会检测取消情况</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28a89608252341f99208e7f95d1b4856~tplv-k3u1fbpfcp-watermark.image" alt="图片.png"></p><p>在上图剪头的位置（也就是 <code>emit</code> 的时候会检测），会不断的随着循环检测<code>ensureActive</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Emitting 1</span><br><span class="line">1</span><br><span class="line">Emitting 2</span><br><span class="line">2</span><br><span class="line">Emitting 3</span><br><span class="line">3</span><br><span class="line">Emitting 4</span><br><span class="line">Exception in thread &quot;main&quot; kotlinx.coroutines.JobCancellationException: BlockingCoroutine was cancelled; job=BlockingCoroutine&#123;Cancelled&#125;@cb0ed20</span><br></pre></td></tr></table></figure><p>但是出于性能考虑，大多数情况下， flow 默认会关闭 <code>ensureActive</code>检测</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">    (<span class="number">1.</span><span class="number">.5</span>).asFlow().collect &#123; value -&gt; </span><br><span class="line">        <span class="keyword">if</span> (value == <span class="number">3</span>) cancel()  </span><br><span class="line">        println(value)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">Exception in thread &quot;main&quot; kotlinx.coroutines.JobCancellationException: BlockingCoroutine was cancelled; job=BlockingCoroutine&#123;Cancelled&#125;@9a7504c</span><br></pre></td></tr></table></figure><p>能看得出来，打印出了 4 5 最后才报的错</p><h3 id="让繁忙的流可取消"><a href="#让繁忙的流可取消" class="headerlink" title="让繁忙的流可取消"></a>让繁忙的流可取消</h3><p>有时候，出于某些目的，我们偏偏需要在该取消的时候取消掉我们的 flow，这时可以使用这种方式：</p><p><code>.onEach &#123; currentCoroutineContext().ensureActive() &#125;</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   (<span class="number">1.</span><span class="number">.5</span>).asFlow()</span><br><span class="line">      .onEach &#123; currentCoroutineContext().ensureActive() &#125;</span><br><span class="line">      .collect &#123; value -&gt;</span><br><span class="line">         <span class="keyword">if</span> (value == <span class="number">3</span>) cancel()</span><br><span class="line">         println(value)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过我们还能看到这个方法：<code>.cancellable()</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   (<span class="number">1.</span><span class="number">.5</span>).asFlow()</span><br><span class="line">      .cancellable()</span><br><span class="line">      .collect &#123; value -&gt;</span><br><span class="line">         <span class="keyword">if</span> (value == <span class="number">3</span>) cancel()</span><br><span class="line">         println(value)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">Exception in thread &quot;main&quot; kotlinx.coroutines.JobCancellationException: BlockingCoroutine was cancelled; job=BlockingCoroutine&#123;Cancelled&#125;@59906517</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步 </tag>
            
            <tag> zip </tag>
            
            <tag> reduce </tag>
            
            <tag> 协程 </tag>
            
            <tag> 冷流 </tag>
            
            <tag> flow </tag>
            
            <tag> flow取消 </tag>
            
            <tag> 超时流取消 </tag>
            
            <tag> 流取消检测 </tag>
            
            <tag> 让繁忙的协程可以取消 </tag>
            
            <tag> flow创建 </tag>
            
            <tag> 中间流操作符 </tag>
            
            <tag> 变换运算符 </tag>
            
            <tag> 限长操作符 </tag>
            
            <tag> 末端流操作符 </tag>
            
            <tag> flow有序 </tag>
            
            <tag> flow上下文 </tag>
            
            <tag> collect </tag>
            
            <tag> emit </tag>
            
            <tag> flowOn </tag>
            
            <tag> buffer缓冲 </tag>
            
            <tag> 处理最新的值 </tag>
            
            <tag> 组合多个流 </tag>
            
            <tag> combine </tag>
            
            <tag> 展平flow </tag>
            
            <tag> flatMapConcat </tag>
            
            <tag> flatMapMerge </tag>
            
            <tag> flatMapLatest </tag>
            
            <tag> 流异常 </tag>
            
            <tag> 捕获任何异常 </tag>
            
            <tag> 流异常的透明性 </tag>
            
            <tag> 声明式异常捕获 </tag>
            
            <tag> 完成流 </tag>
            
            <tag> 命令式 </tag>
            
            <tag> 声明式 </tag>
            
            <tag> launchIn </tag>
            
            <tag> 让繁忙的流可取消 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十一、kotlin的协程(三)——热流channel</title>
      <link href="/2022/12/03/07kotlin/%E5%8D%81%E4%B8%80%E3%80%81kotlin%E7%9A%84%E5%8D%8F%E7%A8%8B(%E4%B8%89)%E2%80%94%E2%80%94%E7%83%AD%E6%B5%81channel/"/>
      <url>/2022/12/03/07kotlin/%E5%8D%81%E4%B8%80%E3%80%81kotlin%E7%9A%84%E5%8D%8F%E7%A8%8B(%E4%B8%89)%E2%80%94%E2%80%94%E7%83%AD%E6%B5%81channel/</url>
      
        <content type="html"><![CDATA[<h1 id="热流channel-——-管道"><a href="#热流channel-——-管道" class="headerlink" title="热流channel —— 管道"></a>热流<code>channel</code> —— 管道</h1><h2 id="管道是什么？"><a href="#管道是什么？" class="headerlink" title="管道是什么？"></a>管道是什么？</h2><p>本质上是一个<code>BlockingQueue</code>阻塞队列，只不过多了个可以挂起的函数罢了</p><h2 id="为什么要用管道"><a href="#为什么要用管道" class="headerlink" title="为什么要用管道?"></a>为什么要用管道?</h2><ol><li><p>我们可以把 <code>kotlin</code> 的 <code>channel</code> 当作 <code>BlockingQueue</code> , 但是 <code>channel</code> 使用的是 <strong>挂起函数</strong> 的 <code>send</code> 代替 阻塞队列的 <code>put</code>, 用<strong>挂起函数</strong> <code>receive</code> 代替阻塞队列的 <code>take</code>这样 <code>channel</code> 的优势就有了, <strong>不会阻塞当前线程</strong></p></li><li><p><code>channel</code> 是一个允许单向信息传递的数据结构, 从管道的写入端写入数据到管道的读取端读取数据, 这些都是串行的, 它的顺序是不变的</p></li></ol><h2 id="什么是热流？"><a href="#什么是热流？" class="headerlink" title="什么是热流？"></a>什么是热流？</h2><p>前面我们知道 冷流 是  <code>flow</code>，需要末端操作（可以看成是开关）才会开启 <code>emit</code> 的函数发射元素过来</p><p>而热流呢？</p><p>则不需要 什么末端操作（开关），只要 <code>sender</code> 就一定会将元素发送出去，至于 <code>receiver</code> 端是否读取，那就不清楚了</p><h2 id="管道怎么用"><a href="#管道怎么用" class="headerlink" title="管道怎么用?"></a>管道怎么用?</h2><h3 id="管道-hello-world"><a href="#管道-hello-world" class="headerlink" title="管道 hello world"></a>管道 hello world</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> channel = Channel&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">launch &#123;</span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123;</span><br><span class="line">channel.send(x * x)</span><br><span class="line">&#125;</span><br><span class="line">channel.close()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> channel) &#123;</span><br><span class="line">println(item)</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，<code>send</code> 发送变量过去就会被挂起, 直到另一方调用 <code>recevie</code> , <code>send</code> 函数才能够重新发送变量过去, 反之, <code>receive</code> 也是, 如果对面没有 <code>send</code> 任何变量, 则会挂起</p><blockquote><p>就把管道当作<code>queue</code>, 把<code>send</code>当作<code>add</code>, 把<code>receive</code>当作<code>get</code>, 然后在管道中加入<code>get</code>阻塞功能就是<code>channel</code>了</p></blockquote><blockquote><p>这里的 <code>send</code> 为什么会阻塞呢？ 因为 <code>channel</code> 管道的大小所限，这会在后续说明</p></blockquote><p>其次，热流管道需要<code>close</code>，来表示没有更多的元素发送了，此时程序才会停止，否则会继续阻塞</p><p>对比下 <code>flow</code></p><p>在 <code>flow</code> 中要实现上面这种方式要咋办？</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> flow = flow &#123;</span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123;</span><br><span class="line">emit(x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flow.collect &#123;</span><br><span class="line">println(it)</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会不会感觉更加的简单，还不需要 <code>close</code> ，也可以不需要 <code>launch</code></p><p>啊？ 什么？ <code>flow</code> 不需要 <code>launch</code>？</p><p>可以看 <code>flow</code> 的源码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">flow</span><span class="params">(<span class="meta">@BuilderInference</span> block: <span class="type">suspend</span> <span class="type">FlowCollector</span>&lt;<span class="type">T</span>&gt;.() -&gt; <span class="type">Unit</span>)</span></span>: Flow&lt;T&gt; = SafeFlow(block)</span><br></pre></td></tr></table></figure><p>不过在 <code>collect</code> 函数中则需要挂起 <code>suspend</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">collect</span><span class="params">(collector: <span class="type">FlowCollector</span>&lt;<span class="type">T</span>&gt;)</span></span></span><br></pre></td></tr></table></figure><blockquote><p><code>jetbrain</code>明显是想要开发者更多的使用 <code>flow</code> 而不是 <code>channel</code>（至少目前是如此）</p></blockquote><h3 id="管道怎么迭代和关闭"><a href="#管道怎么迭代和关闭" class="headerlink" title="管道怎么迭代和关闭?"></a>管道怎么迭代和关闭?</h3><h4 id="管道迭代"><a href="#管道迭代" class="headerlink" title="管道迭代"></a>管道迭代</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">val</span> channel = Channel&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">   launch &#123;</span><br><span class="line">      <span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123;</span><br><span class="line">         channel.send(x * x)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 当管道没有数据的时候, 就会阻塞等待</span></span><br><span class="line">   <span class="keyword">for</span> (y <span class="keyword">in</span> channel) &#123;</span><br><span class="line">      log(y)</span><br><span class="line">   &#125;</span><br><span class="line">   log(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="管道的关闭及其关闭状态的判断"><a href="#管道的关闭及其关闭状态的判断" class="headerlink" title="管道的关闭及其关闭状态的判断"></a>管道的关闭及其关闭状态的判断</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExperimentalCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">val</span> channel = Channel&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">   launch &#123;</span><br><span class="line">      <span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (channel.isClosedForSend) &#123;</span><br><span class="line">            log(<span class="string">&quot;send: close send:<span class="subst">$&#123;channel.isClosedForSend&#125;</span>, receive: <span class="subst">$&#123;channel.isClosedForReceive&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">         &#125;</span><br><span class="line">         channel.send(x)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   repeat(<span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (it &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">         channel.close()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (channel.isClosedForReceive) &#123;</span><br><span class="line">         log(<span class="string">&quot;receive: close send:<span class="subst">$&#123;channel.isClosedForSend&#125;</span>, receive: <span class="subst">$&#123;channel.isClosedForReceive&#125;</span>&quot;</span>)</span><br><span class="line">         <span class="keyword">return</span><span class="symbol">@repeat</span></span><br><span class="line">      &#125;</span><br><span class="line">      log(channel.receive())</span><br><span class="line">   &#125;</span><br><span class="line">   log(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="管道的生产者和消费者模型"><a href="#管道的生产者和消费者模型" class="headerlink" title="管道的生产者和消费者模型"></a>管道的生产者和消费者模型</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OptIn(ExperimentalCoroutinesApi::class)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">produceSquares</span><span class="params">()</span></span> = produce &#123;</span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> <span class="number">1.</span><span class="number">.5</span>) send(x * x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> channel = produceSquares()</span><br><span class="line">channel.consumeEach(::println)</span><br><span class="line">println(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="管道的结果可以给另一个管道"><a href="#管道的结果可以给另一个管道" class="headerlink" title="管道的结果可以给另一个管道"></a>管道的结果可以给另一个管道</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">produceNumber</span><span class="params">()</span></span> = produce&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">   repeat(<span class="number">10</span>) &#123;</span><br><span class="line">      send(it)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">square</span><span class="params">(number: <span class="type">ReceiveChannel</span>&lt;<span class="type">Int</span>&gt;)</span></span> = produce&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">for</span> (i <span class="keyword">in</span> number) &#123;</span><br><span class="line">      send(i * i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">val</span> number = produceNumber()</span><br><span class="line">   <span class="keyword">val</span> receiver = square(number)</span><br><span class="line">   repeat(<span class="number">10</span>) &#123;</span><br><span class="line">      log(receiver.receive())</span><br><span class="line">   &#125;</span><br><span class="line">   log(<span class="string">&quot;Done&quot;</span>)</span><br><span class="line">   coroutineContext.cancelChildren()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：我们在调用 <code>send</code> 函数后，执行该 <code>send</code> 的协程会被挂起，线程去其他地方运行别的任务去了，所以看起来 <code>while（true） send（xxxx）</code> 好像它会无限发送元素似的，但其实如果管道的大小 <code>buffer</code> 只有一个的话，这里的 <code>send</code> 也只会被执行一次，向管道中发送一个元素，然后管道就满了， <code>send</code> 函数就会被挂起，等到管道中的元素被 <code>receive</code> 读取，<code>send</code>函数才会<strong>立即</strong>再发一个元素到管道中</p></blockquote><h2 id="管道与无穷质数序列"><a href="#管道与无穷质数序列" class="headerlink" title="管道与无穷质数序列"></a>管道与无穷质数序列</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExperimentalCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">numbersProducer</span><span class="params">(start: <span class="type">Int</span>)</span></span> = produce &#123;</span><br><span class="line">   <span class="keyword">var</span> n = start</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) send(n++)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExperimentalCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">filterPrimes</span><span class="params">(numbers: <span class="type">ReceiveChannel</span>&lt;<span class="type">Int</span>&gt;, prime: <span class="type">Int</span>)</span></span> =</span><br><span class="line">   produce &#123;</span><br><span class="line">      <span class="keyword">for</span> (x <span class="keyword">in</span> numbers) &#123;</span><br><span class="line">         <span class="keyword">if</span> (x % prime != <span class="number">0</span>) &#123;</span><br><span class="line">            send(x) <span class="comment">// 这里会找到所有满足条件的元素，然后 send 接着协程被挂起，不会无限的读取 numbers 里面的数字</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExperimentalCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">var</span> numbers = numbersProducer(<span class="number">2</span>)</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> prime = numbers.receive()</span><br><span class="line">      log(<span class="string">&quot;<span class="variable">$prime</span>&quot;</span>)</span><br><span class="line">      numbers = filterPrimes(numbers, prime)</span><br><span class="line">      delay(<span class="number">1000</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扇出（读取）"><a href="#扇出（读取）" class="headerlink" title="扇出（读取）"></a>扇出（读取）</h2><p>多个协程从一个管道中读取数据</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OptIn(ExperimentalCoroutinesApi::class)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">produceNumbers</span><span class="params">()</span></span> = produce &#123;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">send(x++)</span><br><span class="line">delay(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">launchProcessor</span><span class="params">(id: <span class="type">Int</span>, channel: <span class="type">ReceiveChannel</span>&lt;<span class="type">Int</span>&gt;)</span></span> = launch &#123;</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> channel) &#123;</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread().name&#125;</span>: Processor #<span class="variable">$id</span> received <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> produceNumbers = produceNumbers()</span><br><span class="line">repeat(<span class="number">5</span>) &#123;</span><br><span class="line">launchProcessor(it, produceNumbers)</span><br><span class="line">&#125;</span><br><span class="line">delay(<span class="number">1000</span>)</span><br><span class="line">produceNumbers.cancel()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印出来不同的协程在做接受</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">main @coroutine#<span class="number">3</span>: Processor #<span class="number">0</span> received <span class="number">1</span></span><br><span class="line">main @coroutine#<span class="number">3</span>: Processor #<span class="number">0</span> received <span class="number">2</span></span><br><span class="line">main @coroutine#<span class="number">4</span>: Processor #<span class="number">1</span> received <span class="number">3</span></span><br><span class="line">main @coroutine#<span class="number">5</span>: Processor #<span class="number">2</span> received <span class="number">4</span></span><br><span class="line">main @coroutine#<span class="number">6</span>: Processor #<span class="number">3</span> received <span class="number">5</span></span><br><span class="line">main @coroutine#<span class="number">7</span>: Processor #<span class="number">4</span> received <span class="number">6</span></span><br><span class="line">main @coroutine#<span class="number">3</span>: Processor #<span class="number">0</span> received <span class="number">7</span></span><br><span class="line">main @coroutine#<span class="number">4</span>: Processor #<span class="number">1</span> received <span class="number">8</span></span><br><span class="line">main @coroutine#<span class="number">5</span>: Processor #<span class="number">2</span> received <span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="广播channel"><a href="#广播channel" class="headerlink" title="广播channel"></a>广播channel</h3><p>一个管道广播数据给多个协程</p><p>这种方式和前面扇出方式不同之处在于：</p><p>前面是一堆数据，分发给多个协程，每个协程得到的数据不重复</p><p>这里是一堆数据复制出多个资源给多个协程，每个协程得到的数据重复</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ObsoleteCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> channel = BroadcastChannel&lt;<span class="built_in">Int</span>&gt;(Channel.BUFFERED)</span><br><span class="line">    launch &#123;</span><br><span class="line">        List(<span class="number">5</span>) &#123;</span><br><span class="line">            delay(<span class="number">200</span>)</span><br><span class="line">            channel.send(it)</span><br><span class="line">        &#125;</span><br><span class="line">        channel.close()</span><br><span class="line">    &#125;</span><br><span class="line">    List(<span class="number">5</span>) &#123;</span><br><span class="line">        launch &#123;</span><br><span class="line">            <span class="keyword">val</span> receiveChannel = channel.openSubscription()</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> receiveChannel) &#123;</span><br><span class="line">                log(<span class="string">&quot;received: <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.joinAll()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看输出就知道了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">main @coroutine#3: received: 0</span><br><span class="line">main @coroutine#4: received: 0</span><br><span class="line">main @coroutine#5: received: 0</span><br><span class="line">main @coroutine#6: received: 0</span><br><span class="line">main @coroutine#7: received: 0</span><br><span class="line">main @coroutine#3: received: 1</span><br><span class="line">main @coroutine#4: received: 1</span><br><span class="line">main @coroutine#5: received: 1</span><br><span class="line">main @coroutine#6: received: 1</span><br><span class="line">main @coroutine#7: received: 1</span><br><span class="line">main @coroutine#3: received: 2</span><br><span class="line">main @coroutine#4: received: 2</span><br><span class="line">main @coroutine#5: received: 2</span><br><span class="line">main @coroutine#6: received: 2</span><br><span class="line">main @coroutine#7: received: 2</span><br><span class="line">main @coroutine#3: received: 3</span><br><span class="line">main @coroutine#4: received: 3</span><br><span class="line">main @coroutine#5: received: 3</span><br><span class="line">main @coroutine#6: received: 3</span><br><span class="line">main @coroutine#7: received: 3</span><br><span class="line">main @coroutine#3: received: 4</span><br><span class="line">main @coroutine#4: received: 4</span><br><span class="line">main @coroutine#5: received: 4</span><br><span class="line">main @coroutine#6: received: 4</span><br><span class="line">main @coroutine#7: received: 4</span><br></pre></td></tr></table></figure><h2 id="扇入（发送）"><a href="#扇入（发送）" class="headerlink" title="扇入（发送）"></a>扇入（发送）</h2><p>多个协程可以发送到同一个通道</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">sendString</span><span class="params">(channel: <span class="type">SendChannel</span>&lt;<span class="type">String</span>&gt;, s: <span class="type">String</span>, time: <span class="type">Long</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">delay(time)</span><br><span class="line">channel.send(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> channel = Channel&lt;String&gt;()</span><br><span class="line">launch &#123; sendString(channel, <span class="string">&quot;foo&quot;</span>, <span class="number">200L</span>) &#125;</span><br><span class="line">launch &#123; sendString(channel, <span class="string">&quot;BAR!&quot;</span>, <span class="number">500L</span>) &#125;</span><br><span class="line">repeat(<span class="number">6</span>) &#123;</span><br><span class="line">println(channel.receive())</span><br><span class="line">&#125;</span><br><span class="line">currentCoroutineContext().cancelChildren()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">foo</span><br><span class="line">foo</span><br><span class="line">BAR!</span><br><span class="line">foo</span><br><span class="line">foo</span><br><span class="line">BAR!</span><br></pre></td></tr></table></figure><h2 id="通道缓冲区"><a href="#通道缓冲区" class="headerlink" title="通道缓冲区"></a>通道缓冲区</h2><p>我们可以给管道设置一个缓冲区, 如果不设置缓冲区的话, 每次管道只能放一个元素</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> channel = Channel&lt;<span class="built_in">Int</span>&gt;(<span class="number">4</span>) <span class="comment">// 启动带缓冲的通道</span></span><br><span class="line"><span class="keyword">val</span> sender = launch &#123; <span class="comment">// 启动发送者协程</span></span><br><span class="line">repeat(<span class="number">10</span>) &#123;</span><br><span class="line">println(<span class="string">&quot;Sending <span class="variable">$it</span>&quot;</span>) <span class="comment">// 在每一个元素发送前打印它们</span></span><br><span class="line">channel.send(it) <span class="comment">// 将在缓冲区被占满时挂起</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没有接收到东西……只是等待……</span></span><br><span class="line">delay(<span class="number">1000</span>)</span><br><span class="line">sender.cancel() <span class="comment">// 取消发送者协程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后你会发现, 每次传入管道都是 3 个元素, 然后再读取, 对记得 上面管道缓冲区限定传入的参数是 2 , 但后面却能往管道里传入 3 个元素, 这里需要注意</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sending <span class="number">0</span></span><br><span class="line">Sending <span class="number">1</span></span><br><span class="line">Sending <span class="number">2</span></span><br><span class="line">Sending <span class="number">3</span></span><br><span class="line">Sending <span class="number">4</span></span><br></pre></td></tr></table></figure><p><code>produce</code> 也是可以设置<code>capacity</code>的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExperimentalCoroutinesApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;E&gt;</span> CoroutineScope.<span class="title">produce</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    context: <span class="type">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class="line"><span class="params"><span class="function">    capacity: <span class="type">Int</span> = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@BuilderInference</span> block: <span class="type">suspend</span> <span class="type">ProducerScope</span>&lt;<span class="type">E</span>&gt;.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: ReceiveChannel&lt;E&gt; =</span><br><span class="line">    produce(context, capacity, BufferOverflow.SUSPEND, CoroutineStart.DEFAULT, onCompletion = <span class="literal">null</span>, block = block)</span><br></pre></td></tr></table></figure><h2 id="管道是公平的-先进先出"><a href="#管道是公平的-先进先出" class="headerlink" title="管道是公平的: 先进先出"></a>管道是公平的: 先进先出</h2><p>发送端和接受端的通道秉承先入先出原则</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Ball</span>(<span class="keyword">var</span> hits: <span class="built_in">Int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> table = Channel&lt;Ball&gt;() <span class="comment">// 一个共享的 table（桌子）</span></span><br><span class="line">    launch &#123; player(<span class="string">&quot;ping&quot;</span>, table) &#125;</span><br><span class="line">    launch &#123; player(<span class="string">&quot;pong&quot;</span>, table) &#125;</span><br><span class="line">    table.send(Ball(<span class="number">0</span>)) <span class="comment">// 乒乓球</span></span><br><span class="line">    delay(<span class="number">1000</span>) <span class="comment">// 延迟 1 秒钟</span></span><br><span class="line">    coroutineContext.cancelChildren() <span class="comment">// 游戏结束，取消它们</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">player</span><span class="params">(name: <span class="type">String</span>, table: <span class="type">Channel</span>&lt;<span class="type">Ball</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (ball <span class="keyword">in</span> table) &#123; <span class="comment">// 在循环中接收球</span></span><br><span class="line">        ball.hits++</span><br><span class="line">        println(<span class="string">&quot;<span class="variable">$name</span> <span class="variable">$ball</span>&quot;</span>)</span><br><span class="line">        delay(<span class="number">300</span>) <span class="comment">// 等待一段时间</span></span><br><span class="line">        table.send(ball) <span class="comment">// 将球发送回去</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ping Ball(hits=<span class="number">1</span>)</span><br><span class="line">pong Ball(hits=<span class="number">2</span>)</span><br><span class="line">ping Ball(hits=<span class="number">3</span>)</span><br><span class="line">pong Ball(hits=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h1 id="select"><a href="#select" class="headerlink" title="select"></a>select</h1><blockquote><p><code>select</code> 在很多地方都听过, 比如 <code>linux</code> 的 <code>select</code> 机制的多路复用, <code>select</code> 里头如果我没记错是用一个线程监控多个文件句柄(我记得极限是<code>1024个</code>?), 类似于起一条线程不断的轮询每个数组中的某个值, 判断是否有事件需要处理, 不过后续 <code>linux</code> 他们觉得 <code>select</code> 文件句柄和轮询设计不太好, 于是使用上了 <code>poll</code>和<code>epoll</code></p><p>在 <code>golang</code> 中也有 <code>select</code> ，借助管道触发走自己的分支</p></blockquote><h2 id="kotlin的select是什么"><a href="#kotlin的select是什么" class="headerlink" title="kotlin的select是什么?"></a><code>kotlin</code>的<code>select</code>是什么?</h2><p>在 <code>kotlin</code> 中 <code>select</code> 的<code>select</code>是这样的: </p><p>从多个<code>onXXX</code>事件中挑选一个可用的且是最快的那一个事件执行</p><blockquote><p><code>on</code> 开头的函数这里我看成是 <code>JavaScript DOM</code> 中的那种事件函数, 比如 <code>onClick</code> 就是鼠标单击事件</p></blockquote><p>看下面代码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExperimentalCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">fizz</span><span class="params">()</span></span> = produce &#123;</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      delay(<span class="number">300</span>)</span><br><span class="line">      send(<span class="string">&quot;Fizz&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExperimentalCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">buzz</span><span class="params">()</span></span> = produce &#123;</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      delay(<span class="number">500</span>)</span><br><span class="line">      send(<span class="string">&quot;Buzz&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">selectFizzBuzz</span><span class="params">(fizz: <span class="type">ReceiveChannel</span>&lt;<span class="type">String</span>&gt;, buzz: <span class="type">ReceiveChannel</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   select&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">      fizz.onReceive &#123; s -&gt; log(<span class="string">&quot;fizz -&gt; <span class="variable">$s</span>&quot;</span>) &#125;</span><br><span class="line">      buzz.onReceive &#123; s -&gt; log(<span class="string">&quot;buzz -&gt; <span class="variable">$s</span>&quot;</span>) &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExperimentalCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">val</span> fizz = fizz()</span><br><span class="line">   <span class="keyword">val</span> buzz = buzz()</span><br><span class="line">   selectFizzBuzz(fizz, buzz)</span><br><span class="line">   <span class="comment">// fizz.cancel()</span></span><br><span class="line">   <span class="comment">// buzz.cancel()</span></span><br><span class="line">   coroutineContext.cancelChildren()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fizz -&gt; &#x27;Fizz&#x27;</span><br><span class="line">buzz -&gt; &#x27;Buzz!&#x27;</span><br><span class="line">fizz -&gt; &#x27;Fizz&#x27;</span><br><span class="line">fizz -&gt; &#x27;Fizz&#x27;</span><br><span class="line">buzz -&gt; &#x27;Buzz!&#x27;</span><br><span class="line">fizz -&gt; &#x27;Fizz&#x27;</span><br><span class="line">buzz -&gt; &#x27;Buzz!&#x27;</span><br></pre></td></tr></table></figure><p>在 <code>select</code> 中的 <code>on 系列事件函数</code>将会被 <code>select</code> 注册到内部，监控起来</p><h2 id="多路-channel-复用"><a href="#多路-channel-复用" class="headerlink" title="多路 channel 复用"></a>多路 <code>channel</code> 复用</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> channels = listOf(Channel&lt;String&gt;(), Channel&lt;String&gt;())</span><br><span class="line">launch &#123;</span><br><span class="line">delay(<span class="number">100</span>)</span><br><span class="line">channels[<span class="number">0</span>].send(<span class="string">&quot;777&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">launch &#123;</span><br><span class="line">delay(<span class="number">200</span>)</span><br><span class="line">channels[<span class="number">1</span>].send(<span class="string">&quot;888&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> res = select&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">channels.forEach &#123; channel -&gt;</span><br><span class="line">channel.onReceive &#123; s -&gt;</span><br><span class="line">s[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">println(res)</span><br><span class="line">currentCoroutineContext().cancelChildren()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终速度快的先执行, 打印了 <code>7</code></p><p>而这里：</p><p><code>channel.onReceive</code>调用的不是<code>public val onReceive: SelectClause1&lt;E&gt;</code>这个接口的<code>public fun &lt;R&gt; registerSelectClause1(select: SelectInstance&lt;R&gt;, block: suspend (Q) -&gt; R)</code>这个函数</p><p>而是 <code>invoke</code> 函数</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d110bcba6244a1482da0148a1f56de9~tplv-k3u1fbpfcp-watermark.image" alt="图片.png"></p><p><code>public operator fun &lt;Q&gt; SelectClause1&lt;Q&gt;.invoke(block: suspend (Q) -&gt; R)</code></p><blockquote><p>如果你不知道 <code>onReceive</code> 函数是什么参数，则可以使用 <code>invoke</code></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/889edc41062d4027a1a73f09f9dacb36~tplv-k3u1fbpfcp-watermark.image" alt="图片.png"></p></blockquote><h2 id="select-轮询-onSend-事件"><a href="#select-轮询-onSend-事件" class="headerlink" title="select 轮询 onSend 事件"></a><code>select</code> 轮询 <code>onSend</code> 事件</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OptIn(ExperimentalCoroutinesApi::class)</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">produceNumbers</span><span class="params">(side: <span class="type">SendChannel</span>&lt;<span class="type">Int</span>&gt;)</span></span> = produce&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line"><span class="keyword">for</span> (num <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>) &#123;</span><br><span class="line">delay(<span class="number">100</span>)</span><br><span class="line">select&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">onSend(num) &#123; <span class="comment">// 这里默认将会发送一个 num 数值到管道中，所以下面不需要再次发送</span></span><br><span class="line"><span class="comment">// it.send(num * 10) // 这段代码如果执行，将会再次往管道中发送一个数字</span></span><br><span class="line">&#125;</span><br><span class="line">side.onSend(num) &#123; <span class="comment">// 自动发送 num 到管道中</span></span><br><span class="line"><span class="comment">// it.send(num * 100)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> side = Channel&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">launch &#123;</span><br><span class="line">side.consumeEach &#123; println(<span class="string">&quot;Side channel has <span class="variable">$it</span>&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line">produceNumbers(side).consumeEach &#123;</span><br><span class="line">println(<span class="string">&quot;consuming <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">delay(<span class="number">250</span>)</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="string">&quot;Done consuming&quot;</span>)</span><br><span class="line">currentCoroutineContext().cancelChildren()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">consuming <span class="number">1</span></span><br><span class="line">Side channel has <span class="number">2</span></span><br><span class="line">Side channel has <span class="number">3</span></span><br><span class="line">consuming <span class="number">4</span></span><br><span class="line">Side channel has <span class="number">5</span></span><br><span class="line">Side channel has <span class="number">6</span></span><br><span class="line">consuming <span class="number">7</span></span><br><span class="line">Side channel has <span class="number">8</span></span><br><span class="line">Side channel has <span class="number">9</span></span><br><span class="line">consuming <span class="number">10</span></span><br><span class="line">Done consuming</span><br></pre></td></tr></table></figure><p>上面这段代码主要写了两个 <code>channel</code> 读写方面的问题</p><p>其中主管道为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">produceNumbers(side).consumeEach &#123;</span><br><span class="line">    println(&quot;consuming $it&quot;)</span><br><span class="line">    delay(250)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>侧管道为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">launch &#123;</span><br><span class="line">side.consumeEach &#123; println(&quot;Side channel has $it&quot;) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中需要注意：主管道有延迟 250 ms </p><p>所以在打印的时候会发现，侧管道打印的比较多一些</p><p>如果将<code>delay(100)</code>这段代码删除</p><p>效果会更加的明显</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OptIn(ExperimentalCoroutinesApi::class)</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">produceNumbers</span><span class="params">(side: <span class="type">SendChannel</span>&lt;<span class="type">Int</span>&gt;)</span></span> = produce&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">for</span> (num <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>) &#123;</span><br><span class="line">      select&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">         onSend(num) &#123;</span><br><span class="line">            <span class="comment">// it.send(num * 10) // 第二次发送</span></span><br><span class="line">         &#125;</span><br><span class="line">         side.onSend(num) &#123;</span><br><span class="line">           <span class="comment">// it.send(num * 100) // 第二次发送</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">consuming 1</span><br><span class="line">Side channel has 2</span><br><span class="line">Side channel has 3</span><br><span class="line">Side channel has 4</span><br><span class="line">Side channel has 5</span><br><span class="line">Side channel has 6</span><br><span class="line">Side channel has 7</span><br><span class="line">Side channel has 8</span><br><span class="line">Side channel has 9</span><br><span class="line">Side channel has 10</span><br><span class="line">Done consuming</span><br></pre></td></tr></table></figure><h2 id="select-轮询各种事件"><a href="#select-轮询各种事件" class="headerlink" title="select 轮询各种事件"></a>select 轮询各种事件</h2><h2 id="select-轮询-onAwait"><a href="#select-轮询-onAwait" class="headerlink" title="select 轮询 onAwait"></a>select 轮询 <code>onAwait</code></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">asyncString</span><span class="params">(time: <span class="type">Int</span>)</span></span> = async &#123;</span><br><span class="line">   delay(time.toLong())</span><br><span class="line">   <span class="string">&quot;Waited for <span class="variable">$time</span> ms&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">asyncStringsList</span><span class="params">()</span></span>: List&lt;Deferred&lt;String&gt;&gt; &#123;</span><br><span class="line">   <span class="keyword">val</span> random = Random(<span class="number">3</span>)</span><br><span class="line">   <span class="keyword">return</span> List(<span class="number">12</span>) &#123;</span><br><span class="line">      asyncString(random.nextInt(<span class="number">1000</span>))</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 select 轮询中选一个结果</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test01</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">val</span> list = asyncStringsList()</span><br><span class="line">   <span class="keyword">val</span> result = select&lt;String&gt; &#123;</span><br><span class="line">      list.forEach &#123; deferred -&gt;</span><br><span class="line">         deferred.onAwait.invoke &#123;</span><br><span class="line">            it</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   log(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>select每次只获得一个结果，这点需要注意</p></blockquote><p>如果需要 select 获得更多的结果则代码可以改成如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">val</span> list = asyncStringsList()</span><br><span class="line">   list.withIndex().forEach &#123; (index, deferred) -&gt;</span><br><span class="line">      <span class="keyword">val</span> res = select&lt;String&gt; &#123;</span><br><span class="line">         deferred.onAwait.invoke &#123;</span><br><span class="line">            <span class="string">&quot;Deferred <span class="variable">$index</span> produced answer &#x27;<span class="variable">$it</span>&#x27;&quot;</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      println(res)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">val</span> countActive = list.count &#123; it.isActive &#125;</span><br><span class="line">   println(<span class="string">&quot;<span class="variable">$countActive</span> coroutines are still active&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结下-select"><a href="#总结下-select" class="headerlink" title="总结下 select"></a>总结下 <code>select</code></h2><blockquote><p><code>select</code> 类似于一个监控器, 不断监控其内部的所有事件, 直到有一个事件被触发, 直接执行, <code>select</code> 就不会再触发其他事件了, 除非再起一个<code>select</code>用于监控</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">asyncString</span><span class="params">(str: <span class="type">String</span>, time: <span class="type">Long</span>)</span></span> = async &#123;</span><br><span class="line">      delay(time)</span><br><span class="line">      str</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 传入一个管道, 从管道中读取数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@ExperimentalCoroutinesApi</span></span><br><span class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">switchDeferredChannel</span><span class="params">(input: <span class="type">Channel</span>&lt;<span class="type">Deferred</span>&lt;<span class="type">String</span>&gt;&gt;)</span></span> = produce &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 获取管道的第一个数据</span></span><br><span class="line">      <span class="keyword">var</span> current = input.receive()</span><br><span class="line">      <span class="comment">// 判断管道是否被关闭</span></span><br><span class="line">      <span class="keyword">while</span> (isActive) &#123;</span><br><span class="line">         <span class="comment">// select 轮询内部事件</span></span><br><span class="line">         select&lt;Deferred&lt;String&gt;?&gt; &#123;</span><br><span class="line">            <span class="comment">// 设置 receiveCatching 事件, 只要管道有该事件就读取出来</span></span><br><span class="line">            input.onReceiveCatching.invoke &#123;</span><br><span class="line">               it.getOrNull()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 间前面事件读取出来的结果再注册一个轮询的 await 事件</span></span><br><span class="line">            current.onAwait.invoke &#123;</span><br><span class="line">               <span class="comment">// 说明我们的 asyncString 函数的 async 已经执行结果, 返回的 deferred 延迟值</span></span><br><span class="line">               <span class="comment">// awit 到我们 asyncString 函数直接的结果了</span></span><br><span class="line">               send(it)</span><br><span class="line">               <span class="comment">// 再从管道中读取下一个 Deferred</span></span><br><span class="line">               input.receiveCatching().getOrNull()</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;?.let &#123;</span><br><span class="line">            <span class="comment">// 把 select 读取出来的结果重新设置为 current 下次循环 再次在 select 中注册 onAwait 事件</span></span><br><span class="line">            current = it</span><br><span class="line">         &#125; ?: <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">test01</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> channel = Channel&lt;Deferred&lt;String&gt;&gt;()</span><br><span class="line">      launch &#123;</span><br><span class="line">         <span class="keyword">for</span> (s <span class="keyword">in</span> switchDeferredChannel(channel)) &#123;</span><br><span class="line">            log(s)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      channel.send(asyncString(<span class="string">&quot;BEGIN&quot;</span>, <span class="number">100</span>))</span><br><span class="line">      <span class="comment">// 这里需要等待时间, 否则间之间被 cancel 掉</span></span><br><span class="line">      delay(<span class="number">1000</span>)</span><br><span class="line"><span class="comment">//    channel.close()</span></span><br><span class="line">      coroutineContext.cancelChildren()</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="协程异常处理"><a href="#协程异常处理" class="headerlink" title="协程异常处理"></a>协程异常处理</h1><p>协程如果被取消就会在<code>挂起点</code>处抛出异常 <code>CancellationException</code>, 正常情况下我们是无法感受到的, 需要专门去捕捉它</p><blockquote><p>挂起点: 是 <strong>suspend 函数 + 异步操作</strong> 的位置被叫做<strong>挂起点</strong></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">coroutineScope &#123;</span><br><span class="line"><span class="keyword">val</span> job = launch &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">repeat(<span class="number">100000</span>) &#123;</span><br><span class="line">delay(<span class="number">1000</span>)</span><br><span class="line">println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span>: ping&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">e.printStackTrace()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">delay(<span class="number">3000</span>)</span><br><span class="line">job.cancel()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread[DefaultDispatcher-worker-<span class="number">1</span>,<span class="number">5</span>,main]: <span class="built_in">ping</span></span><br><span class="line">Thread[DefaultDispatcher-worker-<span class="number">1</span>,<span class="number">5</span>,main]: <span class="built_in">ping</span></span><br><span class="line"><span class="function">kotlinx.coroutines.JobCancellationException: <span class="title">StandaloneCoroutine</span> <span class="title">was</span> <span class="title">cancelled</span>; <span class="title">job</span>=<span class="title">StandaloneCoroutine</span>&#123;<span class="title">Cancelling</span>&#125;@5<span class="title">d5390a2</span></span></span><br></pre></td></tr></table></figure><p>上面的代码<strong>挂起点</strong>在 <code>delay</code> 这里，所以异常也将会在 <code>delay</code> 这里被发现和抛出</p><h2 id="异常的传播"><a href="#异常的传播" class="headerlink" title="异常的传播"></a>异常的传播</h2><h3 id="自动传播异常与向用户暴露异常"><a href="#自动传播异常与向用户暴露异常" class="headerlink" title="自动传播异常与向用户暴露异常"></a>自动传播异常与向用户暴露异常</h3><p>协程构造器有两种: <strong>自动传播异常</strong> (<code>launch</code> 和 <code>actor</code>)或<strong>向用户暴露异常</strong> (<code>async</code>和<code>produce</code>), 如果协程构造器创建于一个<strong>根协程</strong>(即没有任何协程的子协程是它), 此时<strong>自动传播异常方式</strong>的异常将被视为<strong>未捕获异常, 异常将直接抛出</strong> , 而<strong>向用户暴露异常</strong>依赖用户来最终消费异常(<code>await</code>或者<code>receive</code>)</p><blockquote><p><strong>自动传播异常</strong>的根协程会直接抛出异常</p><p><strong>向用户暴露异常</strong>根据调用 例如： <code>await</code> 或者 <code>receive</code> 这两个函数调用来发出异常</p></blockquote><p>具体看代码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OptIn(DelicateCoroutinesApi::class)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> job = GlobalScope.launch &#123;</span><br><span class="line"><span class="comment">// 这个异常不需要捕获，直接就把异常抛出了</span></span><br><span class="line"><span class="keyword">throw</span> IndexOutOfBoundsException()</span><br><span class="line">&#125;</span><br><span class="line">job.join()</span><br><span class="line"><span class="keyword">val</span> deferred = GlobalScope.async &#123;</span><br><span class="line"><span class="comment">// 这里虽然抛出异常，但是不会被执行</span></span><br><span class="line"><span class="keyword">throw</span> ArithmeticException()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//try &#123;</span></span><br><span class="line"><span class="comment">// 上面的 throw ArithmeticException 在下面这行代码抛出异常</span></span><br><span class="line"><span class="comment">// 如果我们没有捕获这个异常的话，将会抛出 ArithmeticException 异常</span></span><br><span class="line">deferred.await()</span><br><span class="line"><span class="comment">//&#125; catch (e: ArithmeticException) &#123;</span></span><br><span class="line"><span class="comment">//e.printStackTrace()</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d6486a8002c14a1ba2733d22459d55b9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>看抛出异常的行号</p><p>第一个异常在： <code>throw IndexOutOfBoundsException()</code> 这里抛出</p><p>第二个异常在：<code>deferred.await()</code>这里抛出异常，而不是<code>throw ArithmeticException()</code>这一行代码</p><h2 id="CoroutineExceptionHandler"><a href="#CoroutineExceptionHandler" class="headerlink" title="CoroutineExceptionHandler"></a><code>CoroutineExceptionHandler</code></h2><p><code>CoroutineExceptionHandler</code> 仅对直接抛出的异常的协程进行捕获(<code>launch</code>这种不是<code>async</code>)</p><p>而它也仅对 <code>CoroutineScope</code>的上下文或者<strong>根协程</strong>中才能捕获</p><p><code>async</code> 无法使用 <code>CroutineExceptionHandler</code> 的方式捕获异常，它只能够在 <code>await</code> 中发现异常</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> handler =  CoroutineExceptionHandler &#123; _, throwable -&gt;</span><br><span class="line">log(<span class="string">&quot;1 handler <span class="variable">$throwable</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DelicateCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> job = GlobalScope.launch(handler) &#123;</span><br><span class="line"><span class="keyword">throw</span> AssertionError() <span class="comment">// 只会拦截此异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> deferred = GlobalScope.async(handler) &#123;</span><br><span class="line"><span class="keyword">throw</span> ArithmeticException() <span class="comment">// async 内的这一行代码 不会捕获异常</span></span><br><span class="line">&#125;</span><br><span class="line">joinAll(job, deferred)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">val</span> scope = CoroutineScope(handler)</span><br><span class="line">scope.launch &#123;</span><br><span class="line"><span class="keyword">val</span> job = launch &#123;</span><br><span class="line"><span class="keyword">throw</span> AssertionError() <span class="comment">// 只会拦截此异常</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> deferred = async &#123;</span><br><span class="line"><span class="keyword">throw</span> ArithmeticException() <span class="comment">// async 内的这一行代码 不会捕获异常</span></span><br><span class="line">&#125;</span><br><span class="line">joinAll(job, deferred)</span><br><span class="line">&#125;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样不太方便, 因为需要在每个协程中添加上 异常 <code>handler</code></p><h3 id="使用META-INF的配置文件实现全局的异常查看"><a href="#使用META-INF的配置文件实现全局的异常查看" class="headerlink" title="使用META-INF的配置文件实现全局的异常查看"></a>使用<code>META-INF</code>的配置文件实现全局的异常<strong>查看</strong></h3><blockquote><p>他不会捕获异常, 仅仅是查看有什么异常, 合适做程序崩溃日志</p></blockquote><p><code>val scope = CoroutineScope(handler)</code></p><p><code>GlobalScope.launch(handler)</code></p><p>所以我们还可以这样: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GlobalCoroutinesException</span> : <span class="type">CoroutineExceptionHandler</span> &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> key: CoroutineContext.Key&lt;*&gt;</span><br><span class="line"><span class="keyword">get</span>() = CoroutineExceptionHandler</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleException</span><span class="params">(context: <span class="type">CoroutineContext</span>, exception: <span class="type">Throwable</span>)</span></span> &#123;</span><br><span class="line">log(<span class="string">&quot;Coroutine exception: <span class="variable">$exception</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DelicateCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> job = GlobalScope.launch &#123;</span><br><span class="line"><span class="keyword">throw</span> AssertionError()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> deferred = GlobalScope.async &#123;</span><br><span class="line"><span class="keyword">throw</span> ArithmeticException()</span><br><span class="line">&#125;</span><br><span class="line">joinAll(job, deferred)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>resouces</code> 目录下创建 <code>services</code> 目录, 再在<code>services</code>目录下创建文件 <code>kotlinx.coroutines.CoroutineExceptionHandler</code></p><p>在目录下填入 <code>GlobalCoroutiesException</code> 的包名和类型 <code>coroutines18.exception.GlobalCoroutiesException</code></p><p>就可以运行 <code>main</code> 函数了</p><p>不过还是有问题</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a01541e28aa740e98e7fb3f397f0c79a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="取消与异常"><a href="#取消与异常" class="headerlink" title="取消与异常"></a>取消与异常</h2><p>协程如果取消, 就会抛出一个 <code>CancellationException</code> , 但是我们无法发现该异常, 需要 <code>catch</code> 去捕获它, 才能发现</p><p>而如果子协程的 <code>job</code> 调用了 <code>cancel</code> 它不会取消掉父协程</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> child = launch &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            delay(<span class="built_in">Long</span>.MAX_VALUE)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            log(<span class="string">&quot;我捕获了异常<span class="variable">$e</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            log(<span class="string">&quot;子协程被取消&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    yield()</span><br><span class="line">    log(<span class="string">&quot;准备取消子协程: &quot;</span>)</span><br><span class="line">    child.cancelAndJoin()</span><br><span class="line">    yield()</span><br><span class="line">    log(<span class="string">&quot;父协程结束&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果协程遇到了 <code>CancellationException</code>以外的异常，它将使用该异常取消它的父协程。</p><p>这个行为无法被覆盖，并且用于为结构化的并发提供稳定的协程层级结构。</p><p><code>CoroutineExceptionHandler</code>的实现并不是用于子协程。</p><blockquote><p>在这些示例中，<code>CoroutineExceptionHandler</code> 总是被设置在由 <code>GlobalScope</code> 启动的协程中。将异常处理者设置在 <code>runBlocking</code> 主作用域内启动的协程中是没有意义的，尽管子协程已经设置了异常处理者， 但是主协程也总是会被取消的。</p></blockquote><h2 id="异常聚合-探讨多个子协程都抛出异常时会怎样"><a href="#异常聚合-探讨多个子协程都抛出异常时会怎样" class="headerlink" title="异常聚合: 探讨多个子协程都抛出异常时会怎样?"></a>异常聚合: 探讨多个子协程都抛出异常时会怎样?</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> handler = CoroutineExceptionHandler &#123; _, throwable -&gt;</span><br><span class="line">    log(<span class="string">&quot;log: <span class="variable">$throwable</span> <span class="subst">$&#123;throwable.suppressed.get(<span class="number">0</span>)&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DelicateCoroutinesApi</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> job = GlobalScope.launch(handler) &#123;</span><br><span class="line">        launch &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                    delay(<span class="built_in">Long</span>.MAX_VALUE)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> ArithmeticException()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        launch &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                delay(<span class="number">1000</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> ConcurrentModificationException()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    job.join()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如代码显示, <code>kotlin</code>将会在 异常的 <code>suppressed</code> 属性里放置多个异常</p><h3 id="非根协程的异常总是会被逐层传播给根协程"><a href="#非根协程的异常总是会被逐层传播给根协程" class="headerlink" title="非根协程的异常总是会被逐层传播给根协程"></a>非根协程的异常总是会被逐层传播给根协程</h3><p>异常的传播还涉及作用域间的问题, 如果我们前面使用的 <code>GlobalScope</code> 创建协程, 意味着该异常在独立的协程作用域中, 而我们使用的 <code>coroutineScope</code> 创建的协程不会这样</p><p> <strong><code>coroutineScope</code> 创建的协程中如果子协程遇到异常, 他会往外抛出异常给其父协程, 父协程如果还有父协程, 则会继续传递给父协程的父协程, 直到传递给根协程处理</strong></p><p>所以如果任何一个子协程出现了异常(除了<code>CancellationException</code>), 则会将其他协程都停止掉, 其他协程没有异常</p><blockquote><p>这里出现了子协程出错整个协程树都结束的问题, 后面会出现解决的方法 <code>supervisorScope</code></p></blockquote><p>而 <code>GlobalScope</code> 创建的协程是独立于其所在的协程的父协程的, 可以说也是根协程, 所以不会出现这种问题</p><blockquote><p>相当于 <code>fork</code> 了一个新的进程，但这里是创建了一个新的协程上下文，异常在协程上下文中传播的，最后都会传播到根协程，不在同一个协程上下文中，异常不可能传播到另一个上下文中</p></blockquote><h3 id="SupervisorJob-防止子协程异常传播导致整棵协程树失败"><a href="#SupervisorJob-防止子协程异常传播导致整棵协程树失败" class="headerlink" title="SupervisorJob: 防止子协程异常传播导致整棵协程树失败"></a><code>SupervisorJob</code>: 防止子协程异常传播导致整棵协程树失败</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = runBlocking &#123;</span><br><span class="line"><span class="keyword">val</span> scope = CoroutineScope(SupervisorJob())</span><br><span class="line"><span class="keyword">val</span> job1 = scope.launch &#123;</span><br><span class="line">delay(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">throw</span> RuntimeException()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> job2 = scope.launch &#123;</span><br><span class="line">repeat(<span class="number">10</span>) &#123;</span><br><span class="line">delay(<span class="number">150</span>)</span><br><span class="line">log(<span class="string">&quot;协程2 一直再运行&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">joinAll(job1, job2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样 <code>job1</code> 出现了异常, <code>job2</code> 也可以执行, 直到执行完毕</p><p>如果我们需要取消掉所有的协程可以调用 <code>scope.cancel()</code></p><h3 id="supervisorScope"><a href="#supervisorScope" class="headerlink" title="supervisorScope"></a><code>supervisorScope</code></h3><p>我们也可以像下面这样用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = supervisorScope &#123;</span><br><span class="line">launch &#123;</span><br><span class="line">repeat(<span class="number">10</span>) &#123;</span><br><span class="line">delay(<span class="number">200</span>)</span><br><span class="line">log(<span class="string">&quot;子协程活着&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">launch &#123;</span><br><span class="line">delay(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">throw</span> AssertionError()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也能达到相同的效果</p><p>但是这种方式存在一个问题</p><p>如果作用域内存在作用域的异常, 比如下面这样: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>: <span class="built_in">Unit</span> = supervisorScope &#123;</span><br><span class="line">launch &#123;</span><br><span class="line">repeat(<span class="number">10</span>) &#123;</span><br><span class="line">delay(<span class="number">200</span>)</span><br><span class="line">log(<span class="string">&quot;子协程活着&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">delay(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">throw</span> AssertionError()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>协程再也没机会执行 <code>10</code> 次循环了, 它会被 <code>AssertionError</code> 退出整个 <code>supervisorScope</code> 作用域空间</p>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步 </tag>
            
            <tag> 协程 </tag>
            
            <tag> 热流 </tag>
            
            <tag> channel </tag>
            
            <tag> 管道 </tag>
            
            <tag> 管道迭代 </tag>
            
            <tag> 管道关闭 </tag>
            
            <tag> 生产者 </tag>
            
            <tag> 消费者 </tag>
            
            <tag> 扇出 </tag>
            
            <tag> 广播 </tag>
            
            <tag> 扇入 </tag>
            
            <tag> 通道缓冲区 </tag>
            
            <tag> 先进先出 </tag>
            
            <tag> select </tag>
            
            <tag> 多路channel </tag>
            
            <tag> 协程异常处理 </tag>
            
            <tag> 异常传播 </tag>
            
            <tag> 自动传播异常 </tag>
            
            <tag> 向用户暴露异常 </tag>
            
            <tag> CoroutineExceptionHandler </tag>
            
            <tag> 取消与异常 </tag>
            
            <tag> 异常聚合 </tag>
            
            <tag> SupervisorJob </tag>
            
            <tag> supervisorScope </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十一、kotlin的协程(四) - 缓存、volatile、内存屏障和cas --- 跑题篇</title>
      <link href="/2022/12/03/07kotlin/%E5%8D%81%E4%B8%80%E3%80%81kotlin%E7%9A%84%E5%8D%8F%E7%A8%8B%20-%20%E7%BC%93%E5%AD%98%E3%80%81volatile%E3%80%81%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E5%92%8Ccas(%E5%9B%9B)%20---%20%E8%B7%91%E9%A2%98%E7%AF%87/"/>
      <url>/2022/12/03/07kotlin/%E5%8D%81%E4%B8%80%E3%80%81kotlin%E7%9A%84%E5%8D%8F%E7%A8%8B%20-%20%E7%BC%93%E5%AD%98%E3%80%81volatile%E3%80%81%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C%E5%92%8Ccas(%E5%9B%9B)%20---%20%E8%B7%91%E9%A2%98%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本章写着写着就跑题了, 又不舍得删除, 新手看 <code># 协程的共享变量安全问题简单入门</code>和<code>## volatile 不保证原子性</code>部分代码, 其他可以不看, 太乱, 也没用</p></blockquote><h1 id="协程的共享变量安全问题简单入门"><a href="#协程的共享变量安全问题简单入门" class="headerlink" title="协程的共享变量安全问题简单入门"></a>协程的共享变量安全问题简单入门</h1><p>在使用 <code>kotlin</code> 的协程库中, 我们会看到很多的 <strong>协程调度器</strong> , 如果添加上<code>Thread.currentThread()</code> 函数的话, 我们会看到一些协程的背后还涉及了多线程, 只要有多线程就会存在多线程竞争共享变量的问题</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test01</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   launch &#123;</span><br><span class="line">      <span class="comment">// Thread[main @coroutine#2,5,main]</span></span><br><span class="line">      println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span> launch1 正在执行 2&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   launch &#123;</span><br><span class="line">      <span class="comment">// Thread[main @coroutine#3,5,main]</span></span><br><span class="line">      println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span> launch2 正在执行 2&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   withContext(Dispatchers.IO) &#123;</span><br><span class="line">      <span class="comment">// Thread[DefaultDispatcher-worker-1 @coroutine#1,5,main]</span></span><br><span class="line">      println(<span class="string">&quot;<span class="subst">$&#123;Thread.currentThread()&#125;</span> withContext 正在执行 3&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会看到上面的代码使用了两个线程 <code>Thread[main]</code> 和 <code>Thread[DefaultDispatcher-worker-1]</code></p><p>协程用了三个 <code>@coroutine#1</code> 、<code>@coroutine#2</code> 和 <code>@coroutine#3</code><br>但协程 <code>@coroutine#3</code> 在不同的线程中</p><p>我们现在分别在 <code>@coroutine#1</code> 和 <code>@coroutine#2</code> 间各自执行 <code>10000</code> 次 <code>i++</code> 判断下是否线程安全</p><p>然后在<code>@coroutine#2</code> 和 <code>@coroutine#3</code> 两个线程间各自执行 <code>10000</code> 次 <code>i++</code> </p><p>协程间: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test02</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">   <span class="keyword">val</span> list = mutableListOf&lt;Job&gt;()</span><br><span class="line">   repeat(<span class="number">10000</span>) &#123;</span><br><span class="line">      list.add(launch &#123;</span><br><span class="line">         i++</span><br><span class="line">      &#125;)</span><br><span class="line">      list.add(launch &#123;</span><br><span class="line">         i++</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   list.forEach &#123;</span><br><span class="line">      it.join()</span><br><span class="line">   &#125;</span><br><span class="line">   println(i) <span class="comment">// 20000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程间: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test03</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">   <span class="keyword">val</span> list = mutableListOf&lt;Job&gt;()</span><br><span class="line">   repeat(<span class="number">10000</span>) &#123;</span><br><span class="line">      list.add(launch &#123;</span><br><span class="line">         i++</span><br><span class="line">      &#125;)</span><br><span class="line">      list.add(launch(Dispatchers.IO) &#123;</span><br><span class="line">         i++</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   list.forEach &#123;</span><br><span class="line">      it.join()</span><br><span class="line">   &#125;</span><br><span class="line">   println(i) <span class="comment">// 19668</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看的出来还是存在线程安全问题, 而且协程的线程安全问题还更加不可预知, 用多线程的话, 我们都知道, 它一定线程不安全, 但使用的协程, 无法判断到底是不是同一个线程, 这时候就需要主动的打印出来到底是哪个线程需要上锁</p><p>此时没办法, 我们就可以去协程库里找找, 有没有那种专属的锁</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43adfa78c20f4714a88b899d052c1890~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>发现还真有一个锁, 用用看看</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test04</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">val</span> mutex = Mutex()</span><br><span class="line">   <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">   <span class="keyword">val</span> list = mutableListOf&lt;Job&gt;()</span><br><span class="line">   repeat(<span class="number">10000</span>) &#123;</span><br><span class="line">      list.add(launch &#123;</span><br><span class="line">         mutex.withLock &#123;</span><br><span class="line">            i++</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      list.add(launch(Dispatchers.IO) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            mutex.lock()</span><br><span class="line">            i++</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">finally</span> &#123;</span><br><span class="line">            mutex.unlock()</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   list.forEach &#123;</span><br><span class="line">      it.join()</span><br><span class="line">   &#125;</span><br><span class="line">   println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意看上面代码, <code>mutex</code> 的两种用法</p><blockquote><p>这种方式的锁，不会有锁粗化优化，需要注意</p></blockquote><blockquote><p>好了至此简单的入门结束了</p></blockquote><h1 id="volatile-关键字"><a href="#volatile-关键字" class="headerlink" title="volatile 关键字"></a>volatile 关键字</h1><p><code>volatile</code> 在 <code>java</code> 多线程中的作用有</p><ol><li>防止代码重排序</li><li><code>flush</code> 了 <code>cpu</code> 的 <code>store buffer</code>(写) 和 <code>Invalidate queue</code>(读) 保证变量在多线程间可见</li></ol><p><code>java</code> 的 <code>volatile</code> 底层实现借助了 <code>cpu</code> 的 <code>memeny barrier 内存屏障</code></p><h2 id="store-buffer-和-invalidate-queue"><a href="#store-buffer-和-invalidate-queue" class="headerlink" title="store buffer 和 invalidate queue"></a>store buffer 和 invalidate queue</h2><p>在了解 <code>store buffer</code> 和 <code>invalidate queue</code> 是什么之前需要了解别的知识…</p><h3 id="cpu高速缓存"><a href="#cpu高速缓存" class="headerlink" title="cpu高速缓存"></a>cpu高速缓存</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/562899a0699e4101a761abe1d41893fe~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><code>cpu</code>速度太快了, <code>cpu</code> 以 <code>cpu</code>一次滴答作为时间单位, 主内存一次操作需要几百次的<code>cpu</code>滴答</p><p>所以 <code>cpu</code> 不得不用 高速缓存的方式提高整体的执行效率</p><p>下图的时钟周期是假设的速度比例<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f56d655b441e454b96495e58fb620aef~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>可以看出越接近 <code>cpu</code> 核心的缓存速度越快, 最后到寄存器</p><p>出现高速缓存之后, <code>cpu</code>可以把经常使用的变量缓存到 缓存中, 核心与核心之间共有的数据存放到 <code>L3</code> 中, 如果缓存未命中 , 则需要 <strong>lock 总线</strong>, 去主内存读取相应的变量, 存放到缓存中</p><p>现在有了缓存, <code>cpu</code> 的局限不再是 主内存了, 但却出现了新的问题, 在 核心 和 核心 之间的缓存怎么解决不一致的问题</p><h3 id="多核心缓存一致方案-MESI"><a href="#多核心缓存一致方案-MESI" class="headerlink" title="多核心缓存一致方案: MESI"></a>多核心缓存一致方案: MESI</h3><h4 id="多核心存在的问题"><a href="#多核心存在的问题" class="headerlink" title="多核心存在的问题"></a>多核心存在的问题</h4><p>现有一<strong>变量a</strong> 在 <strong>核心A</strong> 和 <strong>核心B</strong> 共享, 两核心<strong>同时</strong>修改<strong>变量a</strong> 的值, 该<strong>变量a</strong>到底应该选哪个核心的值? 还有, 如果 <strong>a 变量</strong> 的值被 <strong>核心B</strong> 修改了, <strong>核心A</strong> 不知道<strong>变量a</strong>的值是否被修改, 导致线程去 <strong>核心A</strong> 读取数据时, 读取到旧值, 导致整个 <strong>cpu高速缓存</strong>同一个<strong>变量a</strong>的值不一致</p><p>不过在提出方案前我们需要一下预备知识</p><h4 id="缓存行"><a href="#缓存行" class="headerlink" title="缓存行"></a>缓存行</h4><p><strong>cpu</strong>操作缓存不是一个字节一个字节的操作, 因为这样很慢, 访问高速缓存的次数也变多了, 效率很低, 于是他们定义了缓存行这概念, 让<code>[1]</code>核心一行一行的操作, 每一行的大小一般是 <strong>64byte</strong>(也有<strong>32byte</strong>, <strong>128byte</strong>等)</p><blockquote><p><code>[1]</code>: 实际上现在的cpu未必是一行一行操作了, 可能一次性操作多行</p></blockquote><p>虽然提出了缓存行作为 <code>cache</code> 的单位, 但会出现新的问题</p><h5 id="缓存行伪共享"><a href="#缓存行伪共享" class="headerlink" title="缓存行伪共享"></a>缓存行伪共享</h5><p>我们发现, 一个 <strong>java long</strong> 大小就<strong>8字节</strong>了, 多存储几个变量, 会出现一种情况</p><p><strong>变量 a b c d</strong> <strong>在同一行缓</strong>存行存储, 如果<strong>cpu</strong>收到<strong>变量 a</strong> 的 <strong>invalidate 消息</strong>将一个变量标记为 invalid, 但不行啊, <strong>cpu</strong>操作缓存的最小单位是缓存行, 他会把那一行都标记为 <strong>invalid</strong>, 这样就出问题了, <strong>b c d</strong> 都一起被殃及无辜了</p><p>所以一般情况下, 我们可以在<strong>变量a</strong>后面添加占位变量, 让<strong>变量 a</strong> 在单独一行, 就可以提高效率了</p><blockquote><p>把涉及多线程共享变量存储在单独的一行可以提高效率, 如果不是则没必要</p></blockquote><blockquote><p>java 8 提供了注解实现 <code>@sun.misc.Contended</code> 上面功能, 但 java11 之后该注解被放在另一个包里了<code>@jdk.internal.vm.annotation.Contended</code>, 如果要使用它需要添加<code>-XX:-RestrictContended</code>参数</p></blockquote><p>预备知识讲完了</p><h4 id="MESI-是什么"><a href="#MESI-是什么" class="headerlink" title="MESI 是什么?"></a>MESI 是什么?</h4><p>为了解决多核心之间缓存不一致, 业界提出了 <code>MESI(Modified-Exclusive-Shared-Invalid)</code> 方案, 该方案类似于读写锁, 写时独占, 读时共享, 而MESI的操作单位是 <strong>缓存行</strong></p><h4 id="MESI每一个单词的解释"><a href="#MESI每一个单词的解释" class="headerlink" title="MESI每一个单词的解释"></a>MESI每一个单词的解释</h4><p><strong>M修改(Modified)</strong>: 程序修改<strong>核心A</strong>缓存中的<strong>变量a</strong>, 将缓存中的<strong>变量a</strong>标记为 <strong>M</strong>, 表示该值只有该<strong>核心A</strong>刚刚修改, 而其他 <strong>核心</strong> 并不知道已经修改了, 也不知道该缓存的变量已经失效了, 此时缓存的数据和内存不同</p><p><strong>E独占(Exclusive)</strong>: 变量修改后, <strong>核心A</strong>发出 <code>invalidate</code> 消息给其他核心, 其他核心发送 <code>invalid ack</code> 给 <strong>核心A</strong> 之后, <strong>核心A</strong>将该变量设置为 <code>E 独占模式</code>, 此时数据和内存一致, 且仅存在该缓存中</p><p><strong>S共享(share)</strong>: 当<strong>核心B</strong>要读取<strong>变量a</strong>时, 发现 <code>a</code> 是 <code>invalid</code>状态, <code>remote read</code> <strong>核心a</strong> 缓存中的变量, 此时缓存变量和内存一致</p><p><strong>I失效(invalid)</strong>: 核心将 <code>invalidate queue</code> 中的元素处理掉, 就会将部分缓存行标记为 <code>invalid</code>, 表示该缓存行失效</p><p><code>MESI</code>之间的变换, 具体可以看下图</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8cb846e1b274460196c478a94275f941~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>核心发起标记消息借助消息总线传递给其他核心, 而大体消息类型可以分为下面几种:</p><ul><li><code>Read</code> ：带上数据的物理内存地址发起的读请求消息</li><li><code>Read Response</code>：<code>Read</code> 请求的响应信息，内部包含了读请求指向的数据</li><li><code>Invalidate</code>：该消息包含数据的内存物理地址，意思是要让其他如果持有该数据缓存行的 CPU 直接失效对应的缓存行</li><li><code>Invalidate Acknowledge</code>：<code>CPU</code> 对<code>Invalidate 消息</code>的响应，目的是告知发起 <code>Invalidate 消息</code>的<code>CPU</code>，这边已经失效了这个缓存行啦</li><li><code>Read Invalidate</code>：这个消息其实是 <code>Read</code> 和 <code>Invalidate</code> 的组合消息，与之对应的响应自然就是一个<code>Read Response</code> 和 一系列的 <code>Invalidate Acknowledge</code></li><li><code>Writeback</code>：该消息包含一个物理内存地址和数据内容，目的是把这块数据通过总线写回内存里</li></ul><h4 id="新问题"><a href="#新问题" class="headerlink" title="新问题"></a>新问题</h4><p><code>核心A</code> 修改<code>变量a</code>的值 <code>a = 2</code> 此时 <code>核心A</code>的缓存行<code>a变量</code>被修改, <code>核心A</code>将发送 <code>invalid 消息</code>借助<code>消息总线</code>告诉其他核心缓存中的<code>变量a</code>失效了, 应该标记为<code>invalid</code> 状态, 其他核心标记完毕后需要回复 <code>invalid ack</code> 消息进行应答, 应答完毕后 <code>核心A</code> 开始其他操作, 有没有发现这中间出现了新的问题????</p><p><code>核心A</code> 发出<code>invalid消息</code>, 一直等待(空等期)?!!! 直到收到其他核心的 <code>invalid ack 消息</code>才会重新执行下一个指令??? 这是对核心资源的浪费</p><p>所以 <code>store buffer</code> 诞生了, 还是原先的 加个 <code>万能中间层</code> 解决问题</p><h3 id="storebuffer"><a href="#storebuffer" class="headerlink" title="storebuffer"></a>storebuffer</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eceab892e81c479495f2cd6d66fc5a89~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>有了<code> storebuffer</code> , <code>核心A</code> 再也不用等着, 直接把修改丢给 <code>store buffer</code> , 同时给其他核心发送<code>invalid消息</code>, 自己则不需要等待 <code>ack</code> , 可以做其他事情, 等到其他<code>核心ack</code>回复后, <code>核心A</code> 读取 <code>store buffer</code> 里的数据, 将其移动到 <code>cache line</code> , 这样一个同步<code>等待事件</code>, 变成了一个<code>异步事件</code></p><blockquote><p>同步等待, 变成了异步</p></blockquote><h4 id="新问题-1"><a href="#新问题-1" class="headerlink" title="新问题"></a>新问题</h4><p>引入 <code>store buffer</code> 确实让 <code>核心</code> 的利用率变高了, 但同时有多了个问题</p><p><code>核心A</code> 对<code>变量a</code>的修改抛入 <code>store buffer</code> 后, 在收到<code>ack</code>前再次读取 <code>变量a</code> 的值, 会发现 <code>变量a</code> 还是<code>旧值</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = 1</span><br><span class="line">funA &#123;</span><br><span class="line">    a = 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funB &#123;</span><br><span class="line">   if a == 2 &#123;</span><br><span class="line">       // xxxxxx</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>核心A</code> 执行了 <code>funA</code> 将 <code>变量 a</code> 改为 <code>2</code>, 然后立即执行 <code>funB</code> 判断<code>a == 2</code> 此时居然是 <code>false</code>, 这明显不对</p><blockquote><p>注意这是单核的情况, 单核都会出现这样的问题, 炸裂了</p></blockquote><h4 id="Store-Forwarding-先从-store-buffer-读起"><a href="#Store-Forwarding-先从-store-buffer-读起" class="headerlink" title="Store Forwarding: 先从 store buffer 读起"></a>Store Forwarding: 先从 store buffer 读起</h4><p>为了解决这个问题, 工程师引入了新的概念, 叫 <strong>Store Forwarding</strong>, 很简单, 先读 <code>store buffer</code> 内的数据再读缓存呗</p><p>现在单核心的问题解决了, 多核心又炸了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = b = 0</span><br><span class="line">funA () &#123;</span><br><span class="line">    a = 1</span><br><span class="line">    b = 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funB() &#123;</span><br><span class="line">    while (b == 0) continue;</span><br><span class="line">    assert(a == 1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在有这么一个场景, <code>a</code> 是<code> 核心A</code> 和 <code>B</code> 共同持有, 而<code> b</code> 只有<code>核心A</code> 拥有, <code>核心A</code> 执行 <code>funA</code>, <code>核心B</code>执行 <code>funB</code></p><ol><li>首先 <code>a = 1</code> , <code>核心A</code> 将 修改丢给 <code>store buffer</code> , 并发送 <code>invalid 消息</code><br>2.<code> b = 1</code>, <code>核心A</code> 直接将缓存的<code>b</code>修改为<code>1</code>(<code>b</code>是独占的, 不需要发送<code>invalid msg</code>给其他核心)</li><li><code>核心B</code> 缓存中没有, 发出 <code>remote read</code> 从其他缓存中找到 <code>b = 1</code>, 执行 <code>while</code> 判断, 不满足跳出循环</li><li><code>核心B</code> 程序断言 <code>a == 1</code> , 但此时会抛出异常, 因为 <code>核心A</code>还没有收到 <code>invalid ack消息</code>, 所以默认还是 <code>a == 0</code></li></ol><p>解决方案便是添加<code>内存屏障</code></p><h4 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h4><p><code>内存屏障</code>是一种同步屏障指令, 在内存屏障前后的代码不会重排序, 严格按照一定的顺序来执行, 也就是说在内存屏障之前的指令和之后的指令不会由于系统优化<strong>等</strong>原因而导致乱序</p><p>我们只要把代码改成这样: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = b = 0</span><br><span class="line">funA () &#123;</span><br><span class="line">    a = 1</span><br><span class="line">    smp_wmb() // linux 对写内存屏障的封装</span><br><span class="line">    b = 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funB() &#123;</span><br><span class="line">    while (b == 0) continue;</span><br><span class="line">    assert(a == 1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加<code>写内存屏障</code>后,对<code>变量a</code>, 甚至前面的变量写入都会被写入到缓存中, <code>写内存屏障</code>主要针对的是 <code>store buffer</code>, 添加<code>写内存屏障</code>后, <code>store buffer</code> 将会被 <code>flush</code> 掉, 里面的变量全部被写入到缓存中, 这样, 另一个核心读取该变量时, 就可以直接<code>remote read</code> 该变量, 直接从缓存中读取</p><blockquote><p>注意, 前面的 <code>Store Forwarding</code> 针对的是单核代码重排序的情况, 不是多核</p></blockquote><p>但… 还有问题</p><h3 id="invalidate-queues"><a href="#invalidate-queues" class="headerlink" title="invalidate queues"></a>invalidate queues</h3><h4 id="新问题-store-buffer-不够用怎么办"><a href="#新问题-store-buffer-不够用怎么办" class="headerlink" title="新问题: store buffer 不够用怎么办???"></a>新问题: <strong>store buffer 不够用怎么办???</strong></h4><p>现在一个新的问题是, <code>store buffer</code> 不够大, 执行一堆变量的修改导致 核心 不断的把变量写入到 <code>store buffer</code> 中, <code>store buffer</code> 告急, 核心又得空等, 等到 <code>store buffer</code> 清空后才能继续处理其他逻辑, 解决方案很简单, 缩短 变量 在 <code>store buffer</code> 中的停留时间</p><p>我们再分析下前面的逻辑, 找找, 哪个步骤导致变量停留在 <code>store buffer</code> 的时间变长</p><p>核心写入 <code>store buffer</code> 发出 <code>invalid 消息</code>, 核心做其他处理, 等到 <code>ack</code> 后 再将 <code>store buffer</code> 写入到缓存中(等到<code>ack</code>后也未必会立即刷新到缓存中, 这跟 <code>Thread.start</code> 一个线程一样,未必马上就能够启动)</p><p>而我们现在遇到的问题是<code> store buffer</code> 不够用, 很明显, 前面的逻辑中, <code>等到 ack 后</code> 这步骤直接影响了 变量 在 <code>store buffer</code> 中停留的时间</p><p>工程师的解决方案是添加<code> invalidate queues</code> , 主要功能是存储来自其他核心的 <code>invalid 消息</code>, 咦? 这不是还没解决么? </p><p>再屡屡, 站在收到 <code>invalid 消息</code>的核心角度看, 如果我收到 <code>invalid 消息</code>后, 需要找到缓存中的某个<code>缓存行</code>, 将其标记为 <code>invalid</code> 状态, 标记完成后, 发出 <code>ack 消息</code></p><p>诶? 又是同步操作了不是? 你想想, 万一其他核心的<code>cache</code>疯狂的修改一堆变量, 作为收到<code>invalid消息</code>的核心来说, 得多痛苦, 一收到消息, 它就得去标记缓存行, 发出<code>ack</code> , 一堆消息它也马上去标记缓存行, 再发出 <code>ack</code> , 我核心不干其他活啦?</p><p>那为什么不一收到 <code>invalid 消息</code>, 把该消息存入 <code>invalidate queue </code>中, 然后直接发出 <code>ack</code>, 等到我想处理 <code>invalidate queue</code> 的时候再去一个一个读取出来, 在缓存中找到变量标记<code>invalid</code>, 双赢? </p><blockquote><p>这项功能让核心 ack 的时间从找缓存行中某个变量, 和标记该变量的时间, 换成 <code>queue.add(message)</code> 的时间, 核心只要 <code>add</code> 下, 就马上 <code>ack</code> 了</p></blockquote><p>别高兴太早, 又有新问题产生了</p><h4 id="又遇新问题"><a href="#又遇新问题" class="headerlink" title="又遇新问题"></a>又遇新问题</h4><p>现在我们再屡屡, <code>invalidate queue</code> 的出现使得失效变量在缓存被标记的时间延后了, 这样有个新的问题</p><p>我读你, 咋办??? </p><p>具体看看下面代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = b = 0</span><br><span class="line">funA() &#123;</span><br><span class="line">   a = 1</span><br><span class="line">   smp_wmb() // linux 对写内存屏障的封装</span><br><span class="line">   b = 1</span><br><span class="line">&#125;</span><br><span class="line">funB() &#123;</span><br><span class="line">   while (b == 0) continue;</span><br><span class="line">   assert(a == 1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是前面的条件, <code>a变量</code>俩 <code>核心(A B 核心)</code> 共有, <code>b 变量</code>只有 <code>核心A</code> 有</p><ol><li><code>核心A</code> 执行 <code>funA</code>, <code>a = 1</code> 存入 <code>store buffer</code> 发出 <code>invalid 消息</code>给其他核心</li><li><code>核心B </code>收到 <code>invalid 消息</code>, 把消息存入 <code>invalidate queue</code> 然后立即发出 <code>ack 消息</code></li><li><code>核心A </code>遇到 <code>写内存屏障</code> 将<code>变量 a</code> 写入到 缓存中<br>4.<code>核心A</code>执行 <code>b=1</code> 因为是 <code>核心A</code> 独占的变量, 所以可以直接写入到缓存中<br>5.<code>核心B</code>发现 <code>b == 0 ==&gt; false</code> , 则跳出<code>while循环</code></li><li><code>核心B </code>判断<code>变量 a</code> 的状态, 但是由于 <code>invalid 消息</code>被存入<code>queue</code> 中了, 所以核心认为 <code>a = 0</code> 是正确的</li></ol><p>那要怎么解决呢? 难道又得效仿前面 <code>store buffer</code> , 读取变量之前先去 <code>invalidate queue</code> 找找有没有失效???</p><p>但实际上, 工程师并没有选择这样做, 可能的原因是 <code>invalidate queue</code> 是队列, 需要一个一个遍历, 效率慢, 还有一种可能是 <code>invalidate queue</code> 可能会很长, 还有可能和 <code>store forwaring</code> 一样, 多核间出问题怎么解决? </p><blockquote><p>这里没去深入, 再深入 <code>kotlin</code> 协程还学不学了??? 我疯了, 写着写着又偏离了主题</p></blockquote><p>解决方案是 加上 读<code>内存屏障</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = b = 0</span><br><span class="line">funA() &#123;</span><br><span class="line">   a = 1</span><br><span class="line">   smp_wmb() // linux 对写内存屏障的封装</span><br><span class="line">   b = 1</span><br><span class="line">&#125;</span><br><span class="line">funB() &#123;</span><br><span class="line">   while (b == 0) continue;</span><br><span class="line">   smp_rmb(); // linux 对读内存屏障的封装</span><br><span class="line">   assert(a == 1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上<code>读内存屏障</code>, 该功能可以在读取后面变量前, 处理完 <code>invalid queue</code> 然后再真正的读取<code>变量 a</code> , 此时<code>变量 a</code> 就不再是 <code>S 共享</code> 状态了, 而是 <code>I 失效</code> 状态, 需要去 <code>remote read</code>, 读取 <code>变量 a</code></p><blockquote><p>好了, 核心分析基本到这里就行了, 分析了这么多, 都是虚的, 我没能力直接分析内核, 但可以分析 <code>volatile</code> 的源码</p></blockquote><h2 id="分析-volatile-在jvm中的源码-主要分析x86"><a href="#分析-volatile-在jvm中的源码-主要分析x86" class="headerlink" title="分析 volatile 在jvm中的源码(主要分析x86)"></a>分析 <code>volatile</code> 在<code>jvm</code>中的源码(主要分析<code>x86</code>)</h2><blockquote><p>talk is cheap, show me the code</p></blockquote><p>众所肘子, <code>java</code> 中经常说 写入 <code>volatile</code> 变量 时会在写入前加上 <code>storestore</code> 写入后加上 <code>storeload</code>, 但 <code>x86</code> 除外, 现在我们来看下, <code>x86</code> 如何除外的?</p><p>找到 <code>x86</code> 判断 <code>volatile</code> 的源码位置</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/80033e974c8d44c59cb5effbf3594b3d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>会发现 <code>isVolatile</code> 如果类型是 <code>int 型</code>, 会调用</p><p> <code>obj-&gt;release_int_field_put(field_offset, STACK_INT(-1));</code></p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">oopDesc::release_int_field_put</span><span class="params">(<span class="type">int</span> offset, jint contents)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 又是熟悉的根据 offset 偏移量查找变量地址的方式</span></span><br><span class="line">    OrderAccess::<span class="built_in">release_store</span>(<span class="built_in">int_field_addr</span>(offset), contents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::release_store</span><span class="params">(<span class="keyword">volatile</span> jint* p, jint v)</span> </span>&#123;</span><br><span class="line">    *p = v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>x86</code> 下, <code>Java</code> 的 <code>volatile</code> 变量的写入前的 内存屏障是空的, 仅仅用了 C语言的 <code>volatile</code> 关键字</p></blockquote><blockquote><p>C语言的<strong>volatile</strong>关键字用来<strong>阻止（伪）编译器认为的无法“被代码本身”改变的代码（变量&#x2F;对象）进行优化</strong>。如在C语言中，<strong>volatile</strong>关键字可以用来提醒编译器它后面所定义的变量随时有可能改变，因此编译后的<strong>程序每次需要存储或读取这个变量的时候，都会直接从变量地址中读取数据。</strong></p></blockquote><blockquote><p>不要给 <code>C语言</code> 的 <code>volatile</code> 添加太多的功能了, 它实际上只有一个功能, <strong>防止编译器优化, 从变量地址中读取变量</strong>, 网络上很多人给 <code>C语言</code> 的 <code>volatile</code> 加了很多不属于它的能力, 看呆了…</p></blockquote><blockquote><p>结论 写入 <code>volatile</code> 之前的内存屏障 无, 而且还不是调用的 <code>storestore</code>, 是<code>release_store</code> 那真正的 <code>x86</code> 的 <code>storestore</code> 呢? </p></blockquote><h3 id="storestore-–-gt-release"><a href="#storestore-–-gt-release" class="headerlink" title="storestore –&gt; release"></a>storestore –&gt; release</h3><p>在 <code>orderAccess_windows_x86.inline.hpp</code> 文件中可以看到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::storestore</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="built_in">release</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// A volatile store has release semantics.</span></span><br><span class="line">  <span class="keyword">volatile</span> jint local_dummy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>还是没做内存屏障, <code>x86</code> 挺特殊的</p></blockquote><p>在别的核心架构里就做了内存屏障 <code>orderAccess_linux_zero.inline.hpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::release_store</span><span class="params">(<span class="keyword">volatile</span> jint* p, jint v)</span> </span>&#123; </span><br><span class="line">    <span class="built_in">release</span>();</span><br><span class="line">    *p = v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  WRITE_MEM_BARRIER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WRITE_MEM_BARRIER __asm __volatile (<span class="string">&quot;&quot;</span>:::<span class="string">&quot;memory&quot;</span>)</span></span><br></pre></td></tr></table></figure><blockquote><p>这里需要了解下 <code>gcc</code> 的指令, 需要点别的知识, 我也不太了解, 知道他是内存屏障就行了, 具体可以百度 <code>gcc内嵌汇编 + 你想要查询的关键字</code></p></blockquote><p>那么写<code>volatile</code>变量之后的内存屏障呢? </p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67d4b65e16ea4750b58bec3c293179fb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>还真是 <code>storeload</code></p><h3 id="storeload-–-gt-fence"><a href="#storeload-–-gt-fence" class="headerlink" title="storeload –&gt; fence"></a>storeload –&gt; fence</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::storeload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fence</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::fence</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AMD64</span></span><br><span class="line">  <span class="built_in">StubRoutines_fence</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="comment">// 判断是不是多核心</span></span><br><span class="line">  <span class="keyword">if</span> (os::<span class="built_in">is_MP</span>()) &#123;</span><br><span class="line">    __asm &#123;</span><br><span class="line">      lock add dword ptr [esp], <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// AMD64</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们会发现 <code>volatile</code> 有两个内存屏障 一个是 <code>OrderAccess::release_store</code> 另一个是 <code>OrderAccess::storeload</code>, 跟书本上常说的 <code>volatile</code> 写入前后的内存屏障, 大概也许一摸一样, 因为用的 C语言的 <code>volatile</code> 防止编译器优化</p><blockquote><p>好吧, 结论是 <code>x86</code> 核心下 <code>volatile</code> 写入前就没屏障, 写入后加 <code>storeload</code> 屏障, 使用的还是 <code>lock</code> 指令</p></blockquote><p>同时我们发现了很多内存屏障</p><h3 id="java-四个内存屏障"><a href="#java-四个内存屏障" class="headerlink" title="java 四个内存屏障"></a>java 四个内存屏障</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::loadload</span><span class="params">()</span>   </span>&#123; <span class="built_in">acquire</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::storestore</span><span class="params">()</span> </span>&#123; <span class="built_in">release</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::loadstore</span><span class="params">()</span>  </span>&#123; <span class="built_in">acquire</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::storeload</span><span class="params">()</span>  </span>&#123; <span class="built_in">fence</span>(); &#125;</span><br></pre></td></tr></table></figure><p><code>storeload</code> 是 <code>x86</code> 仅支持的系统原语, 但是开销极大, 使用的是 <code>lock指令</code> 执行, 锁住了<code>缓存或者cpu总线</code></p><h3 id="loadload-loadstore-–-gt-acquire"><a href="#loadload-loadstore-–-gt-acquire" class="headerlink" title="loadload loadstore –&gt; acquire"></a>loadload loadstore –&gt; acquire</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::acquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 如果是 amd 的系统</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> AMD64</span></span><br><span class="line">  __asm &#123;</span><br><span class="line">    mov eax, dword ptr [esp];</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !AMD64</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>惊了, 好像啥事没干, 对, x86 就没上锁, 哈哈, 我看了下<strong>其他核心架构</strong>上的代码, 上内存屏障了 </p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5e9d392c1d84e75aade951198e963a3~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c65dc9bc30044ce3b11ec312f4da753f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca263e28331f4c369f58ba027c1e6d9c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c2028ae5d0cc4c69a8102927634cf5aa~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>书本上也是这么说的, <code>x86</code> 仅仅实现了 <code>storeload</code> 对上了</p><blockquote><p>volatile的源码在: <code>bytecodeInterpreter.cpp</code> 文件, 而 四个 java 的内存屏障在 <code>orderAccess_windows_x86.inline.hpp</code> 这里我选择window x86 环境下的四个内存屏障实现方式, 其他文件看</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7d391e7ad0d48529ef9d62cda146f82~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我选了 <code>orderAccess_linux_zero.inline.hpp</code> 简单的看了看</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> READ_MEM_BARRIER __asm __volatile (<span class="string">&quot;&quot;</span>:::<span class="string">&quot;memory&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WRITE_MEM_BARRIER __asm __volatile (<span class="string">&quot;&quot;</span>:::<span class="string">&quot;memory&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FULL_MEM_BARRIER __sync_synchronize()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::loadload</span><span class="params">()</span>   </span>&#123; <span class="built_in">acquire</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::storestore</span><span class="params">()</span> </span>&#123; <span class="built_in">release</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::loadstore</span><span class="params">()</span>  </span>&#123; <span class="built_in">acquire</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::storeload</span><span class="params">()</span>  </span>&#123; <span class="built_in">fence</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::acquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  READ_MEM_BARRIER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  WRITE_MEM_BARRIER;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::fence</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  FULL_MEM_BARRIER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="volatile-不保证原子性"><a href="#volatile-不保证原子性" class="headerlink" title="volatile 不保证原子性"></a>volatile 不保证原子性</h2><p><code>volatile</code> 保证可见性和防止代码重排序外, 就没别的功能了</p><p>很多人就会觉得不对啊,  <code>volatile</code> 不是还 保证原子性 么? </p><p>相比很多人第一时间想到的是这样一段代码 : </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Volatile</span></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funA</span><span class="params">()</span></span> &#123;</span><br><span class="line">   TimeUnit.MILLISECONDS.sleep(<span class="number">1555</span>)</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 写内存屏障，清空store buffer ， 这样不会存在未写入缓存的变量， 其他核心也能读取到数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">// storestore</span></span><br><span class="line">   flag = <span class="literal">true</span></span><br><span class="line">   <span class="comment">// storeload</span></span><br><span class="line">   a = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funB</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// loadload</span></span><br><span class="line">   <span class="keyword">while</span> (!flag) &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// loadstore</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 上面那个内存屏障，直接清空了 invalidate queue，所以 a 的值被标记为 invalid 状态</span></span><br><span class="line"><span class="comment">    * 这样，下面的代码可读了，至少不会读取到假的变量， 核心回去 remote read 远程</span></span><br><span class="line"><span class="comment">    * 的核心</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   assert(a == <span class="number">1</span>)</span><br><span class="line">   log(<span class="string">&quot;funB running...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test01</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">   <span class="keyword">val</span> job1 = launch(Dispatchers.IO) &#123;</span><br><span class="line">      funA()</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">val</span> job2 = launch(Dispatchers.Unconfined) &#123;</span><br><span class="line">      funB()</span><br><span class="line">   &#125;</span><br><span class="line">   joinAll(job1, job2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这段代码展示了 kotlin 的 volatile 的用法: @Volatile </p></blockquote><p>你看这不是原子操作么? 实际上, 则仅仅是可见性和防止重排序问题</p><p>如果把 <code>flag</code> 变成 <code>flag++</code> 的话, 就不一样了</p><blockquote><p>诶, 我们前面写过类似的代码</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test03</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">   <span class="keyword">val</span> list = mutableListOf&lt;Job&gt;()</span><br><span class="line">   repeat(<span class="number">10000</span>) &#123;</span><br><span class="line">      list.add(launch &#123;</span><br><span class="line">         i++</span><br><span class="line">      &#125;)</span><br><span class="line">      list.add(launch(Dispatchers.IO) &#123;</span><br><span class="line">         i++</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   list.forEach &#123;</span><br><span class="line">      it.join()</span><br><span class="line">   &#125;</span><br><span class="line">   println(i) <span class="comment">// 19668</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改下试试</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Volatile</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test01</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">val</span> list = mutableListOf&lt;Job&gt;()</span><br><span class="line">   repeat(<span class="number">10000</span>) &#123;</span><br><span class="line">      list.add(launch &#123;</span><br><span class="line">         i++</span><br><span class="line">      &#125;)</span><br><span class="line">      list.add(launch(Dispatchers.IO) &#123;</span><br><span class="line">         i++</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   list.forEach &#123;</span><br><span class="line">      it.join()</span><br><span class="line">   &#125;</span><br><span class="line">   println(i) <span class="comment">// 19904</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是 <code>19904</code></p><p>为什么? 其实很简单, <code>flag = true</code> 编译成字节码后, 只有一句, 而改成 <code>i++</code> 的话, 代码就变成了 <code>i = i + 1</code>, 这样就个3步骤:</p><ol><li>读取 <code>i</code></li><li><code>i + 1</code></li><li>把值赋值给 <code>i</code></li></ol><p>三个步骤, 明显不是线程安全的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Volatile</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">val</span> mutex = Mutex()</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test01</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">val</span> list = mutableListOf&lt;Job&gt;()</span><br><span class="line">   repeat(<span class="number">10000</span>) &#123;</span><br><span class="line">      list.add(launch &#123;</span><br><span class="line">         mutex.withLock &#123;</span><br><span class="line">            i++</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      list.add(launch(Dispatchers.IO) &#123;</span><br><span class="line">         mutex.withLock &#123;</span><br><span class="line">            i++</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   list.forEach &#123;</span><br><span class="line">      it.join()</span><br><span class="line">   &#125;</span><br><span class="line">   println(i) <span class="comment">// 19668</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这不是唯一的解决方案, 我们还可以使用无锁<code>cas</code>的 <code>AtomicInterger</code> 解决</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Volatile</span></span><br><span class="line"><span class="keyword">var</span> i: AtomicInteger = AtomicInteger(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test01</span><span class="params">()</span></span> = runBlocking&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">val</span> list = mutableListOf&lt;Job&gt;()</span><br><span class="line">   repeat(<span class="number">10000</span>) &#123;</span><br><span class="line">      list.add(launch &#123;</span><br><span class="line">         i.getAndIncrement()</span><br><span class="line">      &#125;)</span><br><span class="line">      list.add(launch(Dispatchers.IO) &#123;</span><br><span class="line">         i.getAndIncrement()</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   list.forEach &#123;</span><br><span class="line">      it.join()</span><br><span class="line">   &#125;</span><br><span class="line">   println(i) <span class="comment">// 20000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在 cas 底下, 我们有 三个 值, 旧值, 新值和实际值</strong></p><p><strong>1. 旧值(也可以叫预估值): 刚刚读取出来的值</strong><br><strong>2. 新值: 是我们需要设置进入的值</strong><br><strong>3. 实际值: 是我们主存里的值(通常是 <code>volatile </code>修饰的变量)</strong>  </p><p><strong>如果需要设置新的值, 首先 判断  旧值 和 实际值 是否相同?</strong></p><p><strong>如果相同, 则直接把 新 的值 设置进去</strong></p><p><strong>如果不相同, 说明在这期间, 值已经被修改了, 则再次读下 <code>实际值</code> 的值, 把该值作为<code>旧值</code>, 然后从 <code>判断旧值和实际值是否相等</code> 开始循环, 直到将值设置进去</strong></p><blockquote><p><code>读取出来的旧值</code>和<code>判断旧值和实际值是否相等</code>之间有<code>时差</code>, <code>cas</code>使用上了这份时差, 只要在这时差之中, 旧值和实际值相同, 我们就可以立马将新值设置到实际值中</p></blockquote><p>来, 我们简单分析下 <code>AtomicInteger</code> 的源码把这三个值找出来</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5319927ae454c52bf6b14f377810f58~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这里设置了值, 这里的 <code>value</code> 被修饰成 <code>volatile</code> , 所以是 <code>实际值</code></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/779f76ded44148d886f9f37be070c69e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>现在我们找<code>旧值</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> U.getAndAddInt(<span class="built_in">this</span>, VALUE, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看不出来, 往<code>getAndAddInt</code>函数里头走</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HotSpotIntrinsicCandidate</span></span><br><span class="line"><span class="comment">// o: 是对象</span></span><br><span class="line"><span class="comment">// offset: 是对象所处 value 的偏移地址</span></span><br><span class="line"><span class="comment">// 上面这俩配合能够拿到 value 实际值 的值</span></span><br><span class="line"><span class="comment">// delta: 这是增加的值, 是新值的增量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">int</span> delta)</span> &#123;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 拿到旧值</span></span><br><span class="line">        v = getIntVolatile(o, offset);</span><br><span class="line">        <span class="comment">// 对比下, o + offset 组成的 实际值是否和 旧值 v 相等, 如果相等, 直接设置 v + delta 新的值</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!weakCompareAndSetInt(o, offset, v, v + delta));</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧值 <code>v</code>, 实际值 <code>o + offset</code>, 新值 <code>v + delta</code></p><blockquote><p>话说 cas jvm源码不用看了吧? 算了都这样了就破罐子破摔算了</p></blockquote><h3 id="从-AtomicInteger-开始深入-jvm-底层分析-cas-源码"><a href="#从-AtomicInteger-开始深入-jvm-底层分析-cas-源码" class="headerlink" title="从 AtomicInteger 开始深入 jvm 底层分析 cas 源码"></a>从 <code>AtomicInteger</code> 开始深入 jvm 底层分析 cas 源码</h3><p>在 <code>Unsafe.java</code> 文件下有这么一个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSetInt</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">int</span> expected, <span class="type">int</span> x)</span>;</span><br></pre></td></tr></table></figure><p>从这里查起, 然后我崩了, 运行的jdk版本是 <code>openJDK 11</code>, 源码的版本是 <code>openJDK1.8</code>, 好像源码有点不太一样???</p><p>换了下 <code>jdk 1.8</code> 版本果然</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapInt</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">int</span> expected, <span class="type">int</span> x)</span>;</span><br></pre></td></tr></table></figure><p>然后就找到了源码: </p><blockquote><p>unsafe.cpp</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UNSAFE_ENTRY</span>(jboolean, <span class="built_in">Unsafe_CompareAndSwapInt</span>(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))</span><br><span class="line"><span class="built_in">UnsafeWrapper</span>(<span class="string">&quot;Unsafe_CompareAndSwapInt&quot;</span>);</span><br><span class="line"><span class="comment">// 把我们 java 的o当作自己强转成(oop*)然后再取值 *(oop*) 指针</span></span><br><span class="line">oop p = JNIHandles::<span class="built_in">resolve</span>(obj);</span><br><span class="line"><span class="comment">// 把 p + offset 偏移值, 得到 addr 指针</span></span><br><span class="line">jint *addr = (jint *)<span class="built_in">index_oop_from_field_offset_long</span>(p, offset);</span><br><span class="line"><span class="comment">// 重点在这里</span></span><br><span class="line"><span class="comment">// 对比并交换, x 是我们新值, addr 是实际值, e 是旧值(预估值expected)</span></span><br><span class="line"><span class="keyword">return</span> (jint)(Atomic::<span class="built_in">cmpxchg</span>(x, addr, e)) == e;</span><br><span class="line">UNSAFE_END</span><br></pre></td></tr></table></figure><p>看这个 <code>jobject obj, jlong offset, jint e, jint x</code>, 和我们java的参数配上了</p><p><code>jobject obj, jlong offset, jint e, jint x</code></p><p><code>Object o, long offset, int expected, int x</code></p><p>然后我们深入到 <code>Atomic::cmpxchg</code> 内部</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13155b3dc64242c79efbf39db6ea7de2~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们找 <code>window x86</code> 文件</p><p>会发现有两个相同函数签名的 <code>cmpxchg</code> , 别急一个是 <code>AMD</code> 的, 不用看</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> jint <span class="title">Atomic::cmpxchg</span><span class="params">(jint exchange_value, <span class="keyword">volatile</span> jint* dest, jint compare_value)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> mp = os::<span class="built_in">is_MP</span>();</span><br><span class="line">  __asm &#123;</span><br><span class="line">    mov edx, dest</span><br><span class="line">    mov ecx, exchange_value</span><br><span class="line">    mov eax, <span class="function">compare_value</span></span><br><span class="line"><span class="function">    <span class="title">LOCK_IF_MP</span><span class="params">(mp)</span></span></span><br><span class="line"><span class="function">    cmpxchg dword ptr [edx], ecx</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>又到了看不太懂的汇编环节, 看的出来底层使用的就是 汇编代码 <code>cmpxchg</code>, 如果是多核的还给上了锁 <code>LOCK_IF_MP(mp)</code></p></blockquote><p>底层变量名字写的真清楚啊, <code>exchange_value</code> 用于交换的值, <code>dest</code> 源于哪个值的指针, <code>compare_value</code> 需要比较的值</p><p>剩下汇编, 看的懂一点, 但 <code>cmpxchg</code> 有什么特性就不太懂了, 想更深入的, 自行百度</p><blockquote><p>又 6600 字了, 强迫症, 先把文章发了吧, 等有空再整理整理(可能有错), 话说这章跟 kotlin 有关系么??? !!! </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 异步 </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 协程 </tag>
            
            <tag> volatile </tag>
            
            <tag> cpu高速缓存 </tag>
            
            <tag> 多核心 </tag>
            
            <tag> 缓存一致性方案 </tag>
            
            <tag> MESI </tag>
            
            <tag> 缓存行 </tag>
            
            <tag> 缓存行伪共享 </tag>
            
            <tag> storebuffer </tag>
            
            <tag> Store Forwarding </tag>
            
            <tag> 内存屏障 </tag>
            
            <tag> invalidate queue </tag>
            
            <tag> storestore </tag>
            
            <tag> release </tag>
            
            <tag> storeload </tag>
            
            <tag> fence </tag>
            
            <tag> loadload </tag>
            
            <tag> loadstore </tag>
            
            <tag> acquire </tag>
            
            <tag> 原子性 </tag>
            
            <tag> jvm </tag>
            
            <tag> jvm底层源码 </tag>
            
            <tag> cpu </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十、kotlin的注解和反射</title>
      <link href="/2022/12/03/07kotlin/%E5%8D%81%E3%80%81kotlin%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
      <url>/2022/12/03/07kotlin/%E5%8D%81%E3%80%81kotlin%E7%9A%84%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>先说下, kotlin的反射只使用于 kotlin 特定功能, 如果是 java 方面的功能, 最好使用java版反射</p></blockquote><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="java-和-kotlin-注解的区别"><a href="#java-和-kotlin-注解的区别" class="headerlink" title="java 和 kotlin 注解的区别"></a>java 和 kotlin 注解的区别</h2><ol><li>将类传递进注解的方式 <code>@MyAnnotation(MyClass::class)</code></li><li>注解传递注解为参数的方式 去掉注解前面的 <code>@</code> 就可以了, <code>@Annotation(MyAnnotation(MyClass::class))</code></li><li>把数组传递到注解中, <code>@RequestMapping(path = arrayOf(&quot;/foo&quot;, &quot;bar&quot;))</code>, 如果是 java 的数组注解, 将会变成 <code>vararg</code> 可变参数</li><li>注解传递我们的属性(类的属性), 需要属性是<code>编译期常量</code>的, 也就是编译期间就确定的参数, 这里我们使用 <code>const</code> 修饰在顶层、<code>companion object</code>或者<code>object</code></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> TEST_TIMEOUT = <span class="number">100L</span></span><br><span class="line"><span class="meta">@Test(timeout = TEST_TIMEOUT)</span> <span class="function"><span class="keyword">fun</span> <span class="title">tesMethod</span><span class="params">()</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="注解目标"><a href="#注解目标" class="headerlink" title="注解目标"></a>注解目标</h2><p>kotlin 一个属性包含了很多部分, 它主要由: <strong>字段 + get&#x2F;set 函数</strong>组成, 所以注解的标注需要指定具体标注的谁</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ad158bcf58e421ca6d937722063935c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>kotlin注解可以对上面几个位置进行标注</p><ul><li><code>setparam</code>: 对 <code>set</code> 函数的参数进行注解</li><li><code>set</code>: 对属性的 <code>set</code> 函数注解</li><li><code>get</code>: 对属性的 <code>get</code> 函数注解</li><li><code>file</code>: 包含在文件中声明的顶层函数和顶层属性注解, 比如<code>@file:JvmName(&quot;ClassName&quot;)</code>对文件注解, 下面有说明</li><li><code>delegate</code>: 为委托属性存储委托实例的字段, 注解的是属性生成出来的委托属性</li><li><code>field</code>: 标注属性的字段, 不是幕后字段哦</li><li><code>param</code>: 构造方法的参数</li><li><code>property</code>: 具有此目标的注解对java不可见</li><li><code>receiver</code>: 扩展函数或者属性的接收者</li></ul><blockquote><p>很多时候我们不知道它注解的时候哪个部位其实有一个很简单的方式, 在 kotlin 中注解, 然后在 kotlin 反编译成 java 代码的插件中查看具体注解给了哪个部位</p></blockquote><ol><li><code>setparam</code>注解的是构造函数的参数(记住注解的不是 <strong>name</strong> 字段)</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo03SetParam</span>(<span class="meta">@setparam:Rule</span> <span class="keyword">var</span> name: String) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(<span class="meta">@Rule</span> <span class="meta">@NotNull</span> String var1)</span> &#123;</span><br><span class="line">    Intrinsics.checkNotNullParameter(var1, <span class="string">&quot;&lt;set-?&gt;&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.name = var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>delegate</code> 注解的是委托对象</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a: <span class="built_in">Int</span> <span class="keyword">by</span> MyDelegate()</span><br></pre></td></tr></table></figure><p>委托的是一个叫 <code>a$delegate</code> 的委托对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MyDelegate a$delegate;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getA</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.a$delegate.getValue(<span class="built_in">this</span>, $$delegatedProperties[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">(<span class="type">int</span> var1)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.a$delegate.setValue(<span class="built_in">this</span>, $$delegatedProperties[<span class="number">0</span>], var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>receiver</code> 注解的是接收者</li></ol><p>对扩展函数: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> @receiver:Rule String.<span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">   println(<span class="string">&quot;extFunc <span class="variable">$this</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">(<span class="meta">@Rule</span> String $<span class="built_in">this</span>$f)</span> &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="string">&quot;extFunc &quot;</span> + $<span class="built_in">this</span>$f;</span><br><span class="line">   <span class="type">boolean</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">   System.out.println(var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对扩展操作符重载: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> @receiver:Rule Demo01.<span class="title">plusAssign</span><span class="params">(s: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">this</span>.name = <span class="keyword">this</span>.name + s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private static final void plusAssign(@Rule Demo01 $this$plusAssign, String s) &#123;</span><br><span class="line">   Intrinsics.checkNotNullParameter($this$plusAssign, &quot;$this$plusAssign&quot;);</span><br><span class="line">   $this$plusAssign.setName($this$plusAssign.getName() + s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果是成员函数的操作符重载, 则不可以使用 <code>@receiver:Rule</code> , 侧面说明 成员函数没有 <code>receiver</code></p></blockquote><p>对扩展属性: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> <span class="meta">@receiver:Rule</span> StringBuilder.c: String</span><br><span class="line">   <span class="keyword">get</span>() = <span class="keyword">this</span>.toString()</span><br><span class="line">   <span class="keyword">set</span>(value) &#123;</span><br><span class="line">      <span class="keyword">this</span>.append(value)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>反编译: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">getC</span><span class="params">(<span class="meta">@Rule</span> StringBuilder $<span class="built_in">this</span>$c)</span> &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">var10000</span> <span class="operator">=</span> $<span class="built_in">this</span>$c.toString();</span><br><span class="line">   Intrinsics.checkNotNullExpressionValue(var10000, <span class="string">&quot;this.toString()&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> var10000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setC</span><span class="params">(<span class="meta">@Rule</span> StringBuilder $<span class="built_in">this</span>$c, String value)</span> &#123;</span><br><span class="line">   $<span class="built_in">this</span>$c.append(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>file</code> 目标注解</li></ol><p>主要功能就是将注解标注目标指向文件, 这样的话可以对文件注解</p><p>前面学过的 <code>@file:JvmName(&quot;Content&quot;)</code></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2bd9c742418e49ecbd47fce83320d43a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>改完直接指定了本 <code>Demo01</code> 文件名为 <code>Content</code>, 到时候在其他java文件中调用时类名字就从 <code>Demo01</code> 变成 <code>Content</code>了</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a306df4809164b9d930ca072dbef6be2~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>其他的注解就不一一做罗列了, 都比较好理解</p></blockquote><h2 id="定义注解"><a href="#定义注解" class="headerlink" title="定义注解"></a>定义注解</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">annotation</span> <span class="keyword">class</span> <span class="title class_">Rule</span></span><br></pre></td></tr></table></figure><p>它不能有类体, 如果要添加属性的话</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">annotation</span> <span class="keyword">class</span> <span class="title class_">Rule</span>(<span class="keyword">val</span> name: String)</span><br></pre></td></tr></table></figure><p>把它当作主构造函数就行了</p><blockquote><p>kotlin的注解和java一样对 <code>value</code> 进行特殊处理</p></blockquote><h2 id="控制注解可以注解的目标"><a href="#控制注解可以注解的目标" class="headerlink" title="控制注解可以注解的目标"></a>控制注解可以注解的目标</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(</span></span><br><span class="line"><span class="meta">   AnnotationTarget.CLASS,</span></span><br><span class="line"><span class="meta">   AnnotationTarget.FIELD,</span></span><br><span class="line"><span class="meta">   AnnotationTarget.VALUE_PARAMETER,</span></span><br><span class="line"><span class="meta">   AnnotationTarget.PROPERTY_SETTER,</span></span><br><span class="line"><span class="meta">   AnnotationTarget.FILE</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">annotation</span> <span class="keyword">class</span> <span class="title class_">Rule</span>()</span><br></pre></td></tr></table></figure><blockquote><p>kotlin注解和 java注解不同, kotlin注解在运行时默认能够访问到, 所以不同显示的指定保留期</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(AnnotationRetention.RUNTIME)</span></span><br></pre></td></tr></table></figure><h2 id="使用类做注解参数"><a href="#使用类做注解参数" class="headerlink" title="使用类做注解参数"></a>使用类做注解参数</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">annotation</span> <span class="keyword">class</span> <span class="title class_">Deserializeinterface</span>(<span class="keyword">val</span> targetClass: KClass&lt;<span class="keyword">out</span> Any&gt;)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deserializeinterface(A::class)</span></span><br></pre></td></tr></table></figure><h2 id="使用泛型类做注解参数"><a href="#使用泛型类做注解参数" class="headerlink" title="使用泛型类做注解参数"></a>使用泛型类做注解参数</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">annotation</span> <span class="keyword">class</span> <span class="title class_">CustomSerializer</span>(<span class="keyword">val</span> serializerClass: KClass&lt;<span class="keyword">out</span> ValueSerializer&lt;*&gt;)</span><br></pre></td></tr></table></figure><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="反射的-KClass、KCallable、KFuntion-和-KProperty"><a href="#反射的-KClass、KCallable、KFuntion-和-KProperty" class="headerlink" title="反射的 KClass、KCallable、KFuntion 和 KProperty"></a>反射的 <code>KClass</code>、<code>KCallable</code>、<code>KFuntion</code> 和 <code>KProperty</code></h2><table><thead><tr><th>Java</th><th>Kotlin</th></tr></thead><tbody><tr><td><code>Class</code></td><td><code>KClass</code></td></tr><tr><td><code>Field</code></td><td><code>KProperty0~KProperty2</code></td></tr><tr><td><code>Method</code></td><td><code>Function</code></td></tr><tr><td><code>obj.getClass()</code></td><td><code>obj::class</code> 返回 <code>KClass</code>或者使用 <code>obj::class.java</code>获取<code>Class</code></td></tr></tbody></table><h3 id="KClass"><a href="#KClass" class="headerlink" title="KClass"></a><code>KClass</code></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> kClass: KClass&lt;Demo02&gt; = Demo02::<span class="keyword">class</span></span><br></pre></td></tr></table></figure><p>这个类可以获取很多信息, 比如 <code>properties</code>, 比如 <code>functions</code>, 比如 <code>annotation</code>, 比如 <code>super</code> 等等</p><p><code>::</code> 不能使用于局部变量</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">val</span> property = ::a <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p><strong>这种操作符只能用于 顶层函数&#x2F;属性, 扩展函数&#x2F;属性 和 类中的函数&#x2F;属性</strong></p><blockquote><p>我觉得 如果 java 的反射用的好, 那么 kotlin 的反射就可以不要用了, 当然除了属性或者可空类型这种 kotlin 独特的东西外, 都可以用 java 反射</p></blockquote><h3 id="KFunction"><a href="#KFunction" class="headerlink" title="KFunction"></a><code>KFunction</code></h3><p>在 kotlin 中 <code>KFunction</code>从 <code>0 ~ N</code>, 分别表示参数的数量</p><p><strong>0</strong> 表示函数没有参数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">a</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// fun a() &#123;&#125;</span></span><br><span class="line">   <span class="keyword">val</span> kFunction0: KFunction0&lt;<span class="built_in">Unit</span>&gt; = ::a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1</strong> 表示参数只有一个</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">a</span><span class="params">(n: <span class="type">Int</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// fun a() &#123;&#125;</span></span><br><span class="line">   <span class="keyword">val</span> kFunction1: KFunction1&lt;<span class="built_in">Int</span>, <span class="built_in">Unit</span>&gt; = ::a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2</strong> 表示参数有两个</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">a</span><span class="params">(n: <span class="type">Int</span>, n2: <span class="type">Double</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// fun a() &#123;&#125;</span></span><br><span class="line">   <span class="keyword">val</span> kFunction2: KFunction2&lt;<span class="built_in">Int</span>, <span class="built_in">Double</span>, <span class="built_in">Unit</span>&gt; = ::a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2</strong> 然后 <code>KFunction3&lt;Int, Double, String&gt;</code> 表示第一个函数参数是 <code>Int</code>; 第二个函数参数是 <code>Double</code>; 最后一个是返回值 <code>String</code></p><p>根据这个可以判断是<br>(1) 是一个函数<br>(2) 参数分别是 <code>Int</code> 和 <code>Double</code><br>(3) 最后一个是返回值 <code>String</code></p><p>如果是成员函数的话</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9e1fbc177fdb460481d33dd4f8e09ac8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>共有 <code>4</code> 个泛型参数, 但是 <code>KFunction3</code> 却显示的是 <code>3</code>, 所以类的最后一个数字不能做简单的判断, 需要因地制宜</p><blockquote><p><code>KFunction0 ~ N</code> 你会发现不能在 kotlin 的包中发现他们, 这是<strong>合成的编译器生成类型</strong>, 主要的目的是防止 <code>KFunction</code> 参数的数量被认为的限制</p></blockquote><p>对了在 <code>KFunction</code> 中你会发现 <code>call</code> 和 <code>invoke</code> 两个函数, 其中 <code>call</code> 是 <code>KCallable</code> 的函数 但是他们有区别的</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c9c795ad1d344c798e9f131aad1ac758~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ce6eb8dbc63433ab14fbf21ac253322~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>所以需要调用, 那最好用 <code>invoke</code> 调用, <code>call</code> 不确定类型, 最好别用</p><p>但是你也会发现 </p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6aa01b661bb144d58a2472770018d6c6~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><code>invoke</code> 函数也不会被找到, 却可以调用</p><h3 id="KProperty"><a href="#KProperty" class="headerlink" title="KProperty"></a>KProperty</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * var b: Int = 0</span></span><br><span class="line"><span class="comment"> * val c: Int = 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">val</span> demo02 = Demo02()</span><br><span class="line"><span class="keyword">val</span> kMutableProperty1: KMutableProperty1&lt;Demo02, <span class="built_in">Int</span>&gt; = Demo02::b</span><br><span class="line">kMutableProperty1.setter.call(<span class="number">21</span>)</span><br><span class="line">println(kMutableProperty1.getter.invoke(demo02))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> kProperty0: KProperty0&lt;<span class="built_in">Int</span>&gt; = demo02::c</span><br><span class="line"><span class="comment">// 类似于 kProperty0.getter.invoke() 或者 kProperty0.getter.call() 或者 kProperty0.getter()</span></span><br><span class="line">println(kProperty0())</span><br></pre></td></tr></table></figure><p>注意到了么? <code>KMutableProperty1</code> 和 <code>KProperty0</code> 一个是 <code>var</code> 另一个是 <code>val</code></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/103b5c0289bb4d44872fadca3a4df0ab~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="现在我们借助-反射-获取前面注解的目标"><a href="#现在我们借助-反射-获取前面注解的目标" class="headerlink" title="现在我们借助 反射 获取前面注解的目标"></a>现在我们借助 反射 获取前面注解的目标</h3><ul><li>setparam: 对 set 函数的参数进行注解(主构造属性的 setter 参数无法注解???)</li><li>set: 对属性的 set 函数注解</li><li>get: 对属性的 get 函数注解</li><li>file: 包含在文件中声明的顶层函数和顶层属性注解, 比如<code>@file:JvmName(&quot;ClassName&quot;)</code>对文件注解, 下面有说明</li><li>delegate: 为委托属性存储委托实例的字段, 注解的是属性生成出来的委托属性</li><li>field: 标注属性的字段, 如果注解的是属性字段的话默认可以不写<code>field</code>, 不是幕后字段哦</li><li>param: 只能标注主构造方法的参数</li><li>property: 具有此目标的注解对java不可见</li><li>receiver: 扩展函数或者属性的接收者</li></ul><p>我们从难到易最后再读者自己写一个(反射比较重要)</p><blockquote><p>有个诀窍: 编写反射的话最好打开反编译后的代码, 这样看的更加清晰, 找类 找对象都比较准确</p></blockquote><h4 id="注解目标setparam"><a href="#注解目标setparam" class="headerlink" title="注解目标setparam"></a>注解目标<code>setparam</code></h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="meta">@setparam:Rule</span> <span class="keyword">var</span> name: String, <span class="meta">@param:Rule</span> <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">22</span>) &#123;</span><br><span class="line">   <span class="comment">// 对 set param 注解</span></span><br><span class="line">   <span class="meta">@setparam:Rule</span></span><br><span class="line">   <span class="keyword">var</span> lastName: String = <span class="string">&quot;zhazha&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> person = Person(<span class="string">&quot;zzz&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> property0 = person::name</span><br><span class="line"><span class="comment">// 主构造参数无法获取setter参数的注解</span></span><br><span class="line">property0.setter.valueParameters.forEach &#123; println(it.annotations) &#125; <span class="comment">// []</span></span><br><span class="line">property0.setter.parameters.forEach &#123; println(it.annotations) &#125; <span class="comment">// []</span></span><br><span class="line">println(<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="comment">// 非主构造函数可以使用 kotlin 获取 setter 参数注解</span></span><br><span class="line"><span class="keyword">val</span> property01 = person::lastName</span><br><span class="line">property01.setter.valueParameters.forEach &#123; println(it.annotations) &#125; <span class="comment">// [@reflection16.Rule()]</span></span><br><span class="line">property01.setter.parameters.forEach &#123; println(it.annotations) &#125; <span class="comment">// [@reflection16.Rule()]</span></span><br><span class="line"><span class="comment">// 使用 原生 java 反射获取 setter 参数的注解</span></span><br><span class="line"><span class="keyword">val</span> clazz = person::<span class="keyword">class</span>.java</span><br><span class="line"><span class="keyword">val</span> property1 = Person::name</span><br><span class="line"><span class="keyword">val</span> method = clazz.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, property1.javaField!!.type)</span><br><span class="line">method.parameters.find &#123; it.type == property1.javaField!!.type &#125;?.annotations?.forEach &#123; println(it) &#125;</span><br></pre></td></tr></table></figure><p>这里发现 kotlin 反射的局限, 主构造函数参数的<code>setter</code>参数注解无法获取, 但是非主构造函数的<code>setter</code>参数却可以获取</p><p>如果在 次构造函数中使用 <code>@setparam</code> 则会报错</p><p><code>&#39;@setparam:&#39; annotations could be applied only to property declarations</code></p><p><code>&#39;@setparam:&#39; 注释只能应用于属性声明</code></p><h4 id="注解目标delegate"><a href="#注解目标delegate" class="headerlink" title="注解目标delegate"></a>注解目标<code>delegate</code></h4><p>该注解最终注解的是委托对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>() &#123;</span><br><span class="line">   <span class="meta">@delegate:Rule</span></span><br><span class="line">   <span class="keyword">var</span> delegate: <span class="built_in">Int</span> <span class="keyword">by</span> MyDelegate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译的话会看到:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MyDelegate delegate$delegate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getDelegate</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.delegate$delegate.getValue(<span class="built_in">this</span>, $$delegatedProperties[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setDelegate</span><span class="params">(<span class="type">int</span> var1)</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.delegate$delegate.setValue(<span class="built_in">this</span>, $$delegatedProperties[<span class="number">0</span>], var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的 <code>get/set</code> 没有注解, 注解的是 <code>delegate$delegate</code> 对象, 而前面的 <code>var delegate</code> 属性变成了 <code>getDelegate</code> 和 <code>setDelegate</code> 的两个函数</p><p>反射获取注解源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// kotlin 获取委托对象的注解</span></span><br><span class="line"><span class="comment">// val person = Person(&quot;1&quot;)</span></span><br><span class="line"><span class="comment">// val property0 = person::delegate</span></span><br><span class="line"><span class="comment">// val javaField = property0.javaField!!</span></span><br><span class="line"><span class="comment">// javaField.annotations.forEach &#123; println(it) &#125;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// java获取委托对象注解</span></span><br><span class="line">   <span class="keyword">val</span> person1 = Person(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">   <span class="keyword">val</span> clazz = Person::<span class="keyword">class</span>.java</span><br><span class="line">   <span class="keyword">val</span> field = clazz.declaredFields.find &#123; it.type == MyDelegate::<span class="keyword">class</span>.java &#125;!!</span><br><span class="line">   field.annotations.forEach &#123; println(it) &#125;</span><br></pre></td></tr></table></figure><blockquote><p>记住了, 使用 kotlin 获取的 <code>KMutableProperty</code> 实际上控制的是 kotlin 的属性, 而 kotlin 的属性包括 字段+get&#x2F;set 一字段俩函数, 所以看到 <code>val javaField = property0.javaField!!</code> 这段代码的时候需要注意, 这是 字段+set&#x2F;get 的字段, 同时该字段也叫 java 字段罢了</p></blockquote><h4 id="注解目标-receiver"><a href="#注解目标-receiver" class="headerlink" title="注解目标 receiver"></a>注解目标 <code>receiver</code></h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> <span class="meta">@receiver:Rule</span> Person.fullName: String</span><br><span class="line">   <span class="keyword">get</span>() = <span class="string">&quot;<span class="subst">$&#123;this.name&#125;</span><span class="subst">$&#123;this.lastName&#125;</span> age: <span class="subst">$&#123;this.age&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 java 反射方式获取 扩展属性 fullName</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">val</span> clazz = Class.forName(<span class="string">&quot;reflection16.Demo02Kt&quot;</span>)</span><br><span class="line"><span class="comment">// println(clazz) // class reflection16.Demo02Kt</span></span><br><span class="line">   <span class="keyword">val</span> method = clazz.getDeclaredMethod(<span class="string">&quot;getFullName&quot;</span>, Person::<span class="keyword">class</span>.java)</span><br><span class="line">   method.trySetAccessible()</span><br><span class="line"><span class="comment">// val person = Person(&quot;haha&quot;)</span></span><br><span class="line">   <span class="comment">// 这里的 method 其实是 fullName 扩展属性的 getFullName 函数</span></span><br><span class="line"><span class="comment">// val fullName = method.invoke(person, person) as String</span></span><br><span class="line"><span class="comment">// println(fullName)</span></span><br><span class="line">   <span class="comment">// 在这里已经获取了 Rule 注解了</span></span><br><span class="line">   method.parameters.find &#123; it.type == Person::<span class="keyword">class</span>.java &#125;!!.annotations.forEach &#123; println(it) &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用 kotlin 反射方式获取</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="comment">// val person = Person(&quot;zhazha&quot;, 23)</span></span><br><span class="line"><span class="comment">// val kProperty0 = person::fullName</span></span><br><span class="line"><span class="comment">// val javaGetter = kProperty0.javaGetter!!</span></span><br><span class="line"><span class="comment">// javaGetter.parameters[0].annotations.forEach &#123; println(it) &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>java那么复杂的反射怎么是怎么写的??? 看<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/825651d7187d4546ac952a0ce8945da7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"><br>这不是有的抄么?</p></blockquote><h2 id="kotlin使用动态代理类的坑"><a href="#kotlin使用动态代理类的坑" class="headerlink" title="kotlin使用动态代理类的坑"></a>kotlin使用动态代理类的坑</h2><p>前置代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(</span><br><span class="line">   <span class="keyword">val</span> name: String</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Library</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">sell</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SunLibrary</span>(</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">val</span> book: Book</span><br><span class="line">) : Library &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">sell</span><span class="params">()</span></span> &#123;</span><br><span class="line">      println(<span class="string">&quot;卖书 <span class="subst">$&#123;book.name&#125;</span>&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 java 中我们这么编写动态代理类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="title">implements</span> <span class="title">InvocationHandler</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> ProxyInvocationHandlerJava(Object target) &#123;</span><br><span class="line">      <span class="keyword">this</span>.target = target;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Object getProxy() &#123;</span><br><span class="line">      <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">      <span class="keyword">return</span> method.invoke(target,args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接使用 idea 的 java 转 kotlin 功能将生成如下代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span>(<span class="keyword">private</span> <span class="keyword">val</span> target: Any) : InvocationHandler &#123;</span><br><span class="line">   <span class="keyword">val</span> proxy: Any</span><br><span class="line">      <span class="keyword">get</span>() = Proxy.newProxyInstance(<span class="keyword">this</span>.javaClass.classLoader, target.javaClass.interfaces, <span class="keyword">this</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Throws(Throwable::class)</span></span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(proxy: <span class="type">Any</span>, method: <span class="type">Method</span>, args: <span class="type">Array</span>&lt;<span class="type">Any</span>&gt;)</span></span>: Any &#123;</span><br><span class="line">      <span class="keyword">return</span> method.invoke(target, *args)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这种方式会报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.NullPointerException: Parameter specified as non-<span class="literal">null</span> is <span class="literal">null</span>: method com.zhazha.test.proxy.ProxyInvocationHandler.invoke, parameter args</span><br><span class="line">at com.zhazha.test.proxy.ProxyInvocationHandler.invoke(ProxyInvocationHandler.kt)</span><br><span class="line">at com.sun.proxy.$Proxy0.sell(Unknown Source)</span><br><span class="line">at com.zhazha.test.proxy.ProxyTestKt.main(ProxyTest.kt:<span class="number">7</span>)</span><br><span class="line">at com.zhazha.test.proxy.ProxyTestKt.main(ProxyTest.kt)</span><br></pre></td></tr></table></figure><p>空指针？</p><p>注意这段： <code>NullPointerException: Parameter specified as non-null is null: method com.zhazha.test.proxy.ProxyInvocationHandler.invoke, parameter args</code></p><p>很多不想看英文的看到这行代码报错：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/327420f32084419aa62bd39cd1676b0d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>然后以为是这边哪里函数参数或者返回值有空指针什么的。。。</p><p>结果忽视的最重要的信息</p><p>如果仔细看异常调用栈都能发现问题</p><p><code>parameter args at com.zhazha.test.proxy.ProxyInvocationHandler.invoke(ProxyInvocationHandler.kt)</code></p><p>明显底层是 invoke 方法报错了</p><p>也就是这个函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Throws(Throwable::class)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(proxy: <span class="type">Any</span>, method: <span class="type">Method</span>, args: <span class="type">Array</span>&lt;<span class="type">Any</span>&gt;)</span></span>: Any &#123;</span><br><span class="line">   <span class="keyword">return</span> method.invoke(target, *args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而错误提示直指错误原因：</p><p> <code>NullPointerException: Parameter specified as non-null is null: method com.zhazha.test.proxy.ProxyInvocationHandler.invoke, parameter args</code></p><p>参数 <code>args</code> 是 <code>空的</code>，但实际被指定为 <code>non-null</code> 参数</p><p>需要将代码改成下面这样：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Throws(Throwable::class)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(proxy: <span class="type">Any</span>, method: <span class="type">Method</span>, args: <span class="type">Array</span>&lt;<span class="type">Any</span>&gt;?)</span></span>: Any &#123;</span><br><span class="line">   <span class="keyword">return</span> method.invoke(target, *args!!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果发现又报错了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.NullPointerException</span><br><span class="line">at com.zhazha.test.proxy.ProxyInvocationHandler.invoke(ProxyInvocationHandler.kt:<span class="number">13</span>)</span><br><span class="line">at com.sun.proxy.$Proxy0.sell(Unknown Source)</span><br><span class="line">at com.zhazha.test.proxy.ProxyTestKt.main(ProxyTest.kt:<span class="number">7</span>)</span><br><span class="line">at com.zhazha.test.proxy.ProxyTestKt.main(ProxyTest.kt)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> method.invoke(target, *args!!)</span><br></pre></td></tr></table></figure><p>这行报的错误</p><p>这里需要回到前面第四章节的内容 ： </p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c0db59507480432aa27b1c7d1c4537bc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>所以我们可以这样：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Throws(Throwable::class)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(proxy: <span class="type">Any</span>, method: <span class="type">Method</span>, args: <span class="type">Array</span>&lt;<span class="type">Any</span>&gt;?)</span></span>: Any &#123;</span><br><span class="line">   <span class="keyword">return</span> method.invoke(target, *(args ?: arrayOf()))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者这样：</p><p><code>return method.invoke(target, *(args ?: emptyArray()))</code></p><p>但发现还是报错：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/42201a1541a845729b76ef61b0855fa8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>啊这？ 巨坑好吧，说好的 <code>kotlin</code> 兼容 <code>java</code> 的么？可以无缝切换的呢？</p><p>这里如果不清楚为什么报错可以这样改代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Throws(Throwable::class)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(proxy: <span class="type">Any</span>, method: <span class="type">Method</span>, args: <span class="type">Array</span>&lt;<span class="type">Any</span>&gt;?)</span></span>: Any &#123;</span><br><span class="line">   <span class="keyword">val</span> any = method.invoke(target, *(args ?: emptyArray()))</span><br><span class="line">   println(any)</span><br><span class="line">   <span class="keyword">return</span> any</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会发现 <code>any</code> 输出是 <code>null</code>， 为空了， 也是就是 <code>invoke</code> 调用的返回值为空，确实，前面的 <code>sell</code> 函数没有返回什么变量，只能是 <code>null</code> 的</p><p>但是 <code>invoke</code> 的返回类型却是 <code>Any</code> 不能为 <code>null</code></p><p>如果直接改成 <code>any!!</code> 就变成 <code>null!</code>! 又直接报错直接给你抛异常</p><p>含泪，改代码：把 <code>invoke</code> 返回值类型 <code>Any</code> 改成 <code>Any?</code> 完事</p><p>这里为什么可以改的原因是：<code>InvocationHandler</code> 接口的 <code>invoke</code> 是 <code>java</code> 类，<code>kotlin</code>使用 <code>java</code> 类默认时，参数和返回值都会被认为介于 <code>可空</code> 和 <code>不可空</code> 之间</p><p>之后就不会报错了</p><p>这里还有一个坑</p><p><code>InvocationHandler</code> 的 <code>public Object invoke(Object obj, Object... args)</code> 函数的 参数 <code>args</code> 是可变函数</p><p>在 <code>java</code> 中 数组和可变参数是一个东西：</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fcfb542b029e4aea886fb61bf8b7c723~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" style="zoom:60%;" /><p>但是在 <code>kotlin</code> 中不是</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/632a740758d4438ab2ccedc3c0719668~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>从 <code>*args</code> 变成 <code>args</code> ，虽然 <code>IDE</code> 没有报错，但是在运行时报错了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.IllegalArgumentException: wrong number of arguments</span><br><span class="line">at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.base/java.lang.reflect.Method.invoke(Method.java:<span class="number">566</span>)</span><br><span class="line">at com.zhazha.test.proxy.ProxyInvocationHandler.invoke(ProxyInvocationHandler.kt:<span class="number">13</span>)</span><br><span class="line">at com.sun.proxy.$Proxy0.sell(Unknown Source)</span><br><span class="line">at com.zhazha.test.proxy.ProxyTestKt.main(ProxyTest.kt:<span class="number">7</span>)</span><br><span class="line">at com.zhazha.test.proxy.ProxyTestKt.main(ProxyTest.kt)</span><br></pre></td></tr></table></figure><p>报参数数量错误。。。 emmm</p><p>真的恶心</p><p>kotlin 的数组真的是败笔</p>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> 反射 </tag>
            
            <tag> KClass </tag>
            
            <tag> KCallable </tag>
            
            <tag> KFuntion </tag>
            
            <tag> KProperty </tag>
            
            <tag> 注解目标 </tag>
            
            <tag> setparam </tag>
            
            <tag> delegate </tag>
            
            <tag> receiver </tag>
            
            <tag> 动态代理类 </tag>
            
            <tag> 坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九、kotlin的泛型</title>
      <link href="/2022/12/03/07kotlin/%E4%B9%9D%E3%80%81kotlin%E7%9A%84%E6%B3%9B%E5%9E%8B/"/>
      <url>/2022/12/03/07kotlin/%E4%B9%9D%E3%80%81kotlin%E7%9A%84%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>kotlin</code>的泛型基础和 <code>java</code> 很像, 所以我建议学习 <code>kotlin</code> 的泛型前, 先去学习下 <code>java</code> 的泛型, 至少搞懂通配符, <code>&lt;? extends X&gt;</code> 和  <code>&lt;? super X&gt;</code> 是怎么回事, 怎么写 泛型函数, 泛型类, 知道泛型的本质是什么?</p></blockquote><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><blockquote><p>泛型: 将类型当作参数传递到类内</p></blockquote><table><thead><tr><th>参数</th><th>泛型</th></tr></thead><tbody><tr><td><code>fun funName(参数)</code></td><td><code>class ClassName&lt;类型&gt;</code></td></tr><tr><td>传递给函数</td><td>传递给对象</td></tr></tbody></table><p>我们需要将类型当作参数传递给对象, 传递的类型可能会被用于定义属性或者用于函数的泛型参数</p><p>需要注意:</p><blockquote><p>参数有可变参数 <code>vararg</code> 泛型也是, 可以传递泛型的子类类型</p></blockquote><h2 id="简单示例-函数-参数-属性和类的泛型"><a href="#简单示例-函数-参数-属性和类的泛型" class="headerlink" title="简单示例: 函数, 参数, 属性和类的泛型"></a>简单示例: 函数, 参数, 属性和类的泛型</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">print</span><span class="params">(t: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">   println(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GenericsDemo01</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">val</span> f: T) &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">print</span><span class="params">(t: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">      println(t)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型约束-T-Integer"><a href="#泛型约束-T-Integer" class="headerlink" title="泛型约束(T : Integer)"></a>泛型约束(<code>T : Integer</code>)</h2><h3 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h3><blockquote><ol><li>缩小类型的范围</li><li>一个约束 <code>T : Integer</code>  &#x3D;&#x3D;&gt; <code>T extends Integer</code></li><li>多个约束 <code>T where T: XXX, T: YYY</code> &#x3D;&#x3D;&gt; <code>T extends CharSequence &amp; Appendable</code></li></ol></blockquote><p>很多时候我们需要将泛型的类型约束在某个界限, 比如: sum函数的泛型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">sum</span><span class="params">(a: <span class="type">T</span>, b: <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b <span class="comment">// error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数 <code>a</code> 和 参数 <code>b</code> 并不是什么类型都支持 <code>+</code> 这项操作, 所以我们需要对传入的类型参数(泛型)做限制, 像下面这样</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Integer&gt;</span> <span class="title">sum</span><span class="params">(a: <span class="type">T</span>, b: <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样操作类似于 java 的 <code>&lt;T extends Integer&gt;</code> , 限定 <code>T</code> 必须继承 <code>Integer</code>(或者说<code>T</code>必须是<code>Integer</code>的子类). </p><blockquote><p><strong>java 的<code>&lt;T extends Integer&gt;</code> 用于集合的泛型, 而泛型约束通常用于非集合的泛型, 因为集合泛型已经有 协变和逆变 的约束了, 不需要这一章的泛型约束</strong></p></blockquote><p>对的, 这样做就不会出现传入俩 <code>Any 类型</code>的 <code>a</code> 和 <code>b</code> 做加法运算符这样尴尬的事情</p><blockquote><p>泛型约束不会像集合泛型约束那样严格控制 <code>T</code> 必须是同一个, 你可以这样使用: </p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Number&gt;</span> <span class="title">printT</span><span class="params">(a: <span class="type">T</span>, b: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">   <span class="comment">// a = 9999, b = 100.5</span></span><br><span class="line">   println(<span class="string">&quot;a = <span class="variable">$a</span>, b = <span class="variable">$b</span>&quot;</span>)</span><br><span class="line">   <span class="comment">// aClass = class java.lang.Integer, bClass = class java.lang.Double</span></span><br><span class="line">   println(<span class="string">&quot;aClass = <span class="subst">$&#123;a.javaClass&#125;</span>, bClass = <span class="subst">$&#123;b.javaClass&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   printT(<span class="number">9999</span>, <span class="number">100.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>a: T, b: T</code> 中的 <code>T</code> 是两个不一样的类型, 一个是 <code>Integer</code>, 另一个是 <code>Double</code></p><p>上面那段代码类似于 java 的这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; <span class="keyword">void</span> <span class="title function_">printT</span><span class="params">(T a, T b)</span> &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;a = &quot;</span> + a);</span><br><span class="line">   System.out.println(<span class="string">&quot;b = &quot;</span> + b);</span><br><span class="line">   System.out.println(a.getClass());</span><br><span class="line">   System.out.println(b.getClass());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   printT(<span class="number">10</span>, <span class="number">20.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>课外: 突然发现 不知道 泛型如何 写 sum 了, 所以想了下, 好像只能使用反射来实现</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">sum</span><span class="params">(a: <span class="type">T</span>, b: <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">   <span class="keyword">val</span> clazz = a.javaClass</span><br><span class="line">   <span class="keyword">val</span> sum = clazz.declaredMethods.firstOrNull &#123; it.name == <span class="string">&quot;sum&quot;</span> &#125; ?: <span class="keyword">throw</span> Exception(<span class="string">&quot;can&#x27;t find function. T not is a subclass of Number&quot;</span>)</span><br><span class="line">   <span class="keyword">return</span> sum.invoke(a, a, b) <span class="keyword">as</span> T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小笔记: 在反射获取 <code>sum</code> 函数时, 发现它的函数签名是: <code>int sum(int, int)</code> 但是我们<code>a: T</code> 类型的 <code>T</code> 会被认为是 <code>Integer</code>(泛型只能是<code>Integer</code>), 而获取 <code>sum</code> 却需要 <code>int</code> 比较麻烦, 最后发现 <code>Integer.TYPE</code> 是拆包类型<code>int</code> 可以考虑从这里下手</p></blockquote><h3 id="为一个泛型添加多个约束"><a href="#为一个泛型添加多个约束" class="headerlink" title="为一个泛型添加多个约束"></a>为一个泛型添加多个约束</h3><p><code>where</code> 类似于 <code>sql</code> 语句的 <code>where</code> 一样</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">ensureTrailingPeriod</span><span class="params">(seq: <span class="type">T</span>)</span></span>: T <span class="keyword">where</span> T : CharSequence, T : Appendable &#123;</span><br><span class="line">   <span class="keyword">if</span> (!seq.endsWith(<span class="string">&quot;.&quot;</span>)) &#123;</span><br><span class="line">      seq.append(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> seq</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>约束的好处不仅仅是让我们知道我们需要的类必须是约束和约束的子类. 同时还会让我们的 <code>T</code> 多出很多约束类的函数(包括扩展函数等)</p></blockquote><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/57a2deccb6904706b201c74d7503a5c2~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p><code>endsWith</code> 函数是 <code>CharSequence</code> 的扩展函数, <code>append</code> 是 <code>Appendable</code> 接口的函数</p></blockquote><p>前面的 <code>sum</code> 函数也是</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2143518bf7c3470d9d11a59fdfafa589~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>java中也允许多约束泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">CharSequence</span> &amp; Appendable&gt; T <span class="title function_">ensureTrailingPeriod</span><span class="params">(T seq)</span></span><br></pre></td></tr></table></figure><h2 id="泛型类型可以为-null-也可以为-non-null"><a href="#泛型类型可以为-null-也可以为-non-null" class="headerlink" title="泛型类型可以为 null 也可以为 non-null"></a>泛型类型可以为 null 也可以为 non-null</h2><p>泛型的类型<code>T</code>类似于<strong>平台类型</strong>, <strong>是否为空由程序员决定, kotlin 不再进行可空管理, 程序员认为他是 可空类型 它就是可空类型, 程序员认为它非空类型, 它就是非空类型</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">print</span><span class="params">(t: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">   t?.let &#123; println(it) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型运行时的类型擦除和实化类型"><a href="#泛型运行时的类型擦除和实化类型" class="headerlink" title="泛型运行时的类型擦除和实化类型"></a>泛型运行时的<strong>类型擦除</strong>和<strong>实化类型</strong></h2><h3 id="主要内容-1"><a href="#主要内容-1" class="headerlink" title="主要内容:"></a>主要内容:</h3><blockquote><ol><li>类型擦除 和 java 一样(妥妥的糟粕, 给整过来了)</li><li>实化类型: 用于 <code>is T</code> 和 <code>T::class.java</code></li></ol></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">isIntList</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (list <span class="keyword">is</span> List&lt;<span class="built_in">Int</span>&gt;) &#123; <span class="comment">// 这里报错</span></span><br><span class="line">      println(<span class="string">&quot;这是错误的&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> list = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">   isIntList(list)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b8f46affafc41b5b713d05a69d573b1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>但是可以这样: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (list <span class="keyword">is</span> List&lt;*&gt;)</span><br></pre></td></tr></table></figure><p>可以看出, 泛型被类型擦除为 <code>List&lt;Any?&gt;</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">isIntList</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (list <span class="keyword">is</span> List&lt;Any?&gt;) &#123; <span class="comment">// 这样不会报错</span></span><br><span class="line">      println(<span class="string">&quot;不会报错了&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>kotlin 编译器可以判断在同一个作用域内的泛型类型</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> (list <span class="keyword">is</span> List&lt;<span class="built_in">Int</span>&gt;) &#123;</span><br><span class="line">    println(<span class="string">&quot;这样是可以的&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这种情况也会出现问题</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07998b3db7ef465fb9d1e7fb55704e80~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="实化类型参数-reified-T"><a href="#实化类型参数-reified-T" class="headerlink" title="实化类型参数 reified T"></a>实化类型参数 <code>reified T</code></h3><p>在运行期间, 类型被当作 <code>Any?</code> 类型, 但它想被强制转换成 <code>T</code> 类型明显是不行的, 这种情况下, 可以考虑使用 <code>inline</code> 和 <code>reified</code> 配合实现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T&gt;</span> <span class="title">isIntList</span><span class="params">(list: <span class="type">List</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (list <span class="keyword">is</span> List&lt;T&gt;) &#123; <span class="comment">// 这里不会报错</span></span><br><span class="line">      println(<span class="string">&quot;不会报错&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的我们调用 <code>is T</code> 也不会报错了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T&gt;</span> <span class="title">isA</span><span class="params">(value: <span class="type">Any</span>)</span></span> = value <span class="keyword">is</span> T</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">10</span></span><br><span class="line">   println(isA&lt;<span class="built_in">Int</span>&gt;(a))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面我们学过,  <code>inline</code> 内联的话, 会把代码拷贝到所有调用的地方, 使用上面这种方式<strong>kotlin编译器在<code>运行期间</code>可以识别到泛型的类型</strong></p><blockquote><p><code>inline</code> 在之前的章节中是为了提高性能, 消除<code>lambda</code>参数带来的副作用对象而使用的, 在本章节是为了<strong>实化类型</strong>, 这是第二个<code>inline</code> 的使用场景</p></blockquote><p>实例化参数的另一种使用场景是, 将 类型做参数传递后, 借助该类型获取 <code>Class</code> 类对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T&gt;</span> <span class="title">loadService</span><span class="params">()</span></span>: ServiceLoader&lt;T&gt;? &#123;</span><br><span class="line">   <span class="keyword">return</span> ServiceLoader.load(T::<span class="keyword">class</span>.java)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// 以前需要在参数上多一个传递 Class 的参数, 现在不需要了</span></span><br><span class="line">   <span class="comment">// val loadService = loadService(Int::class)</span></span><br><span class="line">   <span class="keyword">val</span> loadService = loadService&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以前需要在参数上多一个传递 Class 的参数, 现在不需要了</p></blockquote><h2 id="变型-泛型和子类型关系"><a href="#变型-泛型和子类型关系" class="headerlink" title="变型: 泛型和子类型关系"></a>变型: 泛型和子类型关系</h2><h3 id="类、类型和子类型"><a href="#类、类型和子类型" class="headerlink" title="类、类型和子类型"></a>类、类型和子类型</h3><h4 id="类和类型的区别"><a href="#类和类型的区别" class="headerlink" title="类和类型的区别"></a>类和类型的区别</h4><p>在很多情况下, 类都可以大体上当作类型, 但实际上, 类和类型不是一个东西就比如: 空类型和非空类型, <code>Int</code> 和 <code>Int?</code> , 请确认下 <code>Int?</code> 是类么?? 不是 那<code>Int?</code> 是类型么? 明显,是类型</p><p>又或者: <code>List</code>是个类而 <code>List&lt;T&gt;</code> 它又是个类型, 且他的类型有很多, 比如: <code>List&lt;Int&gt;</code> <code>List&lt;Double&gt;</code> <code>List&lt;Long&gt;</code> 等, 这些都是<strong>类型</strong>, 而<code>List</code> 是<strong>类</strong></p><h4 id="子类型关系"><a href="#子类型关系" class="headerlink" title="子类型关系"></a>子类型关系</h4><blockquote><p>子类型说的是一种 <strong>父子关系</strong> , 这种关系在 java 的类, java 的数组里存在, 而在 java 的泛型里却不见了</p></blockquote><p>(<strong>书本上的内容, 看不懂看下面</strong>)任何时候如果<strong>需要的是</strong>类型 A 的值，你都能够使用类型 B 的值当作 A 使用 ， 类型 B 就称为类型 A 的子类型。</p><blockquote><p>说简单点, <strong>A类指针(java叫引用)指向B类对象, 那么就可以说 A 的子类型是 B, 就这么简单(<code>val a: A = B()</code>)</strong></p></blockquote><p>比如: 现在有个引用 <code>val a: Number</code>和一个<code>Int</code>类型的对象<code>10</code>, 如果引用能够直接指向对象<code>val a: Number = 10</code> 则可以说 <code>Int</code> 是 <code>Number</code> 的<strong>子类型</strong>, 而同时我们可以说 <code>Number</code> 是 <code>Int</code> 的<strong>超类型</strong></p><blockquote><p>简单点: 子类的<strong>超类型</strong>是父类, 父类的<strong>子类型</strong>是子类, 只要记住这种关系就好</p></blockquote><h2 id="协变和逆变"><a href="#协变和逆变" class="headerlink" title="协变和逆变"></a>协变和逆变</h2><blockquote><p>高端的概念总会有落地的实现, 我们学习要达到的程度是用最简单的一句话描述这些概念</p></blockquote><blockquote><p>在生活中, 越宽的桶能够盛放越多的水, 越小的桶能够盛放越少的水, 而我们的类型也是, Any? 是 kotlin 中最宽泛的水桶, 它既能够存放非空的所有对象, 也能够存放可空的所有kotlin对象, 这就是多态的根本, 也是协变和逆变的根本</p></blockquote><h3 id="协变-covariant"><a href="#协变-covariant" class="headerlink" title="协变(covariant)"></a>协变(covariant)</h3><h4 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1. 是什么?"></a>1. 是什么?</h4><p>协变: <strong>是一种关系, 一种父类引用 指向 子类对象 的关系</strong></p><ul><li><p><code>Number</code> 引用总能够指向 <code>Int</code> 对象, 那么 <code>Number</code> 的子类型是 <code>Int</code> , 则 <code>Number</code> 和 <code>Int</code> 是协变的</p></li><li><p>那么同样的 <code>Number[]</code> 引用 总能够 指向 <code>Int[]</code> , 则 <code>Number[]</code> 和 <code>Int[]</code> 是协变的</p></li><li><p>同样的,  <code>List&lt;Number&gt;</code> 的引用总能够 指向 <code>List&lt;Int&gt;</code> 那么我们也能够说: <code>List&lt;Number&gt;</code> 和 <code>List&lt;Int&gt;</code> 有协变关系(但<strong>在java中失效了</strong>)</p></li></ul><p>但, java 因为历史关系, 使用了类型擦除技术, 所以 任何类型变到泛型的话, 就不会有所谓的协变(逆变)关系, 因为到了运行时期 java 总把类型变成 <code>List&lt;Object&gt;</code> 或者 直接是 <code>List</code> 类型, 如果强制开出协变关系, 则会出现一些安全问题</p><h4 id="java泛型类型擦除带来的问题"><a href="#java泛型类型擦除带来的问题" class="headerlink" title="java泛型类型擦除带来的问题"></a>java泛型类型擦除带来的问题</h4><blockquote><p>会出现 哥哥 泛型的水桶, 被jvm拿走忘了只能装哥哥了, 装了个 弟弟 泛型类型的对象, 这明显不对, 我的水桶要的只能是 哥哥 或者 哥哥的子类, 最最重要的是 jvm 记性还不好(类型擦除), 会把所有装XXX的水桶, 记成水桶里什么东西都能装</p></blockquote><p>泛型在存在协变关系的数组中, 可以正确的判断出错误: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Integer[] a = <span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1000</span>;</span><br><span class="line">Object[] o = a;</span><br><span class="line">o[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 这里会报错 java.lang.ArrayStoreException: java.lang.Character   </span></span><br></pre></td></tr></table></figure><p><strong>Integer 引用想指向没有子类型关系的 Character对象, 直接报错</strong></p><p>如果把上面的数组完全换成集合就会变成如下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">list.add(<span class="number">1000</span>);</span><br><span class="line">List&lt;Object&gt; objList = list; <span class="comment">// 父类引用指向子类对象, 按理来说 没错 object --&gt; Integer(但实际上这里不会编译通过的)</span></span><br><span class="line">objList.add(<span class="number">10.9</span>); <span class="comment">// 这里在运行期间将会编译通过, 运行通过, 因为还是 父类引用指向子类的对象, object --&gt; double</span></span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddc518f3050b46af831f65d5289667db~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>对比下有协变的数组:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb24d31041d847c8be429f143f982da1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这种泛型和数组的不一致就表示泛型不存在协变关系</p><blockquote><p>为了解决上面的问题, java 引入了属于 java 的<strong>泛型的协变</strong></p></blockquote><h4 id="java泛型对于”消失的协变关系”的解决方案"><a href="#java泛型对于”消失的协变关系”的解决方案" class="headerlink" title="java泛型对于”消失的协变关系”的解决方案"></a>java泛型对于”消失的协变关系”的解决方案</h4><blockquote><p>协变关系, 又有人叫 <code>子类型关系</code></p></blockquote><p>java 引入了 通配符<code>?</code>, 然后用 <code>List&lt;? extends Number&gt;</code> 表示协变, 相当于<strong>没有类型擦除</strong>的 <code>List&lt;Number&gt;</code>, 接受<code>Number</code>及<code>Number</code>的子类存入<code>List&lt;Number&gt;</code> 集合中</p><p>所以 <code>List&lt;? extends Number&gt;</code> 集合可以存入 </p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d602caba0e1468fbedfb959ded1bef9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>上面这些类的对象</p><blockquote><p>那么他是如何解决的上面那个问题的呢? </p></blockquote><p>答: java 的解决方法很简单, 一刀切, 如果<strong>类型是 <code>&lt;? extends Number&gt;</code> 协变的, 那么他就不允许写入, 修改等操作. 只允许读取</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8d6302c4e9db49dc936469ae4cab808b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p> 我特么, 解决不了问题, 就解决提出问题的人是吧???</p></blockquote><blockquote><p>小总结: <code>List&lt;? extends Number&gt;</code> 不好记里面可以存放什么类, 可以直接认为是 支持协变的 <code>List&lt;Number&gt;</code> 理解就好了, 支持协变的话, <code>Number</code> 集合可以存入它和它的子类</p></blockquote><blockquote><p>当然我们也可以认为<code>?</code>就是我们写的类, <code>class ? extends Number &#123;&#125;</code> 表示写了个<code>Number</code>的子类, 意味着<code>?</code>是子类, 所以<code>?</code>表示所有的子类</p></blockquote><h4 id="对应于-kotlin-的协变关系"><a href="#对应于-kotlin-的协变关系" class="headerlink" title="对应于 kotlin 的协变关系"></a>对应于 <code>kotlin</code> 的协变关系</h4><p>在 <code>kotlin</code> 中, 协变将会是:<br><strong>1. 在类处类型参数协变</strong><br><strong>2. 在函数处集合泛型的协变</strong></p><h5 id="类处类型参数的协变"><a href="#类处类型参数的协变" class="headerlink" title="类处类型参数的协变"></a>类处类型参数的协变</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Producer</span>&lt;<span class="type">out T</span>&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">produce</span><span class="params">()</span></span> : T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>out</code> 放在那里的位置, 主要有两个功能:</p><ul><li>子类型将会被保留(<code>Producer&lt;Cat&gt;</code>是<code>Producer&lt;Animal&gt;</code>的子类)</li><li><code>T</code> 只能用在 <code>out</code> 位置</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5b8f26e7a9f43f0a3d1927a60b3841b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p><code>in</code> 的位置在函数参数, <code>out</code> 位置在函数返回值, 既是<code>in</code>又是<code>out</code>则不需要标记, 同样的 <code>out</code> 标记的泛型只能读取, 不能写入, <code>in</code>标记的泛型只能写入不能读取(和<code>java</code>优点不太一样???)</p></blockquote><blockquote><p>上面的<code>transform</code>函数, 参数明显是范围越大越好, 所以使用 <code>? super Number</code>也就是<code>kotlin</code>中的<code>in T</code>, 而通过函数<code>transform</code>函数处理之后返回的范围应该越小越好, 所以使用<code>? extends Number</code> 也就是<code>out T</code></p></blockquote><ol><li><code>MutableList</code>不能使用<code>out</code>, 因为<code>out</code>只能往外输出(读取)对象而不能往里写入对象, 但<code>MutableList</code>可以写入可以读取, 明显矛盾</li><li>协变后的集合不允许写入, 只允许读取</li><li>协变的<code>out B</code>表示只能填入<code>B</code>或者<code>B的子类</code></li></ol><h5 id="函数处集合泛型的协变"><a href="#函数处集合泛型的协变" class="headerlink" title="函数处集合泛型的协变"></a>函数处集合泛型的协变</h5><p>和 java 类似的用法</p><p><code>out T</code> 对应了 java 的 <code>? extends T</code></p><p><code>in T</code> 对应了 java 的 <code>? super T</code></p><p>我们使用下面的代码来了解<code>协变</code>的一些特性</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">B</span> : <span class="type">A</span>()</span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">C</span> : <span class="type">B</span>()</span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">D</span> : <span class="type">C</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span></span><br></pre></td></tr></table></figure><ol><li><p>首先协变<code>out B</code>可以看作是<code>? extends B</code>也就是所谓的<code>上界</code>, 说白了只能接受<code>B</code>以及<code>B</code>的子类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> l0: ArrayList&lt;<span class="keyword">out</span> B&gt; = arrayListOf(B(), C(), D())</span><br><span class="line"><span class="comment">// 但如果我们加添 B 的父类 A 对象试试</span></span><br><span class="line"><span class="keyword">val</span> l1: ArrayList&lt;<span class="keyword">out</span> B&gt; = arrayListOf(A(), B(), C(), D()) <span class="comment">// error</span></span><br><span class="line"><span class="comment">// 这里就会报错, 无法添加高于B的对象</span></span><br></pre></td></tr></table></figure><blockquote><p>虽然可以这么写, 但最好别这么用, 协变在调用函数传参的时候才能得到充分的体现</p></blockquote></li><li><p>协变无法添加元素</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> l0: ArrayList&lt;<span class="keyword">out</span> B&gt; = arrayListOf(B())</span><br><span class="line">l0.add(C()) <span class="comment">// error, 无法再次添加对象</span></span><br></pre></td></tr></table></figure><blockquote><p>再次声明: <code>val l0: ArrayList&lt;out B&gt; = arrayListOf(B())</code> 虽然运行这么写, 但最好不要这么用</p></blockquote></li><li><p>看下面的<code>f1</code>和<code>f2</code>函数</p></li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c2dd47355f240368f25c89c6f8992da~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>但是可以这么传递:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5771a1bbb7c430b9024a5a159e78af4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="逆变-contravariant-相反的子类关系"><a href="#逆变-contravariant-相反的子类关系" class="headerlink" title="逆变(contravariant): 相反的子类关系"></a>逆变(<code>contravariant</code>): 相反的子类关系</h3><p>正常情况下, <code>Animal</code> 是 <code>Cat</code> 的父类, <code>Animal</code> 的子类型是 <code>Cat</code> , <code>List&lt;Animal&gt;</code>也是<code>List&lt;Cat&gt;</code>的子类型, 这是<strong>协变</strong>, 但如果 <code>List&lt;Cat&gt;</code>是<code>List&lt;Animal&gt;</code>的子类型的话, 这种<strong>子类型关系逆反</strong>了, 这就是<strong>逆变</strong></p><blockquote><p>研究逆变需要了解两个步骤</p><ul><li><p><strong>初始化阶段</strong></p><p>初始化阶段<code>List&lt;in Cat&gt;</code> 可以看作是<code>Any</code>类型 </p></li><li><p><strong>使用阶段</strong></p><p>在使用的时候, <code>in Cat</code>变成了<code>List&lt;Cat&gt;</code></p></li></ul></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6f8d2b506bc144e79d5ecbf3c1576f4b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/78e718b43c9e420bb1f14103caab0f5a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="kotlin-中的逆变"><a href="#kotlin-中的逆变" class="headerlink" title="kotlin 中的逆变"></a>kotlin 中的逆变</h4><p>同样的 kotlin 支持:<br><strong>1. 类的泛型参数逆变</strong><br><strong>2. 函数集合参数泛型逆变</strong></p><h5 id="类的泛型参数逆变"><a href="#类的泛型参数逆变" class="headerlink" title="类的泛型参数逆变"></a>类的泛型参数逆变</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&lt;<span class="type">in T</span>&gt; &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">write</span><span class="params">(t: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="函数集合参数泛型逆变"><a href="#函数集合参数泛型逆变" class="headerlink" title="函数集合参数泛型逆变"></a>函数集合参数泛型逆变</h5><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ca42ab0ca2840149e2ced92bde8efba~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>逆变在调用函数并传参的时候得到体现, 而在使用逆变后的对象添加参数时, 又恢复了 父类指针指向子类对象的赋值兼容性原则</p><h3 id="协变逆变的总结"><a href="#协变逆变的总结" class="headerlink" title="协变逆变的总结"></a>协变逆变的总结</h3><p>父类 &#x3D;&#x3D;&gt; 当前类 &#x3D;&#x3D;&gt; 当前类子类</p><p>​        |–&gt;   👆       –&gt;</p><p>​        👆 这里就是上界的边界</p><blockquote><p>协变: 规定了泛型(类型)上界(上边界), 该上限限定了只能传递某个类型及该类型的子类()</p></blockquote><p>父类 &#x3D;&#x3D;&gt;   当前类   &#x3D;&#x3D;&gt;   当前类子类</p><p>Any –&gt;  👆 &lt;–|</p><p>​               👆 这里就是下界的边界</p><blockquote><p>逆变: 规定了下界(下边界), 规定了只能传递某个类型及该类型的父类</p></blockquote><blockquote><p>在 kotlin 中, 如果泛型被标记为 <code>out</code>, 则该泛型只能调用符合泛型 <code>out</code> 位置的函数, 比如<code>fun get() : T</code>, 如果泛型被标记为 <code>in</code>, 那么只能调用该类的复合 <code>in</code> 位置的函数比如: <code>fun add(t: T): void</code></p></blockquote><blockquote><p><code>out</code> 协变, 只读, <code>in</code> 逆变, 能读写</p></blockquote><h4 id="使用协变和逆变写个-copyData-函数"><a href="#使用协变和逆变写个-copyData-函数" class="headerlink" title="使用协变和逆变写个 copyData 函数"></a>使用协变和逆变写个 <code>copyData</code> 函数</h4><ol><li>普通方式实现该函数</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">copyData01</span><span class="params">(source: <span class="type">MutableList</span>&lt;<span class="type">T</span>&gt;, destination: <span class="type">MutableList</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (item <span class="keyword">in</span> source) &#123;</span><br><span class="line">      destination.add(item)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用约束的方式实现该函数</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * T 是 R 的子类或者 T 就是 R,  记作: T &lt;= R</span></span><br><span class="line"><span class="comment"> * 所以 source: MutableList&lt;T&gt; 是子类集</span></span><br><span class="line"><span class="comment"> * destination: MutableList&lt;R&gt; 是父类集</span></span><br><span class="line"><span class="comment"> * 把子类集source的 item 依次给 父类集的 destination</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : R, R&gt;</span> <span class="title">copyData02</span><span class="params">(source: <span class="type">MutableList</span>&lt;<span class="type">T</span>&gt;, destination: <span class="type">MutableList</span>&lt;<span class="type">R</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (item <span class="keyword">in</span> source) &#123;</span><br><span class="line">      <span class="comment">// T 是子类(source)</span></span><br><span class="line">      <span class="comment">// R 是父类(destination)</span></span><br><span class="line">      <span class="comment">// R ==&gt; T   父类 指向 子类</span></span><br><span class="line">      <span class="comment">// destination ==&gt; source  父类 指向 子类</span></span><br><span class="line">      destination.add(item)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方式不好左区分, 到底哪个是父类, 哪个是子类, 哪个是输出, 哪个是输入</p></blockquote><ol start="3"><li>使用协变的方式实现函数</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对读取函数使用 out 泛型修饰符</span></span><br><span class="line"><span class="comment"> * out T 表示 T 或者 T 的子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">copyData03</span><span class="params">(source: <span class="type">MutableList</span>&lt;<span class="type">out</span> <span class="type">T</span>&gt;, destination: <span class="type">MutableList</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (item <span class="keyword">in</span> source) &#123;</span><br><span class="line">      destination.add(item)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * in T: T 的父类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">copyData04</span><span class="params">(source: <span class="type">MutableList</span>&lt;<span class="type">T</span>&gt;, destination: <span class="type">MutableList</span>&lt;<span class="type">in</span> <span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (item <span class="keyword">in</span> source) &#123;</span><br><span class="line">      destination.add(item)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面这就是声明处变型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">copyData05</span><span class="params">(source: <span class="type">MutableList</span>&lt;<span class="type">out</span> <span class="type">T</span>&gt;, destination: <span class="type">MutableList</span>&lt;<span class="type">in</span> <span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (item <span class="keyword">in</span> source) &#123;</span><br><span class="line">      destination.add(item)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * List 本身就是只读的, 所以看 List 源码的话会看到 public interface List&lt;out E&gt; 这段代码</span></span><br><span class="line"><span class="comment"> * 看到 out E 了么?</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">copyData06</span><span class="params">(source: <span class="type">List</span>&lt;<span class="type">T</span>&gt;, destination: <span class="type">MutableList</span>&lt;<span class="type">in</span> <span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (item <span class="keyword">in</span> source) &#123;</span><br><span class="line">      destination.add(item)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>source: MutableList&lt;out T&gt;, destination: MutableList&lt;in T&gt;</code> 这种方式能够很明显的发现哪个是输出, 哪个是输入</p></blockquote><h3 id="泛型类中-out-和-in-的位置"><a href="#泛型类中-out-和-in-的位置" class="headerlink" title="泛型类中 out 和 in 的位置"></a>泛型类中 <code>out</code> 和 <code>in</code> 的位置</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5b8f26e7a9f43f0a3d1927a60b3841b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><code>kotlin</code> 支持在 类声明 处定义泛型的 变型 , 也支持像 java 一样在 函数位置写上 变型 </p><h3 id="星号投影-使用-代替类型参数"><a href="#星号投影-使用-代替类型参数" class="headerlink" title="星号投影: 使用 * 代替类型参数"></a>星号投影: 使用 <code>*</code> 代替类型参数</h3><ol><li>星号投影不清楚存入的类型到底是哪个, 所以一般不做写入, 仅作读取</li></ol><p>所以功能上类似于 <code>List&lt;out Any?&gt;</code>, 在没有任何类型信息的情况下,  <code>Any</code> 是最好的选择</p><ol start="2"><li>使用星号投影的, 说明开发者并不需要知道读取出来的泛型具体是什么类型</li></ol><blockquote><p>说白一点, 星号投影把它当作 <code>out Any?</code> 吧, 读取出来的对象当作 <code>Any?</code> 对象就行, 不能写入</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> in </tag>
            
            <tag> 泛型 </tag>
            
            <tag> 类型擦除 </tag>
            
            <tag> 实化类型 </tag>
            
            <tag> reified </tag>
            
            <tag> 协变 </tag>
            
            <tag> 逆变 </tag>
            
            <tag> convariant </tag>
            
            <tag> contravariant </tag>
            
            <tag> out </tag>
            
            <tag> 星号投影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、kotlin的高阶函数</title>
      <link href="/2022/12/03/07kotlin/%E5%85%AB%E3%80%81kotlin%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
      <url>/2022/12/03/07kotlin/%E5%85%AB%E3%80%81kotlin%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h2><p><strong>一种以另一个函数为参数、返回值或两者兼顾的函数叫高阶函数</strong></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/054ccdf444bc40829a9704ae8906f7bd~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a9ef5b7a2394d3d98e0e821012b2bdb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><p>整数类型, 可以存放整数, 字符串类型可以存放字符串, 而<strong>函数类型则可以存放函数引用</strong></p><blockquote><p>首先, 函数是虚拟的存在, 所以没有类型, 也没有对象<br>但是我们可以将函数的<code>参数列表</code>和<code>返回值类型</code>归纳为<strong>一种实化类型</strong><br><strong>只要有了实化类型, 就会有对应的对象</strong></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sum: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = &#123; x, y -&gt; x + y &#125;</span><br><span class="line"><span class="keyword">val</span> action: () -&gt; <span class="built_in">Unit</span> = &#123; println(<span class="number">42</span>) &#125;</span><br><span class="line"><span class="keyword">var</span> canResultNull: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span>? = &#123; <span class="literal">null</span> &#125;</span><br><span class="line"><span class="keyword">var</span> funOrNull: ((<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span>)? = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>上面<code>(Int, Int) -&gt; Int</code> 和 <code>() -&gt; Unit</code> 就是函数类型</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a92a1acd53b46a8b95740d260d131b7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p><strong>记住<code>函数类型</code>是 以 <code>小括号</code> <code>包裹参数</code> 用 <code>-&gt;</code> 隔离 <code>参数和返回值</code></strong>, 搞懂这个非常重要, </p><p>比如: <code>(Int) -&gt; (Int) -&gt; Char</code>表示 参数是 <code>Int</code> 返回值是 <code>(Int) -&gt; Char</code>函数类型。</p><p>还可以这样：<code>((Int) -&gt; Int) -&gt; Char</code>, 参数是<code>((Int) -&gt; Int)</code>函数类型， 返回值是<code>Char</code></p></blockquote><p>函数类型的参数名称</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">performRequest</span><span class="params">(url: <span class="type">String</span>, callback: (<span class="type">Int</span>, <span class="type">String</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">performRequest</span><span class="params">(url: <span class="type">String</span>, callback: (<span class="type">code</span>: <span class="type">Int</span>, <span class="type">content</span>: <span class="type">String</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看两个区别:<br>(1) <code>callback: (Int, String) -&gt; Unit</code><br>(2) <code>callback: (code: Int, content: String) -&gt; Unit</code></p><p>除了参数带上名字外, 其实本质上没有区别</p><p>参数的名字只不过是为了代码的可读性</p><h2 id="调用作为参数的函数"><a href="#调用作为参数的函数" class="headerlink" title="调用作为参数的函数"></a>调用作为参数的函数</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">twoAndThree</span><span class="params">(<span class="keyword">operator</span>: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> result = <span class="keyword">operator</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    println(<span class="string">&quot;The result is <span class="subst">$&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现一个简化版的-filter"><a href="#实现一个简化版的-filter" class="headerlink" title="实现一个简化版的 filter"></a>实现一个简化版的 filter</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> String.<span class="title">myFilter02</span><span class="params">(predicate: <span class="type">Char</span>.() -&gt; <span class="type">Boolean</span>)</span></span>: String &#123;</span><br><span class="line">   <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">   <span class="keyword">this</span>.forEach &#123;</span><br><span class="line">      <span class="keyword">if</span> (predicate(it)) &#123;</span><br><span class="line">         sb.append(it)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> sb.toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> String.<span class="title">myFilter01</span><span class="params">(predicate: (<span class="type">Char</span>) -&gt; <span class="type">Boolean</span>)</span></span>: String &#123;</span><br><span class="line">   <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">   <span class="keyword">this</span>.forEach &#123;</span><br><span class="line">      <span class="keyword">if</span> (predicate(it)) &#123;</span><br><span class="line">         sb.append(it)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> sb.toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> str: String = <span class="string">&quot;abc123&quot;</span></span><br><span class="line">   println(str.myFilter01 &#123; it <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span>..<span class="string">&#x27;z&#x27;</span> &#125;)</span><br><span class="line">   println(str.myFilter02 &#123; <span class="keyword">this</span> <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span>..<span class="string">&#x27;z&#x27;</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数类型默认参数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> String.<span class="title">filter</span><span class="params">(predicate: (<span class="type">Char</span>) -&gt; <span class="type">Boolean</span> = &#123; it <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span>..<span class="string">&#x27;z&#x27;</span> &#125;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回函数的函数"><a href="#返回函数的函数" class="headerlink" title="返回函数的函数"></a>返回函数的函数</h2><p>根据某些条件判断返回不同的逻辑(<strong>函数引用 + 函数参数栈</strong>)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title class_">Delivery</span> &#123;</span><br><span class="line">   STANDARD, EXPEDITED</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>(<span class="keyword">val</span> itemCount: <span class="built_in">Int</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getShippingCostCalculator</span><span class="params">(delivery: <span class="type">Delivery</span>)</span></span>: (Order) -&gt; <span class="built_in">Double</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (delivery == Delivery.EXPEDITED) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;order -&gt; <span class="number">6</span> + <span class="number">2.1</span> * order.itemCount &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> &#123; order -&gt; <span class="number">1.2</span> * order.itemCount &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> calculator = getShippingCostCalculator(Delivery.EXPEDITED)</span><br><span class="line">   println(calculator(Order(<span class="number">3</span>)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>返回函数保存了 <code>函数引用 + 函数栈帧</code> , 看下面的代码: </p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">myFun</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: () -&gt; <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123; sum(a, b) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// mFun 保存了函数引用和函数参数栈帧</span></span><br><span class="line">   <span class="keyword">val</span> mFun = myFun(<span class="number">20</span>, <span class="number">39</span>)</span><br><span class="line">   <span class="comment">// 所以在这里会输出为 59, 因为它有栈帧, 保存了 a = 20, b = 39</span></span><br><span class="line">   <span class="keyword">val</span> i = mFun()</span><br><span class="line">   println(i) <span class="comment">// 59</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda-的使用场景之一-去除重复代码"><a href="#lambda-的使用场景之一-去除重复代码" class="headerlink" title="lambda 的使用场景之一: 去除重复代码"></a>lambda 的使用场景之一: 去除重复代码</h2><p>Shaw因为旅游喜欢上了地理，然后他建了一个所有国家的数据库。作为一名程序员，他设计了一个<code>CountryApp</code>类对国家数据进行操作。Shaw偏好欧洲的国家，于是他设计了一个程序来获取欧洲的所有国家。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Country</span>(</span><br><span class="line">   <span class="keyword">val</span> name:String,</span><br><span class="line">   <span class="keyword">val</span> continent: String,</span><br><span class="line">   <span class="keyword">val</span> population: <span class="built_in">Int</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CountryApp</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">filterCountries</span><span class="params">(countries: <span class="type">List</span>&lt;<span class="type">Country</span>&gt;)</span></span>: List&lt;Country&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> list = mutableListOf&lt;Country&gt;()</span><br><span class="line">      <span class="keyword">for</span> (country <span class="keyword">in</span> countries) &#123;</span><br><span class="line">         <span class="keyword">if</span> (country.continent == <span class="string">&quot;EU&quot;</span>) &#123;</span><br><span class="line">            list.add(country)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> list</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用它： </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> countrues = listOf(x, y, z)</span><br><span class="line"><span class="keyword">val</span> countryApp = CountryApp()</span><br><span class="line">countryApp.filterCountries(countries)</span><br></pre></td></tr></table></figure><p>但是这么写存在很大的问题，该功能只针对欧洲。太过于具体了，需要抽象</p><p>第一次改造的代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">filterCountries</span><span class="params">(countries: <span class="type">List</span>&lt;<span class="type">Country</span>&gt;, continent: <span class="type">String</span>)</span></span>: List&lt;Country&gt; &#123;</span><br><span class="line">   <span class="keyword">val</span> list = mutableListOf&lt;Country&gt;()</span><br><span class="line">   <span class="keyword">for</span> (country <span class="keyword">in</span> countries) &#123;</span><br><span class="line">      <span class="keyword">if</span> (country.continent == continent) &#123;</span><br><span class="line">         list.add(country)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用它： </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> countrues = listOf(x, y, z)</span><br><span class="line"><span class="keyword">val</span> countryApp = CountryApp()</span><br><span class="line">countryApp.filterCountries(countries, <span class="string">&quot;EU&quot;</span>)</span><br></pre></td></tr></table></figure><p>之后多了个需求，需要取到大于某人数的国家</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">filterCountries</span><span class="params">(countries: <span class="type">List</span>&lt;<span class="type">Country</span>&gt;, continent: <span class="type">String</span>, population: <span class="type">Int</span>)</span></span>: List&lt;Country&gt; &#123;</span><br><span class="line">   <span class="keyword">val</span> list = mutableListOf&lt;Country&gt;()</span><br><span class="line">   <span class="keyword">for</span> (country <span class="keyword">in</span> countries) &#123;</span><br><span class="line">      <span class="keyword">if</span> (country.continent == continent &amp;&amp; country.population &gt; population) &#123;</span><br><span class="line">         list.add(country)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用它： </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> countrues = listOf(x, y, z)</span><br><span class="line"><span class="keyword">val</span> countryApp = CountryApp()</span><br><span class="line">countryApp.filterCountries(countries, <span class="string">&quot;EU&quot;</span>, <span class="number">10_000_000</span>)</span><br></pre></td></tr></table></figure><p>总结下需要改的地方在：</p><ul><li><p>函数<code>filterCountries</code>需要添加参数，并且在函数体内需要添加响应的落实</p></li><li><p>调用方需要添加多少人数</p></li></ul><p>好恶心</p><p>那我们把这些变化封装了吧</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CountryTest</span> &#123;</span><br><span class="line">   <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">      <span class="function"><span class="keyword">fun</span> <span class="title">isEuropeanBigCountry</span><span class="params">(country: <span class="type">Country</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> country.continent == <span class="string">&quot;EU&quot;</span> &amp;&amp; country.population &gt; <span class="number">10_000_000</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用它：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> countryApp = CountryApp()</span><br><span class="line"><span class="keyword">val</span> countryList = countryApp.filterCountries(listOf(</span><br><span class="line">    Country(<span class="string">&quot;zhazha&quot;</span>, <span class="string">&quot;EU&quot;</span>, <span class="number">10_000_101</span>), </span><br><span class="line">    Country(<span class="string">&quot;heihei&quot;</span>, <span class="string">&quot;EU&quot;</span>, <span class="number">10_000_102</span>), </span><br><span class="line">    Country(<span class="string">&quot;hoho&quot;</span>, <span class="string">&quot;EU&quot;</span>, <span class="number">10_000_103</span>)), <span class="string">&quot;EU&quot;</span>, <span class="number">10000000</span>)</span><br><span class="line"><span class="keyword">for</span> (country <span class="keyword">in</span> countryList) &#123;</span><br><span class="line">    println(country)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但带来个新的问题</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isEuropeanBigCountry</span><span class="params">(country: <span class="type">Country</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> country.continent == <span class="string">&quot;EU&quot;</span> &amp;&amp; country.population &gt; <span class="number">10_000_000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>country要set哪些字段? </p><p>再改</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">filterCountries</span><span class="params">(countries: <span class="type">List</span>&lt;<span class="type">Country</span>&gt;, countryTest: <span class="type">CountryTest</span>)</span></span>: List&lt;Country&gt; &#123;</span><br><span class="line">   <span class="keyword">val</span> list = mutableListOf&lt;Country&gt;()</span><br><span class="line">   <span class="keyword">for</span> (country <span class="keyword">in</span> countries) &#123;</span><br><span class="line">      <span class="keyword">if</span> (countryTest.isEuropeanBigCountry()) &#123;</span><br><span class="line">         list.add(country)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">CountryTest</span>(</span><br><span class="line">   <span class="keyword">val</span> continent: String,</span><br><span class="line">   <span class="keyword">val</span> population: <span class="built_in">Int</span></span><br><span class="line">) &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">isEuropeanBigCountry</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> continent == <span class="string">&quot;EU&quot;</span> &amp;&amp; population &gt; <span class="number">10_000_000</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用它:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> countryApp = CountryApp()</span><br><span class="line"><span class="keyword">val</span> countryList = countryApp.filterCountries(listOf(</span><br><span class="line">   Country(<span class="string">&quot;zhazha&quot;</span>, <span class="string">&quot;EU&quot;</span>, <span class="number">10_000_101</span>),</span><br><span class="line">   Country(<span class="string">&quot;heihei&quot;</span>, <span class="string">&quot;EU&quot;</span>, <span class="number">10_000_102</span>),</span><br><span class="line">   Country(<span class="string">&quot;hoho&quot;</span>, <span class="string">&quot;EU&quot;</span>, <span class="number">10_000_103</span>)), CountryApp.CountryTest(<span class="string">&quot;EU&quot;</span>, <span class="number">10000000</span>))</span><br><span class="line"><span class="keyword">for</span> (country <span class="keyword">in</span> countryList) &#123;</span><br><span class="line">   println(country)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等下, 还能再优化:</p><blockquote><p>算了, 已经成java式”过度优化”(瞎吉儿”优化”)了</p><p><code>CountryTest</code>类可以使用 <code>Builder</code>模式封装</p></blockquote><p>但…</p><p>这算优化么? 还是那么多文件需要修改…</p><p>不过也算优化吧, 把需要修改的文件和主逻辑的文件区分开来, 到时候修改不会影响到主逻辑</p><p>越优化越复杂…</p><p>此时, 我们可以考虑使用 lambda</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">filterCountries</span><span class="params">(countries: <span class="type">List</span>&lt;<span class="type">Country</span>&gt;, filter: <span class="type">Country</span>.() -&gt; <span class="type">Boolean</span>)</span></span>: List&lt;Country&gt; &#123;</span><br><span class="line">   <span class="keyword">val</span> list = mutableListOf&lt;Country&gt;()</span><br><span class="line">   <span class="keyword">for</span> (country <span class="keyword">in</span> countries) &#123;</span><br><span class="line">      <span class="keyword">if</span> (country.filter()) &#123;</span><br><span class="line">         list.add(country)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> countryApp = CountryApp()</span><br><span class="line"><span class="keyword">val</span> countryList = countryApp.filterCountries(listOf(</span><br><span class="line">   Country(<span class="string">&quot;zhazha&quot;</span>, <span class="string">&quot;EU&quot;</span>, <span class="number">10_000_101</span>),</span><br><span class="line">   Country(<span class="string">&quot;heihei&quot;</span>, <span class="string">&quot;EU&quot;</span>, <span class="number">10_000_102</span>),</span><br><span class="line">   Country(<span class="string">&quot;hoho&quot;</span>, <span class="string">&quot;EU&quot;</span>, <span class="number">10_000_103</span>))</span><br><span class="line">) &#123;</span><br><span class="line">   <span class="keyword">this</span>.continent == <span class="string">&quot;EU&quot;</span> &amp;&amp; <span class="keyword">this</span>.population &gt; <span class="number">10_000_000</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (country <span class="keyword">in</span> countryList) &#123;</span><br><span class="line">   println(country)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常的 nice</p><h2 id="Function类型"><a href="#Function类型" class="headerlink" title="Function类型"></a>Function类型</h2><p><code>kotlin</code>设计了<code>Function0、Function1。。。</code>到<code>Function22</code>来兼容 <code>java</code> 的<code>lambda</code>表达式</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8137ebe263448df91cead0f2746ecf3~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><code>Function0</code>表示 <code>0</code> 个参数，一个返回值</p><p><code>Function1</code>表示 <code>1</code> 个参数，一个返回值</p><p><code>Function22</code>表示 <code>22</code> 个参数，一个返回值</p><p>出现这种情况的原因是，<code>kotlin</code>支持使用函数做参数或者返回值，<code>java</code> 中只能用 <code>函数式接口</code> 实现传递函数类型参数，所以 <code>java</code> 的函数式接口需要转化成 <code>Function0 ~ 22</code> ，同时 <code>kotlin</code>中的函数也需要借助 <code>Function 系列接口</code>代替翻译成 <code>java</code> 的<code>函数式接口</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(int: <span class="type">Int</span>)</span></span>: () -&gt; <span class="built_in">Unit</span> = &#123;</span><br><span class="line">   println(int)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).forEach &#123;</span><br><span class="line">      foo(it).invoke()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>foo 函数</code>的返回值如果翻译成 <code>java</code> 就是 <code>Function0</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Function0&lt;Unit&gt; <span class="title function_">foo</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Function0</span>&lt;Unit&gt;(n)&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> $<span class="type">int</span>;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.$<span class="type">int</span> = $<span class="type">int</span>;</span><br><span class="line">            <span class="built_in">super</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.$<span class="type">int</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="柯里化-风格"><a href="#柯里化-风格" class="headerlink" title="柯里化 风格"></a>柯里化 风格</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(x: <span class="type">Int</span>)</span></span>= &#123; y: <span class="built_in">Int</span> -&gt;</span><br><span class="line">   &#123;z: <span class="built_in">Int</span> -&gt; x + y + z&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">curryingLike</span><span class="params">(content: <span class="type">String</span>, block: (<span class="type">String</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">   block(content)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   curryingLike(<span class="string">&quot;look like currying stycle&quot;</span>) &#123;content -&gt;</span><br><span class="line">      println(content)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;A, B&gt;</span> Array<span class="type">&lt;A&gt;</span>.<span class="title">corresponds</span><span class="params">(that: <span class="type">Array</span>&lt;<span class="type">B</span>&gt;, p: (<span class="type">A</span>, <span class="type">B</span>) -&gt; <span class="type">Boolean</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">   <span class="keyword">val</span> i = <span class="keyword">this</span>.iterator()</span><br><span class="line">   <span class="keyword">val</span> j = that.iterator()</span><br><span class="line">   <span class="keyword">while</span> (i.hasNext() &amp;&amp; j.hasNext()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!p(i.next(), j.next())) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> !i.hasNext() &amp;&amp; !j.hasNext()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> a = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">val</span> b = arrayOf(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">a.corresponds(b) &#123; x, y -&gt;</span><br><span class="line">x + <span class="number">1</span> == y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.corresponds(b) &#123; x, y -&gt;</span><br><span class="line">x + <span class="number">2</span> == y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内联函数-消除-lambda-带来的代价"><a href="#内联函数-消除-lambda-带来的代价" class="headerlink" title="内联函数, 消除 lambda 带来的代价"></a>内联函数, 消除 lambda 带来的代价</h2><h3 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么?"></a>是什么?</h3><p>内联函数, 主要的功能是一处内联, 到处(<code>调用处</code>)粘贴(<code>函数体</code>)</p><p>功能和 c语言的宏定义很像, 主要就是在调用到内联函数的位置, 直接把内联函数体拷贝过去, 然后去掉该函数的名称和作用域(也就是 <code>&#123;&#125;</code> 括号)</p><p>同时, 内联函数还可以把<code>传入的已经调用的</code> <strong>lambda 参数也给内联</strong>了</p><blockquote><p>记住是已经 传入的并且已经调用了的lambda表达式<strong>才能内联</strong><br>记住是已经 传入的并且已经调用了的lambda表达式<strong>才能内联</strong><br>记住是已经 传入的并且已经调用了的lambda表达式<strong>才能内联</strong>  </p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">(param: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;inline function&quot;</span>)</span><br><span class="line">    param()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   f &#123; println(<span class="string">&quot;lambda&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译后: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="string">&quot;inline function&quot;</span>;</span><br><span class="line">System.out.println(var1);</span><br><span class="line"><span class="type">String</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="string">&quot;lambda&quot;</span>;</span><br><span class="line">System.out.println(var4);</span><br></pre></td></tr></table></figure><h3 id="传入的对象无法内联"><a href="#传入的对象无法内联" class="headerlink" title="传入的对象无法内联"></a>传入的对象无法内联</h3><blockquote><p>注意只有 <strong>传入的已经被调用的 lambda 参数才可以内联</strong>, 如果传入的是一个对象则不可以内联对象, 看下面这段代码:</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> v: () -&gt; <span class="built_in">Unit</span> = &#123; println(<span class="string">&quot;lambda&quot;</span>) &#125;</span><br><span class="line">    f(v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译后的<code>java</code>源码是这样: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Function0</span> <span class="variable">v</span> <span class="operator">=</span> (Function0)<span class="literal">null</span>.INSTANCE;</span><br><span class="line"><span class="type">String</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="string">&quot;inline function&quot;</span>;</span><br><span class="line">System.out.println(var2);</span><br><span class="line">v.invoke();</span><br></pre></td></tr></table></figure><blockquote><p>发现了没有? <code>Function0 v = (Function0)null.INSTANCE;</code> 这个 <code>v</code> 就是前面的变量, 该 lambda 表达式已经变成了对象</p></blockquote><h3 id="编译器遇到内联函数的大体处理步骤"><a href="#编译器遇到内联函数的大体处理步骤" class="headerlink" title="编译器遇到内联函数的大体处理步骤"></a>编译器遇到内联函数的大体处理步骤</h3><p>原始代码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">(param: () -&gt; <span class="type">Unit</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   println(<span class="string">&quot;inline function&quot;</span>)</span><br><span class="line">   param()</span><br><span class="line">   <span class="keyword">return</span> Random(<span class="number">100</span>).nextInt()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   println(<span class="string">&quot;进入 f 函数之前: &quot;</span>)</span><br><span class="line">   <span class="keyword">val</span> v = f &#123; println(<span class="string">&quot;lambda&quot;</span>) &#125;</span><br><span class="line">   println(<span class="string">&quot;v = <span class="variable">$v</span>&quot;</span>)</span><br><span class="line">   println(<span class="string">&quot;进入 f 函数之后&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>把函数体的lambda表达式内联掉</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">(param: () -&gt; <span class="type">Unit</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   println(<span class="string">&quot;inline function&quot;</span>)</span><br><span class="line">   println(<span class="string">&quot;lambda&quot;</span>) <span class="comment">// 内联 lambda 表达式</span></span><br><span class="line">   <span class="keyword">return</span> Random(<span class="number">100</span>).nextInt()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>把函数体拷贝到调用该内联函数的位置, 把 内联函数的 <code>return</code> 处理下</li></ol><blockquote><p>记住是 内联函数的 <code>return</code>, 不是lambda的<code>return</code><br>记住是 内联函数的 <code>return</code>, 不是lambda的<code>return</code><br>记住是 内联函数的 <code>return</code>, 不是lambda的<code>return</code>  </p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   println(<span class="string">&quot;进入 f 函数之前: &quot;</span>)</span><br><span class="line">   println(<span class="string">&quot;inline function&quot;</span>)</span><br><span class="line">   println(<span class="string">&quot;lambda&quot;</span>) <span class="comment">// 内联 lambda 表达式</span></span><br><span class="line">   <span class="keyword">val</span> v = Random(<span class="number">100</span>).nextInt()</span><br><span class="line">   println(<span class="string">&quot;v = <span class="variable">$v</span>&quot;</span>)</span><br><span class="line">   println(<span class="string">&quot;进入 f 函数之后&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此, 完成内联函数的内联大致过程, 其中还有在内联过程中如果遇到实参传递形参时怎么处理没搞, 会在后续讲</p><blockquote><p>注意到 <code>return</code> 了么? 如果 <code>inline</code> 真的是直接拷贝内联函数体代码到调用处, 代码肯定会直接返回, 而不是 执行 <code>println(&quot;进入 f 函数之后&quot;)</code>, 但实际上, 它执行了.</p></blockquote><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3539442d4dbe4dd586d70ec859e7380b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们把代码改成<code>f&#123; println(&quot;lambda&quot;) &#125;</code>:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06405f1d68424be5a1fc8bcfc7ac62e5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p><strong>调用函数</strong>的返回值不会被内联函数直接内联到调用出, 而是<strong>去除 return 关键字</strong>, 再<strong>把 return 后面的代码拷贝过来, 如果有变量接受返回值, 就直接赋值给返回值</strong></p></blockquote><blockquote><p>记住是<strong>调用函数</strong>哦, 不是被 <strong>内联函数函数类型表达式参数</strong> 的 <strong>return 表达式</strong></p></blockquote><h3 id="需要注意内联函数类型参数的return"><a href="#需要注意内联函数类型参数的return" class="headerlink" title="需要注意内联函数类型参数的return"></a>需要注意<code>内联函数类型参数</code>的<code>return</code></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">(param: () -&gt; <span class="type">Unit</span>)</span></span>: String &#123;</span><br><span class="line">println(<span class="string">&quot;inline function&quot;</span>)</span><br><span class="line">param()</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;有返回值&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">val</span> f = f &#123;</span><br><span class="line">println(<span class="string">&quot;lambda&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">println(f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inline function</span><br><span class="line">lambda</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/291bbb0cf7ca45c8b86021356f50f288~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>如果这段代码没有<code>return</code>的话</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> f = f &#123;</span><br><span class="line">    println(<span class="string">&quot;lambda&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">println(f)</span><br></pre></td></tr></table></figure><p>输出的将会是:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> function</span><br><span class="line">lambda</span><br><span class="line">有返回值</span><br></pre></td></tr></table></figure><p>有<code>return</code>的话:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> f = f &#123;</span><br><span class="line">    println(<span class="string">&quot;lambda&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// 这段代码没有 return</span></span><br><span class="line">&#125;</span><br><span class="line">println(f)</span><br></pre></td></tr></table></figure><p>代码将会是下面这样:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">val</span> f = f &#123;</span><br><span class="line">println(<span class="string">&quot;inline function&quot;</span>)</span><br><span class="line">println(<span class="string">&quot;lambda&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="comment">// 这里直接返回了, 后面的 有返回值 不会再赋值给变量f</span></span><br><span class="line"><span class="string">&quot;有返回值&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">println(f) <span class="comment">// &quot;有返回值&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以返回的<code>&quot;有返回值&quot;</code>没有传递给变量<code>f</code>, 在后面的<code>println(f)</code>不会打印出”有返回值”这几个字</p><blockquote><p>记住这和前面<strong>内联函数返回值不同</strong>, 这是<strong>内联函数参数的返回值</strong></p><p><strong>内联函数的返回</strong>将会被去掉<code>return</code>赋值给变量或者凭空执行</p><p><strong>内联函数参数的返回值</strong>将会不经过处理, 直接原封不动的拷贝过去</p></blockquote><h3 id="为什么要引入内联函数"><a href="#为什么要引入内联函数" class="headerlink" title="为什么要引入内联函数?"></a>为什么要引入内联函数?</h3><blockquote><p>答: 让<strong>内联函数</strong>中的<code>lambda参数</code>不再<code>创建对象</code></p></blockquote><p>看代码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">f</span><span class="params">(param: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;inline function&quot;</span>)</span><br><span class="line">    param()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   println(<span class="string">&quot;进入 f 函数之前: &quot;</span>)</span><br><span class="line">   f &#123; println(<span class="string">&quot;lambda&quot;</span>) &#125;</span><br><span class="line">   println(<span class="string">&quot;进入 f 函数之后&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译后会发现 <code>f &#123; println(&quot;lambda&quot;) &#125;</code> 这段代码变成 <code>f((Function0)null.INSTANCE);</code> 看到没???</p><p><code>lambda</code> 表达式创建了个<code>对象</code>, 这是一次损耗</p><p>在 <code>kotlin</code> 中 类似 <code>f</code> 函数这种参数有函数类型的高阶函数有很多很多, 每次传递 <code>lambda</code> 到这些高阶函数中都需要创建一个对象, 太损耗性能了, 所以不得不引用内联函数这项功能</p><p>前面说过, 有了内联函数, <code>调用内联函数的位置将被替换成内联函数的函数体</code>, 这样就少创建了个 <code>&#123; println(&quot;lambda&quot;) &#125;</code> 对象</p><h3 id="有什么缺点"><a href="#有什么缺点" class="headerlink" title="有什么缺点?"></a>有什么缺点?</h3><p>答: 缺点很明显, <strong>内联函数只针对有函数类型参数的函数内联</strong>, 主要的目的为了<strong>防止 <code>lambda</code> 多创建的 对象</strong>, 但如果<strong>内联函数的函数体比较大, 且函数调用的位置比较多, 则会造成字节码大量膨胀</strong>, 影响 <code>apk</code> 包的大小</p><p>所以通常内联函数都比较短小, 特别是项目对 <code>app</code> 大小有严格要求的情况下, 更需要注意</p><h2 id="高阶函数控制流"><a href="#高阶函数控制流" class="headerlink" title="高阶函数控制流"></a>高阶函数控制流</h2><blockquote><p><code>kotlin</code> 中的非内联<code>lambda</code>不允许显示的使用<code>return</code>(它不需要, 只要返回值放在表达式末尾就是返回值), 而内联的 <code>lambda</code> 表达式可以显示的使用<code>return</code>, 但返回的是外部调用它的函数, 内联 <code>lambda</code> 的<code>return</code>会穿透一层作用域</p></blockquote><h3 id="lambda-返回最后一行的值"><a href="#lambda-返回最后一行的值" class="headerlink" title="lambda 返回最后一行的值"></a>lambda 返回最后一行的值</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">running</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>, funcType: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>)</span></span> = funcType(a, b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   running(<span class="number">10</span>, <span class="number">20</span>) &#123;x: <span class="built_in">Int</span>, y: <span class="built_in">Int</span> -&gt;</span><br><span class="line">      x + y</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这种返回方式和下面这种一样</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</span><br><span class="line">    running(<span class="number">10</span>, <span class="number">20</span>, <span class="function"><span class="title">fun</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内联函数的非局部返回"><a href="#内联函数的非局部返回" class="headerlink" title="内联函数的非局部返回"></a>内联函数的<strong>非局部返回</strong></h3><blockquote><p>看似是局部(<code>lambda</code>)的<code>return</code>, 其实是调用 <code>lambda</code> 函数的 <code>return</code></p></blockquote><blockquote><p><strong>lambda内的<code>return</code>会穿透一层作用域</strong></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">running</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>, funcType: (<span class="type">Int</span>) -&gt; <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">   funcType(a + b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   println(<span class="string">&quot;调用之前: &quot;</span>)</span><br><span class="line">   <span class="comment">// 下面这种方式是错误的, return it 返回的是 main 函数</span></span><br><span class="line">   running(<span class="number">10</span>, <span class="number">20</span>) &#123;</span><br><span class="line">      println(it)</span><br><span class="line">      <span class="keyword">return</span> it <span class="comment">// 这就是 非局部返回</span></span><br><span class="line">   &#125;</span><br><span class="line">   println(<span class="string">&quot;调用之后&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的 <code>return it</code> 就是非局部返回, 返回的 <code>main</code> 函数</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7cef718ec7e45d181469dc4423db09a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>所以上面的提示就是让你修改 main 函数的返回值</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/518b39e194e8431a87d496e788a02d5f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们可以给 <code>return</code> 表达式一个标签<code>return @running it</code>, 返回的是<code>running</code>函数</p><h3 id="noinline用于未调用的lambda函数类型参数"><a href="#noinline用于未调用的lambda函数类型参数" class="headerlink" title="noinline用于未调用的lambda函数类型参数"></a><code>noinline</code>用于未调用的<code>lambda</code>函数类型参数</h3><p>防止照抄内联函数参数的参数名称到 main 函数中, 导致无法识别的问题</p><p>比如: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">println(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> funcType02; <span class="comment">// 这能不报错?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它在下面是 <code>running</code> 函数的 参数名<code>funcType02: (Int) -&gt; Unit</code></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f2b3cda92d58433bbae2e563bc14c5c8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>此时我们可以添加<code>noinline</code> 关键字</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">running</span><span class="params">(funcType01: (<span class="type">String</span>) -&gt; <span class="type">Unit</span>, <span class="keyword">noinline</span> funcType02: (<span class="type">Int</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">    funcType01(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> funcType02</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    running(&#123; println(it) &#125;, &#123; println(it * <span class="number">10</span>) &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/557f065e4ed146b19a3b512aba965e1c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>注意, 如果内联函数的 lambda 参数没有被调用, 最好使用使用 <code>noinline</code> 的话, 否则将会变成这样:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27a5526b8f4e469a8cc4b64cb5358447~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="crossinline-的使用场景"><a href="#crossinline-的使用场景" class="headerlink" title="crossinline 的使用场景"></a><code>crossinline</code> 的使用场景</h3><blockquote><p>主要用于 <code>函数参数lambda</code> 参数的<code>lambda</code>作为函数体内另一个函数调用时使用, 说白了就是<strong>间接调用</strong></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="keyword">interface</span> MyRunnable &#123;</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">myF</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">running</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>, <span class="keyword">crossinline</span> funcType: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">   MyRunnable &#123; </span><br><span class="line">      <span class="comment">// 在作用域的作用域内使用</span></span><br><span class="line">      println(funcType(a, b))</span><br><span class="line">   &#125;.myF()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   running(<span class="number">10</span>, <span class="number">20</span>) &#123; x, y -&gt;</span><br><span class="line">      x + y</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>crossinline</code> 需要配合 <code>inline</code> 的使用, 主要用于函数类型参数, 防止函数类型参数传递的是 <code>lambda</code> 函数体时, <code>间接调用</code>使用, <strong>如果该间接调用<code>lambda</code>内有<code>return</code>, 该修饰符能够防止非局部返回出现</strong>, 导致函数穿透一层作用域返回 <code>running</code> 函数</p><blockquote><p>上面的 <code>noinline</code>和<code>crossinline</code>都不用我们去学, 等到报错, <code>ide</code>会提醒, 并修复的</p></blockquote><h3 id="lambda中的局部返回"><a href="#lambda中的局部返回" class="headerlink" title="lambda中的局部返回"></a>lambda中的局部返回</h3><h4 id="带标签的return是什么"><a href="#带标签的return是什么" class="headerlink" title="带标签的return是什么?"></a>带标签的<code>return</code>是什么?</h4><p>类似于 <code>for</code> 循环中的 <code>break</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = arrayListOf(Person(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), Person(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>), Person(<span class="string">&quot;c&quot;</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> (person <span class="keyword">in</span> list) &#123;</span><br><span class="line">   <span class="keyword">if</span> (person.name == <span class="string">&quot;b&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">   &#125;</span><br><span class="line">   println(person)</span><br><span class="line">&#125;</span><br><span class="line">list.forEach &#123;</span><br><span class="line">   <span class="keyword">if</span> (it.name == <span class="string">&quot;b&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span><span class="symbol">@forEach</span></span><br><span class="line">   &#125;</span><br><span class="line">   println(it)</span><br><span class="line">&#125;</span><br><span class="line">list.forEach <span class="symbol">label@</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (it.name == <span class="string">&quot;b&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span><span class="symbol">@label</span></span><br><span class="line">   &#125;</span><br><span class="line">   println(it)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这三种方式功能都差不多</p><p>标签是 <code>标签 + @</code> 标注在 <code>lambda</code> 表达式之前 <code>标签@&#123; /* lambda */ &#125;</code></p><p>使用的时候是 <code>return + @ + 标签</code> 中间没有空格, 这是返回</p><h4 id="带标签的-this"><a href="#带标签的-this" class="headerlink" title="带标签的 this"></a>带标签的 this</h4><p>和前面一样, 对 <code>lambda</code> 做标签 <code>标签@</code> , 然后在使用的时候可以 <code>this@标签.xxxx</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">println(StringBuilder().apply <span class="symbol">sb@</span> &#123;</span><br><span class="line">   listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).apply &#123;</span><br><span class="line">      <span class="keyword">this</span><span class="symbol">@sb</span>.append(<span class="keyword">this</span>.toString())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p><code>this@sb.append</code> 的 <code>append</code> IDEA无法智能提示, 需要我们主动手写</p></blockquote><h3 id="匿名函数使用的是-局部返回"><a href="#匿名函数使用的是-局部返回" class="headerlink" title="匿名函数使用的是 局部返回"></a>匿名函数使用的是 局部返回</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">running</span><span class="params">(funcType01: (<span class="type">String</span>) -&gt; <span class="type">Int</span>, <span class="keyword">noinline</span> funcType02: (<span class="type">Int</span>) -&gt; <span class="type">Unit</span>)</span></span>: (<span class="built_in">Int</span>) -&gt; <span class="built_in">Unit</span> &#123;</span><br><span class="line">   println(funcType01(<span class="string">&quot;zhazha&quot;</span>))</span><br><span class="line">   <span class="keyword">return</span> funcType02</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   println(<span class="string">&quot;调用之前: &quot;</span>)</span><br><span class="line">   running(<span class="function"><span class="title">fun</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">      println(str)</span><br><span class="line">      <span class="keyword">return</span> str.length</span><br><span class="line">   &#125;) &#123;</span><br><span class="line">      println(it * <span class="number">100</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   println(<span class="string">&quot;调用之后&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82400270d5e5477db0e41f2f1f0ce484~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>匿名函数在之前的章节中学习过, 这里就不做详解了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
            <tag> 匿名函数 </tag>
            
            <tag> 高阶函数 </tag>
            
            <tag> 函数类型 </tag>
            
            <tag> 作为参数的函数 </tag>
            
            <tag> 返回函数的函数 </tag>
            
            <tag> inline </tag>
            
            <tag> noinline </tag>
            
            <tag> crossline </tag>
            
            <tag> 非局部返回 </tag>
            
            <tag> 内联函数 </tag>
            
            <tag> 带标签的return </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、kotlin的运算符重载、约定和委托</title>
      <link href="/2022/12/03/07kotlin/%E4%B8%83%E3%80%81kotlin%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E3%80%81%E7%BA%A6%E5%AE%9A%E5%92%8C%E5%A7%94%E6%89%98/"/>
      <url>/2022/12/03/07kotlin/%E4%B8%83%E3%80%81kotlin%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%E3%80%81%E7%BA%A6%E5%AE%9A%E5%92%8C%E5%A7%94%E6%89%98/</url>
      
        <content type="html"><![CDATA[<h1 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h1><p>如果我们定义了个 <code>plus</code> 的操作符重载函数, 那么就可以在该类的实例上使用 <code>+</code> 运算符, 这就是<code>约定</code></p><p><code>kotlin</code> 规定了很多这种规定, 但这些规定程序员都可以不需要知道, 只要依靠 <code>IDEA</code> 的智能提示就行了</p><h1 id="重载算术运算符"><a href="#重载算术运算符" class="headerlink" title="重载算术运算符"></a>重载算术运算符</h1><h2 id="重载二元算术运算"><a href="#重载二元算术运算" class="headerlink" title="重载二元算术运算"></a>重载二元算术运算</h2><p>定义一个成员的 <code>plus</code> 操作符重载函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>(<span class="keyword">val</span> x: <span class="built_in">Int</span>, <span class="keyword">val</span> y: <span class="built_in">Int</span>) &#123;</span><br><span class="line">   <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Point</span>)</span></span>: Point &#123;</span><br><span class="line">      <span class="keyword">return</span> Point(<span class="keyword">this</span>.x + other.x, <span class="keyword">this</span>.y + other.y)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Point&#123;x = <span class="variable">$x</span>, y = <span class="variable">$y</span>&#125;&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> point2 = Point(<span class="number">1</span>, <span class="number">2</span>) + Point(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">   println(point2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>可以看出使用的是修饰符 <code>operator</code> 定义一个操作符重载函数</p></li><li><p><code>plus 函数</code>根据约定概念对应了运算符的 <code>+</code></p></li><li><p>对应的可重载的函数还有:</p></li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/760d9186bd6a457f975b6db0a7e39e32~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="4"><li>不论操作符重载函数如何写, 都不会影响操作符的优先级</li></ol><p>不会导致 <code>* /</code> 的优先级低于 <code>+ -</code></p><ol start="5"><li>可以定义扩展函数的操作符重载 ★</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> Point.<span class="title">plus</span><span class="params">(other: <span class="type">Point</span>)</span></span>: Point &#123;</span><br><span class="line">   <span class="keyword">return</span> Point(<span class="keyword">this</span>.x + other.x, <span class="keyword">this</span>.y + other.y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>kotlin</code> 既可以用成员函数重载操作符, 也可以用扩展函数重载操作符</p></blockquote><ol start="6"><li>操作符左右两边的类型可以不一样</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> Point.<span class="title">times</span><span class="params">(d: <span class="type">Double</span>)</span></span>: Point &#123;</span><br><span class="line">    <span class="keyword">return</span> Point((<span class="keyword">this</span>.x * d).toInt(), (<span class="keyword">this</span>.y * d).toInt())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(p * <span class="number">1.5</span>)</span><br></pre></td></tr></table></figure><p>需要注意: 操作符重载函数的左右两边顺序不可以调换, 上面定义的函数 <code>Point</code> 类型为左, <code>Double</code> 类型为右, 所以 <code>(1.5 * p)</code> 是不可以的, 如果需要则还得创建新的扩展操作符重载函数</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e61d0b4d9c9d402d993913f3b9781a9c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Double</span>.<span class="title">times</span><span class="params">(point: <span class="type">Point</span>)</span></span>: Point &#123;</span><br><span class="line">   <span class="keyword">return</span> Point((<span class="keyword">this</span> * point.x).toInt(), (<span class="keyword">this</span> * point.y).toInt())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>定义重载操作符扩展函数比较麻烦, 可以这样:</li></ol><blockquote><p>我建议在定义操作符重载函数时, 可以先把需要的运算公式写好, 比如我要写个将值为 <code>&#39;a&#39;</code> 的变量 <code>* 3</code> 得到 <code>&quot;aaa&quot;</code> 的字符串 这样的操作符重载扩展函数, 我们可以先写上 <code>val str: String = &#39;a&#39; * 3</code> </p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b18826af701d49a2a7a4c8fc2675833d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>然后我们可以创建扩展函数了</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Char</span>.<span class="title">times</span><span class="params">(count: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">   TODO(<span class="string">&quot;Not yet implemented&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>现在加上我们需要的功能和返回值</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Char</span>.<span class="title">times</span><span class="params">(count: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">   <span class="keyword">return</span> toString().repeat(count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不过需要注意, 生成的操作符重载扩展函数默认是 <code>private</code> 如果不需要可以删除掉 <code>private</code> 可见性修饰符</p></blockquote><p>同时注意, 上面这个扩展函数的亮点:  接收者是 <code>Char</code> 类型, 参数是 <code>Int</code> 类型, 但返回值是 <code>String</code> 类型, 也就是 <code>Char + Int = String</code> 看起来挺奇怪的~~~</p><ol start="8"><li><code>kotlin</code> 没有定义位运算符, 所以关于位的运算符都不可以重载, 不过<code>kotlin</code>提供了很多中缀调用函数</li></ol><ul><li><code>shl</code> 带符号左移</li><li><code>shr</code> 带符号右移</li><li><code>ushr</code> 无符号右移</li><li><code>and</code> 按位与</li><li><code>or</code> 按位或</li><li><code>xor</code> 异或</li><li><code>inv</code> 按位取反</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">println(<span class="number">0x0F</span> and <span class="number">0x0F</span>)</span><br></pre></td></tr></table></figure><h2 id="重载复合运算符"><a href="#重载复合运算符" class="headerlink" title="重载复合运算符"></a>重载复合运算符</h2><p>在 <code>kotlin</code> 中 <code>+=</code> 和 <code>-=</code> 这种运算符被称之为复合运算符</p><ol><li>复合运算符<code>+=</code>下, 面对可变对象的操作符重载, 它定义了新的引用对象, 这种可以直接复用前面写的对 <code>+</code> 的操作符重载函数</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = Point(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">point += Point(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// 这里不用再定义新的复合操作符重载函数了, 因为 point = point + Point(2, 3) 前面已经有关于它的 plus 操作符重载函数了</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用 <code>+=</code> 复合操作符修改容器内部的内容, 不重新分配新的引用时, 需要定义操作符重载函数了</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> arrayList = arrayListOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">arrayList += <span class="number">6</span></span><br></pre></td></tr></table></figure><p><code>+=</code> 操作符重载会定义一个叫 <code>plusAssign</code> 的函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> MutableCollection<span class="type">&lt;in T&gt;</span>.<span class="title">plusAssign</span><span class="params">(element: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.add(element)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>当同一个类写了 <code>plus</code> 和 <code>plusAssign</code> 两个操作符重载函数, 理论上这俩函数都会被调用, 所以 这俩操作符重载函数还是别同时存在了, 如果真要同时存在, 那么可以把接收者修改为 <code>val</code> 类型,这样 <code>plusAssign</code> 就失效了, 因为 <code>val</code> 不支持再次赋值</li></ol><h2 id="重载一元操作符"><a href="#重载一元操作符" class="headerlink" title="重载一元操作符"></a>重载一元操作符</h2><p>按照前面的小窍诀, 先写上一元操作符</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> point = Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">println(-point)</span><br></pre></td></tr></table></figure><p>然后借助 ide 能够生成 操作符重载扩展函数(你也可以选择成员函数)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> Point.<span class="title">unaryMinus</span><span class="params">()</span></span>: Point &#123;</span><br><span class="line">   <span class="keyword">return</span> Point(-<span class="keyword">this</span>.x, -<span class="keyword">this</span>.y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2c72ddc25c742fd9c8392c931204c52~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol><li><p>一元操作符没有参数</p></li><li><p>自增和自减操作符的函数重载</p></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> Point.<span class="title">inc</span><span class="params">()</span></span>: Point &#123;</span><br><span class="line">    <span class="keyword">return</span> Point(<span class="keyword">this</span>.x++, <span class="keyword">this</span>.y++)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自增操作符有这样的操作 <code>i++</code> 和 <code>++i</code>, 这两种方式在 <code>kotlin</code> 中重载操作符都是用的同一个扩展函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> decimal = BigDecimal(<span class="number">0</span>)</span><br><span class="line">decimal++</span><br><span class="line">println(decimal)</span><br><span class="line">++decimal</span><br><span class="line">println(decimal)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> BigDecimal.<span class="title">inc</span><span class="params">()</span></span>: BigDecimal = <span class="keyword">this</span>.add(BigDecimal.ONE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> BigDecimal.<span class="title">inc</span><span class="params">()</span></span>: BigDecimal = <span class="keyword">this</span>.add(BigDecimal.ONE)</span><br></pre></td></tr></table></figure><p>原本以为操作符重载函数相同,  ++i 和 i++ 将变得一样的效果结果发现</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>反编译后发现原来还是强大的 <code>kotlin</code> 编译器做的操作</p><p>i++ 反编译后将会变成这样: (大致的样子)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i++ 就会是下面那样: </span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">System.out.println(i);</span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// ++i 则会是这样: </span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><p>看到了么? 一个是 先打印再 +1, 另一个是先 +1 再打印, kotlin编译器 yyds</p><h1 id="重载比较运算符"><a href="#重载比较运算符" class="headerlink" title="重载比较运算符"></a>重载比较运算符</h1><p><code>==</code> <code>===</code> <code>!=</code> <code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> 等这些都是比较运算符</p><h2 id="等号运算符-equals"><a href="#等号运算符-equals" class="headerlink" title="等号运算符: equals"></a>等号运算符: <code>equals</code></h2><ol><li>根据<code>kotlin</code>的约定, <code>==</code> 和 <code>equals</code> 对应</li><li><code>==</code> 和 <code>!=</code> 可以和 <code>null</code> 做比较, 比如 <code>a.equals(b)</code> 中 <code>a</code> 会先判断 <code>null</code> , 然后再调用 <code>equals</code> 判断</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e50d14c1bc64225beb0ba7fab4792fa~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="3"><li><code>===</code> 恒等运算符</li></ol><p>(1) 恒等运算符和<code>java</code> 的 <code>==</code> 运算符一样, 比较的是 地址, <code>java</code> 中 叫 <code>引用</code></p><p>(2) 恒等运算符 <code>===</code> 不能被重载</p><ol start="4"><li><code>==</code> 运算符不支持扩展函数操作符重载</li></ol><p><code>==</code> 的约定是 <code>equals</code> 而 该函数在 <code>Any</code> 中已经存在, 此时定义操作符重载的扩展函数的话, 永远不会调用到, 因为 <code>Any</code> 成员函数的优先级永远高于扩展函数</p><ol start="5"><li>如果写了 <code>==</code> 的操作符重载扩展函数, 则不用再写个 <code>!=</code> 的操作符重载扩展函数了, <code>kotlin</code>编译器会帮你的</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">equals</span><span class="params">(obj: <span class="type">Any</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">   <span class="comment">// 比较引用(地址)</span></span><br><span class="line">   <span class="keyword">if</span> (obj === <span class="keyword">this</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">   <span class="comment">// 比较类型</span></span><br><span class="line">   <span class="keyword">if</span> (obj !<span class="keyword">is</span> Point) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">   <span class="keyword">return</span> (<span class="keyword">this</span>.x == obj.x) &amp;&amp; (<span class="keyword">this</span>.y == obj.y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> point1 = Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">val</span> point2 = Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> (point1 == point2) &#123;</span><br><span class="line">   println(<span class="literal">true</span>) <span class="comment">// true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   println(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>仔细看, <code>equals</code> 不是操作符重载函数, 而是重写函数, 所以根本没办法写 <code>equals</code> 的操作符重载函数</p></blockquote><h2 id="排序运算符-compareTo"><a href="#排序运算符-compareTo" class="headerlink" title="排序运算符: compareTo"></a>排序运算符: <code>compareTo</code></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3705c32062a249aa950c47aa7b17d7bc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>排序运算符有两种实现方式</p><ol><li>实现 <code>Comparable</code></li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/17a3ba583800406294aafab241c5ef72~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol start="2"><li>操作符重载函数</li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9359a356e8dc4925bda37b9a2fe5bca1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>我们会看到 <code>compareValuesBy</code> 函数, 该函数接受两个比较对象, 选择比较对象的字段, 依照传递参数的顺序比较, 如果<code>Person::firstName</code> 比较有结果(不相等的话)则后面不再比较 <code>Person::lastName</code></p></blockquote><h1 id="集合和约定-集合的操作符重载"><a href="#集合和约定-集合的操作符重载" class="headerlink" title="集合和约定(集合的操作符重载)"></a>集合和约定(集合的操作符重载)</h1><h2 id="操作符重载借助-get-set-操作对象"><a href="#操作符重载借助-get-set-操作对象" class="headerlink" title="[]操作符重载借助 get/set 操作对象"></a><code>[]</code>操作符重载借助 <code>get/set</code> 操作对象</h2><p>在 <code>kotlin</code> 中我们可以这样: </p><p>只读集合读取:<br><code>val value = map[key]</code></p><p>可变集合写入:<br><code>mutableMap[key] = value</code></p><p>这些操作都是 kotlin 底层的操作, 主要实现方式是借助 <code>get</code> 和 <code>set</code> 函数完成的, 如果是 读取 则 kotlin 会把读取改成 <code>get(key)</code> 函数, 如果是写入, 则 kotlin 会把它改成 <code>put(key, value)</code>(类似<code>set</code>这样的函数)</p><p>那么现在我们要怎么给自定义的类添加类似的操作呢??? </p><p>拿出前面的Point类为例, 以 <code>p[0]</code> 获取 <code>x 变量</code>, 以 <code>p[1]</code> 获取 <code>y</code> 变量</p><p>借助我们前面的小聪明, 利用 ide 生成了下面两个函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> Point.<span class="title">set</span><span class="params">(index: <span class="type">Int</span>, value: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">when</span>(index) &#123;</span><br><span class="line">      <span class="number">1</span> -&gt; <span class="keyword">this</span>.x = value</span><br><span class="line">      <span class="number">2</span> -&gt; <span class="keyword">this</span>.y = value</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> Point.<span class="title">get</span><span class="params">(index: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">when</span>(index) &#123;</span><br><span class="line">      <span class="number">1</span> -&gt; <span class="keyword">this</span>.x</span><br><span class="line">      <span class="number">2</span> -&gt; <span class="keyword">this</span>.y</span><br><span class="line">      <span class="keyword">else</span> -&gt; <span class="literal">null</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123; </span><br><span class="line">   <span class="keyword">val</span> point = Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">   println(point[<span class="number">0</span>])</span><br><span class="line">   println(point[<span class="number">1</span>])</span><br><span class="line">   </span><br><span class="line">   point[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">   point[<span class="number">1</span>] = <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出来 <code>index</code> 对应这 <code>p[index]</code> 的 <code>index</code>, 这样就可以借助约定规则, 使用 <code>get</code> 操作符重载函数方式实现我们的要求</p><h2 id="in-约定-contains函数"><a href="#in-约定-contains函数" class="headerlink" title="in 约定(contains函数)"></a>in 约定(contains函数)</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="keyword">val</span> upperLeft: Point, <span class="keyword">val</span> lowerRight: Point) &#123;</span><br><span class="line">   <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">contains</span><span class="params">(point: <span class="type">Point</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> point.x <span class="keyword">in</span> min(upperLeft.x, lowerRight.y) until max(lowerRight.x, upperLeft.x) &amp;&amp;</span><br><span class="line">            point.y <span class="keyword">in</span> min(upperLeft.y, lowerRight.y) until max(lowerRight.y, upperLeft.y)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> rectangle = Rectangle(Point(<span class="number">4</span>, <span class="number">4</span>), Point(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">   <span class="keyword">val</span> point = Point(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">   println(point <span class="keyword">in</span> rectangle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rangTo-约定-n-n-1"><a href="#rangTo-约定-n-n-1" class="headerlink" title="rangTo 约定 n..n+1"></a><code>rangTo</code> 约定 <code>n..n+1</code></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> now = LocalDateTime.now()</span><br><span class="line"><span class="keyword">val</span> vacation = now..now.plusDays(<span class="number">10</span>)</span><br><span class="line">println(now.plusWeeks(<span class="number">1</span>) <span class="keyword">in</span> vacation)</span><br></pre></td></tr></table></figure><p><code>now..now.plusDays(10)</code> 会被编译成</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClosedRange vacation = RangesKt.rangeTo((Comparable)now, (Comparable)now.plusDays(<span class="number">10L</span>));</span><br></pre></td></tr></table></figure><h2 id="for-循环中使用iterator约定-in"><a href="#for-循环中使用iterator约定-in" class="headerlink" title="for 循环中使用iterator约定 in"></a><code>for</code> 循环中使用<code>iterator</code>约定 <code>in</code></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (c <span class="keyword">in</span> <span class="string">&quot;abcd&quot;</span>) &#123;</span><br><span class="line">      println(c)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>in</code> 底层源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> CharSequence.<span class="title">iterator</span><span class="params">()</span></span>: CharIterator = <span class="keyword">object</span> : CharIterator() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">nextChar</span><span class="params">()</span></span>: <span class="built_in">Char</span> = <span class="keyword">get</span>(index++)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hasNext</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = index &lt; length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="invoke-约定"><a href="#invoke-约定" class="headerlink" title="invoke 约定"></a><code>invoke</code> 约定</h1><h2 id="类的-invoke-约定"><a href="#类的-invoke-约定" class="headerlink" title="类的 invoke 约定"></a>类的 <code>invoke</code> 约定</h2><p>把类对象当作函数调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span>(<span class="keyword">val</span> greeting: String) &#123;</span><br><span class="line">   <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(name: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">      println(<span class="string">&quot;<span class="variable">$greeting</span> <span class="variable">$name</span>&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> greeter = Greeter(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">   greeter(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KFunction-的-invoke-约定"><a href="#KFunction-的-invoke-约定" class="headerlink" title="KFunction 的 invoke 约定"></a><code>KFunction</code> 的 <code>invoke</code> 约定</h2><h3 id="函数类型当父类"><a href="#函数类型当父类" class="headerlink" title="函数类型当父类"></a>函数类型当父类</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Issue</span>(</span><br><span class="line">   <span class="keyword">val</span> id: String, <span class="keyword">val</span> project: String, <span class="keyword">val</span> type: String,</span><br><span class="line">   <span class="keyword">val</span> priority: String, <span class="keyword">val</span> description: String</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImportantIssuesPredicate</span>(<span class="keyword">val</span> project: String) : (Issue) -&gt; <span class="built_in">Boolean</span> &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">(issue: <span class="type">Issue</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> issue.project == project &amp;&amp; issue.isImportant()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> Issue.<span class="title">isImportant</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> type == <span class="string">&quot;Bug&quot;</span> &amp;&amp;</span><br><span class="line">            (priority == <span class="string">&quot;Major&quot;</span> || priority == <span class="string">&quot;Critical&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> issue1 = Issue(<span class="string">&quot;IDEA-154446&quot;</span>, <span class="string">&quot;IDEA&quot;</span>, <span class="string">&quot;Bug&quot;</span>, <span class="string">&quot;Major&quot;</span>, <span class="string">&quot;Save settings failed&quot;</span>)</span><br><span class="line">   <span class="keyword">val</span> issue2 = Issue(</span><br><span class="line">      <span class="string">&quot;KT-12183&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Kotlin&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Feature&quot;</span>,</span><br><span class="line">      <span class="string">&quot;Normal&quot;</span>,</span><br><span class="line">      <span class="string">&quot; Intention: convert several calls on the same receiver to with/apply&quot;</span></span><br><span class="line">   )</span><br><span class="line">   <span class="keyword">val</span> predicate = ImportantIssuesPredicate(<span class="string">&quot;IDEA&quot;</span>)</span><br><span class="line">   listOf(issue1, issue2).filter(predicate).forEach &#123;</span><br><span class="line">      println(it.id)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>class ImportantIssuesPredicate(val project: String) : (Issue) -&gt; Boolean</code> 看这个</p><p>前面学过的, 函数类型里面有一个函数, 它就是 <code>invoke</code>, 所以我们的类<code>ImportantIssuesPredicate</code>继承了函数类型, 就必须重写<code>invoke</code>函数</p><p>而下面的 <code>listOf(issue1, issue2).filter(predicate)</code> 这里的过滤函数可以传入 <code>ImportantIssuesPredicate</code>类, 说明该类本质上还是 <code>(Issue) -&gt; Boolean</code> , 只不过多存储了 个属性 <code>project</code> 和扩展函数<code>isImportant</code></p><h1 id="解构声明和组件函数componentN"><a href="#解构声明和组件函数componentN" class="headerlink" title="解构声明和组件函数componentN"></a>解构声明和组件函数<code>componentN</code></h1><p>将一个复合值展开, 用来初始化多个变量, 这就是解构声明</p><p>但如果要实现普通对象的解构, 需要添加组件函数, </p><p>下图显示的就是普通函数无法使用解构声明, 需要创建成员组件函数或者扩展组件函数, 当然还可以将类改成数据类 <code>data class Point</code></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e483558715e4c66a288f33c767723a5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> Point.<span class="title">component1</span><span class="params">()</span></span>: <span class="built_in">Int</span> = x</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> Point.<span class="title">component2</span><span class="params">()</span></span>: <span class="built_in">Int</span> = y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> p = Point(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">   <span class="keyword">val</span> (x, y) = p</span><br><span class="line">   println(<span class="string">&quot;x = <span class="variable">$x</span>, y = <span class="variable">$y</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的解构声明就是按照组件函数来分配复合函数解构出来的值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">NameComponents</span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> extension: String)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">splitFileName</span><span class="params">(fullName: <span class="type">String</span>)</span></span>: NameComponents &#123;</span><br><span class="line">   <span class="keyword">val</span> split = fullName.split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">   <span class="keyword">return</span> NameComponents(split[<span class="number">0</span>], split[<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> (name, extension) = splitFileName(<span class="string">&quot;1.txt&quot;</span>)</span><br><span class="line">   println(<span class="string">&quot;name = <span class="variable">$name</span>, extension = <span class="variable">$extension</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现了一个函数返回多个值的功能, 但解构声明也不是无限的, 它仅允许解析一个对象前5个字段</p></blockquote><h1 id="重用属性访问的逻辑-委托事件"><a href="#重用属性访问的逻辑-委托事件" class="headerlink" title="重用属性访问的逻辑: 委托事件"></a>重用属性访问的逻辑: 委托事件</h1><h2 id="委托属性的基本用法-约定-by-和-getValue-setValue-函数"><a href="#委托属性的基本用法-约定-by-和-getValue-setValue-函数" class="headerlink" title="委托属性的基本用法(约定 by 和 getValue/setValue 函数)"></a>委托属性的基本用法(约定 <code>by</code> 和 <code>getValue/setValue</code> 函数)</h2><p>在前面的委托类中我们知道, 委托的本质是借鸡生蛋</p><p>类委托本质是, 委托人继承了某个接口, 但该接口函数的实现委托人委托给了另一个同样实现了该接口的子类对象, 并且以类组合的方式调用函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="type">InterfaceB</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">()</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="keyword">val</span> cObject: InterfaceB = C()) : InterfaceB <span class="keyword">by</span> cObject &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">()</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">        cObject.doSomething()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而本章节的属性委托的本质是: 属性把<code>get/set函数</code>交给另一个同样实现的了<code>get/set(getValue/setValue)</code>的对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p:Type <span class="keyword">by</span> Delegate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中 <code>Deletgate()</code> 在委托期间会产生对象, 用于初始化 <code>p</code> 属性, 而委托人需要按照约定定义才能够被 <code>by</code> 委托</p><p>而这份约定协议是这样: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Delegate</span> : <span class="type">ReadWriteProperty</span>&lt;<span class="type">Foo, String</span>&gt; &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">Foo</span>, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</span><br><span class="line">      TODO(<span class="string">&quot;Not yet implemented&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(thisRef: <span class="type">Foo</span>, property: <span class="type">KProperty</span>&lt;*&gt;, value: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">      TODO(<span class="string">&quot;Not yet implemented&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>约定表明了, 约定对象需要实现 <code>ReadWriteProperty</code>接口</p><p>或者约定是这样的: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Delegate</span> &#123;</span><br><span class="line">   <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(foo: <span class="type">Foo</span>, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</span><br><span class="line">      TODO(<span class="string">&quot;Not yet implemented&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(foo: <span class="type">Foo</span>, property: <span class="type">KProperty</span>&lt;*&gt;, s: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">      TODO(<span class="string">&quot;Not yet implemented&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要定义两个操作符重载 <code>getValue/setValue</code> 函数</p><p>上面这两种约定都可以</p><blockquote><p>记住, 委托是委托给另一个对象的 <code>getValue</code> 和 <code>setValue</code> , 但不仅仅是 这两 函数, 还可以是 <code>get</code> 和 <code>set</code> 函数, 只要委托的对象可以 <code>println(object[&quot;propertyName&quot;])</code> 或者 <code>object[&quot;propertyName&quot;] = value</code>, 都可以被当做委托的对象(<code>by</code>后面的对象)</p></blockquote><p>为什么我会这么认为呢? 看 gradle 的 kts </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> compileKotlin: KotlinCompile <span class="keyword">by</span> tasks</span><br><span class="line">println(compileKotlin.javaClass)</span><br><span class="line">compileKotlin.kotlinOptions &#123;</span><br><span class="line">   freeCompilerArgs = listOf(<span class="string">&quot;-opt-in=kotlin.RequiresOptIn&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> ck = tasks[<span class="string">&quot;compileKotlin&quot;</span>] <span class="keyword">as</span> KotlinCompile</span><br><span class="line">ck.kotlinOptions &#123;</span><br><span class="line">   freeCompilerArgs = listOf(<span class="string">&quot;-opt-in=kotlin.RequiresOptIn&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>tasks</code> 只有 <code>get</code> 方法</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bed760e34f4d4490bca00bf977bfb1e8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="使用委托属性-惰性初始化和by-lazy"><a href="#使用委托属性-惰性初始化和by-lazy" class="headerlink" title="使用委托属性: 惰性初始化和by lazy()"></a>使用委托属性: 惰性初始化和<code>by lazy()</code></h2><h3 id="使用另一个属性来实现懒加载-▲"><a href="#使用另一个属性来实现懒加载-▲" class="headerlink" title="使用另一个属性来实现懒加载 ▲"></a>使用另一个属性来实现懒加载 ▲</h3><p>以前我们要实现属性懒加载的话, 需要借助临时可空属性, 在第一次需要加载该属性是判断下临时属性是否为 <code>null</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">var</span> _emails: List&lt;String&gt;? = <span class="literal">null</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">val</span> email: List&lt;String&gt;</span><br><span class="line">      <span class="keyword">get</span>() &#123;</span><br><span class="line">         <span class="keyword">if</span> (_emails == <span class="literal">null</span>) &#123;</span><br><span class="line">            _emails = loadEmail(<span class="keyword">this</span>)</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> _emails!!</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadEmail</span><span class="params">(person: <span class="type">Person</span>)</span></span>: List&lt;String&gt;? &#123;</span><br><span class="line">      <span class="keyword">return</span> listOf(<span class="string">&quot;2033@qq.com&quot;</span>, <span class="string">&quot;2133@qq.com&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方式使用的比较多, 不需要任何概念, 直接搞了个懒加载属性, 而且从代码上判断我们的<code>email</code> 属性完全依赖 <code>_email</code> 所以翻译成 <code>java</code> 源码时肯定是只有 <code>_email</code> 属性的, 而 <code>email</code> 仅有 <code>get/set</code> 函数(这里是 <code>val</code>所以只有 <code>get</code>)</p></blockquote><h3 id="kotlin提供的-lazy-函数实现懒加载"><a href="#kotlin提供的-lazy-函数实现懒加载" class="headerlink" title="kotlin提供的 lazy 函数实现懒加载"></a><code>kotlin</code>提供的 <code>lazy</code> 函数实现懒加载</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">   <span class="keyword">val</span> emails <span class="keyword">by</span> lazy &#123; loadEmail() &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadEmail</span><span class="params">()</span></span>: List&lt;String&gt; &#123;</span><br><span class="line">      println(<span class="string">&quot;loadEmail被调用&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> listOf(<span class="string">&quot;2033@qq.com&quot;</span>, <span class="string">&quot;2933@qq.com&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><code>lazy</code> 是一个标准库函数, 他的参数是 lambda <code>() -&gt; T</code> 而<code>lazy</code>返回值是 lambda 的返回值, </p></li><li><p><code>lazy</code> 是线程安全的, <code>lazy</code>可以根据需要切换你想要的线程锁, 或者完全关闭锁</p></li><li><p><code>lazy</code> 函数最后会返回一个存在<code>getValue</code>函数的对象</p></li></ol><h3 id="lazy-源码分析"><a href="#lazy-源码分析" class="headerlink" title="lazy 源码分析"></a><code>lazy</code> 源码分析</h3><ul><li>从这里开始分析</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> emails <span class="keyword">by</span> lazy &#123; loadEmail() &#125;</span><br></pre></td></tr></table></figure><ul><li>使用 <code>by</code> 属性的话, 正常来说会调用 <code>by</code> 后面对象的 <code>getValue/setValue</code> 函数, 看情况, <code>lazy</code> 应该有实现 <code>getValue</code> 函数</li></ul><p><code>lazy &#123; loadEmail() &#125;</code> 这个返回的绝对是一个对象, 且应该有 <code>getValue</code>或者<code>setValue</code> 函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">actual</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">lazy</span><span class="params">(initializer: () -&gt; <span class="type">T</span>)</span></span>: Lazy&lt;T&gt; = SynchronizedLazyImpl(initializer)</span><br></pre></td></tr></table></figure><p>发现它 <code>new</code> 了个 <code>SynchronizedLazyImpl</code> 这个类对象</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">SynchronizedLazyImpl</span>&lt;<span class="type">out T</span>&gt;(initializer: () -&gt; T, lock: Any? = <span class="literal">null</span>) : Lazy&lt;T&gt;, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> initializer: (() -&gt; T)? = initializer</span><br><span class="line">    <span class="meta">@Volatile</span> <span class="keyword">private</span> <span class="keyword">var</span> _value: Any? = UNINITIALIZED_VALUE</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> lock = lock ?: <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> value: T</span><br><span class="line">        <span class="keyword">get</span>() &#123; <span class="comment">// 略 &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是核心算法, 要分析也是分析上面这段代码, 但 getValue 这种函数呢??? </p><p>可以选择安装 IDEA 的 <code>extSee</code> 插件, 然后查看 <code>扩展函数</code></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2d7136a2ce9742a883019271648d4137~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec29135920844d33a9618ad928747138~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Lazy<span class="type">&lt;T&gt;</span>.<span class="title">getValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: T = value</span><br></pre></td></tr></table></figure><p>发现它调用的是 <code>value</code> 的 <code>get</code> 函数</p><p>现在分析他的核心方法就行</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> value: T</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">val</span> _v1 = _value</span><br><span class="line">        <span class="keyword">if</span> (_v1 !== UNINITIALIZED_VALUE) &#123;</span><br><span class="line">            <span class="meta">@Suppress(<span class="string">&quot;UNCHECKED_CAST&quot;</span>)</span></span><br><span class="line">            <span class="keyword">return</span> _v1 <span class="keyword">as</span> T <span class="comment">// return _v1 赋值给 email 变量</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上线程锁. 这里的 lock 其实是 this 对象</span></span><br><span class="line">        <span class="keyword">return</span> synchronized(lock) &#123;</span><br><span class="line">            <span class="keyword">val</span> _v2 = _value</span><br><span class="line">            <span class="keyword">if</span> (_v2 !== UNINITIALIZED_VALUE) &#123;</span><br><span class="line">                <span class="meta">@Suppress(<span class="string">&quot;UNCHECKED_CAST&quot;</span>)</span> (_v2 <span class="keyword">as</span> T) <span class="comment">// return _v2 赋值给 email 变量</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// lambda 的返回值, 返回出去</span></span><br><span class="line">                <span class="keyword">val</span> typedValue = initializer!!()</span><br><span class="line">                <span class="comment">// 存放在 _value 中, 等待下次判断, 如果 !== UNINITIALIZED_VALUE 直接返回对象</span></span><br><span class="line">                _value = typedValue</span><br><span class="line">                <span class="comment">// 初始化 lambda </span></span><br><span class="line">                initializer = <span class="literal">null</span></span><br><span class="line">                <span class="comment">// 返回 lambda 返回值对象</span></span><br><span class="line">                typedValue  <span class="comment">// return typedValue 赋值给 email 变量</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中 <code>_value</code> 刚开始的时候初始化的 <code>UNINITIALIZED_VALUE</code>, 等到被赋值了 lambda 的返回值后, 就可以通过 <code>!== UNINITIALIZED_VALUE</code> 判断是否被赋值过</p><p>而 <code>_value</code> 和 <code>value</code> 的实现, 和前面的 这一章节 <strong>使用另一个属性来实现懒加载 ▲</strong> 的方式一摸一样, 实现的懒加载方式</p><p>所以开始委托的时候 <code>_value</code> 被初始化, 但 <code>value</code> 还是空的(不, <code>value</code> 其实根本没这个字段)</p><h2 id="实现委托属性"><a href="#实现委托属性" class="headerlink" title="实现委托属性"></a>实现委托属性</h2><p>前面学过, 我们可以借助另外一个对象, 实现延迟功能, 我们也可以这样实现委托功能</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ObservableProperty</span>(<span class="keyword">val</span> propName: String, <span class="keyword">var</span> propValue: Number, <span class="keyword">val</span> supportChange: PropertyChangeSupport) &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">()</span></span>: Number &#123;</span><br><span class="line">      <span class="keyword">return</span> propValue</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(value: <span class="type">Number</span>)</span></span> &#123;</span><br><span class="line">      supportChange.firePropertyChange(propName, propValue, value)</span><br><span class="line">      propValue = value</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(_name: String, _age: <span class="built_in">Int</span>, _scope: <span class="built_in">Double</span>) &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">val</span> supportChange = PropertyChangeSupport(<span class="keyword">this</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">val</span> name: String = _name</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">val</span> __age = ObservableProperty(<span class="string">&quot;age&quot;</span>, _age, supportChange)</span><br><span class="line">   <span class="keyword">var</span> age: <span class="built_in">Int</span></span><br><span class="line">      <span class="keyword">get</span>() = __age.getValue() <span class="keyword">as</span> <span class="built_in">Int</span></span><br><span class="line">      <span class="keyword">set</span>(value) &#123;</span><br><span class="line">         __age.setValue(value)</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">val</span> __scope = ObservableProperty(<span class="string">&quot;scope&quot;</span>, _scope, supportChange)</span><br><span class="line">   <span class="keyword">var</span> scope: <span class="built_in">Double</span></span><br><span class="line">      <span class="keyword">get</span>() = __scope.getValue() <span class="keyword">as</span> <span class="built_in">Double</span></span><br><span class="line">      <span class="keyword">set</span>(value) &#123;</span><br><span class="line">         __scope.setValue(value)</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">addPropertyChangeEvent</span><span class="params">(listener: <span class="type">PropertyChangeListener</span>)</span></span> &#123;</span><br><span class="line">      supportChange.addPropertyChangeListener(listener)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">removePropertyChangeEvent</span><span class="params">(listener: <span class="type">PropertyChangeListener</span>)</span></span> &#123;</span><br><span class="line">      supportChange.removePropertyChangeListener(listener)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> person = Person(<span class="string">&quot;zhazha&quot;</span>, <span class="number">23</span>, <span class="number">98798.0</span>)</span><br><span class="line">   person.addPropertyChangeEvent &#123;</span><br><span class="line">      PropertyChangeListener &#123;</span><br><span class="line">         println(<span class="string">&quot;field <span class="subst">$&#123;it.propertyName&#125;</span> changed from <span class="subst">$&#123;it.oldValue&#125;</span> to <span class="subst">$&#123;it.newValue&#125;</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   person.age = <span class="number">22</span></span><br><span class="line">   person.scope = <span class="number">1000000.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子使用的是 <code>PropertyChangeSupport</code>, 用来监控属性变化, 如果属性值修改, 则会被监控到(不过这个类好像用于 <code>UI</code> 显示用的, 反正我没效果)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ObservableProperty</span>(_propValue: <span class="built_in">Int</span>, _supportChange: PropertyChangeSupport) : ReadWriteProperty&lt;Person, <span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">var</span> propValue: <span class="built_in">Int</span> = _propValue</span><br><span class="line">   <span class="keyword">val</span> supportChange = _supportChange</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">Person</span>, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> propValue</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(thisRef: <span class="type">Person</span>, property: <span class="type">KProperty</span>&lt;*&gt;, value: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">      supportChange.firePropertyChange(property.name, propValue, value)</span><br><span class="line">      propValue = value</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">PropertyChangeAware</span> &#123;</span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">val</span> supportChange = PropertyChangeSupport(<span class="keyword">this</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">addPropertyChangeEvent</span><span class="params">(listener: <span class="type">PropertyChangeListener</span>)</span></span> &#123;</span><br><span class="line">      supportChange.addPropertyChangeListener(listener)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">removePropertyChangeEvent</span><span class="params">(listener: <span class="type">PropertyChangeListener</span>)</span></span> &#123;</span><br><span class="line">      supportChange.removePropertyChangeListener(listener)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(_name: String, _age: <span class="built_in">Int</span>, _salary: <span class="built_in">Int</span>) : PropertyChangeAware() &#123;</span><br><span class="line">   <span class="keyword">val</span> name: String = _name</span><br><span class="line">   <span class="keyword">var</span> age: <span class="built_in">Int</span> <span class="keyword">by</span> ObservableProperty(_age, supportChange)</span><br><span class="line">   <span class="keyword">var</span> salary: <span class="built_in">Int</span> <span class="keyword">by</span> ObservableProperty(_salary, supportChange)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> person = Person(<span class="string">&quot;zhazha&quot;</span>, <span class="number">22</span>, <span class="number">17000</span>)</span><br><span class="line">   person.addPropertyChangeEvent &#123;</span><br><span class="line">      PropertyChangeListener &#123;</span><br><span class="line">         println(<span class="string">&quot;field <span class="subst">$&#123;it.propertyName&#125;</span> changed <span class="subst">$&#123;it.oldValue&#125;</span> to <span class="subst">$&#123;it.newValue&#125;</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   person.age = <span class="number">23</span></span><br><span class="line">   person.salary = <span class="number">500000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>委托的本质前面已经说过了, 借鸡生蛋, 把自己的 get&#x2F;set 函数能力转移给另一个对象(委托对象), 从这段代码看, 就是这样的, 借助一个对象和对象内的 <code>getValue/setValue</code> 函数进行初始化</p></blockquote><p>我们还可以用内置的委托类完成上面的功能, 这样就不需要自己再写了(太麻烦了~~~)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">PropertyChangeAware</span> &#123;</span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">val</span> supportChange = PropertyChangeSupport(<span class="keyword">this</span>)</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">addPropertyChangeEvent</span><span class="params">(listener: <span class="type">PropertyChangeListener</span>)</span></span> &#123;</span><br><span class="line">      supportChange.addPropertyChangeListener(listener)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">removePropertyChangeEvent</span><span class="params">(listener: <span class="type">PropertyChangeListener</span>)</span></span> &#123;</span><br><span class="line">      supportChange.removePropertyChangeListener(listener)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(_name: String, _age: <span class="built_in">Int</span>, _salary: <span class="built_in">Int</span>) : PropertyChangeAware() &#123;</span><br><span class="line">   <span class="keyword">val</span> name: String = _name</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">val</span> observer = &#123; property: KProperty&lt;*&gt;, oldValue: <span class="built_in">Int</span>, newValue: <span class="built_in">Int</span> -&gt;</span><br><span class="line">      supportChange.firePropertyChange(property.name, oldValue, newValue)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> age: <span class="built_in">Int</span> <span class="keyword">by</span> Delegates.observable(_age, observer)</span><br><span class="line">   <span class="keyword">var</span> salary: <span class="built_in">Int</span> <span class="keyword">by</span> Delegates.observable(_salary, observer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> person = Person(<span class="string">&quot;zhazha&quot;</span>, <span class="number">22</span>, <span class="number">20000</span>)</span><br><span class="line">   person.addPropertyChangeEvent &#123;</span><br><span class="line">      PropertyChangeListener &#123;</span><br><span class="line">         println(<span class="string">&quot;field <span class="subst">$&#123;it.propertyName&#125;</span> changed <span class="subst">$&#123;it.oldValue&#125;</span> to <span class="subst">$&#123;it.newValue&#125;</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   person.age = <span class="number">23</span></span><br><span class="line">   person.salary = <span class="number">5000000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从目前掌握的来看, <code>by</code> 关键字 右边可以是: 函数调用, 另一个属性或者其他任意表达式, 只要能满足委托功能便可</p></blockquote><h2 id="委托的观察者模式"><a href="#委托的观察者模式" class="headerlink" title="委托的观察者模式"></a>委托的观察者模式</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.properties.Delegates</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> observed = <span class="literal">false</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">var</span> max: <span class="built_in">Int</span> <span class="keyword">by</span> Delegates.observable(<span class="number">0</span>) &#123; property, oldValue, newValue -&gt;</span><br><span class="line">      <span class="comment">// property: var delegate13.observable.Person.max: kotlin.Int, oldValue: 0, newValue: 13</span></span><br><span class="line">      println(<span class="string">&quot;property: <span class="variable">$property</span>, oldValue: <span class="variable">$oldValue</span>, newValue: <span class="variable">$newValue</span>&quot;</span>)</span><br><span class="line">      observed = <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> person = Person()</span><br><span class="line">   println(person.observed) <span class="comment">// false</span></span><br><span class="line">   println(person.max) <span class="comment">// 0</span></span><br><span class="line">   person.max = <span class="number">13</span></span><br><span class="line">   println(person.max) <span class="comment">// 13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性委托的变化规则"><a href="#属性委托的变化规则" class="headerlink" title="属性委托的变化规则"></a>属性委托的变化规则</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> prop: Type <span class="keyword">by</span> MyDelegate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>MyDelegate</code> 将会生成一个属性<code>&lt;delegate&gt;</code> 同时使用 <code>KProperty</code>类型对象来代表该对象的类型, 它被称为<code>&lt;property&gt;</code></p><p>编译器生成代码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> &lt;delegate&gt; = MyDelegate()</span><br><span class="line">    <span class="keyword">var</span> prop: Type</span><br><span class="line">        <span class="keyword">get</span>() = &lt;delegate&gt;.getValue(<span class="keyword">this</span>, &lt;property&gt;)</span><br><span class="line">        <span class="keyword">set</span>(value) = &lt;delegate&gt;.setValue(<span class="keyword">this</span>, &lt;property&gt;, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在-map-中保存属性值"><a href="#在-map-中保存属性值" class="headerlink" title="在 map 中保存属性值"></a>在 map 中保存属性值</h2><blockquote><p><code>by</code> 委托给一个 <code>map</code> 对象的情况</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">val</span> _attributes = hashMapOf&lt;String, String&gt;()</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">setAttributes</span><span class="params">(attrName: <span class="type">String</span>, value: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">      _attributes[attrName] = value</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// get() = _attributes[&quot;name&quot;]!!</span></span><br><span class="line">   <span class="keyword">val</span> name: String <span class="keyword">by</span> _attributes</span><br><span class="line">   <span class="comment">// get() = _attributes[&quot;company&quot;]!!</span></span><br><span class="line">   <span class="keyword">val</span> company: String <span class="keyword">by</span> _attributes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> person02 = MapDemo.Person()</span><br><span class="line">   <span class="keyword">val</span> <span class="keyword">data</span> = mapOf(<span class="string">&quot;name&quot;</span> to <span class="string">&quot;Dmitry&quot;</span>, <span class="string">&quot;company&quot;</span> to <span class="string">&quot;Jetbrain&quot;</span>)</span><br><span class="line">   <span class="keyword">for</span> ((attrName, value) <span class="keyword">in</span> <span class="keyword">data</span>) &#123;</span><br><span class="line">      person02.setAttributes(attrName, value)</span><br><span class="line">   &#125;</span><br><span class="line">   println(person02.name)</span><br><span class="line">   println(person02.company)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心代码在这里: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get() = _attributes[&quot;name&quot;]!!</span></span><br><span class="line"><span class="keyword">val</span> name: String <span class="keyword">by</span> _attributes</span><br><span class="line"><span class="comment">// get() = _attributes[&quot;company&quot;]!!</span></span><br><span class="line"><span class="keyword">val</span> company: String <span class="keyword">by</span> _attributes</span><br></pre></td></tr></table></figure><p>说白了就是把变量的名字当作 <code>HashMap</code> 的 <code>key</code> , 然后获得 <code>value</code></p><blockquote><p>注意, 这里的 <code>by</code> 用法, 我估计在其他对象上也能使用, 只要该对象也能 <code>object[&quot;key&quot;]</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> in </tag>
            
            <tag> lazy </tag>
            
            <tag> by </tag>
            
            <tag> componentN </tag>
            
            <tag> 委托 </tag>
            
            <tag> 懒加载 </tag>
            
            <tag> 约定 </tag>
            
            <tag> 重载运算符 </tag>
            
            <tag> 重载算术运算符 </tag>
            
            <tag> 重载二元运算符 </tag>
            
            <tag> 重载符合运算符 </tag>
            
            <tag> 重载比较运算符 </tag>
            
            <tag> 等号运算符 </tag>
            
            <tag> equals </tag>
            
            <tag> compareTo </tag>
            
            <tag> 排序运算符 </tag>
            
            <tag> 比较运算符 </tag>
            
            <tag> 数组操作符 </tag>
            
            <tag> get/set操作对象 </tag>
            
            <tag> contains </tag>
            
            <tag> rangTo </tag>
            
            <tag> iterator </tag>
            
            <tag> invoke </tag>
            
            <tag> KFunction </tag>
            
            <tag> 函数类型当父类 </tag>
            
            <tag> 解构声明 </tag>
            
            <tag> 组件函数 </tag>
            
            <tag> 委托事件 </tag>
            
            <tag> getValue </tag>
            
            <tag> setValue </tag>
            
            <tag> 委托属性 </tag>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、kotlin的函数式编程</title>
      <link href="/2022/12/03/07kotlin/%E5%85%AD%E3%80%81kotlin%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/12/03/07kotlin/%E5%85%AD%E3%80%81kotlin%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a><code>lambda</code>表达式</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h2><p>答: 在<code>kotlin</code>中是一种<strong>用<code>&#123;&#125;</code>限定作用域, 以 <code>-&gt;</code> 区分参数和函数体的表达式</strong>, 叫 <code>lambda表达式</code></p><p>其<strong>本质是代码块</strong>, 你也<strong>可以理解成可调用的函数类型对象</strong>(但根据反编译发现其实不是, 它的实现方式有很多. 比如: 生成一个函数, 然后传递函数引用等等, 方式还挺多)</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf42902c15ce4ba4b7d9446ecdcaa71c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// val funcType: (Int, Int) -&gt; Int = &#123;x, y -&gt; x + y&#125;</span></span><br><span class="line"><span class="keyword">val</span> funcType: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = &#123;x: <span class="built_in">Int</span>, y: <span class="built_in">Int</span> -&gt; x + y&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sum01 = funcType.invoke(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// 简略成这样: </span></span><br><span class="line"><span class="keyword">val</span> sum02 = funcType(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;x: Int, y: Int -&gt; x + y&#125;(1, 2)</span></span><br><span class="line">&#123;x: <span class="built_in">Int</span>, y: <span class="built_in">Int</span> -&gt; x + y&#125;.invoke(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>其中 <code>&#123;x: Int, y: Int -&gt; x + y&#125;</code> 就是lambda表达式</p><p><code>funcType.invoke(1, 2)</code> 和 <code>&#123;x: Int, y: Int -&gt; x + y&#125;.invoke(1, 2)</code> 表示 lambda函数对象调用 函数</p><h2 id="有什么优缺点"><a href="#有什么优缺点" class="headerlink" title="有什么优缺点?"></a>有什么优缺点?</h2><p>优点: </p><ol><li>代码比较简洁</li><li>lambda 带来的参数捕获, 很便利, 如果用的好 lambda 用习惯了, 匿名对象的方式反而不想用了(<code>object : InterfaceName &#123; override xxxxx &#125;</code>)</li></ol><p>缺点: </p><ol><li><p>代码可读性较差(用习惯了, 反而比较简单)</p></li><li><p>使用 <code>lambda</code> 有些情况下需要注意 <code>this</code> , 有时候没有, 但有些时候又有(这在后面有解释)</p><blockquote><p><code>究其原因是大家把 lambda 和 匿名对象 做了比较, 其实他们还是有区别的, 匿名 new 出来的对象, 有一个 this 指向的是该对象自己, 而 lambda 则没有, lambda的this通常都是捕获的外部作用域的 this , 如果 外部作用域没有 this (比如lambda写在顶层函数内部, this是没有的), 则 lambda 就没有 this </code></p></blockquote></li></ol><h2 id="怎么用-有什么应用场景"><a href="#怎么用-有什么应用场景" class="headerlink" title="怎么用? 有什么应用场景?"></a>怎么用? 有什么应用场景?</h2><p>最主要的用法用于参数传递, 一般是函数参数为 函数类型, 我们传递个lambda表达式过去</p><p>下面是我效仿 <code>maxBy</code> 函数写的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R : Comparable&lt;R&gt;</span>&gt; List<span class="type">&lt;T&gt;</span>.<span class="title">maxBy</span><span class="params">(selector: (<span class="type">T</span>) -&gt; <span class="type">R</span>)</span></span>: R? = listIterator().run &#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasNext()) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">val</span> maxElement = next()</span><br><span class="line">    <span class="keyword">var</span> maxVal = selector(maxElement)</span><br><span class="line">    <span class="keyword">while</span> (hasNext()) &#123;</span><br><span class="line">        <span class="keyword">val</span> nextElement = next()</span><br><span class="line">        <span class="keyword">val</span> nextVal = selector(nextElement)</span><br><span class="line">        <span class="keyword">if</span> (nextVal &gt; maxVal) &#123;</span><br><span class="line">            maxVal = nextVal</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxVal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而调用方式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">val</span> list: List&lt;<span class="built_in">Int</span>&gt; = listOf(<span class="number">100</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">400</span>, <span class="number">59999</span>, <span class="number">66</span>, <span class="number">700</span>)</span><br><span class="line"><span class="comment">//    println(list.maxBy(&#123; number -&gt; number &#125;))</span></span><br><span class="line"><span class="comment">//    println(list.maxBy &#123; number -&gt; number &#125;)</span></span><br><span class="line">    println(list.maxBy &#123; it &#125;)</span><br></pre></td></tr></table></figure><p>首先我们需要注意 <code>lambda</code> 在使用的过程中的几点问题:</p><ol><li><p>如果只有一个参数的函数参数类型, 可以直接用 <code>it</code> 代替. 比如: 上面案例中的 <code>selector: (T) -&gt; R</code> 参数只有一个 <code>T</code>, 所以<code>T</code>在使用的时候可以用 <code>it</code> 代替, 所以在使用的时候可以直接: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.maxBy &#123; it &#125;</span><br></pre></td></tr></table></figure></li><li><p>如果一个函数的最后一个参数是一个函数类型的话, 则可以</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以从这样</span></span><br><span class="line">doSomeThing(<span class="number">10</span>, <span class="number">20</span>, &#123; a, b -&gt; a + b &#125;) <span class="comment">// ==&gt;</span></span><br><span class="line"><span class="comment">// 变成下面这样</span></span><br><span class="line">doSomeThing(<span class="number">10</span>, <span class="number">20</span>) &#123; a, b -&gt; a + b &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>lambda</code>的函数体可以有多行, 默认最后一行是返回值</p></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sum = &#123;x: <span class="built_in">Int</span>, y: <span class="built_in">Int</span> -&gt; </span><br><span class="line">    println(<span class="string">&quot;x = <span class="subst">$&#123;x&#125;</span>, y = <span class="subst">$&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">    x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lambda在kotlin和java中的区别"><a href="#lambda在kotlin和java中的区别" class="headerlink" title="lambda在kotlin和java中的区别"></a><code>lambda</code>在<code>kotlin</code>和<code>java</code>中的区别</h2><p>在<code>java</code>中 <code>lambda</code> 使用外部局部变量需要添加 <code>final 修饰</code>, 但在 <code>kotlin</code>中则不需要, 在 <code>kotlin</code> 中这种情况的变量的值可以改变, 在<code>kotlin</code>中不会仅限于访问 <code>final 变量</code>, 在<code>kotlin</code>内部可以修改该变量</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line"><span class="keyword">var</span> odd = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> even = <span class="number">0</span></span><br><span class="line">list.forEach &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == it % <span class="number">2</span>) &#123;</span><br><span class="line">        even++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        odd++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="string">&quot;单数: <span class="variable">$odd</span>, 双数: <span class="variable">$even</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e833efe1fb2f4938a63b943225170453~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>注意在 <code>lambda</code> 的代码未必马上执行, 比如: <code>button.onClink &#123; i++ &#125;</code> 该函数只有在触发事件时才会 <code>i++</code></p></blockquote><p><code>kotlin</code> 支持<code>lambda</code> 内部修改变量的实现方式是: </p><p>将 <code>lambda</code> 捕获的变量全部进行包装, 比如 在 <code>java</code> 中可以把对象改成成 <code>AtomicInteger</code> 等类似这种的对象, 然后将值存放在 <code>AtomicInteger</code> 内部, 这样即使 <code>lambda</code> 捕获了 <code>AtomicInteger</code> 对象, 也仅仅捕获的是 引用 该引用也被添加了 <code>final</code> , 而我们修改的是引用背后的值, 所以可以实现在 <code>lambda</code> 内部修改值外部也能被修改的功能</p><p><code>kotlin</code> 也用的这种方式, 不过它存放的不是 <code>AtomicXXXXX</code> 系列的类, 而是一个叫 <code>Ref</code> 的类</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>前面的章节说过, 闭包就是带着外部作用域的函数, 但可以保证外部函数无法使用函数内部的变量, <code>lambda</code> 也是</p><p>在我看来, <code>lambda</code>这种方式巧妙的地方在于, 定义<code>lambda</code>和调用<code>lambda</code>两方</p><p>在 定义方, 只要是在定义 <code>lambda</code> 之前的变量都可以在 <code>lambda</code> 里面无条件使用(说白了, 就是<code>lambda</code>捕获了外部类的引用)</p><blockquote><p>由于 <code>lambda</code> 会捕获外部类的引用, 所以需要注意 <strong>串行化</strong> 的问题</p></blockquote><p>在 调用方, <code>lambda</code> 参数贯穿了调用方的作用域, 只要调用方往里头传递参数, 那么<code>lambda</code>就可以使用调用放的部分变量, 如果调用方传递的是 <code>this</code> , 那么<code>lambda</code>同时掌握了两方的 <code>this</code> 所能访问的所有变量</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c51b064be5c42a89b62d25ad7f399e5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h1 id="成员引用"><a href="#成员引用" class="headerlink" title="成员引用"></a>成员引用</h1><blockquote><p>这一章节可以当作 c++ 的 <code>&amp;</code> 引用 来学习</p></blockquote><p>成员引用是一个取值的过程, 类似于定义一个引用, 引用指向了 目标 的地址(静态成员拿到的是偏移地址)</p><p><code>::</code> 引用操作符可以对 成员属性&#x2F;成员函数&#x2F;扩展函数&#x2F;扩展属性&#x2F;顶层属性&#x2F;顶层函数&#x2F;类 等 使用</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00f05666195243cfbf8e596194fdc35e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><code>Person</code> 限定了它在哪个类, <code>::</code> 表示取引用, <code>age</code> 表示目标</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这就是拿到 Person 类 name 属性的 偏移地址</span></span><br><span class="line"><span class="keyword">val</span> refName: KMutableProperty1&lt;Person, String&gt; = Person::name</span><br></pre></td></tr></table></figure><p>然后你会发现 <code>import kotlin.reflect.KMutableProperty1</code> 是 <code>reflect</code> , 是反射包里面的类型</p><p>所以我们操作 <code>refName</code> 更会和反射产生联系</p><p>成员引用可以和 <code>lambda</code> 互换使用</p><blockquote><p>这里就大概说了说他的用法, 抽空专门搞个章节学学</p></blockquote><h1 id="集合和lambda"><a href="#集合和lambda" class="headerlink" title="集合和lambda"></a>集合和lambda</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(Person(<span class="string">&quot;haha&quot;</span>, <span class="number">22</span>), Person(<span class="string">&quot;xixi&quot;</span>, <span class="number">21</span>), Person(<span class="string">&quot;dd&quot;</span>, <span class="number">23</span>))</span><br><span class="line">list.maxBy(Person::age)</span><br><span class="line"></span><br><span class="line">println(list.filter &#123; it.age &gt; <span class="number">22</span> &#125;.map(Person::name))</span><br></pre></td></tr></table></figure><blockquote><p><code>List</code>集合的标准函数看起来简单, 使用时不注意可能让程序效率更慢, 就像上面的两个函数, <code>maxBy</code> 底层遍历了一轮, 而 下面的那行代码, 程序执行了 两轮 遍历, 程序员看到的仅仅是一行代码</p></blockquote><p>下面那段代码让程序员手动写效率会更高</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">println(list.filter &#123; it.age &gt; <span class="number">22</span> &#125;.map(Person::name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nameList: MutableList&lt;String&gt; = mutableListOf()</span><br><span class="line">list.forEach &#123;</span><br><span class="line">    <span class="keyword">if</span> (it.age &gt; <span class="number">22</span>) &#123;</span><br><span class="line">        nameList.add(it.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">println(nameList)</span><br></pre></td></tr></table></figure><blockquote><p>解决方法也很简单, 使用 <code>java</code> 的 <code>stream</code> 或者 使用 <code>kotlin</code> 的 <code>序列</code>, 后续会介绍</p></blockquote><h2 id="all-any-count-find-对集合应用的判断"><a href="#all-any-count-find-对集合应用的判断" class="headerlink" title="all any count find 对集合应用的判断"></a><code>all</code> <code>any</code> <code>count</code> <code>find</code> 对集合应用的判断</h2><ul><li><code>all</code>, 都是判断集合中所有的元素是否满足条件, 只要有一个不满足直接返回 <code>false</code>, 否则返回 <code>true</code></li><li><code>any</code> 判断集合中是否存在至少一个满足条件的, 如果满足返回 <code>true</code>, 否则返回 <code>false</code></li><li><code>count</code> 判断集合内有几个满足条件判断的</li><li><code>find</code> 查找集合内第一个满足条件的元素</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">val</span> all = list.all &#123; it &gt; <span class="number">2</span> &#125;</span><br><span class="line">println(all)</span><br><span class="line"><span class="keyword">val</span> any = list.any &#123; it &gt; <span class="number">2</span> &#125;</span><br><span class="line">println(any)</span><br><span class="line"><span class="keyword">val</span> count = list.count &#123; it &gt;= <span class="number">2</span> &#125;</span><br><span class="line">println(count)</span><br><span class="line"><span class="keyword">val</span> find = list.find &#123; it == <span class="number">2</span> &#125;</span><br><span class="line">println(find)</span><br></pre></td></tr></table></figure><h2 id="groupBy-分组"><a href="#groupBy-分组" class="headerlink" title="groupBy 分组"></a><code>groupBy</code> 分组</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> map = list.groupBy &#123; it.name.first() &#125;</span><br><span class="line"><span class="keyword">for</span> (entry <span class="keyword">in</span> map.entries) &#123;</span><br><span class="line">    println(<span class="string">&quot;key = <span class="subst">$&#123;entry.key&#125;</span>, value = <span class="subst">$&#123;entry.value&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">key = h, value = [Person&#123;name = heihei, age = <span class="number">34</span>&#125;, Person&#123;name = haha, age = <span class="number">22</span>&#125;, Person&#123;name = hoho, age = <span class="number">23</span>&#125;]</span><br><span class="line">key = z, value = [Person&#123;name = zhazha, age = <span class="number">23</span>&#125;]</span><br><span class="line">key = d, value = [Person&#123;name = dd, age = <span class="number">12</span>&#125;]</span><br></pre></td></tr></table></figure><p>学过 <code>sql</code> 的应该都知道, 这就是那个的分组</p><h2 id="flatMap-和-flatten-处理嵌套集合中的元素"><a href="#flatMap-和-flatten-处理嵌套集合中的元素" class="headerlink" title="flatMap 和 flatten 处理嵌套集合中的元素"></a><code>flatMap</code> 和 <code>flatten</code> 处理嵌套集合中的元素</h2><blockquote><p><code>flat</code>: 铺平</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> list = listOf(</span><br><span class="line">   Book(<span class="string">&quot;k language&quot;</span>, listOf(<span class="string">&quot;zhazha&quot;</span>, <span class="string">&quot;haha&quot;</span>, <span class="string">&quot;xixi&quot;</span>, <span class="string">&quot;heihei&quot;</span>, <span class="string">&quot;hoho&quot;</span>)),</span><br><span class="line">   Book(<span class="string">&quot;v language&quot;</span>, listOf(<span class="string">&quot;zhazha&quot;</span>, <span class="string">&quot;haha&quot;</span>, <span class="string">&quot;heihei&quot;</span>, <span class="string">&quot;hoho&quot;</span>)),</span><br><span class="line">   Book(<span class="string">&quot;l language&quot;</span>, listOf(<span class="string">&quot;zhazha&quot;</span>, <span class="string">&quot;haha&quot;</span>, <span class="string">&quot;xixi&quot;</span>, <span class="string">&quot;heihei&quot;</span>)),</span><br><span class="line">   Book(<span class="string">&quot;j language&quot;</span>, listOf(<span class="string">&quot;zhazha&quot;</span>, <span class="string">&quot;haha&quot;</span>, <span class="string">&quot;xixi&quot;</span>, <span class="string">&quot;hoho&quot;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> map = list.flatMap &#123; it.title.toList() &#125;</span><br><span class="line">map.forEach &#123;</span><br><span class="line">   print(<span class="string">&quot;<span class="variable">$it</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>flat map</code> 的功能是从一堆杂物(对象)里挑选一块或者很多块砖头(属性或者集合属性), 把他们分堆, 然后铺平, 最后连接在一起, 这就是 <code>flat map</code> 的功能</p><p>flatten 函数的功能和上面的差不多, 不过它面对的是 <code>List&lt;List&lt;String&gt;&gt;</code> 这种方式的</p><h2 id="惰性集合操作-序列"><a href="#惰性集合操作-序列" class="headerlink" title="惰性集合操作: 序列"></a>惰性集合操作: 序列</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.asSequence().filter &#123; it.age &gt; <span class="number">60</span> &#125;.map &#123; it.name &#125;.toList().forEach &#123;println(it)&#125;</span><br></pre></td></tr></table></figure><p>它是惰性的, 他避免了 <code>filter</code> 时创建的临时对象, 还有 <code>map</code> 计算时的临时对象, 它借助 <code>Iterator</code> 来实现惰性操作</p><blockquote><p>但在实际操作中, 我没看出来它有多快速</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载对象</span></span><br><span class="line"><span class="keyword">val</span> list = mutableListOf&lt;Person&gt;()</span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10000</span>) &#123;</span><br><span class="line">   list.add(Person(UUID.randomUUID().toString(), Random.nextInt() % <span class="number">150</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// lambda正常方式</span></span><br><span class="line"><span class="keyword">var</span> start = Instant.now()</span><br><span class="line">list.filter &#123; it.age &gt; <span class="number">60</span> &#125;.map &#123; it.name &#125;</span><br><span class="line"><span class="keyword">var</span> duration = Duration.between(start, Instant.now())</span><br><span class="line">println()</span><br><span class="line">println(duration.toMillis())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 惰性方式</span></span><br><span class="line">start = Instant.now()</span><br><span class="line">list.asSequence().filter &#123; it.age &gt; <span class="number">60</span> &#125;.map &#123; it.name &#125;</span><br><span class="line">duration = Duration.between(start, Instant.now())</span><br><span class="line">println()</span><br><span class="line">println(duration.toMillis())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动写代码方式</span></span><br><span class="line">start = Instant.now()</span><br><span class="line"><span class="keyword">val</span> mutableList = mutableListOf&lt;String&gt;()</span><br><span class="line">list.forEach &#123;</span><br><span class="line">   <span class="keyword">if</span> (it.age &gt; <span class="number">60</span>) &#123;</span><br><span class="line">      mutableList.add(it.name)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">duration = Duration.between(start, Instant.now())</span><br><span class="line">println()</span><br><span class="line">println(duration.toMillis())</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span>   <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="number">34</span>   <span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span>    <span class="number">4</span></span><br></pre></td></tr></table></figure><p>不管我试了几次, 都是这样的情况, 也许是对象不够??? 才会导致惰性不行??? </p><p>我感觉并不是, 使用惰性的方式可能效率没提高多少, 但在节省内存方面应该是显著</p><p>但不管怎样, 手动编码方式效率还是最高的</p><h3 id="数列的中间和末端操作"><a href="#数列的中间和末端操作" class="headerlink" title="数列的中间和末端操作"></a>数列的中间和末端操作</h3><p>中间操作始终是惰性的, 末端操作能够触发所有惰性操作的延迟时间, 惰性操作直接开始执行</p><h2 id="数列和集合的区别"><a href="#数列和集合的区别" class="headerlink" title="数列和集合的区别"></a>数列和集合的区别</h2><ol><li>数列操作是一个元素一个元素的执行的, 一个元素执行一系列函数完毕后留下, 切换另一个元素, 而数列的操作是一个集合一个集合的操作, 一个函数执行完毕留下一个中间集合, 然后传递到下一个函数, 在进行操作</li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/89efa145882643269803369b5bbcc682~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>比如上图, 明显两个的源码大意是: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).map &#123; it * it &#125;.find &#123; it &gt; <span class="number">3</span> &#125;</span><br><span class="line">listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).asSequence().map &#123; it * it &#125;.find &#123; it &gt; <span class="number">3</span> &#125;</span><br></pre></td></tr></table></figure><p>左边就跟学校一个班级一个班级的学生去打疫苗一样, 这些学生去打第一针(map), 等全班学生都打完第一针后, 再去验验都有谁产生抗体了(find)</p><p>右边就跟社会人去打针一样, 预约拿号, 排队打疫苗(map), 打完疫苗后, 不用等别人, 直接去验下是否产生了抗体(find)</p><p>一个打完要等别人, 一个打完直接去做下一项</p><ol start="2"><li>集合需要注意调用函数的顺序, 数列不用</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.0</span>, <span class="number">4</span>).map&#123; it * it &#125;.filter&#123; it <span class="keyword">is</span> <span class="built_in">Double</span> &#125;</span><br><span class="line">listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.0</span>, <span class="number">4</span>).filter &#123; it <span class="keyword">is</span> <span class="built_in">Double</span> &#125;.map&#123; it * it &#125;</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/008e92c7cec344afa036384946bb4a7f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这种区别, 不用我多说看图就懂(看不懂的, 回小学学习去) <img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43ffb8c06942473b88ec2081272696ad~tplv-k3u1fbpfcp-watermark.image" alt="1.gif"></p><blockquote><p>你过滤的越多, 后续集合越少, 效率越高</p></blockquote><h1 id="lambda的实现方式"><a href="#lambda的实现方式" class="headerlink" title="lambda的实现方式"></a>lambda的实现方式</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">postponeComputation</span><span class="params">(id: <span class="type">Int</span>, runnable: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">   println(<span class="string">&quot;id = <span class="variable">$id</span>&quot;</span>)</span><br><span class="line">   runnable()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">handleComputation</span><span class="params">(id: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">   postponeComputation(<span class="number">1000</span>) &#123; println(id) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lambda</code>本质上是可以传递给其他函数的一小段代码, 我们可以把它当作一个匿名函数的引用 + 函数(函数参数列表和函数体), 该函数引用可以当作参数传递</p><p>按照上面的编码情况, 我们显示查看底层的过程</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">postponeComputation</span><span class="params">(id: <span class="type">Int</span>, runnable: <span class="type">Function0</span>&lt;<span class="type">Unit</span>&gt;)</span></span> &#123;</span><br><span class="line">   println(<span class="string">&quot;id = <span class="variable">$id</span>&quot;</span>)</span><br><span class="line">   runnable()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b454673c48c14224a3bc9a216107c53d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>然后下面那个函数的代码会变成这样: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">handleComputation</span><span class="params">(id: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">   postponeComputation(<span class="number">1000</span>, <span class="keyword">object</span> : Function0&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">       <span class="keyword">val</span> id = id</span><br><span class="line">       <span class="function"><span class="keyword">fun</span> void <span class="title">invoke</span><span class="params">()</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">           println(<span class="keyword">this</span>.id)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际上代码可能不是这样写的, 但主要思想差不多</p></blockquote><h1 id="lambda-this-和-匿名对象this的探讨"><a href="#lambda-this-和-匿名对象this的探讨" class="headerlink" title="lambda this 和 匿名对象this的探讨"></a><code>lambda this</code> 和 <code>匿名对象this</code>的探讨</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">postponeComputation</span><span class="params">(id: <span class="type">Int</span>, runnable: () -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">   println(<span class="string">&quot;id = <span class="variable">$id</span>&quot;</span>)</span><br><span class="line">   runnable()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">handleComputation</span><span class="params">()</span></span> &#123;</span><br><span class="line">   postponeComputation(<span class="number">1000</span>) &#123;</span><br><span class="line">      <span class="comment">// 这里直接报错</span></span><br><span class="line">      println(<span class="keyword">this</span>) <span class="comment">// error</span></span><br><span class="line">   &#125;</span><br><span class="line">   postponeComputation(<span class="number">1999</span>, <span class="keyword">object</span> : Function0&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">()</span></span> &#123;</span><br><span class="line">         println(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码会报错</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/914605fcb4b04d7aacf622d049714567~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>问题也很明朗, <code>handleComputation</code> 函数是静态的, 所以根本没有 <code>this</code>, 但是下面的 <code>postponeComputation(1999, object : Function0&lt;Unit&gt;</code> 的 <code>this</code> 能够使用且指向的对象是 匿名对象本身 </p><p>但是如果代码这样写, </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LambdaRealizationDemo01</span>  &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">handleComputation</span><span class="params">()</span></span> &#123;</span><br><span class="line">      postponeComputation(<span class="number">1000</span>) &#123;</span><br><span class="line">         <span class="comment">// 没有报错</span></span><br><span class="line">         println(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      postponeComputation(<span class="number">1999</span>, <span class="keyword">object</span> : Function0&lt;<span class="built_in">Unit</span>&gt; &#123;</span><br><span class="line">         <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="keyword">this</span>)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id = <span class="number">1000</span></span><br><span class="line">lambda09.LambdaRealizationDemo01@<span class="number">6108</span>b2d7</span><br><span class="line">id = <span class="number">1999</span></span><br><span class="line">lambda09.LambdaRealizationDemo01$handleComputation$<span class="number">2</span>@<span class="number">13969</span>fbe</span><br></pre></td></tr></table></figure><p>可以很直接的看出来, 俩 <code>this</code> 指向的对象根本不一样, <code>lambda</code>在一些使用场景特别要注意 <code>this</code> 到底指向的是谁?</p><p>下面代码是 <code>java</code> 源码: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">LambdaRealizationDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">handleComputation</span><span class="params">()</span> &#123;</span><br><span class="line">        LambdaRealizationDemo01Kt.postponeComputation(<span class="number">1000</span>, (Function0&lt;Unit&gt;)((Function0)<span class="keyword">new</span> <span class="title class_">Function0</span>&lt;Unit&gt;(<span class="built_in">this</span>)&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="comment">/* synthetic */</span> LambdaRealizationDemo01 <span class="built_in">this</span>$<span class="number">0</span>;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">this</span>.<span class="built_in">this</span>$<span class="number">0</span> = $receiver;</span><br><span class="line">                <span class="built_in">super</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">LambdaRealizationDemo01</span> <span class="variable">lambdaRealizationDemo01</span> <span class="operator">=</span> <span class="built_in">this</span>.<span class="built_in">this</span>$<span class="number">0</span>;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">bl</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                System.out.println(lambdaRealizationDemo01);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">        LambdaRealizationDemo01Kt.postponeComputation(<span class="number">1999</span>, (Function0&lt;Unit&gt;)((Function0)<span class="keyword">new</span> <span class="title class_">Function0</span>&lt;Unit&gt;()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">bl</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                System.out.println(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仔细看这俩的区别: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LambdaRealizationDemo01Kt.postponeComputation(<span class="number">1000</span>, (Function0&lt;Unit&gt;)((Function0)<span class="keyword">new</span> <span class="title class_">Function0</span>&lt;Unit&gt;(<span class="built_in">this</span>)</span><br><span class="line"></span><br><span class="line">LambdaRealizationDemo01Kt.postponeComputation(<span class="number">1999</span>, (Function0&lt;Unit&gt;)((Function0)<span class="keyword">new</span> <span class="title class_">Function0</span>&lt;Unit&gt;()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结论:</p><p><strong>lambda有个功能叫<code>捕获</code>, <code>它会捕获外部作用域的一些变量</code>, 在上面的例子中, 该<code>lambda</code>捕获了外部函数作用域中的 <code>this</code>, 而该函数作用域的 <code>this</code> 就是 <code>LambdaRealizationDemo01</code> 对象</strong></p><h1 id="★★★带接收者的-lambda"><a href="#★★★带接收者的-lambda" class="headerlink" title="★★★带接收者的 lambda"></a>★★★带接收者的 <code>lambda</code></h1><h2 id="带接收者的-lambda-函数"><a href="#带接收者的-lambda-函数" class="headerlink" title="带接收者的 lambda 函数"></a>带接收者的 <code>lambda</code> 函数</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">buildString</span><span class="params">(builderAction: <span class="type">StringBuilder</span>.() -&gt; <span class="type">Unit</span>)</span></span>: String &#123;</span><br><span class="line">   <span class="keyword">val</span> sb = StringBuilder()</span><br><span class="line">   sb.builderAction()</span><br><span class="line">   <span class="keyword">return</span> sb.toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> s = buildString &#123;</span><br><span class="line">      append(<span class="string">&quot;Hello &quot;</span>)</span><br><span class="line">      append(<span class="string">&quot;World!!!&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">buildString</span><span class="params">(builderAction: <span class="type">StringBuilder</span>.() -&gt; <span class="type">Unit</span>)</span></span>: String &#123;</span><br><span class="line">   <span class="keyword">return</span> StringBuilder().apply &#123; builderAction() &#125;.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带接收者的函数类型"><a href="#带接收者的函数类型" class="headerlink" title="带接收者的函数类型"></a>带接收者的函数类型</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> StringBuilder.appendExcel1: StringBuilder</span><br><span class="line">   <span class="keyword">get</span>() = <span class="keyword">this</span>.append(<span class="string">&quot;01!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> appendExcel2: StringBuilder.() -&gt; StringBuilder =  &#123; <span class="keyword">this</span>.append(<span class="string">&quot;02!&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> stringBuilder = StringBuilder(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line">   stringBuilder.appendExcel1</span><br><span class="line">   <span class="comment">// 这里直接调用了</span></span><br><span class="line">   stringBuilder.appendExcel2()</span><br><span class="line">   println(stringBuilder)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>带接收者的函数类型很好理解, 把它当作类型返回就行 , <code>StringBuilder.() -&gt; StringBuilder</code>, 当作普通 类型 就行, 然后在参数前面加上接收者<code>StringBuilder.</code>.  </p><ol><li>在定义处不用管其中隐藏的 <code>this</code>, 按照普通的函数类型使用就好<code>() -&gt; StringBuilder</code></li><li>在调用处, 就需要<code>stringBuilder.appendExcel2()</code>或者<code>appendExcel2(stringBuilder)</code>这样传入 <code>this</code> 对象本体</li></ol></blockquote><p>带接收者的 <code>lambda</code> 可以用在 <code>dsl</code> 中</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ce28abaf01649a38389dfbe7cbc3ab4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e32e65964b4d47ce9dff9ab180923c9d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>不过这些都是后话了</p><p>他的使用场景很多, 必须掌握</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> yesterday: LocalDateTime = <span class="number">1.</span>days.ago</span><br><span class="line">   println(yesterday)</span><br><span class="line">   <span class="keyword">val</span> tomorrow: LocalDateTime = <span class="number">1.</span>days.formNow</span><br><span class="line">   println(tomorrow)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> Period.formNow: LocalDateTime</span><br><span class="line">   <span class="keyword">get</span>() = LocalDateTime.now() + <span class="keyword">this</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> <span class="built_in">Int</span>.days: Period</span><br><span class="line">   <span class="keyword">get</span>() = Period.ofDays(<span class="keyword">this</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> Period.ago: LocalDateTime</span><br><span class="line">   <span class="keyword">get</span>() = LocalDateTime.now() - <span class="keyword">this</span></span><br></pre></td></tr></table></figure><p>这里我再次总结下在 kotlin 里什么是扩展.</p><p><strong>扩展是一种提供, 也是一种限定, 它为我们的属性, 函数和函数类型提供了使用 <code>this</code> 指针的可能, 但同时也限定了 <code>this</code> 指针的类型</strong></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa63d72dbe314a8e9cbfc375c6945664~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0f5c4aa84de44d75beaa7683722dcb7c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h1 id="函数式接口和SAM转换"><a href="#函数式接口和SAM转换" class="headerlink" title="函数式接口和SAM转换"></a>函数式接口和SAM转换</h1><p>本章主要探讨 </p><ol><li><p><code>kotlin</code> 如何调用 <code>java</code> 的函数式接口</p></li><li><p><code>SAM</code>转换</p></li><li><p><code>kotlin</code> 自己的函数式接口</p></li><li><p><code>kotlin</code> 函数式接口的特性</p></li></ol><p>我们定义一个 <code>java</code> 的函数式接口</p><p><code>JavaInterface.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JavaInterface</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们创建属于 <code>kotlin</code> 的函数</p><p><code>KotlinInterfaceDemo.kt</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">delegateWork</span><span class="params">(j: <span class="type">JavaInterface</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">val</span> str = <span class="string">&quot;helloWorld&quot;</span></span><br><span class="line">j.doSomething(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">delegateWork(<span class="keyword">object</span> : JavaInterface&#123;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">(str: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">println(<span class="string">&quot;content = <span class="variable">$str</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>至于很多人说的 <code>java</code> 中函数式接口还可以使用上<code>@FunctionalInterface</code> 注解, 这个注解对于 <code>kotlin</code>来说有跟没有一样, <code>kotlin</code> 有自己的判断方式</p></blockquote><h2 id="SAM转换-Single-Abstract-Method-Conversions"><a href="#SAM转换-Single-Abstract-Method-Conversions" class="headerlink" title="SAM转换(Single Abstract Method Conversions)"></a>SAM转换(Single Abstract Method Conversions)</h2><p>当 <code>java</code> 的 接口 被 <code>kotlin</code> 认为是函数式接口, <code>kotlin</code> 还提供了一种便捷的方式: <code>SAM构造函数</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   delegateWork(JavaInterface &#123;</span><br><span class="line">      println(<span class="string">&quot;content = <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>甚至还可以这样:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   delegateWork(&#123;</span><br><span class="line">      println(<span class="string">&quot;content = <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JavaInterface</code>名字没了</p><p>最终变成这样: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   delegateWork &#123;</span><br><span class="line">      println(<span class="string">&quot;content = <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小括号没了</p><p>使用这种方式有前提: </p><ol><li><p><code>kotlin</code> 版本在 <code>1.4</code> 之后</p><p>1.4 才有的函数式接口<code>fun interface ClassName</code>功能好像, 至于<code>SAM</code>便捷功能我也没试过, 应该不会还有人没升级到 <code>kotlin 1.6</code> 吧?</p></li><li><p>接口需要需要被 <code>kotlin</code> 认为是 函数式接口</p><p>怎么个认为法呢?</p><p>我们给 <code>JavaInterface.java</code> 的接口添加了一个新的 <code>abstract</code> 函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JavaInterface</span> &#123;</span><br><span class="line">   void doSomething(String str);</span><br><span class="line">   void doSomething02(String str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着 <code>kotlin</code> 的代码就会报错</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d896682fc5544e2cad8dce2b9fab1771~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>提示你要变成 <code>object: </code>的方式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   delegateWork(<span class="keyword">object</span> : JavaInterface &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">(str: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">         TODO(<span class="string">&quot;Not yet implemented&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doSomething02</span><span class="params">(str: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">         TODO(<span class="string">&quot;Not yet implemented&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>现在我们可以不用关注 <code>JavaInterface.java</code> 代码了</p><p>创建一个 新的文件 <code>KotlinInterface.kt</code> </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">KotlinInterface</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">(str: <span class="type">String</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">delegateWork</span><span class="params">(k: <span class="type">KotlinInterface</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> str = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">   k.doSomething(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   delegateWork(<span class="keyword">object</span> : KotlinInterface &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">(str: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">         println(<span class="string">&quot;str = <span class="variable">$str</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时无法使用 SAM 转换功能, 需要再改</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="keyword">interface</span> KotlinInterface &#123;</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">(str: <span class="type">String</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给我们的接口添加 <code>fun</code></p><p>此时我们的代码变成这样: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   delegateWork(KotlinInterface &#123;</span><br><span class="line">      println(<span class="string">&quot;str = <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着还能省略接口名字和小括号:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   delegateWork &#123;</span><br><span class="line">      println(<span class="string">&quot;str = <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们知道, 函数式接口还能优化</p><p>怎么说呢?</p><p>函数式接口可以变成 函数类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">delegateWork</span><span class="params">(k: (<span class="type">String</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> str = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">   k(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们知道, <code>kotlin</code>函数类型参数可以使用<code>inline</code>关键字优化</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">delegateWork</span><span class="params">(k: (<span class="type">String</span>) -&gt; <span class="type">Unit</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> str = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">   k(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这才是我们的最终版本</p><p>而上面的 <code>SAM</code> 也好, 函数式接口也好, 都需要 <code>new</code> 一个对象, 而且也不能用 <code>inline</code>优化</p>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> flatten </tag>
            
            <tag> flatMap </tag>
            
            <tag> any </tag>
            
            <tag> all </tag>
            
            <tag> 分组 </tag>
            
            <tag> find </tag>
            
            <tag> lambda </tag>
            
            <tag> 闭包 </tag>
            
            <tag> lambda表达式 </tag>
            
            <tag> count </tag>
            
            <tag> groupBy </tag>
            
            <tag> 惰性集合 </tag>
            
            <tag> 序列 </tag>
            
            <tag> 中间操作 </tag>
            
            <tag> 末端操作 </tag>
            
            <tag> 数列 </tag>
            
            <tag> 匿名对象this </tag>
            
            <tag> lambda this </tag>
            
            <tag> 带接收者的lambda </tag>
            
            <tag> 带接收者的函数类型 </tag>
            
            <tag> SAM转换 </tag>
            
            <tag> 函数式接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、kotlin标准库函数</title>
      <link href="/2022/12/03/07kotlin/%E4%BA%94%E3%80%81kotlin%E6%A0%87%E5%87%86%E5%BA%93%E5%87%BD%E6%95%B0/"/>
      <url>/2022/12/03/07kotlin/%E4%BA%94%E3%80%81kotlin%E6%A0%87%E5%87%86%E5%BA%93%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="标准库函数"><a href="#标准库函数" class="headerlink" title="标准库函数"></a>标准库函数</h1><blockquote><p>我按照返回值做了区分, 这样好理解, 如果标准函数返回的自己, 则我们可以做属于自己的的链式调用, 如果返回的是别人, 可以做别人的链式调用, 如果函数类型参数有扩展, 则可以使用<code>this</code></p></blockquote><h2 id="返回新的值"><a href="#返回新的值" class="headerlink" title="返回新的值"></a>返回新的值</h2><h3 id="let-函数"><a href="#let-函数" class="headerlink" title="let 函数"></a><code>let</code> 函数</h3><p><code>let</code>函数把<code>this</code>当作参数传递给<code>lambda</code>的参数, 然后返回<code>lambda</code>的返回值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> first = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).first()</span><br><span class="line"><span class="keyword">val</span> res = first * first</span><br><span class="line">println(res)</span><br><span class="line"></span><br><span class="line">println(listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).first().let &#123; it * it &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> T.<span class="title">let</span><span class="params">(block: (<span class="type">T</span>) -&gt; <span class="type">R</span>)</span></span>: R &#123;</span><br><span class="line">    <span class="keyword">return</span> block(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回新的值-函数类型参数带扩展"><a href="#返回新的值-函数类型参数带扩展" class="headerlink" title="返回新的值(函数类型参数带扩展)"></a>返回新的值(函数类型参数带扩展)</h2><h3 id="with-函数-不是扩展函数"><a href="#with-函数-不是扩展函数" class="headerlink" title="with 函数(不是扩展函数)"></a><code>with</code> 函数(不是扩展函数)</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> with = <span class="function"><span class="keyword">fun</span> MutableList<span class="type">&lt;Int&gt;</span>.<span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line"><span class="keyword">this</span>[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">val</span> list = with(listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) &#123;</span><br><span class="line"><span class="keyword">this</span>.map &#123;</span><br><span class="line">it + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">println(list)</span><br><span class="line">println(mutableListOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).with())</span><br><span class="line"><span class="comment">//with(listOf(1, 2, 3))</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>with</code> 函数第一个参数是传递接收者, 第二个参数传递的是 匿名扩展函数类型 </p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea7c9156539e4b21afe8d9def1d03069~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>上面的代码我写了个匿名扩展函数变量, 可以代替 <code>with</code> 函数, 而且使用方式很像</p><p><code>kotlin</code>源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> <span class="title">with</span><span class="params">(receiver: <span class="type">T</span>, block: <span class="type">T</span>.() -&gt; <span class="type">R</span>)</span></span>: R &#123;</span><br><span class="line">    <span class="keyword">return</span> receiver.block()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>block: T.() -&gt; R</code>的使用方法有两种, 第一种是 <code>block(this)</code> 这种方式调用, 还有一种就是 <code>this.block()</code> 的方式调用, 这两种都行, 第一种是我们跳过编译器主动传递 <code>this</code> 进去, 第二种是 编译器主动将接收者当作 参数 传递进去</p></blockquote><h4 id="with的使用场景"><a href="#with的使用场景" class="headerlink" title="with的使用场景"></a><code>with</code>的使用场景</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> letter: String = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">alphabet01</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> stringBuilder = StringBuilder()</span><br><span class="line">    letter.forEach &#123; stringBuilder.append(it.uppercaseChar()) &#125;</span><br><span class="line">    stringBuilder.append(<span class="string">&quot;\nNow I know the alphabet!&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> stringBuilder.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>stringBuilder</code> 对象本身数量有点多的时候, 可以考虑使用 <code>with</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">alphabet02</span><span class="params">()</span></span> = kotlin.with(StringBuilder()) &#123;</span><br><span class="line">    letter.forEach &#123; <span class="keyword">if</span> (it <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span>..<span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//        append(it.minus(&#x27;a&#x27;).plus(&#x27;A&#x27;.code).toChar())</span></span><br><span class="line">        append(it.uppercaseChar())</span><br><span class="line">    &#125; &#125;</span><br><span class="line">    append(<span class="string">&quot;\nNow I know the alphabet!&quot;</span>)</span><br><span class="line">    toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以使用 <code>buildString</code>, 它底层使用的还是 <code>StringBuilder</code> 所以这样可以这样: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">alphabet03</span><span class="params">()</span></span> = buildString &#123;</span><br><span class="line">    <span class="keyword">for</span> (c <span class="keyword">in</span> letter) &#123;</span><br><span class="line">        append(c.uppercaseChar())</span><br><span class="line">    &#125;</span><br><span class="line">    append(<span class="string">&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;Now I know the alphabet!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它在返回的时候, 返回的是 String 类型</p><p><code>StringBuilder().apply(builderAction).toString()</code></p><h3 id="run-扩展函数"><a href="#run-扩展函数" class="headerlink" title="run 扩展函数"></a><code>run</code> 扩展函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s = File(<span class="string">&quot;&quot;&quot;D:\test.txt&quot;&quot;&quot;</span>).run &#123;</span><br><span class="line">    <span class="keyword">if</span> (canRead()) reader().buffered().use &#123; it.readText() &#125; <span class="keyword">else</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">println(s)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> T.<span class="title">run</span><span class="params">(block: <span class="type">T</span>.() -&gt; <span class="type">R</span>)</span></span>: R &#123;</span><br><span class="line">    <span class="keyword">return</span> block()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="use-扩展函数"><a href="#use-扩展函数" class="headerlink" title="use 扩展函数"></a><code>use</code> 扩展函数</h3><blockquote><p>主要用于文件流操作, 帮助添加 <code>try catch finally</code></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> s = FileReader(<span class="string">&quot;&quot;&quot;D:\test.txt&quot;&quot;&quot;</span>).buffered().use &#123;</span><br><span class="line">    it.readText()</span><br><span class="line">&#125;</span><br><span class="line">println(s)</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91312c6b5c8c4a67b5ab6004395ef1ee~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="返回自己"><a href="#返回自己" class="headerlink" title="返回自己"></a>返回自己</h2><h3 id="also-扩展函数"><a href="#also-扩展函数" class="headerlink" title="also 扩展函数"></a><code>also</code> 扩展函数</h3><p> <code>also</code> 支持链式调用</p><p>使用方法: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> file = File(<span class="string">&quot;&quot;&quot;D:\test.txt&quot;&quot;&quot;</span>).also &#123;</span><br><span class="line">    println(it.name)</span><br><span class="line">&#125;.also &#123;</span><br><span class="line">    <span class="comment">// println(it.readLines())</span></span><br><span class="line">    println(it.readText())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>kotlin</code> <code>also</code> 底层函数: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">also</span><span class="params">(block: (<span class="type">T</span>) -&gt; <span class="type">Unit</span>)</span></span>: T &#123;</span><br><span class="line">    block(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="taskIf-扩展函数"><a href="#taskIf-扩展函数" class="headerlink" title="taskIf 扩展函数"></a><code>taskIf</code> 扩展函数</h3><p> 如果满足 <code>taskIf</code> 的条件(为 <code>true</code>), 则返回 <code>this</code> , 否则 返回 <code>null</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> file = File(<span class="string">&quot;&quot;&quot;D:\test.txt&quot;&quot;&quot;</span>).takeIf &#123;</span><br><span class="line">    it.canRead() &amp;&amp; it.canWrite()</span><br><span class="line">&#125;</span><br><span class="line">println(file)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">takeIf</span><span class="params">(predicate: (<span class="type">T</span>) -&gt; <span class="type">Boolean</span>)</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (predicate(<span class="keyword">this</span>)) <span class="keyword">this</span> <span class="keyword">else</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很简单, 函数参数 <code>predicate</code> , 使用 <code>predicate</code> 函数 , 传递 <code>this</code> 进入函数体中执行, 然后返回 <code>boolean</code>, 同 <code>Boolean</code> 判断 如果 为 <code>true</code> 则返回 <code>this</code> , 否则返回 <code>false</code></p><p>这个也可以链式调用, 但是需要判断是否 可空 比较麻烦一点</p><h3 id="taskUnless-扩展函数"><a href="#taskUnless-扩展函数" class="headerlink" title="taskUnless 扩展函数"></a><code>taskUnless</code> 扩展函数</h3><p>如果表达式不满足条件, 则返回 <code>this</code>, 否则返回 <code>null</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> file = File(<span class="string">&quot;&quot;&quot;D:\test.txt&quot;&quot;&quot;</span>).takeUnless &#123;</span><br><span class="line">    it.isDirectory</span><br><span class="line">&#125;</span><br><span class="line">println(file)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">takeUnless</span><span class="params">(predicate: (<span class="type">T</span>) -&gt; <span class="type">Boolean</span>)</span></span>: T? &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (!predicate(<span class="keyword">this</span>)) <span class="keyword">this</span> <span class="keyword">else</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意上面 <code>takeIf</code> 和 <code>takeUnless</code> 都返回的可空类型, <code>T?</code> </p></blockquote><h3 id="withLock-线程锁扩展函数"><a href="#withLock-线程锁扩展函数" class="headerlink" title="withLock 线程锁扩展函数"></a><code>withLock</code> 线程锁扩展函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> l: Lock = ReentrantLock()</span><br><span class="line">l.withLock &#123;</span><br><span class="line">   <span class="comment">// ...........</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Lock.<span class="title">withLock</span><span class="params">(action: () -&gt; <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">    lock()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> action()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        unlock()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回自己-函数类型参数带扩展"><a href="#返回自己-函数类型参数带扩展" class="headerlink" title="返回自己(函数类型参数带扩展)"></a>返回自己(函数类型参数带扩展)</h2><h3 id="apply-函数"><a href="#apply-函数" class="headerlink" title="apply 函数"></a>apply 函数</h3><p>用法: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> file1 = File(<span class="string">&quot;&quot;&quot;D:\test.txt&quot;&quot;&quot;</span>)</span><br><span class="line">file1.setWritable(<span class="literal">true</span>)</span><br><span class="line">file1.setReadable(<span class="literal">true</span>)</span><br><span class="line">file1.setExecutable(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> file2 = File(<span class="string">&quot;&quot;&quot;D:\test.txt&quot;&quot;&quot;</span>).apply &#123;</span><br><span class="line">    setWritable(<span class="literal">true</span>)</span><br><span class="line">    setReadable(<span class="literal">true</span>)</span><br><span class="line">    setExecutable(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用场景: </p><p>apply 类似于一个配置函数, 用于配置接收者, 然后再返回配置好的接收者</p><p>解析: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> T.<span class="title">apply</span><span class="params">(block: <span class="type">T</span>.() -&gt; <span class="type">Unit</span>)</span></span>: T &#123;</span><br><span class="line">    block()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把接收者作为 T 带入 <code>File.apply(block: File.() -&gt; Unit): File</code> , 我们解析一下:</p><ol><li>他是 File 的扩展函数</li><li>他返回 File 对象本身</li><li>他传递一个 匿名扩展函数(带 this 参数的 lambda 表达式函数), 函数返回值为 Unit</li></ol><blockquote><p>这里需要注意一点, block 是 lambda 表达式, 把 lambda 表达式传递进另一个函数体内部, lambda就可以访问表达式外部函数体作用域能访问的所有东西, 这是<code>闭包</code></p></blockquote><blockquote><p><code>闭包</code>就是能够读取其他函数内部变量的函数, 或者叫 定义在一个函数内部的函数, 这样函数体内部能够访问函数体外部的, 本质上，闭包是将函数内部和函数外部连接起来的桥梁</p></blockquote><h1 id="在-idea-查找扩展函数的方法"><a href="#在-idea-查找扩展函数的方法" class="headerlink" title="在 idea 查找扩展函数的方法"></a>在 idea 查找扩展函数的方法</h1><h2 id="安装-extSee-插件"><a href="#安装-extSee-插件" class="headerlink" title="安装 extSee 插件"></a>安装 extSee 插件</h2><p>然后就能看到了</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3fc2dfb4cf74512b059950cc70cec9a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/102f37e21fe84b7585a56240e2b05c59~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="使用-idea-的-find-usages"><a href="#使用-idea-的-find-usages" class="headerlink" title="使用 idea 的 find usages"></a>使用 idea 的 find usages</h2><blockquote><p>不推荐, 这种方式查询出来的东西太多了, 不能够限定只查询 extension </p></blockquote><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/233ee3a7759c4082b202ab0118822dc9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe88dba3804b4d519b85b3972600ef2b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标准库函数 </tag>
            
            <tag> let扩展函数 </tag>
            
            <tag> with函数 </tag>
            
            <tag> run扩展函数 </tag>
            
            <tag> use扩展函数 </tag>
            
            <tag> also扩展函数 </tag>
            
            <tag> taskif扩展函数 </tag>
            
            <tag> taskUnless扩展函数 </tag>
            
            <tag> withLock扩展函数 </tag>
            
            <tag> apply函数 </tag>
            
            <tag> idea插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、kotlin代数类型和模式匹配(二)</title>
      <link href="/2022/12/03/07kotlin/%E5%9B%9B%E3%80%81kotlin%E4%BB%A3%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
      <url>/2022/12/03/07kotlin/%E5%9B%9B%E3%80%81kotlin%E4%BB%A3%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="代数数据类型"><a href="#代数数据类型" class="headerlink" title="代数数据类型"></a>代数数据类型</h1><blockquote><p>本章使用<code>密封类、数据类</code>去构建一个代数数据类型</p></blockquote><h2 id="代数数据类型-1"><a href="#代数数据类型-1" class="headerlink" title="代数数据类型"></a>代数数据类型</h2><p>代数数据类型英文名叫 <code>Algebraic Data Type(ADT)</code></p><p>本章主要内容:</p><ol><li>什么是代数?</li><li>什么是代数数据类型?</li><li>为什么需要代数数据类型?</li><li>怎么使用代数数据类型?</li></ol><h3 id="什么是代数"><a href="#什么是代数" class="headerlink" title="什么是代数?"></a>什么是代数?</h3><p>代数 分为 <code>代 (功能)</code>  <code>数(目标)</code></p><p>数字在小学数学书上就有: <code>0, 1, 2, ... 100</code> 这些就是数</p><p>带 代 是什么?</p><p><strong>代表示代替, 组合在一起就是 代替数字 的 符号</strong></p><p>比如我们初中学的 一元一次方程, <code>x + 5 = 6</code></p><p>这里的 <code>x</code> 就是代数, 而代数的值是 <code>1</code></p><p><code>y * 3 = 21</code> 中的 <code>y</code> 也是一个代数, <code>y</code> 的值是 <code>7</code></p><h3 id="什么是代数数据类型"><a href="#什么是代数数据类型" class="headerlink" title="什么是代数数据类型?"></a>什么是代数数据类型?</h3><p>请注意: 前面的方程中还有两个操作符, <code>+</code> <code>*</code></p><p>我们可以还可以通过代数和数字组合成新的代数:</p><p><code>x * 1 = z</code></p><p><code>a + 2 = c</code></p><p>如果我们将上面的两个方程式改编成程序的表达式, 就会发现<code>代数 z 的类型</code>是另一个 <code>代数 + 数字</code> 的组合, 我们将这种组合归纳成一种新的类型,  这种类型被叫做 <strong>代数数据类型</strong>(<code>ADT</code>), 而在程序角度看, <code>z</code> 就是<strong>代数数据类型</strong></p><h3 id="为什么需要代数数据类型"><a href="#为什么需要代数数据类型" class="headerlink" title="为什么需要代数数据类型?"></a>为什么需要代数数据类型?</h3><p>我们可以配合 “操作符” + “基本数据类型” 抽象成比较复杂而且功能强大的类型, 以完成更加复杂的业务需求</p><p>并且代数数据类型比较安全, 可以免去很多的麻烦(这个后面会提到)</p><blockquote><p>我们的枚举类也是一种代数数据类型</p></blockquote><p>前面介绍的代数都是一些初等代数, 代数是一个非常庞大的数学分支, 从简单的线性, 多项式代数环 域 再到 范畴 函子等, 更加抽象的代数</p><p>往后发展 代数将会变得更加复杂, 抽象级别越高, 也越发接近事物的本质</p><p>以外, 在日常开发中, 如果能够合理地利用ADT去对业务进行高度抽象, 那么我们的代码在能够实现诸多功能的前提下, 还会变得非常简洁.</p><h3 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h3><p>通过计数, 我们可以更加好的理解<code>ADT</code>.</p><h4 id="什么是计数"><a href="#什么是计数" class="headerlink" title="什么是计数?"></a>什么是计数?</h4><p>每种类型在实例化的时候, 都会有对应的取值, 比如: <code>Boolean</code> 类型存在两种可能的取值: <code>true</code> 和 <code>false</code>. 如果我们就<strong>将数字2与Boolean的取值种类相关联</strong>, 这种方式就叫做 <code>计数</code></p><p>可能还不好理解, 再给个例子吧</p><p>我们知道 <code>kotlin</code> 有一个 类型  叫 <code>Unit</code> , 那么 <code>Unit</code> 的计数对应什么数字呢? </p><p>我们知晓, <code>Unit</code> 只能表示一个实例, 也就是说, 它只有一种取值, 所以采用计数的方式, 所以 <code>Unit</code> 对应数字 <code>1</code></p><p>有了计数之后, 我们可以更加好的理解什么是 <code>积类型(product)</code> 与 和<code>类型(sum)</code></p><h3 id="积类型"><a href="#积类型" class="headerlink" title="积类型"></a>积类型</h3><p>积类型,应该很好理解, 就是两个数相乘的结果为积, 是一种<strong>组合类型</strong></p><p>在 <code>ADT</code> 中, <code>积类型</code>的表现形式与乘法非常相似, 我们可以将其理解为 一种<code>组合(combination)</code>, 比如: </p><p>有一个<code>类型 a</code>, 还有一个<code>类型 b</code> , 那么我们应该如何组合成 积类型 呢?</p><p><code>c = a * b</code></p><p>我们知道 <code>Boolean</code> 类型计数对应 <code>2</code> , <code>Unit 类型</code>的计数对应 <code>1</code>, 那么他们的<code>积类型计数</code>是: </p><p><code>2 * 1 = 2</code></p><p>使用实际的代码表示:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BooleanProductUnit</span>(a: <span class="built_in">Boolean</span>, b: <span class="built_in">Unit</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们构建了一个名叫 <code>BooleanProductUnit</code> 的类, 分别存在一个类型为 <code>Boolean</code> 的<code>参数 a</code>, 以及另外一个类型为 <code>Unit</code> 的<code>参数 b</code></p><p>而该实例的取值为:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a = BooleanProductUnit(<span class="literal">false</span>, <span class="built_in">Unit</span>)</span><br><span class="line"><span class="keyword">val</span> a = BooleanProductUnit(<span class="literal">true</span>, <span class="built_in">Unit</span>)</span><br></pre></td></tr></table></figure><p>此处记住前面的 积类型 : <code>2 * 1 = 2</code> 可以看出最多只能有两种取值, 符合我们的猜想</p><p>当我们在利用类, 进行组合的时候, 实际上就是一种 <code>product 操作</code>, 积类型可以看作同时持有某些类型的类型</p><p>比如上面的 <code>BooleanProduct</code> 类型就是同时持有 <code>Boolean</code> 和 <code>Unit</code> 类型</p><p>由于我们可以根据计数来判断某种类型或者某种类的取值, 所以计数还能用在编译时期对 <code>when</code> 之类的语句做分支检查</p><h3 id="和类型与密封类"><a href="#和类型与密封类" class="headerlink" title="和类型与密封类"></a>和类型与密封类</h3><p>前面说的积类型对应着前面的 乘法, 那么和类型顾名思义对应着代数中的加法.</p><p>有个问题需要判断, 那就是<strong>枚举</strong>是<strong>积类型</strong>还是<strong>和类型</strong>?</p><p>这个很好判断:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title class_">Day</span> &#123; SUN, MON, TUE, WED, THU, FRI, SAT &#125;</span><br></pre></td></tr></table></figure><p>我们可以计算他的计数</p><p>它总共有这么几种结果:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a = Day.SUN</span><br><span class="line"><span class="keyword">val</span> b = Day.MON</span><br><span class="line"><span class="keyword">val</span> c = Day.TUE</span><br><span class="line"><span class="keyword">val</span> d = Day.WED</span><br><span class="line"><span class="keyword">val</span> e = Day.THU</span><br><span class="line"><span class="keyword">val</span> f = Day.FRI</span><br><span class="line"><span class="keyword">val</span> g = Day.SAT</span><br></pre></td></tr></table></figure><p><code>1 + 1 + 1 + 1 + 1 + 1 + 1 = 7</code></p><p>它总共有 7 种取值的可能</p><p>我们通过计算 <strong>计数</strong> 的过程使用的是 <strong>+ 操作符</strong>, 所以它是 <strong>和类型</strong></p><p>我们来总结下<code>和类型(sum)</code> 的特点:</p><ol><li><strong>和类型是类型安全的</strong>, 它是一个闭环, 我们知晓他们的所有取值可能, 除了这些取值可能外, 就没有其他值了, 不用去担心非法情况</li><li>和类型是一种 <code>OR</code>关系. 作为比较, 积类型可以拥有好几种类型是一种 <code>and</code> 关系. 比如前面的 <code>BooleanProductUnit</code>就是同时拥有<code>Boolean</code> 和 <code>Unit</code>, 这种同时就是 <code>AND 关系</code>的一种表现. 而和类型一次只能是其中的某种类型, 要么 是 <code>SUN</code> 要么是 <code>MON</code>, 不能同时拥有两种类型, 所以它代表 <code>OR</code> 的含义</li></ol><p>下面就是和类型的关系:</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b17b1c7b3fe4c83afc92b154a3bd634~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>下图是积类型:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/472edce56f814e7dbe12b7d7500514ec~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>我们还可以使用 <strong>密封类</strong> 代替 <strong>枚举类</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Day</span> &#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">SUN</span>: <span class="type">Day</span>()</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">MON</span>: <span class="type">Day</span>()</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">TUE</span>: <span class="type">Day</span>()</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">WED</span>: <span class="type">Day</span>()</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">THU</span>: <span class="type">Day</span>()</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">FRI</span>: <span class="type">Day</span>()</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">SAT</span>: <span class="type">Day</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 kotlin 1.1 之后, 密封类中 的  <code>SUN</code> 这些子类可以不用写在 Day 类作用域内, 可以写在同一个文件中</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Day</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SUN</span>: <span class="type">Day</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MON</span>: <span class="type">Day</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TUE</span>: <span class="type">Day</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WED</span>: <span class="type">Day</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">THU</span>: <span class="type">Day</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FRI</span>: <span class="type">Day</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SAT</span>: <span class="type">Day</span>()</span><br></pre></td></tr></table></figure></blockquote><p><strong>密封类</strong>的好处是配合 <code>when</code>, 使用 <code>when</code> 可以不用再添加 <code>else</code> 分支了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">schedule</span><span class="params">(day: <span class="type">Day</span>)</span></span>: String = <span class="keyword">when</span> (day) &#123;</span><br><span class="line">   <span class="keyword">is</span> SUN -&gt; <span class="string">&quot;aaa&quot;</span></span><br><span class="line">   <span class="keyword">is</span> FRI -&gt; <span class="string">&quot;bbb&quot;</span></span><br><span class="line">   <span class="keyword">is</span> MON -&gt; <span class="string">&quot;ccc&quot;</span></span><br><span class="line">   <span class="keyword">is</span> SAT -&gt; <span class="string">&quot;ddd&quot;</span></span><br><span class="line">   <span class="keyword">is</span> THU -&gt; <span class="string">&quot;eee&quot;</span></span><br><span class="line">   <span class="keyword">is</span> TUE -&gt; <span class="string">&quot;fff&quot;</span></span><br><span class="line">   <span class="keyword">is</span> WED -&gt; <span class="string">&quot;ggg&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要你添加了新的分支, 就会报错, 如果你没有添加完整的分支, 也会报错</p><p>这就是 <code>ADT</code> 配合 <code>when 表达式</code>的例子, 可以看出<code>和类型</code>是<code>类型安全</code>的</p><h3 id="构造代数数据类型-怎么用"><a href="#构造代数数据类型-怎么用" class="headerlink" title="构造代数数据类型(怎么用?)"></a>构造代数数据类型(怎么用?)</h3><p>我们现在需要判断一个几何图形是 三角形? 圆形? 还是长方形?</p><p>拿到这个问题域, 我们可以知晓, 这几个几何图形太过具体, 需要进行抽象处理</p><p>提取可抽象的部分: 图形, 定义<code>密封类 Shape</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="keyword">val</span> radius: <span class="built_in">Double</span>): Shape()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="keyword">val</span> width: <span class="built_in">Double</span>, <span class="keyword">val</span> height: <span class="built_in">Double</span>): Shape()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span>(<span class="keyword">val</span> base: <span class="built_in">Double</span>, <span class="keyword">val</span> height: <span class="built_in">Double</span>): Shape()</span><br></pre></td></tr></table></figure><p>这样我们就定义出一个 <code>ADT</code> <strong>和类型</strong>: <code>Shape</code> 和 <code>Circle</code> <code>Rectangle</code> 和 <code>Triangle</code> 三个<strong>积类型</strong></p><p><code>Shape</code> 是<code>和类型</code>, 很好判断: 因为他的计数通过 <code>+ 加号</code>计算出来的</p><p> <code>Circle</code> <code>Rectangle</code> 和 <code>Triangle</code> 三个是<strong>积类型</strong>也很好判断: 通过 <code>Double 类型</code>组合成<strong>积类型</strong></p><p>这样我们就可以使用 密封类 配和 <code>when</code>表达式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getArea</span><span class="params">(shape: <span class="type">Shape</span>)</span></span>: <span class="built_in">Double</span> = <span class="keyword">when</span>(shape) &#123;</span><br><span class="line">   <span class="keyword">is</span> Circle -&gt; Math.PI * shape.radius * shape.radius</span><br><span class="line">   <span class="keyword">is</span> Rectangle -&gt; shape.width * shape.height</span><br><span class="line">   <span class="keyword">is</span> Triangle -&gt; shape.base * shape.height / <span class="number">2.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>ADT</code>需要配合<strong>模式匹配</strong>才能够体现出最大的作用, 但是 <code>kotlin</code> 并没有在几大的程度上支持模式匹配, 然而 <code>kotlin</code> 表达式一九四非常强大的语言特性</p></blockquote><h1 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h1><blockquote><p>本章将告诉你函数式编程中的模式匹配, 你将了解为什么需要它, 以及如何使用模式匹配来组织业务, 虽然 <code>kotlin</code> 没有完整的模式匹配, 但可以配合 <code>when 表达式</code>完成一些功能</p></blockquote><p>本章主要内容:</p><ol><li>什么是模式匹配?</li><li></li></ol><h2 id="模式匹配的使用场景"><a href="#模式匹配的使用场景" class="headerlink" title="模式匹配的使用场景"></a>模式匹配的使用场景</h2><p>遇到一些复杂的数据结构, 比如树. 在对树进行操作的时候, 我们可以访问其结构内部的某个属性, Java 常用的方法是定义一个 类似 getter 的函数, 来访问某个属性</p><p>然而这显然不现实, 那些复杂的数据结构并没有给我们提供那么多方法. 有时候我们可能很难可以直接定位到我们需要的元素, 而是一层一层的访问过去, 然后再获取其中的属性. 进行相关操作, 比如 链表.</p><h3 id="什么是模式匹配"><a href="#什么是模式匹配" class="headerlink" title="什么是模式匹配?"></a>什么是模式匹配?</h3><p>模式 和 匹配</p><p>选定模式, 运行该模式进行匹配</p><p>java 的正则表达式就是模式匹配的一种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\w+&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isMatch</span> <span class="operator">=</span> pattern.match(text).matches(pattern, text);</span><br></pre></td></tr></table></figure><p>模式匹配除了正则表达式, 还有许多其他表达式</p><p>前面的笔记中, 我们对 表达式 有了具体的归纳: </p><p><strong>凡是能够求出特定值的组合都可以被叫做表达式</strong></p><p>而模式匹配, 所匹配的内容就是表达式, 构建模式的过程就是在构造表达式.</p><h3 id="常见的模式"><a href="#常见的模式" class="headerlink" title="常见的模式"></a>常见的模式</h3><blockquote><p>模式就是表达式</p></blockquote><h4 id="常量模式"><a href="#常量模式" class="headerlink" title="常量模式"></a>常量模式</h4><p>常量模式匹配非常简单, 就是 <code>if-else</code> <code>switch-case</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">constantPattern</span><span class="params">(a: <span class="type">Int</span>)</span></span> = <span class="keyword">when</span>(a) &#123;</span><br><span class="line">    <span class="number">1</span> -&gt; <span class="string">&quot;it is 1&quot;</span></span><br><span class="line">    <span class="number">2</span> -&gt; <span class="string">&quot;it is 2&quot;</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="string">&quot;it is other number&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型模式"><a href="#类型模式" class="headerlink" title="类型模式"></a>类型模式</h4><p>对类型进行匹配</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="keyword">val</span> radius: <span class="built_in">Double</span>): Shape()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="keyword">val</span> width: <span class="built_in">Double</span>, <span class="keyword">val</span> height: <span class="built_in">Double</span>): Shape()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span>(<span class="keyword">val</span> base: <span class="built_in">Double</span>, <span class="keyword">val</span> height: <span class="built_in">Double</span>): Shape()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getArea</span><span class="params">(shape: <span class="type">Shape</span>)</span></span>: <span class="built_in">Double</span> = <span class="keyword">when</span>(shape) &#123;</span><br><span class="line">   <span class="keyword">is</span> Circle -&gt; Math.PI * shape.radius * shape.radius</span><br><span class="line">   <span class="keyword">is</span> Rectangle -&gt; shape.width * shape.height</span><br><span class="line">   <span class="keyword">is</span> Triangle -&gt; shape.base * shape.height / <span class="number">2.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="逻辑表达式模式"><a href="#逻辑表达式模式" class="headerlink" title="逻辑表达式模式"></a>逻辑表达式模式</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">logicPattern01</span><span class="params">(a: <span class="type">Int</span>)</span></span> = <span class="keyword">when</span> (a) &#123;</span><br><span class="line">   <span class="keyword">in</span> <span class="number">2.</span><span class="number">.11</span> -&gt; (a.toString() + <span class="string">&quot;is a smaller than 10 and bigger than 1&quot;</span>)</span><br><span class="line">   <span class="keyword">else</span> -&gt; <span class="string">&quot;Maybe <span class="variable">$a</span> is bigger than 10, or smaller than 1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">logicPattern02</span><span class="params">(a: <span class="type">String</span>)</span></span> = <span class="keyword">when</span> &#123;</span><br><span class="line">   a.contains(<span class="string">&quot;Yison&quot;</span>) -&gt; <span class="string">&quot;Something is about Yison&quot;</span></span><br><span class="line">   <span class="keyword">else</span> -&gt; <span class="string">&quot;it&#x27;s none of Yison&#x27;s business&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上三种都是简单的模式匹配, 但看到这里你会发现这和普通的 <code>if-else</code>有什么区别? 凭什么学了半天 计数 代数(和类型和积类型) 你就给我整这个???</p></blockquote><h3 id="处理嵌套表达式"><a href="#处理嵌套表达式" class="headerlink" title="处理嵌套表达式"></a>处理嵌套表达式</h3><p>我们了解了一些常见的匹配模式, 但是不够, 那些都太过于简单了, 不能体现出模式匹配的好处</p><p>那 有没有 if-else 实现起来比较复杂的语句, 而使用模式匹配比较简单的呢?</p><p>答案是肯定的</p><p>我们定义如下结构:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Expr</span> &#123;</span><br><span class="line">   <span class="comment">// Num类表示某个整数的值</span></span><br><span class="line">   <span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Num</span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>) : Expr()</span><br><span class="line">   <span class="comment">// 是一个树形结构, 它被用来表示一些复杂的表达式, 其中opName 属性表示常见的操作符, 比如 : + - * /</span></span><br><span class="line">   <span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Operate</span>(<span class="keyword">val</span> opName: String, <span class="keyword">val</span> left: Expr, <span class="keyword">val</span> right: Expr) : Expr()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们可以提出一些需求, 比如 <code>1 + 0</code> 可以被简略为 <code>1</code>, <code>0 + 1</code> 可以被简化为 <code>1</code></p><p>如果使用传统方式判断将会是这样:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simplifyExpr</span><span class="params">(expr: <span class="type">Expr</span>)</span></span>: Expr = <span class="keyword">if</span> (expr <span class="keyword">is</span> Expr.Num) &#123;</span><br><span class="line">   expr</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (expr <span class="keyword">is</span> Expr.Operate &amp;&amp; expr.opName == <span class="string">&quot;+&quot;</span> &amp;&amp; expr.left <span class="keyword">is</span> Expr.Num &amp;&amp; expr.left.value == <span class="number">0</span>) &#123;</span><br><span class="line">   expr.right</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (expr <span class="keyword">is</span> Expr.Operate &amp;&amp; expr.opName == <span class="string">&quot;+&quot;</span> &amp;&amp; expr.right <span class="keyword">is</span> Expr.Num &amp;&amp; expr.right.value == <span class="number">0</span>) &#123;</span><br><span class="line">   expr.left</span><br><span class="line">&#125; <span class="keyword">else</span> expr</span><br></pre></td></tr></table></figure><blockquote><p>代码中充斥着智能类型转换</p></blockquote><p>记住, 这是一个简化表达式的函数</p><p>首先拿到 一个 <code>expr</code> 可能是 数字, 也可能是操作符</p><p>所以需要判断</p><p>如果是 数字 的话不需要简化, 可以直接返回</p><p>如果是操作符的话, 需要判断是什么操作符, 操作符是左边为数字还是右边为数字, 该数字是不是 <code>0</code> , 如果是 <code>0</code> 则需要简化</p><p>过程非常的复杂</p><p>如果使用<code>when</code>的传统方式转换将会是:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simplifyExpr02</span><span class="params">(expr: <span class="type">Expr</span>)</span></span>: Expr = <span class="keyword">when</span> &#123;</span><br><span class="line">   (expr <span class="keyword">is</span> Expr.Operate) &amp;&amp; (expr.opName == <span class="string">&quot;+&quot;</span>) &amp;&amp; (expr.right <span class="keyword">is</span> Expr.Num) &amp;&amp; (expr.right.value == <span class="number">0</span>) -&gt; expr.left</span><br><span class="line">   (expr <span class="keyword">is</span> Expr.Operate) &amp;&amp; (expr.opName == <span class="string">&quot;+&quot;</span>) &amp;&amp; (expr.left <span class="keyword">is</span> Expr.Num) &amp;&amp; (expr.left.value == <span class="number">0</span>) -&gt; expr.right</span><br><span class="line">   <span class="keyword">else</span> -&gt; expr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么做变化不大… 还是很复杂, 这种通过条件判断的方式真的很复杂</p><p>那我们还有什么方法呢?</p><h4 id="通过Scala找点灵感"><a href="#通过Scala找点灵感" class="headerlink" title="通过Scala找点灵感"></a>通过Scala找点灵感</h4><p>在 Scala 中使用模式匹配特别简单</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Num</span>(<span class="params">value: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Operate</span>(<span class="params">opName: <span class="type">String</span>, left: <span class="type">Expr</span>, right: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simplifyExpr</span></span>(expr: <span class="type">Expr</span>): <span class="type">Expr</span> = expr <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Operate</span>(<span class="string">&quot;+&quot;</span>, <span class="type">Num</span>(<span class="number">0</span>), x) =&gt; x</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Operate</span>(<span class="string">&quot;+&quot;</span>, x, <span class="type">Num</span>(<span class="number">0</span>)) =&gt; x</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; expr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kotlin中使用-when-解决"><a href="#kotlin中使用-when-解决" class="headerlink" title="kotlin中使用 when 解决"></a>kotlin中使用 when 解决</h3><p>在 kotlin 中我们可以通过找 计数 的方式</p><p>对, 就是根据<strong>代数数据类型</strong>计算出<strong>计数</strong></p><p><code>Expr</code> 如果不看需求的话, 只有两种情况: 要么是 <code>Num</code>, 要么是 <code>Operate</code></p><p>这明显是 <strong>代数数据类型</strong> 的 <strong>和类型</strong></p><p>我们知道, 和类型是把通过计算计数的方式将所有结果罗列出来</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simplifyExpr</span><span class="params">(expr: <span class="type">Expr</span>)</span></span>: Expr = <span class="keyword">when</span>(expr) &#123;</span><br><span class="line">   <span class="keyword">is</span> Expr.Num -&gt; TODO()</span><br><span class="line">   <span class="keyword">is</span> Expr.Operate -&gt; TODO()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>is Expr.Num -&gt; TODO()</code> 这个分支, 判断出来 <code>expr</code> 是数字, 数字不需要简化, 可以直接返回</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simplifyExpr</span><span class="params">(expr: <span class="type">Expr</span>)</span></span>: Expr = <span class="keyword">when</span>(expr) &#123;</span><br><span class="line">   <span class="keyword">is</span> Expr.Num -&gt; expr</span><br><span class="line">   <span class="keyword">is</span> Expr.Operate -&gt; TODO()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们判断:</p><p><code>is Expr.Operate -&gt; TODO()</code> 这个分支是计数类型的另一种 积类型</p><p>为什么呢?</p><p>通过需求分析:</p><p> <code>1 + 0</code> 可以被简略为 <code>1</code>, <code>1 + 0</code> 可以被简化为 <code>0</code></p><p>我们可以得出三种情况, 要么是右边数字为0, 要么是左边数字为0, 最后一种就是不满足条件的情况</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simplifyExpr03</span><span class="params">(expr: <span class="type">Expr</span>)</span></span>: Expr = <span class="keyword">when</span> (expr) &#123;</span><br><span class="line">   <span class="keyword">is</span> Expr.Num -&gt; expr</span><br><span class="line">   <span class="keyword">is</span> Expr.Operate -&gt; <span class="keyword">when</span> (expr) &#123;</span><br><span class="line">      Expr.Operate(<span class="string">&quot;+&quot;</span>, Expr.Num(<span class="number">0</span>), expr.right) -&gt; expr.right</span><br><span class="line">      Expr.Operate(<span class="string">&quot;+&quot;</span>, expr.left, Expr.Num(<span class="number">0</span>)) -&gt; expr.left</span><br><span class="line">      <span class="keyword">else</span> -&gt; expr</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来简单多了, 但是由于 <code>kotlin</code> 不支持真正的模式匹配, 所以在遇到这种下面情况, <code>kotlin</code> 就比较乏力了</p><p><code>val expr = Expr.Operate(&quot;+&quot;, Expr.Num(0), Expr.Operate(&quot;+&quot;, Expr.Num(1), Expr.Num(0)))</code></p><p>在scala中要解决该问题可以使用这种方式</p><p><code>case Operate(&quot;+&quot;, Num(0), Operate(&quot;+&quot;, left, Num(0))) =&gt; left</code></p><p>如果采用  kotlin 的方式我们需要递归实现:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simplifyExpr04</span><span class="params">(expr: <span class="type">Expr</span>)</span></span>: Expr = <span class="keyword">when</span> (expr) &#123;</span><br><span class="line">   <span class="keyword">is</span> Expr.Num -&gt; expr</span><br><span class="line">   <span class="keyword">is</span> Expr.Operate -&gt; <span class="keyword">when</span> (expr) &#123;</span><br><span class="line">      Expr.Operate(<span class="string">&quot;+&quot;</span>, Expr.Num(<span class="number">0</span>), expr.right) -&gt; simplifyExpr04(expr.right)</span><br><span class="line">      Expr.Operate(<span class="string">&quot;+&quot;</span>, expr.left, Expr.Num(<span class="number">0</span>)) -&gt; expr.left</span><br><span class="line">      <span class="keyword">else</span> -&gt; expr</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>某些情况下, 我们必须访问两层结构, 并且用递归又实现不了, 在 kotlin 中只能这样写:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simplifyExpr05</span><span class="params">(expr: <span class="type">Expr</span>)</span></span>: Expr = <span class="keyword">when</span> (expr) &#123;</span><br><span class="line">   <span class="keyword">is</span> Expr.Num -&gt; expr</span><br><span class="line">   <span class="keyword">is</span> Expr.Operate -&gt; <span class="keyword">when</span> &#123;</span><br><span class="line">      (expr.left <span class="keyword">is</span> Expr.Num &amp;&amp; expr.left.value == <span class="number">0</span>) &amp;&amp; (expr.right <span class="keyword">is</span> Expr.Operate) -&gt; <span class="keyword">when</span> (expr.right) &#123;</span><br><span class="line">         Expr.Operate(<span class="string">&quot;+&quot;</span>, expr.right.left, Expr.Num(<span class="number">0</span>)) -&gt; expr.right.left</span><br><span class="line">         <span class="keyword">else</span> -&gt; expr.right</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> -&gt; expr</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又回到复杂的条件判断环节</p><h2 id="增强Kotlin模式匹配"><a href="#增强Kotlin模式匹配" class="headerlink" title="增强Kotlin模式匹配"></a>增强Kotlin模式匹配</h2><p>实现模式匹配的技术都有:</p><ol><li>类型测试&#x2F;类型转换(Type-Test&#x2F;Type-Cast)</li><li>面向对象分解(Object-Oriented Decomposition)</li><li>访问者设计模式(Visitor)</li><li>Typecase</li><li>样本类(Case Classes)</li><li>抽取器(Extractor)</li></ol><p>只有后面3种 Kotlin 还不能实现, 或者说实现起来比较困难</p><h3 id="类型测试-x2F-类型转换"><a href="#类型测试-x2F-类型转换" class="headerlink" title="类型测试&#x2F;类型转换"></a>类型测试&#x2F;类型转换</h3><p><code>Kotlin</code>可以进行类型测试和<code>Smart Casts 智能类型转化</code></p><p><code>expr.left is Expr.Num &amp;&amp; expr.left.value == 0</code></p><p>但是这种方式会存在一些缺点, 所以这种方式基本无法增强<code>koltin</code>的模式匹配能力</p><h3 id="面向对象的分解"><a href="#面向对象的分解" class="headerlink" title="面向对象的分解"></a>面向对象的分解</h3><p><code>expr.left is Expr.Num &amp;&amp; expr.left.value == 0</code>这段代码方向什么问题了么?</p><p>每次判断类型都需要 <code>is xxx</code>, 但该代码的功能其实就是判断 <code>value</code> 是不是 等于 <code>0</code> 而已</p><p>所以可以包装成 <code>expr.isZero()</code> </p><p>这样之后, 我们就可以不需要重复编写相同的代码了…</p><p>而本章需要介绍的 <strong>面向对象的分解</strong> 就采用了这种思路: <strong>我们通过在父类中定义一系列的测试方法(比如上面的测试是否为数值), 然后在子类种实现的这些方法, 就可以在不同的子类种做出响应的操作</strong></p><p>我们在上一节实现了一个比较吃力的例子:</p><p><code>val expr = Expr.Operate(&quot;+&quot;, Expr.Num(0), Expr.Operate(&quot;+&quot;, Expr.Num(1), Expr.Num(0)))</code></p><p>如果要更加简单的匹配上面的表达式, 我们该怎么做?</p><p>首先, 需要判断 <code>0 + x</code> 或者 x + 0 , 关于这样的判断我们在前面写了许多的方式, 所以我们可以将这一多次用到的操作定义成一个方法. 简单的实现如下:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Expr</span> &#123;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">isZero</span><span class="params">()</span></span>: <span class="built_in">Boolean</span></span><br><span class="line">   <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">isAddZero</span><span class="params">()</span></span>: <span class="built_in">Boolean</span></span><br><span class="line">   <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">left</span><span class="params">()</span></span>: Expr</span><br><span class="line">   <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">right</span><span class="params">()</span></span>: Expr</span><br><span class="line">   <span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Num</span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>) : Expr() &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isZero</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = <span class="keyword">this</span>.value == <span class="number">0</span></span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isAddZero</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">left</span><span class="params">()</span></span>: Expr &#123;</span><br><span class="line">         <span class="keyword">throw</span> Throwable(<span class="string">&quot;no element&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">right</span><span class="params">()</span></span>: Expr &#123;</span><br><span class="line">         <span class="keyword">throw</span> Throwable(<span class="string">&quot;no element&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Operate</span>(<span class="keyword">val</span> opName: String, <span class="keyword">val</span> left: Expr, <span class="keyword">val</span> right: Expr) : Expr() &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isZero</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isAddZero</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.opName == <span class="string">&quot;+&quot;</span> &amp;&amp; (<span class="keyword">this</span>.left.isZero() || <span class="keyword">this</span>.right.isZero())</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">left</span><span class="params">()</span></span>: Expr = <span class="keyword">this</span>.left</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">right</span><span class="params">()</span></span>: Expr = <span class="keyword">this</span>.right</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">simplifyExpr</span><span class="params">(expr: <span class="type">Expr</span>)</span></span>: Expr = <span class="keyword">when</span> &#123;</span><br><span class="line">   expr.isAddZero() &amp;&amp; expr.isAddZero() &amp;&amp; expr.right().left().isZero() -&gt; expr.right().right()</span><br><span class="line">   <span class="keyword">else</span> -&gt; expr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> expr = Expr.Operate(<span class="string">&quot;+&quot;</span>, Expr.Num(<span class="number">0</span>), Expr.Operate(<span class="string">&quot;+&quot;</span>, Expr.Num(<span class="number">0</span>), Expr.Num(<span class="number">1</span>)))</span><br><span class="line">   simplifyExpr(expr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这种的代价实在太大了, 直观表现出来的现象就是 代码 膨胀</p><p>而且还需要实现很多方法, 不切实际, 不好用. 还不如直接写 Scala 的代码呢…</p><p>有没有解决办法呢?</p><p>有, 那就是访问者设计模式</p><h3 id="访问者设计模式"><a href="#访问者设计模式" class="headerlink" title="访问者设计模式"></a>访问者设计模式</h3><p>主要操作如下:</p><p>新建一个 <code>Visitor 类</code>, 主要功能是起到访问的作用, 用它来访问我们需要进行操作的类, 比如 <code>Expr</code></p><p><code>Visitor类</code>种会定义多个 <code>visit 方法</code>, 这些方法的名称相同, 但是参数不同, 参数的类型都是 <code>Expr</code> 的子类</p><p>接着我们需要为每个子类都定义一个 <code>accept 方法</code>, 这些方法用来将访问者对象注入, 然后访问者对象就可以对目标类的不同的子类进行一些不同的操作了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">visit</span><span class="params">(expr: <span class="type">Expr</span>.<span class="type">Num</span>)</span></span>: <span class="built_in">Boolean</span> = <span class="literal">false</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">visit</span><span class="params">(expr: <span class="type">Expr</span>.<span class="type">Operate</span>)</span></span>: <span class="built_in">Boolean</span> = <span class="keyword">when</span>(expr) &#123;</span><br><span class="line">      Expr.Operate(<span class="string">&quot;+&quot;</span>, Expr.Num(<span class="number">0</span>), expr.right) -&gt; <span class="literal">true</span></span><br><span class="line">      Expr.Operate(<span class="string">&quot;+&quot;</span>, expr.left, Expr.Num(<span class="number">0</span>)) -&gt; <span class="literal">true</span></span><br><span class="line">      <span class="keyword">else</span> -&gt; <span class="literal">false</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Expr</span> &#123;</span><br><span class="line">   <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">accept</span><span class="params">(v: <span class="type">Visitor</span>)</span></span>: <span class="built_in">Boolean</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Num</span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>) : Expr() &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">accept</span><span class="params">(v: <span class="type">Visitor</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> v.visit(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Operate</span>(<span class="keyword">val</span> opName: String, <span class="keyword">val</span> left: Expr, <span class="keyword">val</span> right: Expr) : Expr() &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">accept</span><span class="params">(v: <span class="type">Visitor</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> v.visit(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说这么多废话, 害… 不就是定义了个 Visitor 类, 里面包装了所有 Expr 子类的功能罢了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> when表达式 </tag>
            
            <tag> 密封类 </tag>
            
            <tag> 代数数据类型 </tag>
            
            <tag> 代数 </tag>
            
            <tag> 计数 </tag>
            
            <tag> 积类型 </tag>
            
            <tag> 构造代数数据类型 </tag>
            
            <tag> 模式匹配 </tag>
            
            <tag> 常见模式 </tag>
            
            <tag> 类型模式 </tag>
            
            <tag> 逻辑表达式模式 </tag>
            
            <tag> 嵌套表达式 </tag>
            
            <tag> 增强kotlin匹配模式 </tag>
            
            <tag> 类型测试 </tag>
            
            <tag> 类型转换 </tag>
            
            <tag> 面向对象的分解 </tag>
            
            <tag> 访问者设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、kotlin的可空性和基本数据类型(一)</title>
      <link href="/2022/12/03/07kotlin/%E5%9B%9B%E3%80%81kotlin%E7%9A%84%E5%8F%AF%E7%A9%BA%E6%80%A7%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/12/03/07kotlin/%E5%9B%9B%E3%80%81kotlin%E7%9A%84%E5%8F%AF%E7%A9%BA%E6%80%A7%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="可空性"><a href="#可空性" class="headerlink" title="可空性"></a>可空性</h1><blockquote><p>前言: 可空性是kotlin类型系统提供的功能, 帮助你避免 <code>NullPointerException</code> </p></blockquote><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h2><p>是一种可以为 <code>null</code> 的类型, 本质是下面这样: </p><blockquote><p><code>Type? == Type or null</code></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str: String? = <span class="literal">null</span></span><br></pre></td></tr></table></figure><blockquote><p>说白了, 你就把他当作一种新的类型就好, 这样的话, 如果遇到</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a: <span class="built_in">Int</span>? = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b: <span class="built_in">Int</span> = a <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>这面这种情况时, 不会觉得诧异, 毕竟是不同的类型不是么??? </p></blockquote><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>在不影响程序运行性能的前提下, 显示的帮助程序员避免空指针异常 <code>NullPointerException</code> </p><blockquote><p>可空类型在编译期间, 就把空指针异常解决了, 在运行期间不做任何操作, 所以不影响运行时性能</p></blockquote><p>在java中这样容易出现空指针异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">strLen</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> s.length(); <span class="comment">// 这句话无法确定 s 是否为 null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际的java项目,  都需要 <code>if</code> 判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以用 三目运算符, 一行解决, 但也很麻烦</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">strLen</span><span class="params">(String s)</span>  &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == s || (len = s.length()) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;字符串长度为空&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然 <code>jdk1.8</code> 之后出现的 <code>Optional</code> , 但还是麻烦的, 不仅使代码变得冗长而且还存在性能问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">strLen</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(s).orElse(<span class="string">&quot;&quot;</span>).length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 kotlin 重写这个函数前需要程序员主动判断该函数是否接受实参为空的情况, 如果需要支持的话, </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">strLen</span><span class="params">(s: <span class="type">String</span>?)</span></span> = s?.length</span><br></pre></td></tr></table></figure><p>在上面代码中, <code>s?.length</code> 如果 <code>s</code> 为 <code>null</code> 的话, 则该函数直接返回 <code>null</code> , 函数调用者 可以借助返回值 <code>null</code> 使用 <code>if</code> 判断是否为空</p><p>如果实参一定不为 <code>null</code> 的话, 则</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">strLen</span><span class="params">(s: <span class="type">String</span>)</span></span> = s.length</span><br></pre></td></tr></table></figure><p>对了, 和前面的 <code>when</code> 的 <code>is Int</code> 智能转换一样, 可空类型也存在智能转换</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a: String? = <span class="string">&quot;zhazha&quot;</span></span><br><span class="line"><span class="keyword">var</span> b: String</span><br><span class="line"><span class="keyword">if</span> (a != <span class="literal">null</span>) &#123;</span><br><span class="line">    b = a <span class="comment">// 这行代码不会报错</span></span><br><span class="line">    println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用?"></a>怎么用?</h2><h3 id="方法一-使用安全调用运算符"><a href="#方法一-使用安全调用运算符" class="headerlink" title="方法一: 使用安全调用运算符 ?."></a>方法一: 使用安全调用运算符 <code>?.</code></h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/753393955ad740659132ca2cbff3cb3e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p> 前面的示例代码中 <code>s?.length</code> 会发现 <code>?</code> 运算符, 这种方式相当于</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (s == <span class="literal">null</span>) <span class="literal">null</span> <span class="keyword">else</span> s.length</span><br></pre></td></tr></table></figure><p>如果 <code>s == null</code> 的情况下 整个 <code>s?.length</code> 表达式的值为 <code>null</code>, 在该表达式为 <code>null</code> 的情况下, 会出现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> len: <span class="built_in">Int</span>? = s?.length</span><br><span class="line"><span class="comment">//          👆</span></span><br></pre></td></tr></table></figure><p>接收该函数返回值的变量类型也应该是 可空的, 毕竟结果可能是 <code>null</code></p><p>所以使用安全调用操作符<code>?</code>, 其接收结果的变量也需要可空操作符</p><p>另外 <code>?</code> 运算符还可以链式调用, 比如: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name:String? = person?.children?.name</span><br></pre></td></tr></table></figure><p>只要有一步骤结果为 <code>null</code>, 后面的代码不再运行, 整个表达式的结果为 <code>null</code> </p><blockquote><p><code>?</code> 这种方式是线程安全的</p></blockquote><h3 id="方法二-Elvis运算符"><a href="#方法二-Elvis运算符" class="headerlink" title="方法二: Elvis运算符 ?:"></a>方法二: Elvis运算符 <code>?:</code></h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c77ccc6f4321488f8c4d88b09b1d75c9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> firstName: String? = <span class="string">&quot;zhazha&quot;</span></span><br><span class="line"><span class="keyword">val</span> lastName: String = firstName ?: <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到使用这种方式之后 <code>?</code> 运算符消失了</p><p>类似于:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (firstName == <span class="literal">null</span>) <span class="string">&quot;&quot;</span> <span class="keyword">else</span> firstName</span><br></pre></td></tr></table></figure><p>Elvis 还是这样: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> lastName: String = firstName ?: <span class="keyword">throw</span> Exception(<span class="string">&quot;错误&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="方法三-if"><a href="#方法三-if" class="headerlink" title="方法三: if"></a>方法三: if</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (firstName != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> lastName: String = firstName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方法在你觉得代码可读性比较低时，使用, 但是有个前提, <code>firstName</code> 不为 <code>共享变量</code>(多线程的共享变量), 否则还是会报错</p></blockquote><h3 id="方法四-使用非空断言运算符"><a href="#方法四-使用非空断言运算符" class="headerlink" title="方法四: 使用非空断言运算符!!."></a>方法四: 使用非空断言运算符<code>!!.</code></h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/692d561548654970b2e40c509ef586a8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>使用这种方式确实可以脱下<code>?</code> 外衣, 但对于空指针的检测直接关闭了, 表达式中的变量是否会发生空指针异常已经不管了</p><blockquote><p><strong>这里的“已经不管了”，是错的</strong>。正确的说法是 <code>null!!</code> 如果对象本身就是 <code>null</code> 直接抛出<strong>空指针异常</strong>，所以 <code>!!</code> 是一种不负责任的行为，除非你能保证该变量百分百不会是 <code>null</code>，最好别用，可以使用 <code>?:</code> 代替</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> firstName: String? = <span class="literal">null</span></span><br><span class="line"><span class="keyword">val</span> lastName: String = firstName</span><br></pre></td></tr></table></figure><blockquote><p>这种方式不推荐使用, 除非你能保证该值绝对不为空, 比如: 不使用 <code>object</code> 定义的单例</p></blockquote><h3 id="方式五-先决条件函数"><a href="#方式五-先决条件函数" class="headerlink" title="方式五: 先决条件函数"></a>方式五: 先决条件函数</h3><p>这些函数都能脱下 <code>?</code> 外衣</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> firstName: String? = <span class="literal">null</span></span><br><span class="line"><span class="comment">//    checkNotNull(firstName)</span></span><br><span class="line"><span class="comment">//    checkNotNull(firstName) &#123; &quot;firstName 为空&quot; &#125;</span></span><br><span class="line"><span class="comment">//    requireNotNull(firstName) &#123; &quot;firstName 为空&quot; &#125;</span></span><br><span class="line"><span class="comment">//    check(firstName != null)</span></span><br><span class="line">    require(firstName != <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">val</span> s: String = firstName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果要给函数类型添加可空性, <code>val funType: (() -&gt; T)?</code> 这样做</p></blockquote><h2 id="安全转换-as"><a href="#安全转换-as" class="headerlink" title="安全转换 as?"></a>安全转换 <code>as?</code></h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/60051973236245e59d46d522570a16d7~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>前面的章节学过, as 作为强转操作符, 在使用的过程中可以 配合 is 强制转换, 但如果类型转化不成功就会报<code>ClassCastException</code></p><p>所以kotlin创造了 <code>as?</code> 使用方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Any</span>, b: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> c: <span class="built_in">Int</span>? = a <span class="keyword">as</span>? <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">val</span> d: <span class="built_in">Int</span>? = b <span class="keyword">as</span>? <span class="built_in">Int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在例子中, 如果 Any 参数指向的类型不是 Int , 则返回 null 给 c 变量, 否则强转成功</p><p>一般 <code>as?</code> 配合 <code>?:</code> 使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Any</span>, b:<span class="type">Any</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> c: <span class="built_in">Int</span> = a <span class="keyword">as</span>? <span class="built_in">Int</span> ?: <span class="number">0</span></span><br><span class="line">    <span class="keyword">val</span> d: <span class="built_in">Int</span> = b <span class="keyword">as</span>? <span class="built_in">Int</span> ?: <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> c + d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="let-函数"><a href="#let-函数" class="headerlink" title="let 函数"></a><code>let</code> 函数</h2><p><code>let</code> 函数源码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> T.<span class="title">let</span><span class="params">(block: (<span class="type">T</span>) -&gt; <span class="type">R</span>)</span></span>: R &#123;</span><br><span class="line">    contract &#123;</span><br><span class="line">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> block(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出它就是个<code>扩展函数</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> str:String? = <span class="literal">null</span></span><br><span class="line">    println(str?.let &#123; it.length + <span class="number">100</span> &#125;) <span class="comment">// null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印出了 <code>null</code> , <code>str == null</code>, 所以 <code>str? == null</code> 后面的<code>let</code>函数将不执行, 直接返回 <code>null</code> 但是我们需要 <code>null</code> 的时候等于 <code>0</code> 最终要打印 <code>100</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> str:String? = <span class="literal">null</span></span><br><span class="line">    println(str.let &#123; (it?.length ?: <span class="number">0</span>) + <span class="number">100</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>看到代码中的 <code>str.let</code> 了么? <code>str == null</code> 但是 <code>str.let</code> 却不会报错? 看的出来 扩展函数 的优势了么? <code>null.let</code> 不会报错, 了解扩展函数的本质后, 会发现不报错也合理, 扩展函数仅仅是把目标对象的 <code>this</code> 当作 形式参数 , 但这里的 <code>this</code> 是 <code>null</code> , 传递一个等于 <code>null</code> 的参数没问题吧???</p></blockquote><h2 id="可空性扩展函数"><a href="#可空性扩展函数" class="headerlink" title="可空性扩展函数"></a>可空性扩展函数</h2><p>为可空类型定义扩展函数处理 <code>null</code> 问题</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (str.isNullOrBlank()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> Exception(<span class="string">&quot;str == null or str is blank&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码就类似这样: <code>return this == null || this.isBlank()</code> </p><p>可以看的出来 <code>str == null</code> 而 <code>null</code> 能调用 <code>null.isNullOrBlank()</code> (null直接调用 <code>isNullOrBlank</code> 会报错, 但 把 <code>null</code> 赋值给 <code>str</code> , 再调用 <code>isNullOrBlank</code> 不会报错)</p><blockquote><p>只有扩展函数才能做到这一点，普通成员方法的调用是通过对象实例来分发的，因此实例为 <code>null</code> 时（成员方法）永远不能被执行。</p></blockquote><h2 id="延迟初始化-lateinit"><a href="#延迟初始化-lateinit" class="headerlink" title="延迟初始化 lateinit"></a>延迟初始化 <code>lateinit</code></h2><p>很多时候, 成员属性的初始化未必全部都需要在构造函数内完成, 看下面这段代码的成员属性 <code>a</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyClass</span>(<span class="keyword">val</span> b: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a: Person <span class="comment">// 报错</span></span><br><span class="line">    <span class="keyword">constructor</span>(a: Person, b: <span class="built_in">Int</span>) : <span class="keyword">this</span>(b) &#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="comment">// init balabala</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>a</code> 报错, 主要的问题是 kotlin 对象的初始化顺序是 </p><p>调用<code>主构造函数</code> &#x3D;&gt; <code>主构造外的成员属性或者init代码块</code>(根据这俩的定义顺序判断) &#x3D;&gt; 再调用<code>次构造函数</code></p><blockquote><p>比如 <code>b</code> 在主构造函数内, 而 <code>a</code> 在主构造函数外</p></blockquote><blockquote><p>次构造函数在构建一个对象的时候, 会调用两个构造函数, 一个是主构造函数, 另一个是次构造函数(在有主构造函数的前提下, 如果没有, 类里面全都是次构造函数则不然)</p></blockquote><p>而 <code>主构造函数外属性</code> 和 <code>init代码块</code> 在构造一个对象时, 都会被编译器放入到 <code>主构造函数体内</code> </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设这是主构造函数</span></span><br><span class="line"><span class="keyword">constructor</span>(b: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.b = b</span><br><span class="line">    <span class="comment">// 上面就是主构造全部的内容</span></span><br><span class="line">    <span class="comment">// 接下来是init和主构造函数外属性的内容</span></span><br><span class="line">    <span class="keyword">this</span>.a = ? <span class="comment">// error, 在初始化变量 a 的时候不清楚要给它初始化成什么???? 所以报错了</span></span><br><span class="line">    <span class="comment">// init balabala</span></span><br><span class="line">    <span class="comment">// 然后再调用次构造函数(如果你使用次构造函数构造一个对象的话)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后调用次构造函数</span></span><br><span class="line"><span class="keyword">constructor</span>(a: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a <span class="comment">// 在次构造函数初始化时, 主构造函数报错了, 次构造函数来不及构建一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遇到这种情况一般都解决方案都是 <code>var a: Int = 0</code> 给它初始化, 但是在一些架构中, 人家有专门的初始化方案, 不需要程序员主动帮助初始化, 比如: <code>Spring</code></p><p>这时候就需要 <code>lateinit</code> 关键字</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MyClass</span>(<span class="keyword">val</span> b: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> a: Person</span><br><span class="line">    <span class="keyword">constructor</span>(a: Person, b: <span class="built_in">Int</span>) : <span class="keyword">this</span>(b) &#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="comment">// init balabala</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这关键字有限制的: </p><ol><li>不能修饰 <code>val</code> 属性, 只能修饰 <code>var</code></li><li>不能修饰基础数据类型, 比如: <code>Int Double Float Long</code> 之类的属性</li></ol><h3 id="判断-lateinit-修饰的对象是否已经被初始化"><a href="#判断-lateinit-修饰的对象是否已经被初始化" class="headerlink" title="判断 lateinit 修饰的对象是否已经被初始化"></a>判断 <code>lateinit</code> 修饰的对象是否已经被初始化</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Player</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> equipment: String</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">ready</span><span class="params">()</span></span> &#123;</span><br><span class="line">        equipment = <span class="string">&quot;sharp knife&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">battle</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>::equipment.isInitialized) &#123;</span><br><span class="line">            println(equipment)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒加载初始化-惰性初始化"><a href="#懒加载初始化-惰性初始化" class="headerlink" title="懒加载初始化(惰性初始化)"></a>懒加载初始化(惰性初始化)</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> config: String <span class="keyword">by</span> lazy &#123; loadConfig() &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">loadConfig</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        println(<span class="string">&quot;load Config...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;xxxxxxxxx&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">actual</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">lazy</span><span class="params">(initializer: () -&gt; <span class="type">T</span>)</span></span>: Lazy&lt;T&gt; = SynchronizedLazyImpl(initializer)</span><br></pre></td></tr></table></figure><p>lazy 后面传入的是 函数类型 , 一个无参数的返回 T 类型的函数类型 <code>() -&gt; T</code></p><h2 id="类型参数的可空性-泛型可空性"><a href="#类型参数的可空性-泛型可空性" class="headerlink" title="类型参数的可空性(泛型可空性)"></a>类型参数的可空性(泛型可空性)</h2><p>类型参数传递可以是空的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">printHashCode</span><span class="params">(t: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">    print(t?.hashCode())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    printHashCode(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型参数传递的是 <code>T</code> 没有任何的 <code>?</code> , 但是仍然可以传递 <code>null</code> , 这时在函数内部如果没写上 <code>t?</code> 那么就会报 空指针异常 </p><blockquote><p><code>null</code> 的类型是 <code>Any?</code></p></blockquote><h2 id="可空性在-kotlin-和-java-之间的问题"><a href="#可空性在-kotlin-和-java-之间的问题" class="headerlink" title="可空性在 kotlin 和 java 之间的问题"></a>可空性在 kotlin 和 java 之间的问题</h2><h3 id="平台类型"><a href="#平台类型" class="headerlink" title="平台类型"></a>平台类型</h3><p>kotlin调用 java 的函数时, 无法判断 java 的参数是否为 可空性 , 所以专门推出了 平台类型</p><p><code>java的平台类型 = kotlin的可空类型 or kotlin的非空类型</code></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3bee8549629f465fa27bf58f0202c2ac~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这项判断由程序员自主判断</p><p>在java下, 创建 <code>Person</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 kotlin 中使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">yellAt</span><span class="params">(person: <span class="type">Person</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//    println(person.name.toUpperCase() + &quot;!!!&quot;) // java.lang.NullPointerException: person.name must not be null</span></span><br><span class="line">    println(person.name?.toUpperCase() + <span class="string">&quot;!!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> person = Person(<span class="literal">null</span>)</span><br><span class="line">    yellAt(person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>person: Person</code> 参数没有 可空性 <code>?</code>, 但他是 <code>平台类型</code>, 程序员可以选择是否按照可空类型判断 <code>person.name?.toUpperCase()</code>, 也可以按照非空判断 <code>person.name.toUpperCase()</code> 怎么不报错怎么来</p><p>kotlin 用 <code>Person!</code> 表示一个来自java平台的 平台类型 , 用户不可以自行使用 <code>!</code> , 它仅仅是提示程序员 该变量 未知可空性</p><h4 id="平台类型遇到继承"><a href="#平台类型遇到继承" class="headerlink" title="平台类型遇到继承"></a>平台类型遇到继承</h4><p>kotlin 继承重写 java 函数时, 可以选择 类型为 可空的 ,也可以选择类型为 非空的 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StringProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(String value)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StringPrinter</span> : <span class="type">StringProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">process</span><span class="params">(value: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        println(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NullableStringPrinter</span> : <span class="type">StringProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">process</span><span class="params">(value: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">        println(value ?: <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基本数据类型和其他数据类型"><a href="#基本数据类型和其他数据类型" class="headerlink" title="基本数据类型和其他数据类型"></a>基本数据类型和其他数据类型</h1><blockquote><p>kotlin 没有包装类型</p></blockquote><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ol><li>kotlin不区分基本数据类型和包装类型, kotlin使用的都是包装类型,但是在运行时使用的却是基础类型. 对kotlin编码期间的函数最终都会被kotlin编译器修改成对基础类型的操作</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a: <span class="built_in">Int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">val</span> plus = a.plus(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>java 反编译后: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">plus</span> <span class="operator">=</span> a + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p>不得不吹一波 kotlin 编译器的强大, 但强大带来的却是编译速度缓慢, 哎~~~</p></blockquote><ol start="2"><li>泛型的基本数据类型最终会被编译成 <code>Integer</code></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = ArrayList&lt;<span class="built_in">Int</span>&gt;()</span><br></pre></td></tr></table></figure><p>Java: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br></pre></td></tr></table></figure><ol start="3"><li>kotlin的基本数据类型不能存储 <code>null</code></li></ol><p>kotlin的基本数据类型和java的一致, 都不能存储 <code>null</code>, java的基本数据类型在 kotlin 中不会变成 平台类型 而是直接变成 基本数据类型 </p><h2 id="可空的基本数据类型"><a href="#可空的基本数据类型" class="headerlink" title="可空的基本数据类型"></a>可空的基本数据类型</h2><p>kotlin的可空基本数据类型无法翻译成 java 的 基本数据类型, 所以任何可空类型, 最终都会变成 包装类型</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>?) &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">isOldThan</span><span class="params">(other: <span class="type">Person</span>)</span></span>: <span class="built_in">Boolean</span>? = <span class="keyword">this</span>.age?.let &#123;</span><br><span class="line">      other.age?.let &#123; it2 -&gt;</span><br><span class="line">         it &gt; it2</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> person = Person(<span class="string">&quot;zhazha&quot;</span>, <span class="number">23</span>)</span><br><span class="line">   <span class="keyword">val</span> person1 = Person(<span class="string">&quot;xixix&quot;</span>, <span class="number">21</span>)</span><br><span class="line">   <span class="keyword">val</span> b = person.isOldThan(person1)</span><br><span class="line">   <span class="keyword">if</span> (<span class="literal">null</span> == b) println(<span class="string">&quot;不清楚&quot;</span>) <span class="keyword">else</span> <span class="keyword">if</span> (b) println(<span class="string">&quot;大于&quot;</span>) <span class="keyword">else</span> println(<span class="string">&quot;小于&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数字转换"><a href="#数字转换" class="headerlink" title="数字转换"></a>数字转换</h2><ol><li>kotlin 不会将基本数据类型隐式转换, 比如 小范围的<code>Int</code> 变量转换成 <code>Long</code>, 这和java还是有区别, 这样做的好处在于更加的安全可控</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">val</span> b: <span class="built_in">Long</span> = a <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>kotlin 对每个基本数据类型提供了 <code>toXXXX</code> 函数(除了 <code>Boolean</code>), 这种显示的转换可以大范围转小范围, 也可小范围转大范围</p></li><li><p>在 java 中, 包装类型的比较会出现下面这种问题</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">42</span>).equals(<span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">42</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>这俩明明都是 <code>42</code> 但不相等, 在 java 中 <code>equals</code> 有判断类型的, 所以会返回<code>false</code>, 如果需要则要转换成相同类型</p><p>在 kotlin 中, 如果变量没有转换到同一个类型, 也无法比较</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4390222b93db446cb2c0a70990a4122b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>需要转换</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c406ea1c329442978c86e3cb7999c737~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="Any-和-Any-根类型"><a href="#Any-和-Any-根类型" class="headerlink" title="Any 和 Any? 根类型"></a>Any 和 Any? 根类型</h2><ol><li><p><code>Any</code> 类似于 java 的<code>Object</code> 对象, 是 kotlin 所有非空类的共有根类, 而不论是空类还是非空类的所有类都可以传给 <code>Any?</code></p></li><li><p><code>Any</code> 有很多 <code>Object</code> 的函数, 但并不是所有, 有些函数 比如 <code>wait / notify</code> 函数只能通过 <code>Any</code> 强转成 <code>Object</code> 来调用该函数</p></li></ol><h2 id="Unit-类型-kotlin-的-void"><a href="#Unit-类型-kotlin-的-void" class="headerlink" title="Unit 类型: kotlin 的 void"></a>Unit 类型: kotlin 的 void</h2><p><code>Unit</code> 和 <code>void</code> 的差别在于: </p><ol><li><p>在 kotlin 中, <code>Unit</code> 是一个类, <code>Unit</code> 可以当作函数的参数, 平时使用时 <code>Unit</code> 会被转化成 java 的 <code>void</code></p></li><li><p><code>Unit</code> 不需要主动的 <code>return</code> , 会隐式的返回 <code>Unit</code></p></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">object</span> <span class="built_in">Unit</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span> = <span class="string">&quot;kotlin.Unit&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nothing-类型-这个函数不返回"><a href="#Nothing-类型-这个函数不返回" class="headerlink" title="Nothing 类型: 这个函数不返回"></a>Nothing 类型: 这个函数不返回</h2><p><code>Nothing</code> 没有值, 只有被当作函数返回值或者被当作泛型函数返回值的类型参数使用才会有意义</p><p>源码: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Nothing</span> <span class="keyword">private</span> <span class="keyword">constructor</span>()</span><br></pre></td></tr></table></figure><p>使用: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fail</span><span class="params">(message: <span class="type">String</span>)</span></span>: <span class="built_in">Nothing</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> Exception(message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可空性和集合"><a href="#可空性和集合" class="headerlink" title="可空性和集合"></a>可空性和集合</h2><p><code>List&lt;Int?&gt;</code> 和 <code>List&lt;Int?&gt;?</code></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7e9c35234ec4c2592c009ffda0e8cc1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lateinit </tag>
            
            <tag> 类型转换 </tag>
            
            <tag> 可空性 </tag>
            
            <tag> 基本数据类型 </tag>
            
            <tag> 问号表达式 </tag>
            
            <tag> elvis运算符 </tag>
            
            <tag> if </tag>
            
            <tag> !!. </tag>
            
            <tag> ? </tag>
            
            <tag> 非空断言运算符 </tag>
            
            <tag> 先决条件函数 </tag>
            
            <tag> as? </tag>
            
            <tag> 安全类型转换 </tag>
            
            <tag> 延迟初始化 </tag>
            
            <tag> 懒加载 </tag>
            
            <tag> 惰性初始化 </tag>
            
            <tag> 泛型可空性 </tag>
            
            <tag> 平台类型 </tag>
            
            <tag> 其他数据类型 </tag>
            
            <tag> 数字转换 </tag>
            
            <tag> Any </tag>
            
            <tag> Any? </tag>
            
            <tag> 根类型 </tag>
            
            <tag> Unit类型 </tag>
            
            <tag> void </tag>
            
            <tag> Nothing类型 </tag>
            
            <tag> 可空性集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、kotlin的类和对象(一)</title>
      <link href="/2022/12/03/07kotlin/%E4%B8%89%E3%80%81kotlin%E7%9A%84%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1(%E4%B8%80)/"/>
      <url>/2022/12/03/07kotlin/%E4%B8%89%E3%80%81kotlin%E7%9A%84%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="类-★"><a href="#类-★" class="headerlink" title="类 ★"></a>类 ★</h1><h2 id="属性★"><a href="#属性★" class="headerlink" title="属性★"></a>属性★</h2><p><code>属性 = 字段 + setter/getter</code></p><h3 id="声明属性"><a href="#声明属性" class="headerlink" title="声明属性"></a>声明属性</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> name: String = <span class="string">&quot;Holmes, Sherlock&quot;</span></span><br><span class="line">   <span class="keyword">var</span> street: String = <span class="string">&quot;Baker&quot;</span></span><br><span class="line">   <span class="keyword">var</span> city: String = <span class="string">&quot;London&quot;</span></span><br><span class="line">   <span class="keyword">var</span> state: String? = <span class="literal">null</span></span><br><span class="line">   <span class="keyword">var</span> zip: String = <span class="string">&quot;123456&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="var-和-val"><a href="#var-和-val" class="headerlink" title="var 和 val"></a>var 和 val</h4><p><code>var</code> 定义一个可读可写的属性, <code>val</code> 定义一个只读的属性</p><p><code>this.name</code> 就相当调用了 <code>getName</code> 函数, <code>this.name = &quot;嘿嘿&quot;</code>, 就相当于调用了 <code>setName(&quot;嘿嘿&quot;)</code></p><p><code>kotlin</code>中所有的字段都需要初始化, 不像 <code>java</code> 那样字段有默认值</p><ul><li><p><code>var allByDefault: Int?</code> 错误：需要显式初始化器，隐含默认 <code>getter</code> 和 setter</p></li><li><p><code>var initialized = 1</code> 类型 <code>Int</code>、<code>kotlin</code>生成 <code>getter 和 setter</code></p></li><li><p><code>val inferredType = 1</code> 类型 <code>Int</code> 、默认 <code>getter</code></p></li><li><p><code>val simple: Int?</code>  错误: 需要在构造函数中初始化或者添加初始化值, 类型 <code>Int</code>、<code>kotlin</code>生成 <code>getter</code></p></li></ul><h3 id="自定义访问器"><a href="#自定义访问器" class="headerlink" title="自定义访问器"></a>自定义访问器</h3><p>给字段下面加上自定义的 <code>get</code> 和 <code>set</code> </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">   <span class="keyword">val</span> name: String</span><br><span class="line">      <span class="keyword">get</span>() &#123;</span><br><span class="line">          println(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line">          <span class="keyword">return</span> field</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">      <span class="keyword">get</span>() = field</span><br><span class="line">      <span class="keyword">set</span>(value) &#123;</span><br><span class="line">         field = value</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setterVisibility: String = <span class="string">&quot;abc&quot;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">set</span> <span class="comment">// 此 setter 是私有的并且有默认实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setterWithAnnotation: Any? = <span class="literal">null</span></span><br><span class="line">    <span class="meta">@Inject</span> <span class="keyword">set</span> <span class="comment">// ⽤ Inject 注解此 setter</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="幕后字段"><a href="#幕后字段" class="headerlink" title="幕后字段"></a>幕后字段</h3><p>无限递归问题: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> name: String</span><br><span class="line">      <span class="keyword">get</span>() = <span class="keyword">this</span>.name</span><br><span class="line">      <span class="keyword">set</span>(value) &#123;</span><br><span class="line">         <span class="keyword">this</span>.name = value</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>error: <code>get() = this.name</code> 和 <code>this.name = value</code></p><p><code>get() = this.name</code> 会调用 <code>name</code> 的 <code>getter</code> 函数, 然后又遇到 <code>this.name</code> 再次调用 <code>getter</code> 无限循环</p><p>同理: <code>this.name = value</code> 的 <code>this.name = xxx</code> 会调用 <code>this.name</code> 的 <code>setter</code> 函数, 接着无限递归</p><p>解决办法是:  <code>field</code> 幕后字段</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> name: String = <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="keyword">get</span>() = field</span><br><span class="line">      <span class="keyword">set</span>(value) &#123;</span><br><span class="line">         field = value</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于-延迟属性-的研究"><a href="#关于-延迟属性-的研究" class="headerlink" title="关于 延迟属性 的研究"></a>关于 <code>延迟属性</code> 的研究</h3><p>属性未必已经需要主动初始化, 比如 <code>spring bean 注入</code>就是, 但 <code>kotlin</code> 强制要求程序员初始化属性, 这导致很多二次赋值的问题, 虽然影响不大, 但对于有强迫症的人来说简直不共戴天</p><p>这里推荐几种方式进行属性延迟赋值</p><h4 id="lateinit延迟"><a href="#lateinit延迟" class="headerlink" title="lateinit延迟"></a><code>lateinit</code>延迟</h4><blockquote><p>非基本数据类型推荐使用</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceImpl</span> : <span class="type">Service</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> dao: DaoImpl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这种方式只能用于 <code>非基础数据类型</code>和 <code>var</code> 标记的属性</p><h4 id="使用可空类型"><a href="#使用可空类型" class="headerlink" title="使用可空类型"></a>使用可空类型</h4><blockquote><p>如果该属性可能为 null, 推荐使用</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceImpl</span> : <span class="type">Service</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> dao: DaoImpl? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lazy"><a href="#lazy" class="headerlink" title="lazy"></a>lazy</h4><blockquote><p>需要延迟调用的 val 推荐使用</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span>(<span class="keyword">val</span> weight: <span class="built_in">Double</span>, <span class="keyword">val</span> age: <span class="built_in">Int</span>, <span class="keyword">val</span> color: String) &#123;</span><br><span class="line">    <span class="keyword">val</span> sex: String <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        <span class="keyword">if</span> (color == <span class="string">&quot;yellow&quot;</span>) <span class="string">&quot;male&quot;</span> <span class="keyword">else</span> <span class="string">&quot;female&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="lazy-的原理"><a href="#lazy-的原理" class="headerlink" title="lazy 的原理"></a>lazy 的原理</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">actual</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">lazy</span><span class="params">(initializer: () -&gt; <span class="type">T</span>)</span></span>: Lazy&lt;T&gt; = SynchronizedLazyImpl(initializer)</span><br></pre></td></tr></table></figure><p><code>lazy 函数</code>, 该函数返回<code>Lazy&lt;T&gt;</code>对象, <code>lazy</code>还有一个 <code>lambda表达式</code> 的参数 该表达式 返回一个 <code>T 类型</code>的对象</p><p><code>Lazy&lt;T&gt;</code> 这个 <code>T</code> 就是 <code>lambda 表达式</code>返回的</p><p>访问<code>sex</code>会调用 <code>getValue</code> 返回这个 <code>T</code>(仅在第一次调用时才会调用)</p><blockquote><p>这是委托 by 的能力, 读取就固定调用 <code>getValue</code>函数, 写入会固定调用<code>setValue</code>函数</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Lazy<span class="type">&lt;T&gt;</span>.<span class="title">getValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: T = value</span><br></pre></td></tr></table></figure><p>而这个 <code>value</code> 的 <code>get</code> 函数将会被执行</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">val</span> value: T</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">val</span> _v1 = _value</span><br><span class="line">        <span class="keyword">if</span> (_v1 !== UNINITIALIZED_VALUE) &#123;</span><br><span class="line">            <span class="meta">@Suppress(<span class="string">&quot;UNCHECKED_CAST&quot;</span>)</span></span><br><span class="line">            <span class="keyword">return</span> _v1 <span class="keyword">as</span> T</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> synchronized(lock) &#123;</span><br><span class="line">            <span class="keyword">val</span> _v2 = _value</span><br><span class="line">            <span class="keyword">if</span> (_v2 !== UNINITIALIZED_VALUE) &#123;</span><br><span class="line">                <span class="meta">@Suppress(<span class="string">&quot;UNCHECKED_CAST&quot;</span>)</span> (_v2 <span class="keyword">as</span> T)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">val</span> typedValue = initializer!!()</span><br><span class="line">                _value = typedValue</span><br><span class="line">                initializer = <span class="literal">null</span></span><br><span class="line">                typedValue</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果没有对 <code>lazy</code> 函数添加一个同步属性, 始终都会执行到</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> typedValue = initializer!!()</span><br><span class="line">_value = typedValue</span><br><span class="line">initializer = <span class="literal">null</span></span><br><span class="line">typedValue</span><br></pre></td></tr></table></figure><p>这段代码</p><p>这里的 <code>initializer</code> 就是下面的返回值 <code>T</code></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b8e8c7d6ef54be5b058c611ac407141~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>然后返回 <code>typedValue</code> 也就是 <code>lambda 的返回值</code></p><h5 id="by-lazy-方式需要注意"><a href="#by-lazy-方式需要注意" class="headerlink" title="by lazy {} 方式需要注意"></a><code>by lazy &#123;&#125;</code> 方式需要注意</h5><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9309dbb21339402485134eedaef6d59d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><ol><li>只能用于 <code>val</code> 修饰的变量, 不能通过 <code>var</code> 来声明</li><li>只有在首次被调用时才会初始化</li></ol><h4 id="让基本数据类型也拥有延迟效果"><a href="#让基本数据类型也拥有延迟效果" class="headerlink" title="让基本数据类型也拥有延迟效果"></a>让基本数据类型也拥有延迟效果</h4><blockquote><p>基本数据类型, 推荐使用委托</p></blockquote><p>使用委托的形式延迟初始化基本数据类型</p><p><code>by Delegates.notNull&lt;T&gt;()</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span>(<span class="keyword">private</span> <span class="keyword">val</span> color: String) &#123;</span><br><span class="line">   <span class="keyword">val</span> sex: String <span class="keyword">by</span> lazy &#123;</span><br><span class="line">      <span class="keyword">if</span> (color == <span class="string">&quot;yellow&quot;</span>) <span class="string">&quot;male&quot;</span> <span class="keyword">else</span> <span class="string">&quot;female&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">lateinit</span> <span class="keyword">var</span> name: String</span><br><span class="line">   <span class="keyword">var</span> age: <span class="built_in">Int</span> <span class="keyword">by</span> Delegates.notNull&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>kotlin</code> 中, 不推荐 <code>java</code> 的那种方式生成构造函数, 而是使用默认参数配合构造函数</p></blockquote><h4 id="幕后属性"><a href="#幕后属性" class="headerlink" title="幕后属性"></a>幕后属性</h4><p>下面这段代码实现了一个延迟属性功能</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> _table: Map&lt;String, <span class="built_in">Int</span>&gt;? = <span class="literal">null</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">val</span> table: Map&lt;String, <span class="built_in">Int</span>&gt;</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(_table == <span class="literal">null</span>) &#123;</span><br><span class="line">            _table = HashMap()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _table ?: <span class="keyword">throw</span> AssertionError(<span class="string">&quot;Set to null by another thread&quot;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>个人认为 幕后属性 可以使用在 <code>data class</code> 中配合使用</p><h2 id="构造函数-★"><a href="#构造函数-★" class="headerlink" title="构造函数 ★"></a>构造函数 ★</h2><p> ★ 在<code>kotlin</code>中构造函数有<code>主构造函数</code>, <code>初始化代码块(init)</code>和<code>次构造函数</code></p><h3 id="主构造函数-★"><a href="#主构造函数-★" class="headerlink" title="主构造函数 ★"></a>主构造函数 ★</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">constructor</span>(<span class="keyword">val</span> name: String) &#123;&#125;</span><br></pre></td></tr></table></figure><p>换成 <code>java</code> 源码 类似于: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// public final void setName(String name) &#123;</span></span><br><span class="line">    <span class="comment">//     this.name = name;</span></span><br><span class="line">    <span class="comment">// &#125; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为什么需要主构造函数"><a href="#为什么需要主构造函数" class="headerlink" title="为什么需要主构造函数?"></a>为什么需要主构造函数?</h4><p><code>kotlin</code>设计主构造函数的可能是简化代码吧</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123; </span><br><span class="line">    <span class="keyword">val</span> bar: Bar</span><br><span class="line">    <span class="keyword">constructor</span>(barValue: Bar) &#123;</span><br><span class="line">        bar = barValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>class Foo(val bar: Bar)</code></p><p>原型是这样: <code>class Foo constructor(val bar: Bar)</code> 只不过<code>constructor</code> 关键字在没有注解, 类似<code>private</code> 这样的访问修饰符可以省略</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">private</span> /* <span class="meta">@Inject</span> */ <span class="keyword">constructor</span>(name: String) &#123;</span><br><span class="line">   <span class="keyword">val</span> name: String = name.uppercase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主构造函数带来的问题"><a href="#主构造函数带来的问题" class="headerlink" title="主构造函数带来的问题"></a>主构造函数带来的问题</h4><ol><li>主函构造函数增加了新手入门的难度( 很奇葩的设计</li><li>添加了主构造函数, 还需要考虑构造函数的顺序 ( 奇葩</li><li>主构造函数内部不能有别的操作, 只有赋值操作, 如果还有别的操作还需要使用 <code>init</code> 代码块, 在 <code>init</code> 代码块中初始化 (超级奇葩</li><li>如果类的属性增多, 你会发现一部分属性在主构造函数的小括号内, 一部分属性在类的作用域内, 阅读性变低 (更加奇葩</li><li>看截图</li></ol><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9b49c406afdf4d76b7b9c01826cd1b4a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>主构造函数必须最先执行, 次构造函数次之, 所以在主构造函数中无法初始化 <code>age1</code> 和 <code>age2</code> 无法被初始化, 所以报错</p><p>解决方法是: </p><ol><li>把<code>age1</code> 和 <code>age2</code> 放入主构造函数的函数参数列表中<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">A</span>(</span><br><span class="line">    <span class="keyword">var</span> name: String</span><br><span class="line">    <span class="keyword">val</span> age1: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">val</span> age2: <span class="built_in">Int</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(_age: <span class="built_in">Int</span>) : <span class="keyword">this</span>(<span class="string">&quot;name&quot;</span>, _age, _age) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>init</code> 代码块<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">A</span>(<span class="keyword">var</span> name: String) &#123;</span><br><span class="line">    <span class="keyword">val</span> age1: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">val</span> age2: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="comment">// 这里的 0 可以改成在主构造函数传入参数 比如: open class A(var name: String, _age: Int) , 这样次构造函数的 this(&quot;name&quot;) 就需要更改了 this(&quot;name&quot;, _age), 次构造函数后面的函数代码块就不需要了</span></span><br><span class="line">        <span class="keyword">this</span>.age1 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">this</span>.age2 = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(_age: <span class="built_in">Int</span>) : <span class="keyword">this</span>(<span class="string">&quot;name&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age1 = _age</span><br><span class="line">        <span class="keyword">this</span>.age2 = _age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>有新手会问为什么不用 <code>lateinit</code>, 那是因为 <code>lateinit</code> 只能用于 <code>var</code> 且非基本类型(Int, Double这种基础类型)上</p></blockquote><ol start="3"><li>删掉主构造函数</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2dd0deff6d124196a907a814c81a5f8c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>写好字段, 使用快捷键, 就可以创建上面的次构造函数</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9584881deea045d4aa8e31bf21e63a15~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>事情解决了!!!</p><p>当然我们也可以灵活运用 <strong>主构造函数</strong> + <code>init</code>代码块 + 参数的默认值 </p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/76fdc6afb29f42e487c81562ccc2199c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>让你选你会选哪一种???</p><p>我的结论: 怎么简单怎么来</p><h4 id="主构造函数和初始化语句块-init"><a href="#主构造函数和初始化语句块-init" class="headerlink" title="主构造函数和初始化语句块(init)"></a>主构造函数和初始化语句块(<code>init</code>)</h4><ol><li>是什么?</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(_nickName: String) &#123;</span><br><span class="line">    <span class="keyword">val</span> nickName: String</span><br><span class="line">    <span class="comment">// 这就是 init 初始化代码块</span></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.nickName = <span class="string">&quot;<span class="subst">$&#123;_nickName.lenght&#125;</span> - <span class="subst">$&#123;_nickName&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意1, <code>constructor</code> 修饰符省略掉了, 有前提:  </p><ol><li>没有注解.</li><li>没有可见修饰符.</li></ol></blockquote><blockquote><p>注意2: 主构造函数上 <code>Person(val nickName: String)</code> 和 <code>Person(_nickName: String)</code> 的区别在于 带 <code>val/var</code> 的将变成<code>nickName</code>属性, 不带的变成<code>_nickName</code>构造函数参数</p></blockquote><ol start="2"><li>为什么需要初始化代码块?</li></ol><p><code>kotlin</code>主构造函数除了 <code>this.nickName = nickName </code> 这些赋值操作外, 没有任何的操作, 所以需要初始化代码块进行其他操作 <code>this.nickName = &quot;$&#123;_nickName.lenght&#125; - $&#123;_nickName&#125;&quot;</code>, 所以初始化代码块诞生了</p><p>初始化代码块属于主构造函数体的代码之一, 和 <code>主构造函数</code> 和<code>类作用域内属性</code> 属于同一个作用域</p><p>将其换成 <code>java</code> 源码就知道了: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    </span><br><span class="line">    Person(String _nickName) &#123;</span><br><span class="line">        <span class="comment">// 主函数自己的代码 </span></span><br><span class="line">        <span class="comment">// balabala.....</span></span><br><span class="line">        <span class="comment">// init 代码块内部的代码 or 主函数之外的字段初始化代码 (按照定义先后顺序)</span></span><br><span class="line">        <span class="built_in">this</span>.nickName = <span class="string">&quot;$&#123;_nickName.lenght&#125; - $&#123;_nickName&#125; // 这行不是 java 代码</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="构造方法参数默认值"><a href="#构造方法参数默认值" class="headerlink" title="构造方法参数默认值"></a>构造方法参数默认值</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> nickName: String , <span class="keyword">var</span> isSubscribed: <span class="built_in">Boolean</span> = <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p> ★ 如果全部是 默认值 会生成一个<strong>无参数主构造函数</strong></p><p><code>class Person(val nickName: String = &quot;&quot;, var isSubscribed: Boolean = false)</code></p><h4 id="子类初始化父类字段-★"><a href="#子类初始化父类字段-★" class="headerlink" title="子类初始化父类字段 ★"></a>子类初始化父类字段 ★</h4><p> <strong>★ 子类有责任初始化 父类字段</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">User</span>(<span class="keyword">val</span> nickName: String) &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FacebookUser</span>(nickName: String) : User(nickName) &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>这非常的重要, 子类有责任将值给父类初始化, 父类未初始化的属性必须要子类来初始化(想要子类对象的话)</strong></p><h4 id="继承和实现怎么看"><a href="#继承和实现怎么看" class="headerlink" title="继承和实现怎么看?"></a>继承和实现怎么看?</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">View</span> &#123;&#125;</span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Button</span> : <span class="type">View</span> &#123;&#125;</span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">RadioButton</span> : <span class="type">Button</span>() &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>引号继承和实现区别一目了然, 实现直接写上 <code>View</code> , 继承则是调用 父类构造函数 <code>Button()</code> , 一个 没有 <code>()</code> 一个有 <code>()</code></p></blockquote><p>如果不声明任何构造函数, 它会生成一个无参数构造函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Button</span></span><br></pre></td></tr></table></figure><h4 id="定义-private-构造函数"><a href="#定义-private-构造函数" class="headerlink" title="定义 private 构造函数"></a>定义 private 构造函数</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="keyword">val</span> nickName: String) &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种类可以使用伴生对象构建并使用, 伴生对象就是类的对象, 而该对象的函数未必是静态的哦, 以后会学到</p></blockquote><blockquote><p>当然你还可以写个次构造函数, 在末尾(c++叫初始化成员列表的位置)调用主构造函数</p></blockquote><h3 id="次构造函数-★"><a href="#次构造函数-★" class="headerlink" title="次构造函数 ★"></a>次构造函数 ★</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这个就是次构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: String, age: <span class="built_in">Int</span>) : <span class="keyword">this</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数优先级-★"><a href="#构造函数优先级-★" class="headerlink" title="构造函数优先级 ★"></a>构造函数优先级 ★</h4><p><code>主构造函数优先级</code> 高于 <code>init初始化代码块和主构造函数外字段</code> 高于 <code>次构造函数</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">var</span> name: String = <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> age: <span class="built_in">Int</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">init</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.name == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">         println(<span class="string">&quot;主构造函数第一时间初调用了&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.name = <span class="string">&quot;3&quot;</span></span><br><span class="line">      println(<span class="string">&quot;init 代码块初调用了&quot;</span>)</span><br><span class="line">      <span class="keyword">this</span>.age = <span class="number">2</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">constructor</span>(age: <span class="built_in">Int</span>) : <span class="keyword">this</span>() &#123;</span><br><span class="line">      println(<span class="string">&quot;次构造函数调用了&quot;</span>)</span><br><span class="line">      <span class="keyword">this</span>.age = age</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Person(name=&#x27;<span class="variable">$name</span>&#x27;, age=<span class="variable">$age</span>)&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> person = Person(age = <span class="number">4</span>)</span><br><span class="line">   println(person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在主构造函数中定义变量(注意不是属性是作为参数的变量), 则可以使用 <code>_</code> 的方式在区别, 比如: <code>_name</code> 或者 <code>_nickName</code> 等等</p></blockquote><p>注意: </p><p><strong><code>init</code> 代码块最后都会成为主构造函数的函数体内部的代码</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">var</span> name: String) &#123;</span><br><span class="line">    <span class="comment">// init 和 下面 age 的初始化顺序优先级按照定义顺序判断优先级</span></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.name == <span class="string">&quot;haha&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = <span class="string">&quot;zhazha&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> age: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将会变成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="keyword">if</span> (Intrinsics.areEqual(<span class="built_in">this</span>.name, <span class="string">&quot;haha&quot;</span>)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = <span class="string">&quot;zhazha&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.age = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// get/set ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意5: 只有主构造函数可以在小括号内声明成员属性, 次构造函数不允许</p><h3 id="里氏代替原则"><a href="#里氏代替原则" class="headerlink" title="里氏代替原则"></a>里氏代替原则</h3><blockquote><p>在父子类中, 子类最好只能实现父类抽象的方法, 非抽象的方法能不重写就别重写, 这很符合<code>里氏代替原则</code></p></blockquote><h4 id="什么是里氏代替原则"><a href="#什么是里氏代替原则" class="headerlink" title="什么是里氏代替原则?"></a>什么是里氏代替原则?</h4><p>他有四种设计原则:</p><ol><li>子类可以实现父类的所有抽象方法, 但非抽象方法子类最好不要再去重写</li><li>子类可以增加自己特有的方法</li><li>当子类的方法实现父类的方法时, 方法的前置条件(即方法的形参)要比父类方法的输入参数更加宽泛</li><li>当子类的方法实现父类的抽象方法时, 方法的后置条件(即方法的返回值)要比父类更严格.</li></ol><h4 id="类的默认修饰符-final"><a href="#类的默认修饰符-final" class="headerlink" title="类的默认修饰符: final"></a>类的默认修饰符: final</h4><blockquote><p> <code>kotlin</code> 很好的实现了这种原则, 所有默认没有被标记为 <code>open</code> 的<code>类/方法</code>都会被修饰为 <code>final</code> , 子类全部无法重写, 除非在 <code>类/方法</code> 上添加 <code>open</code></p></blockquote><p>当然如果是字段的话, 需要看修饰字段的是 <code>val</code> 还是 <code>var</code>, 如果是 <code>val</code> 会携带 <code>final</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">TheBird</span>(</span><br><span class="line">   <span class="keyword">val</span> weight: <span class="built_in">Double</span> = <span class="number">500.0</span>,</span><br><span class="line">   <span class="keyword">var</span> color: String = <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">   <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">) &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">fly</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> weight;</span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="keyword">private</span> String color;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.weight;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.color;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(<span class="meta">@NotNull</span> String var1)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.color = var1;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> var1)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = var1;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Bird</span><span class="params">(<span class="type">double</span> weight, <span class="meta">@NotNull</span> String color, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>();</span><br><span class="line">      <span class="built_in">this</span>.weight = weight;</span><br><span class="line">      <span class="built_in">this</span>.color = color;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Bird</span><span class="params">(<span class="type">double</span> var1, String var3, <span class="type">int</span> var4, <span class="type">int</span> var5, DefaultConstructorMarker var6)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((var5 &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">         var1 = <span class="number">500.0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((var5 &amp; <span class="number">2</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">         var3 = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((var5 &amp; <span class="number">4</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">         var4 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>(var1, var3, var4);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Bird</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>(<span class="number">0.0</span>, (String)<span class="literal">null</span>, <span class="number">0</span>, <span class="number">7</span>, (DefaultConstructorMarker)<span class="literal">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类默认-final-真的好么"><a href="#类默认-final-真的好么" class="headerlink" title="类默认 final 真的好么?"></a>类默认 final 真的好么?</h4><p>在 kotlin官方有讨论: <a href="https://discuss.kotlinlang.org/t/classes-final-by-default/166">Classes final by default - Language Design - Kotlin Discussions (kotlinlang.org)</a></p><p>存在的问题:</p><ol><li><code>spring</code> 框架可能存在问题, 需要重新实现 <code>Spring</code> 框架的部分功能. 比如 <code>Spring</code> 使用注解对一些类进行增强, 由于 <code>kotlin</code> 类不能被继承导致增强失败</li><li>使用 <code>kotlin</code> 编写第三方库, 有些时候需要增强这些库, 需要继承库内的类, 如果是 <code>kotlin</code> 则不可以直接继承</li></ol><p>优点: </p><ol><li>默认 <code>final</code> 比较安全</li><li><code>kotlin</code>推荐你使用扩展而不是继承去增强类</li><li>还可以借助 <code>val</code> 配合 智能类型转换</li></ol><blockquote><p>同时 <code>kotlin</code> 还提供 <code>sealed</code> 密封类对继承进行限制, 若要继承一个类必须在同一个文件</p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1201371c07f0406187ee1b97cb7fb1a5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="kotlin-初始化带来-bug-以及解决方案"><a href="#kotlin-初始化带来-bug-以及解决方案" class="headerlink" title="kotlin 初始化带来 bug 以及解决方案"></a>kotlin 初始化带来 bug 以及解决方案</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> name: String</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">first</span><span class="params">()</span></span> = name[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="comment">// first 还没初始化呢, 直接就调用了? 这时候只能 报错 NullPointerException</span></span><br><span class="line">        println(first())</span><br><span class="line">        name = <span class="string">&quot;zhazha&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> demo01 = Demo01()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo02</span>(_name: String) &#123;</span><br><span class="line">    <span class="keyword">val</span> playerName: String = initPlayerName()</span><br><span class="line">    <span class="keyword">val</span> name: String = _name</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initPlayerName</span><span class="params">()</span></span>: String = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> demo02 = Demo02(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line">    println(demo02.playerName) <span class="comment">// 最终输出 null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>解决方案任何属性都需要先初始化再使用</p></blockquote><h2 id="接口★"><a href="#接口★" class="headerlink" title="接口★"></a>接口★</h2><p>在 <code>kotlin</code> 中实现一个接口需要实现未实现的方法和未初始化的属性</p><blockquote><p>这里需要分清楚什么是字段? 什么是属性? 属性 &#x3D; 字段 + getter&#x2F;setter</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> name: String</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">val</span> age:<span class="built_in">Int</span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">      println(<span class="keyword">this</span>::javaClass)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要强调上面的 <code>foo</code> 方法, 该方法在接口中被认为是 默认方法</p><p>默认方法在接口中的实现比较复杂, 这涉及到 <code>kotlin</code> 早期对标的是<code>jdk1.6</code>, 那时的类不允许有默认方法, 所以<code>kotlin</code>的实现方式比较有意思</p><blockquote><p><code>kotlin</code> 并未沿用 <code>jdk 8</code> 的接口默认方法</p><p>在 <code>jdk8</code> 之后, <code>java</code>的 接口可以存在<code>默认方法</code>和<code>静态方法</code></p></blockquote><p>下面是 <code>java</code> 源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(<span class="meta">@NotNull</span> String var1)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Metadata(</span></span><br><span class="line"><span class="meta">      mv = &#123;1, 5, 1&#125;,</span></span><br><span class="line"><span class="meta">      k = 3</span></span><br><span class="line"><span class="meta">   )</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">DefaultImpls</span> &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(<span class="meta">@NotNull</span> MyInterface $<span class="built_in">this</span>)</span> &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="string">&quot;zhazha&quot;</span>;</span><br><span class="line">         <span class="type">boolean</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">         System.out.println(var1);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>kotlin</code>编译器生成了个 <code>DefaultImpls</code> 内部静态类, </p><p>然后以静态的方式写了个了和接口中的 <code>foo</code> 同名函数, 参数传递了个 <code>MyInterface $this</code></p><p>需要注意 <code>this</code>, 在 <code>interface</code> 中不存在 <code>this</code> 对象, 该 <code>this</code> 是在 <code>object:MyInterface</code> 的时候产生的匿名对象或者是实现该接口的子类 <code>this 对象</code></p><p>所以我们需要 <code>object: MyInterface</code> 接口: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> obj = <span class="keyword">object</span>: MyInterface &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="keyword">var</span> name: String</span><br><span class="line">            <span class="keyword">get</span>() = TODO(<span class="string">&quot;xxxxx&quot;</span>)</span><br><span class="line">            <span class="keyword">set</span>(value) &#123;&#125;</span><br><span class="line">        <span class="keyword">override</span> <span class="keyword">val</span> age: <span class="built_in">Int</span></span><br><span class="line">            <span class="keyword">get</span>() = TODO(<span class="string">&quot;xxxxx&quot;</span>)</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="comment">// to do</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 默认函数按照需要重写</span></span><br><span class="line">    obj.foo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口中可以有接口也可以有默认方法还可以有属性(<code>不带字段的属性</code>)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Named</span> &#123;</span><br><span class="line">   <span class="keyword">val</span> name: String</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> names: String</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> : <span class="type">Named</span> &#123;</span><br><span class="line">   <span class="keyword">val</span> firstName: String</span><br><span class="line">   <span class="keyword">val</span> lastName: String</span><br><span class="line">   <span class="keyword">override</span> <span class="keyword">val</span> name: String</span><br><span class="line">      <span class="keyword">get</span>() = <span class="string">&quot;<span class="variable">$firstName</span> <span class="variable">$lastName</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NameClass</span>(<span class="keyword">override</span> <span class="keyword">val</span> names: String) : Named.Name &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Employee</span>(<span class="keyword">override</span> <span class="keyword">val</span> firstName: String, <span class="keyword">override</span> <span class="keyword">val</span> lastName: String) : Person &#123;</span><br><span class="line">   <span class="keyword">val</span> position: Pair&lt;<span class="built_in">Double</span>, <span class="built_in">Double</span>&gt; = Pair(<span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> employee = Employee(<span class="string">&quot;zzz&quot;</span>, <span class="string">&quot;ddd&quot;</span>)</span><br><span class="line">   println(employee.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口不允许有记录数据的字段, 所以在接口中定义的字段被<code>kotlin</code>处理成 <code>set/get</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(<span class="meta">@NotNull</span> String var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接⼝继承"><a href="#接⼝继承" class="headerlink" title="接⼝继承"></a>接⼝继承</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Named</span> &#123;</span><br><span class="line">   <span class="keyword">val</span> name: String</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> : <span class="type">Named</span> &#123;</span><br><span class="line">   <span class="keyword">val</span> firstName: String</span><br><span class="line">   <span class="keyword">val</span> lastName: String</span><br><span class="line">   <span class="keyword">override</span> <span class="keyword">val</span> name: String</span><br><span class="line">      <span class="keyword">get</span>() = <span class="string">&quot;<span class="variable">$firstName</span> <span class="variable">$lastName</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Employee</span>(<span class="keyword">override</span> <span class="keyword">val</span> firstName: String, <span class="keyword">override</span> <span class="keyword">val</span> lastName: String) :Person &#123;</span><br><span class="line">   <span class="keyword">val</span> position: Pair&lt;<span class="built_in">Double</span>, <span class="built_in">Double</span>&gt; = Pair(<span class="number">0.0</span>, <span class="number">0.0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口的属性"><a href="#接口的属性" class="headerlink" title="接口的属性"></a>接口的属性</h3><p>我在很多地方说都过了, 属性在 <code>kotlin</code> 中表示 <code>getter/setter</code> 至于 <code>field</code> 有没有都无所谓</p><p><code>val</code> 修饰的属性 默认 <code>filed</code> 被 <code>private</code> 修饰 , <code>val</code> 保证只有 <code>getter</code> 没有<code>setter</code></p><p>如果我们在 <code>setter</code> 前面加上 <code>private</code>, <code>kotlin</code>将不会自动生成 <code>setter</code></p><p>而 <code>getter</code> 的可见性修饰符必须与声明字段的可见性修饰符相同</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94ebf6af482044f4aacb11b93c0ada70~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>如果 getter 必须是 private 则可以这样:</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b0fdec4c57844beba9d8ff0c199b375e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="接⼝中的属性默认是抽象属性"><a href="#接⼝中的属性默认是抽象属性" class="headerlink" title="接⼝中的属性默认是抽象属性"></a>接⼝中的属性默认是抽象属性</h3><p>接口不会有字段, 但是可以有抽象属性, 抽象属性是一种没有 <code>field 幕后字段</code> 只有 <code>getter</code> 和 <code>setter</code> 的属性</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> nickName: String <span class="comment">// 只有 getNickName 函数, 接口不允许有字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主构造属性会被初始化, 所以需要添加字段和 get 函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrivateUser</span>(<span class="keyword">override</span> <span class="keyword">val</span> nickName: String) : User &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubscribingUser</span>(<span class="keyword">val</span> email: String) : User &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> nickName: String</span><br><span class="line">        <span class="comment">// 重写了 get 访问器, 则不需要字段</span></span><br><span class="line">        <span class="keyword">get</span>() = email.substringBefore(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FaceBookUser</span>(<span class="keyword">val</span> accountId: <span class="built_in">Int</span>): User &#123;</span><br><span class="line">    <span class="comment">// 初始化了 nickName, 生成 get访问器和 nickName字段</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> nickName = <span class="string">&quot;name: <span class="variable">$accountId</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类重写接口属性, 根据子类具体的情况判断是否定义字段, 如果子类重写字段的 <code>get/set</code> 函数没有涉及 <code>field</code> (或者说<code>get/set</code>函数不依赖重写的字段本身)则不会直接定义一个字段, 只有 <code>get/set</code> 函数, 例如: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubscribingUser</span>(<span class="keyword">var</span> email: String) : User &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> nickName: String</span><br><span class="line">        <span class="keyword">get</span>() = email.substringBefore(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">        <span class="keyword">set</span>(value) &#123;</span><br><span class="line">            <span class="keyword">this</span>.email = value.uppercase()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码就不会产生字段, 直接生成 <code>get/set 函数</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SubscribingUser</span> <span class="keyword">implements</span> <span class="title class_">User</span> &#123;</span><br><span class="line">   <span class="comment">// 字段只有这一个</span></span><br><span class="line">   <span class="keyword">private</span> String email;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getNickName</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNickName</span><span class="params">(<span class="meta">@NotNull</span> String value)</span> &#123;&#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(<span class="meta">@NotNull</span> String var1)</span> &#123;&#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SubscribingUser</span><span class="params">(<span class="meta">@NotNull</span> String email)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口属性未必一定需要重写</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> email: String</span><br><span class="line">    <span class="keyword">val</span> nickName: String</span><br><span class="line">        <span class="keyword">get</span>() = email.substringBefore(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面第一个属性 <code>email</code> 子类必须要重写, 但下面一个 <code>nickName</code> 在子类可以被继承</p><h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>单一抽象方法的接口, 叫函数式接口或者叫<code>SAM接口</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="keyword">interface</span> KRunnable &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意前面的 <code>fun</code> 用来区分 普通接口 和 函数式接口</p><blockquote><p>在 <code>java</code> 中<code>函数式接口</code>需要写上 <code>@FunctionInterface</code> 注解, 来标注, 但不是强迫性的, 而 kotlin 中的函数式接口必须在 <code>interface</code> 之前加上 <code>fun</code> 才能代表函数式接口</p></blockquote><ol><li><p><strong><code>java</code>的接口只要只有一个未实现的抽象方法, 都可以被 <code>kotlin</code> 编译器识别为 函数式接口(有多少默认函数无所谓)</strong></p></li><li><p><strong>函数式接口可以有函数式接口构造函数</strong></p></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> kRunnable = KRunnable &#123; println(<span class="string">&quot;函数式接口的特点&quot;</span>) &#125;</span><br></pre></td></tr></table></figure><p>特点就是不需要 <code>new</code> , 直接写就行</p><p>非函数式接口不能这样:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IRunnable</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">invoke</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c42999cd2b148cca65c5e2e9b82be3d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="调用函数式接口的方法"><a href="#调用函数式接口的方法" class="headerlink" title="调用函数式接口的方法"></a>调用函数式接口的方法</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="keyword">interface</span> IntPredicate &#123;</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">accept</span><span class="params">(i: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isInt</span><span class="params">(i: <span class="type">Int</span>, funcType: <span class="type">IntPredicate</span>)</span></span>: <span class="built_in">Boolean</span> = funcType.accept(i)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> a = <span class="number">19</span></span><br><span class="line">   println(isInt(a)&#123;</span><br><span class="line">      it <span class="keyword">is</span> <span class="built_in">Int</span></span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h3><p>接口和<code>java</code>中的接口一样, 接口之间可以多继承, 实体类也可以多实现接口</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">C</span> : <span class="type">A</span>, <span class="type">B</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> : <span class="type">A</span>, <span class="type">B</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>如果<code>接口 A</code> 和 <code>接口 B</code> 使用有一个相同的方法, <code>fun Hello(): Unit</code> 被 <code>D</code> 发现也没事, 实现只有一个</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> : <span class="type">A</span>, <span class="type">B</span> &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有这么个案例:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyer</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">kind</span><span class="params">()</span></span> = <span class="string">&quot;flying animals&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">   <span class="keyword">val</span> name: String</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">kind</span><span class="params">()</span></span> = <span class="string">&quot;flying animals&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Bird</span> : <span class="type">Flyer</span>, <span class="type">Animal</span> &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">      println(<span class="string">&quot;I can fly&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="keyword">val</span> name: String</span><br><span class="line">      <span class="keyword">get</span>() = <span class="string">&quot;燕子&quot;</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">      println(<span class="string">&quot;I can eat&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">kind</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">      println(<span class="keyword">super</span>&lt;Animal&gt;.kind())</span><br><span class="line">      println(<span class="keyword">super</span>&lt;Flyer&gt;.kind())</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;my name is <span class="subst">$&#123;this.name&#125;</span>&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在多个同名的默认方法, 需要通过 <code>super&lt;T&gt;</code> 这种方式指定调用</p><p>实现接口的属性和方法都必须加上 <code>override</code> 关键字, 且不能省略(和 <code>java</code> 不同)</p><p>上面的源码还可以这么搞:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Bird</span>(<span class="keyword">override</span> <span class="keyword">val</span> name: String) : Flyer, Animal &#123;&#125;</span><br></pre></td></tr></table></figure><p>将接口的属性放到子类的主构造函数中重写</p><p>其实接口中的属性只有 <code>setter/getter 函数</code>, 没有 <code>field 字段</code></p><p>在 <code>Bird</code> 中实现的 <code>name</code> 可以有 <code>field</code> 字段</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="title">implements</span> <span class="title">Flyer</span>, <span class="type">Animal</span> &#123;</span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然我们还可以让 <code>name 字</code>段在 <code>Bird</code> 中不存在, 只保留 <code>getter/setter</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Bird</span> : <span class="type">Flyer</span>, <span class="type">Animal</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="keyword">val</span> name: String</span><br><span class="line">      <span class="keyword">get</span>() = <span class="string">&quot;xiaobai&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11d158dd2985439aaf46f32bec42104a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类 </tag>
            
            <tag> 属性 </tag>
            
            <tag> var和val </tag>
            
            <tag> 幕后字段 </tag>
            
            <tag> 延迟属性 </tag>
            
            <tag> lateinit </tag>
            
            <tag> 可空类型 </tag>
            
            <tag> lazy </tag>
            
            <tag> by </tag>
            
            <tag> 幕后属性 </tag>
            
            <tag> 主构造函数 </tag>
            
            <tag> 次构造函数 </tag>
            
            <tag> init代码块 </tag>
            
            <tag> 代码块 </tag>
            
            <tag> final </tag>
            
            <tag> 接口 </tag>
            
            <tag> 继承 </tag>
            
            <tag> 实现 </tag>
            
            <tag> 多继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、kotlin的类和对象(二)</title>
      <link href="/2022/12/03/07kotlin/%E4%B8%89%E3%80%81kotlin%E7%9A%84%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1(%E4%BA%8C)/"/>
      <url>/2022/12/03/07kotlin/%E4%B8%89%E3%80%81kotlin%E7%9A%84%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="继承★"><a href="#继承★" class="headerlink" title="继承★"></a>继承★</h2><p><code>kotlin</code> 沿用了 <code>java</code> 的单继承系统, 不允许 <code>c++</code> 的多继承出现, 但允许 <code>kotlin</code> 接口的多实现</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Base</span>(<span class="keyword">val</span> p: <span class="built_in">Int</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>(p: <span class="built_in">Int</span>) : Base(p)</span><br></pre></td></tr></table></figure><p>(1) 子类需要继承父类, 子类有责任负责父类字段的初始化</p><p><code>class Derived(p: Int) : Base(p)</code></p><p>(2) 子类最终都需要调用到父类的构造函数以初始化父类的字段, 子类构造函数如果要调用父类构造函数需要使用上 <code>super</code></p><p>(3) 子类构造函数如果要调用到子类的其他构造函数则需要使用到 <code>this</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Base</span>(<span class="keyword">val</span> p: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    <span class="comment">// name 可以不在这里直接初始化成 &quot;&quot;, 可以选择在 init 代码块中, 前面可知, init 中的代码. 最后会合并到主构造函数中</span></span><br><span class="line">    <span class="keyword">var</span> name: String = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">constructor</span>(p: <span class="built_in">Int</span>, name: String): <span class="keyword">this</span>(p) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="type">Base</span> &#123;</span><br><span class="line">    <span class="comment">// 如果子类没有显示的写出主构造函数, 那么次构造函数需要使用 super 主动调用父类的构造函数(主, 次皆可)</span></span><br><span class="line">    <span class="keyword">constructor</span>(p: <span class="built_in">Int</span>) : <span class="keyword">super</span>(p) &#123;&#125;</span><br><span class="line">    <span class="keyword">constructor</span>(p: <span class="built_in">Int</span>, name: String) : <span class="keyword">super</span>(p, name) &#123;&#125;</span><br><span class="line">    <span class="keyword">constructor</span>(a: <span class="built_in">Int</span>, p: <span class="built_in">Int</span>, name: String) : <span class="keyword">this</span>(p, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类如果需要被继承, 这需要显示的写出 <code>open class 类名</code>, 否则默认是 <code>public final 类名</code></p></blockquote><h3 id="覆盖方法-重写方法"><a href="#覆盖方法-重写方法" class="headerlink" title="覆盖方法(重写方法)"></a>覆盖方法(重写方法)</h3><p>kotlin 所有的类、函数和字段默认都添加上了 <code>final</code> </p><p>如果我们需要重写这些功能，可以使用 <code>open</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="type">Shape</span>() &#123;</span><br><span class="line">    <span class="comment">// 如果class Circle是 final 类型(final open Circle), 则函数也是 final类型, 可以不用显示的写出来</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>open</code>只针对 <code>final</code>，添加 <code>open</code> 会删除掉 <code>final</code></p></blockquote><h3 id="覆盖属性"><a href="#覆盖属性" class="headerlink" title="覆盖属性"></a>覆盖属性</h3><blockquote><p>子类与父类有相同的属性名称</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">val</span> vertexCount: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> : <span class="type">Shape</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> vertexCount: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在字段上: (字段可见性默认是 <code>private</code>)</p><p>① 使用 <code>val</code> 只生成 <code>public final get</code></p><p>② 使用 <code>var</code> 生成 <code>public final get/set</code> </p><p>如果字段加上 <code>open</code> , 影响的是 <code>get/set</code> 函数的 <code>final</code> , 会直接消失</p><p>(2) 在父子类间, 子类可以用 <code>var</code> 覆盖父类 <code>val</code> 的同名属性</p><ul><li>为什么?</li></ul><p>父类 <code>val</code> 属性只有 <code>getter</code> 方法, 子类使用 <code>var</code> 属性后, 将会生成 <code>getter/setter 方法</code>, 没有任何问题</p><p>如果 父类是 <code>var</code> 那么有 <code>getter/setter 方法</code>, 此时 子类使用上 <code>val</code> , 只能有 <code>getter</code> , 可是父类的 <code>setter</code> 子类仍然可以调用, 这不行</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">constructor</span>(<span class="keyword">open</span> <span class="keyword">val</span> nickName: String) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(_nickName: String) : Person(_nickName) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> nickName: String = _nickName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子类初始化顺序▲"><a href="#子类初始化顺序▲" class="headerlink" title="子类初始化顺序▲"></a>子类初始化顺序▲</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Base</span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">   <span class="keyword">init</span> &#123;</span><br><span class="line">      println(<span class="string">&quot;2. 父类 init 代码块&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">open</span> <span class="keyword">val</span> size: <span class="built_in">Int</span> = <span class="keyword">this</span>.name.length.also &#123; println(<span class="string">&quot;3. 父类构造函数执行 size 对象初始化&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>(name: String, <span class="keyword">val</span> lastName: String) :</span><br><span class="line">   Base(name.capitalize().also &#123; println(<span class="string">&quot;1. Derived的构造函数的初始化代码块 执行初始化&quot;</span>) &#125;) &#123;</span><br><span class="line">   <span class="keyword">init</span> &#123;</span><br><span class="line">      println(<span class="string">&quot;4. Derived 的init代码块执行&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="keyword">val</span> size: <span class="built_in">Int</span> =</span><br><span class="line">      (<span class="keyword">super</span>.size + lastName.length).also &#123; println(<span class="string">&quot;5. 初始化  Derived 的 size 字段&quot;</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> derived = Derived(<span class="string">&quot;zhazha&quot;</span>, <span class="string">&quot;xixi&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体顺序是: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. Derived的构造函数的初始化代码块 执行初始化</span><br><span class="line">2. 父类 init 代码块</span><br><span class="line">3. 父类构造函数执行 size 对象初始化</span><br><span class="line">4. Derived 的init代码块执行</span><br><span class="line">5. 初始化  Derived 的 size 字段</span><br></pre></td></tr></table></figure><h3 id="调用父类的东西★"><a href="#调用父类的东西★" class="headerlink" title="调用父类的东西★"></a>调用父类的东西★</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123; println(<span class="string">&quot;Drawing a rectangle&quot;</span>) &#125;</span><br><span class="line">    <span class="keyword">val</span> borderColor: String <span class="keyword">get</span>() = <span class="string">&quot;black&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FillRectangle</span> : <span class="type">Rectangle</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">       <span class="comment">// super 调用父类的函数</span></span><br><span class="line">        <span class="keyword">super</span>.draw()</span><br><span class="line">        println(<span class="string">&quot;Filling the rectangle&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 调用父类的属性, 这里调用了 getBorderColor() 函数</span></span><br><span class="line">    <span class="keyword">val</span> fillColor: String <span class="keyword">get</span>() = <span class="keyword">this</span>.borderColor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="super-this和标签配合选择调用父类函数"><a href="#super-this和标签配合选择调用父类函数" class="headerlink" title="super/this和标签配合选择调用父类函数"></a><code>super/this</code>和标签配合选择调用父类函数</h4><p>调用父类的属性或者方法一般使用 <code>super</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">   <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">      println(<span class="string">&quot;Drawing a rectangle&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">val</span> borderColor: String <span class="keyword">get</span>() = <span class="string">&quot;black&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FilledRectangle</span> : <span class="type">Rectangle</span>() &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="comment">// super 调用父类的函数</span></span><br><span class="line">      <span class="keyword">super</span>.draw()</span><br><span class="line">      println(<span class="string">&quot;Filling the rectangle&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 调用父类的属性, 这里调用了 getBorderColor() 函数</span></span><br><span class="line">   <span class="keyword">val</span> fillColor: String <span class="keyword">get</span>() = <span class="keyword">this</span>.borderColor</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">inner</span> <span class="keyword">class</span> <span class="title class_">Filler</span> &#123;</span><br><span class="line">      <span class="function"><span class="keyword">fun</span> <span class="title">fill</span><span class="params">()</span></span> &#123;</span><br><span class="line">         println(<span class="string">&quot;Filling &quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">         println(<span class="string">&quot;Filler draw...&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">fun</span> <span class="title">drawFill</span><span class="params">()</span></span> &#123;</span><br><span class="line">         <span class="comment">// idea 智能提示对这个支持不太好, 需要用户手写完毕, 提示都没有</span></span><br><span class="line">         <span class="comment">// 只能支持内部类访问外部类的方法, 访问 FilledRectangle 类的父类方法 draw</span></span><br><span class="line">         <span class="symbol">super@</span>FilledRectangle.draw()</span><br><span class="line">         fill()</span><br><span class="line">         println(<span class="string">&quot;fillColor = <span class="variable">$fillColor</span>&quot;</span>)</span><br><span class="line">         <span class="comment">// 调用 Filler 的 draw</span></span><br><span class="line">         draw()</span><br><span class="line">         <span class="comment">// 调用 FilledRectangle 的  draw</span></span><br><span class="line">         <span class="keyword">this</span><span class="symbol">@FilledRectangle</span>.draw()</span><br><span class="line">         println(<span class="string">&quot;class rectangle color: <span class="subst">$&#123;super@FilledRectangle.borderColor&#125;</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> rectangle = FilledRectangle()</span><br><span class="line">   rectangle.draw()</span><br><span class="line">   rectangle.Filler().drawFill()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>① <code>super@AAA类.BB方法()</code>,  表示调用 <code>AAA类的父类</code>的<code>BB方法</code></p><p>② <code>this@AAA类.BB方法()</code>, 表示调用 <code>AAA类</code>的<code>BB方法</code></p><h3 id="覆盖规则"><a href="#覆盖规则" class="headerlink" title="覆盖规则"></a>覆盖规则</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">   <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">      println(<span class="string">&quot;rectangle  draw...&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Polygon</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span>() : Rectangle(), Polygon &#123;</span><br><span class="line">   <span class="comment">// 虽然两个父类都存在 draw 方法, 但是其中一个是接口, 一个已经存在函数体, 所以直接调用的实现了的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> square = Square()</span><br><span class="line">   square.draw()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是两个类的话, 就需要直接重写一个自己想要的方法了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Rectangle draw...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Polygon</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Polygon draw...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> : <span class="type">Rectangle</span>, <span class="type">Polygon</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;Rectangle&gt;.draw()</span><br><span class="line">        <span class="keyword">super</span>&lt;Polygon&gt;.draw()</span><br><span class="line">        println(<span class="string">&quot;Square draw...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> square = Square()</span><br><span class="line">    square.draw()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个接口的默认函数重名, 子类就需要手动重写该方法, 定义自己的 <code>draw 函数</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>&lt;Rectangle&gt;.draw()</span><br><span class="line"><span class="keyword">super</span>&lt;Polygon&gt;.draw()</span><br><span class="line">println(<span class="string">&quot;Square draw...&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="多继承问题"><a href="#多继承问题" class="headerlink" title="多继承问题"></a>多继承问题</h2><p>多继承会导致继承关系语义上的混乱, 比如下面的情况</p><h3 id="骡子的多继承困惑"><a href="#骡子的多继承困惑" class="headerlink" title="骡子的多继承困惑"></a>骡子的多继承困惑</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Horse</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Donkey</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mule</span> : <span class="type">Horse</span>, <span class="type">Donkey</span> &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">      TODO(<span class="string">&quot;Not yet implemented&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">      TODO(<span class="string">&quot;Not yet implemented&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在定义 <code>Mule 类</code>的时候需要纠结, 到底实现 <code>马 的 run</code> 还是 实现 <code>驴 的 run</code> 函数, 这两个函数存在区别</p><p>马一般跑的比较快, 驴 耐力特别好</p><p>到底选择 马 还是 驴 的能力呢?</p><p>这就是 <code>棱形继承问题</code> 也叫 <code>钻石问题</code> , 继承关系将在语义上产生歧义: <code>骡子到底继承了马的run功能还是驴的run功能呢?</code></p><h4 id="接口实现多继承"><a href="#接口实现多继承" class="headerlink" title="接口实现多继承"></a>接口实现多继承</h4><blockquote><p>在前面已经有过这个案例了</p></blockquote><p><code>kotlin</code>中的类可以实现多个接口</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyer</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">kind</span><span class="params">()</span></span> = <span class="string">&quot;flying animals&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">   <span class="keyword">val</span> name: String</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">kind</span><span class="params">()</span></span> = <span class="string">&quot;flying animals&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Bird</span> : <span class="type">Flyer</span>, <span class="type">Animal</span> &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">      println(<span class="string">&quot;I can fly&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="keyword">val</span> name: String</span><br><span class="line">      <span class="keyword">get</span>() = <span class="string">&quot;燕子&quot;</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">      println(<span class="string">&quot;I can eat&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">kind</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">      println(<span class="keyword">super</span>&lt;Animal&gt;.kind())</span><br><span class="line">      println(<span class="keyword">super</span>&lt;Flyer&gt;.kind())</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;my name is <span class="subst">$&#123;this.name&#125;</span>&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在多个同名的默认方法, 需要通过 <code>super&lt;T&gt;</code> 这种方式指定调用</p><p>实现接口的属性和方法都必须加上 <code>override</code> 关键字, 且不能省略(和 <code>java</code> 不同)</p><p>上面的源码还可以这么搞:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Bird</span>(<span class="keyword">override</span> <span class="keyword">val</span> name: String) : Flyer, Animal &#123;&#125;</span><br></pre></td></tr></table></figure><p>将接口的属性放到子类的主构造函数中重写</p><p>其实接口中的属性只有 <code>setter/getter 函数</code>, 没有 <code>field 字段</code></p><p>在 <code>Bird</code> 中实现的 <code>name</code> 可以有 <code>field</code> 字段</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Bird</span> <span class="title">implements</span> <span class="title">Flyer</span>, <span class="type">Animal</span> &#123;</span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然我们还可以让 <code>name 字</code>段在 <code>Bird</code> 中不存在, 只保留 <code>getter/setter</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Bird</span> : <span class="type">Flyer</span>, <span class="type">Animal</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">override</span> <span class="keyword">val</span> name: String</span><br><span class="line">      <span class="keyword">get</span>() = <span class="string">&quot;xiaobai&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11d158dd2985439aaf46f32bec42104a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>同样的, 将上面的 <code>Fly</code> 和 <code>Animal</code> 代替成 <code>Horse</code> 和 <code>Donkey</code> 还是会存在 到底 实现哪个 <code>run</code> 的问题</p><h4 id="内部类解决多继承问题"><a href="#内部类解决多继承问题" class="headerlink" title="内部类解决多继承问题"></a>内部类解决多继承问题</h4><p>我们可以使用内部类模拟实现多继承的方案, 我们知道, 类内可以定义多个内部类, 每个内部类都可以继承自各个不同的父类, 且每个内部类都是独立存在的, 使用这种特性解决多继承问题</p><p>在 <code>java</code> 中只要在一个类内写上另一个类, 我们都可以认为另一个类是内部类</p><p>但是在 <code>kotlin</code> 中, 就不一样了</p><p>直接在 <code>kotlin</code> 类中写上另一个<code>类A</code>, 此时类 <code>A</code> 却是 外部类的 <code>嵌套类</code>, 而不是<code>内部类</code></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/254a13fcd1024641b4eae6eec04a04a5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p> <code>name</code> 无法被识别, 说明<code>ErrorInnerKotlin</code> 类不持有外部类的 <code>this</code>, 否则不会报错</p><blockquote><p>使用嵌套类方便序列化和反序列化, 不过这是后话</p></blockquote><p><code>kotlin</code>中的内部类是这样的:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b943e083122a4e4f82576347bb2a64fa~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>需要使用 <code>inner</code> 修饰内部类</p><h5 id="嵌套类-vs-内部类"><a href="#嵌套类-vs-内部类" class="headerlink" title="嵌套类 vs 内部类"></a>嵌套类 vs 内部类</h5><p>在 <code>java</code> 中如果需要实现一个<code>嵌套类</code>需要配合 <code>static</code> 关键字, 而 <code>kotlin</code> 则相反, 默认是<code>嵌套类</code>, 需要加上 <code>inner</code> 才能变成<code>内部类</code></p><p><code>嵌套类和内部类的区别</code>在于: 是否持有<code>外部类</code>的 <code>this</code> 引用, 就如前面的代码显示, 如果不持有 <code>外部类</code>的 <code>this</code>, <code>name</code>无法被访问, 而<code>嵌套类</code>就是这样的…</p><h4 id="使用内部类解决骡子问题"><a href="#使用内部类解决骡子问题" class="headerlink" title="使用内部类解决骡子问题"></a>使用内部类解决骡子问题</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Horse</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Donkey</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mule</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">HorseC().run()</span><br><span class="line">print(<span class="string">&quot; and &quot;</span>)</span><br><span class="line">DonkeyC().run()</span><br><span class="line">println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">inner</span> <span class="keyword">class</span> <span class="title class_">HorseC</span> : <span class="type">Horse</span> &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">print(<span class="string">&quot;I can run fast&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">inner</span> <span class="keyword">class</span> <span class="title class_">DonkeyC</span> : <span class="type">Donkey</span> &#123;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">print(<span class="string">&quot;I can run long time&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这个案例改造后我们发现: </p><ol><li>可以在一个类内部定义多个内部类, 每个内部类实例都有自己独立的状态, 它们与外部对象的信息相互独立</li><li>通过内部类<code>HorseC</code> 和 <code>DonkeyC</code>分别继承<code>Horse</code>和<code>Donkey</code>这两个外部类, 我们就可以在<code>Mule</code>类中定义他们的实例对象, 从而获得他们两者不同的状态和行为(那为什么不直接定义两个属性到 <code>Mule</code> 中??? 因为是接口么?)</li><li>我们可以使用 <code>private</code> 修饰内部的 <code>HorseC</code> 和 <code>DonkeyC</code> 让外部类不至于直接访问到内部类. 提供了更好的封装性</li></ol><blockquote><p>因此在某些场景下, 内部类是解决多继承问题非常好的思路</p><p>这种方式我们可以在很多框架的源码中发现</p></blockquote><h4 id="使用委托代替多继承"><a href="#使用委托代替多继承" class="headerlink" title="使用委托代替多继承"></a>使用委托代替多继承</h4><p>委托在 <code>kotlin</code> 用的还是比较多的, 比如: 委托的观察者, 可以观察属性的修改和读取行为</p><p>现在来试试 委托如何代替多继承</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CanFly</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CanEat</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Flyer</span> : <span class="type">CanFly</span> &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">      println(<span class="string">&quot;I can fly&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Animal</span> : <span class="type">CanEat</span> &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">      println(<span class="string">&quot;I can eat&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span>(flyer: Flyer, animal: Animal) : CanFly <span class="keyword">by</span> flyer, CanEat <span class="keyword">by</span> animal &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> flyer = Flyer()</span><br><span class="line">   <span class="keyword">val</span> animal = Animal()</span><br><span class="line">   <span class="keyword">val</span> bird = Bird(flyer, animal)</span><br><span class="line">   bird.fly()</span><br><span class="line">   bird.eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式和前面接口实现多继承的方式相似, 那有什么有点呢?</p><ol><li>接口是无状态的, 所以即使它提供了默认方法实现也是很简单的, 不能实现复杂的逻辑, 也不推荐在接口默认方法中实现复杂的逻辑, 我们可以使用委托的方式, 虽然他也是接口委托, 但是它用一个具体的类去实现方法逻辑, 可以拥有更强大的能力</li><li>在A类组合 委托BC对象的时候, 不是组合 <code>A</code> 和 <code>BC</code> 对象的方法, 而是 <code>A.method</code> 这种形式, 更加的只管, 虽然背后也是通过委托对象来执行具体的方法逻辑的</li></ol><h2 id="数据类★"><a href="#数据类★" class="headerlink" title="数据类★"></a>数据类★</h2><p>数据类就跟<code>java</code>在<code>Bean</code>相关类中加上 <code>lombok</code> 注解 <code>@Data</code> 的功能差不多</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Bird</span>(<span class="keyword">var</span> weight: <span class="built_in">Double</span>, <span class="keyword">var</span> age: <span class="built_in">Int</span>, <span class="keyword">var</span> color: String)</span><br></pre></td></tr></table></figure><p>反编译成 java : </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">double</span> weight;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.weight;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(<span class="type">double</span> var1)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.weight = var1;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> var1)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = var1;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.color;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(<span class="meta">@NotNull</span> String var1)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.color = var1;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Bird</span><span class="params">(<span class="type">double</span> weight, <span class="type">int</span> age, <span class="meta">@NotNull</span> String color)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>();</span><br><span class="line">      <span class="built_in">this</span>.weight = weight;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">      <span class="built_in">this</span>.color = color;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">double</span> <span class="title function_">component1</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.weight;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">component2</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">component3</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.color;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> Bird <span class="title function_">copy</span><span class="params">(<span class="type">double</span> weight, <span class="type">int</span> age, <span class="meta">@NotNull</span> String color)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bird</span>(weight, age, color);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// $FF: synthetic method</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> Bird copy$<span class="keyword">default</span>(Bird var0, <span class="type">double</span> var1, <span class="type">int</span> var3, String var4, <span class="type">int</span> var5, Object var6) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((var5 &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">         var1 = var0.weight;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((var5 &amp; <span class="number">2</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">         var3 = var0.age;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((var5 &amp; <span class="number">4</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">         var4 = var0.color;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> var0.copy(var1, var3, var4);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Bird(weight=&quot;</span> + <span class="built_in">this</span>.weight + <span class="string">&quot;, age=&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&quot;, color=&quot;</span> + <span class="built_in">this</span>.color + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">var10000</span> <span class="operator">=</span> (Double.hashCode(<span class="built_in">this</span>.weight) * <span class="number">31</span> + Integer.hashCode(<span class="built_in">this</span>.age)) * <span class="number">31</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">var10001</span> <span class="operator">=</span> <span class="built_in">this</span>.color;</span><br><span class="line">      <span class="keyword">return</span> var10000 + (var10001 != <span class="literal">null</span> ? var10001.hashCode() : <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(<span class="meta">@Nullable</span> Object var1)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span> != var1) &#123;</span><br><span class="line">         <span class="keyword">if</span> (var1 <span class="keyword">instanceof</span> Bird) &#123;</span><br><span class="line">            <span class="type">Bird</span> <span class="variable">var2</span> <span class="operator">=</span> (Bird)var1;</span><br><span class="line">            <span class="keyword">if</span> (Double.compare(<span class="built_in">this</span>.weight, var2.weight) == <span class="number">0</span> &amp;&amp; <span class="built_in">this</span>.age == var2.age &amp;&amp; Intrinsics.areEqual(<span class="built_in">this</span>.color, var2.color)) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这比 <code>javaBean</code> 舒服多了</p><blockquote><p>很多人会说, 还<code>javaBean</code>??? 为什么不用 <code>lombok</code> 呢? 深有同感, <code>kotlin</code> 的 <code>data class</code> 其实不太方便</p></blockquote><h3 id="copy函数"><a href="#copy函数" class="headerlink" title="copy函数"></a>copy函数</h3><p><code>copy</code> 方法的主要作用是: 从已有的数据类对象中拷贝一个新的数据类对象</p><blockquote><p>需要注意这是<code>浅拷贝</code>, 如果 <code>data class</code> 中有引用对象, 需要注意了</p></blockquote><blockquote><p>既然都 <code>copy</code> 了? 那我为什么不用 <code>MapStruct</code>???</p></blockquote><h3 id="componentN与解构"><a href="#componentN与解构" class="headerlink" title="componentN与解构"></a><code>componentN</code>与解构</h3><p>说到底, <code>component</code> 就是以 <code>data class</code> 声明的顺序定义的对象, 从 <code>1</code> 开始, 到最高的 <code>5</code></p><h4 id="这有什么用呢-解构"><a href="#这有什么用呢-解构" class="headerlink" title="这有什么用呢? 解构"></a>这有什么用呢? 解构</h4><p>如果在 <code>java</code> 我们可能会这样使用一个对象接收一个函数的返回值对象, 然后再分别赋值给各个变量</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> b1 = Bird(<span class="number">20.0</span>, <span class="number">1</span>, <span class="string">&quot;blue&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> weight = b1.weight</span><br><span class="line"><span class="keyword">val</span> age = b1.age</span><br><span class="line"><span class="keyword">val</span> color = b1.color</span><br></pre></td></tr></table></figure><p>在 <code>kotlin</code> 中:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> (weight, age, color) = b1</span><br></pre></td></tr></table></figure><p>解构的方式还可以用于下面这样:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> birdInfo = <span class="string">&quot;20.0,1,bule&quot;</span></span><br><span class="line"><span class="keyword">val</span> (weight, age, color) = birdInfo.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">println(<span class="string">&quot;weight = <span class="variable">$weight</span>, age = <span class="variable">$age</span>, color = <span class="variable">$color</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>这种神器的方法就是别的语言常说的解构, 一种通过与编译器达成约定的功能</p><h4 id="自定义解构"><a href="#自定义解构" class="headerlink" title="自定义解构"></a>自定义解构</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Bird</span>(<span class="keyword">var</span> weight: <span class="built_in">Double</span>, <span class="keyword">var</span> age: <span class="built_in">Int</span>, <span class="keyword">var</span> color: String) &#123;</span><br><span class="line">   <span class="keyword">var</span> sex = <span class="number">1</span></span><br><span class="line">   <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">component4</span><span class="params">()</span></span>: <span class="built_in">Int</span> = <span class="keyword">this</span>.sex</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p><code>kotlin</code>还提供了 元组, 比如 <code>Pair</code>和<code>Triple</code> 其中 <code>Pair</code> 是二元组, <code>Triple</code> 是三元组</p><blockquote><p>其底层都是 <code>data class</code>, 而且每个元素可以是任意类型</p></blockquote><h3 id="数据类的约定与使用"><a href="#数据类的约定与使用" class="headerlink" title="数据类的约定与使用"></a>数据类的约定与使用</h3><p>使用数据类必须满足以下条件:</p><ol><li>数据类必须有一个构造方法, 该方法至少包含一个参数</li><li>数据类构造函数的方法的参数必须使用 var&#x2F;val</li><li>数据类前面不能有 abstract open sealed 或者 inner 进行修饰</li><li>数据类可以实现接口和继承类</li></ol><p>如果代码写成这样: (显示指定默认值)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Bird</span>(<span class="keyword">var</span> weight: <span class="built_in">Double</span> = <span class="number">0.0</span>, <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span>, <span class="keyword">var</span> color: String = <span class="string">&quot;red&quot;</span>)</span><br></pre></td></tr></table></figure><p>他就会提供一个无参数构造函数</p><blockquote><p>data class 只使用主构造函数中的字段作为模板生成各种代码, 比如 copy equals 等, <strong>如果属性不在主动构造函数中, 则不会被使用作为生成代码的元素</strong></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">    <span class="keyword">val</span> age: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样 <code>age</code> 不会被用来生成代码</p><blockquote><p><code>data class</code> 目前还是不太好用, 比较局限, 对于很多框架还有兼容性问题, 我看很多人都没用上, 连我也是</p></blockquote><h2 id="抽象类★"><a href="#抽象类★" class="headerlink" title="抽象类★"></a>抽象类★</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Polygon</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> : <span class="type">Polygon</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Rectangle draw...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以用抽象成员函数覆盖非抽象的<code>open</code>成员函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Polygon</span> &#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">&quot;Polygon draw...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> : <span class="type">Polygon</span>() &#123;</span><br><span class="line">    <span class="comment">// 子类将父类的open方法重写成 abstract</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可见性修饰符"><a href="#可见性修饰符" class="headerlink" title="可见性修饰符"></a>可见性修饰符</h2><p><code>kotlin</code>和 <code>java</code> 的可见性修饰符差不多, 但也有区别:</p><ol><li><code>kotlin</code>和 <code>java</code> 的默认修饰符不同, <code>java</code> 默认是包(<code>default</code>), 而 <code>kotlin</code> 默认是 <code>public</code></li><li><code>kotlin</code>有独特的修饰符 <code>internal</code></li><li><code>kotlin</code>可以在一个文件内单独声明方法及产量, 同样支持可见性修饰符</li><li><code>Java</code>中除了内部类可以用<code>private</code>修饰以外, 其他类都不允许<code>private</code>修饰, 而 <code>kotlin</code>可以.</li><li><code>kotlin</code>和<code>java</code>中的 <code>protected</code> 的访问范围不同, <code>java</code>中是包, 类以及子类可访问, 而 <code>kotlin</code> 只允许类及子类</li></ol><p><code>kotlin</code> 省掉了 <code>java</code> 每次写个类都需要加上 <code>public</code> 的问题, 虽然每次它都会自动加上</p><p><code>java</code> 中 默认类都是 <code>default</code> 包访问范围, <code>kotlin</code>中也有 <code>internal</code> 跟其配对, 但还是有不同, <code>internal</code> 是<code>模块内可见</code></p><p>那么什么是模块内可见呢? </p><ol><li>一个 <code>maven</code> 项目</li><li>一个 <code>gradle</code> 项目</li><li>一个 <code>eclipse</code> 项目</li><li>一个 <code>idea</code> 项目</li><li>一组由 <code>Ant</code>任务执行编译的代码</li></ol><p>这些都被 <code>kotlin</code> 看作的 <code>模块</code></p><blockquote><p>一个文件可以看作一组编译的文件组成的集合</p></blockquote><h4 id="为什么要有-internal-而不是包内访问-default"><a href="#为什么要有-internal-而不是包内访问-default" class="headerlink" title="为什么要有 internal 而不是包内访问 default?"></a>为什么要有 <code>internal</code> 而不是包内访问 <code>default</code>?</h4><p><code>java</code> 默认包类存在的问题: </p><p>假如有一个包类 <code>String</code>, 包路径是 <code>java.lang</code>, 并被打包成库<code>src.jar</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.String;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* public */</span> <span class="keyword">class</span> <span class="title class_">String</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    内容略</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们要在库外部使用 <code>String</code> 类的功能<code>print</code> , 只有两种方式</p><ol><li>导入 <code>src.jar</code> 库, 然后 copy 库中的<code>String</code> 类的源码, 放在自己的包路径中</li><li>导入<code>src.jar</code>, 在我们的项目中创建 <code>java.lang</code>包, 此时我们可以在该包路径中定义类, 并直接使用 <code>String</code></li></ol><blockquote><p>上一次我这么用还是在探讨 <code>jvm</code> 的<code>双亲委派机制</code></p></blockquote><p>在 <code>kotlin</code> 中 没有选择 <code>java</code> 的包内机制, 而是<code>模块内机制</code>, 只和 <code>该类</code> 一起编译的其他 <code>kotlin</code> 文件可见</p><p>而开发工程和第三方类库不属于同一个模块, 此时还要使用该类的话, 只能拷贝源码了</p><h4 id="java中没有文件内私有类-kotlin有"><a href="#java中没有文件内私有类-kotlin有" class="headerlink" title="java中没有文件内私有类, kotlin有"></a><code>java</code>中没有文件内私有类, <code>kotlin</code>有</h4><p>Java 中没有文件内私有类(<code>private class</code>) 而 <code>kotlin</code>中有</p><p>主要的问题是 <code>java</code> 中一个文件只能有一个大类(<code>public类</code>), 可以有<code>private</code> 的子类</p><p>而 <code>kotlin</code> 中, 可以有一个大类, 而大类下面还可以写顶层函数或属性</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BMWCar</span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">val</span> bMWEngine: BMWEngine = BMWEngine()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">BMWEngine</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">engineName</span><span class="params">()</span></span> &#123;</span><br><span class="line">      println(<span class="string">&quot;BMWEngine&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="kotlin中没有包作用域概念"><a href="#kotlin中没有包作用域概念" class="headerlink" title="kotlin中没有包作用域概念"></a><code>kotlin</code>中没有包作用域概念</h4><p>在 <code>kotlin</code>中没有包作用域, 所以 <code>java</code> 的 <code>protected</code> 到了 <code>kotlin</code> 中没有访问包作用域的功能, 或者说没有 <code>internal</code> 的功能(<code>internal</code>是<code>模块作用域</code>)</p><p>所以<code>kotlin</code> 的 protected 标记的类在同一个包的其他文件中无法使用</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56755d912dc5443e841e93fe13a01550~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>要指定⼀个类的的主构造函数的可⻅性，使⽤以下语法（注意你需要添加⼀个显式 <code>constructor</code> 关键字）：</p><p><code>class C private constructor(a: Int) &#123; …… &#125;</code></p><p>这⾥的构造函数是私有的。默认情况下，所有构造函数都是 <code>public</code> ，这实际上等于类可⻅的地⽅它就可⻅</p><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>局部变量, 函数和类不支持可见性修饰符</p><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>可⻅性修饰符 <code>internal</code> 意味着该成员只在相同模块内可⻅, 而一个模块是编译在一起的一堆<code>kotlin</code>文件, 比如:</p><ul><li>一个 <code>idea</code> 模块</li><li>一个<code>maven</code> 项目</li><li>一个 <code>gradle</code> 源集(例外是 <code>test</code> 源集可以访问 <code>main</code> 的 <code>internal</code> 声明)</li><li>⼀次 <code>&lt;kotlinc&gt;</code> <code>Ant</code> 任务执⾏所编译的⼀套⽂件</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">Button</span> : <span class="type">View</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">yell</span><span class="params">()</span></span> = println(<span class="string">&quot;Hey!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="title">whisper</span><span class="params">()</span></span> = println(<span class="string">&quot;Let&#x27;s go!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Button.<span class="title">giveSpeech</span><span class="params">()</span></span> &#123; <span class="comment">// 错误, 企图把public 类 转成 internal 类</span></span><br><span class="line">    println(<span class="keyword">this</span>::<span class="keyword">class</span>.java)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但 <code>internal</code> 比较尴尬, 翻译成 <code>Java</code> 字节码后被认为是 <code>public</code></p></blockquote><h2 id="密封类☆"><a href="#密封类☆" class="headerlink" title="密封类☆"></a>密封类☆</h2><p>密封类和枚举类对应, 密封类是尽量罗列出所有的有限子类(类型多), 而枚举类是尽量罗列出所有的对象(就是对象多), 而他比枚举类好的地方在于, 密封类子类的属性 在 数量 和 类型上可以不同</p><p>使用关键字 <code>sealed</code> 修饰符作为声明密封类的方法</p><blockquote><p>所有继承密封类的子类都必须放在同一个文件中</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Expr</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Const</span>(<span class="keyword">val</span> number: <span class="built_in">Double</span>) : Expr() &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Sum</span>(<span class="keyword">val</span> e1: Expr, <span class="keyword">val</span> e2: Expr) : Expr()</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> NotANumber : Expr()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="comment">// 应用场景</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">eval</span><span class="params">(expr: <span class="type">Expr</span>)</span></span>: <span class="built_in">Double</span> = <span class="keyword">when</span>(expr) &#123;</span><br><span class="line">      <span class="keyword">is</span> Const -&gt; expr.number</span><br><span class="line">      <span class="keyword">is</span> Sum -&gt; eval(expr.e1) + eval(expr.e2)</span><br><span class="line">      NotANumber -&gt; <span class="built_in">Double</span>.NaN</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>密封类可以看成是一个功能强大的枚举类</p></blockquote><h2 id="内部类和嵌套类的序列化问题-★"><a href="#内部类和嵌套类的序列化问题-★" class="headerlink" title="内部类和嵌套类的序列化问题 ★"></a>内部类和嵌套类的序列化问题 ★</h2><blockquote><p>前面说过的: <code>kotlin</code>默认是 <code>嵌套类</code>, 不持有外部类的 <code>this</code>引用, 类似于 <code>static</code>修饰的</p><p>内部类: 持有外部 <code>this</code>, 需要使用 <code>inner</code> 声明为内部类</p></blockquote><p>kotlin 类内部可以有类, 而内外类的关系有两种, 一种叫嵌套类(默认的), 另一种叫内部类(需要使用 inner 修饰符)</p><p>kotlin的嵌套类反编译成 java 后显示是 static , 这样的好处在于下面这个案例</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span> : <span class="type">Serializable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getCurrentState</span><span class="params">()</span></span>: State</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">restoreState</span><span class="params">(state: <span class="type">State</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候如果是 java 代码的话, 实现方式: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Button02</span> <span class="keyword">implements</span> <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getCurrentState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ButtonState</span>(<span class="number">20</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restoreState</span><span class="params">(State state)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ButtonState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ButtonState</span><span class="params">(Integer age, String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Button02</span> <span class="variable">button02</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Button02</span>();</span><br><span class="line">        System.out.println(button02.getCurrentState());</span><br><span class="line">        </span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D://test.txt&quot;</span>));</span><br><span class="line">        <span class="comment">// 他会在这里报错 NotSerializableException</span></span><br><span class="line">        outputStream.writeObject(button02.getCurrentState());</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在java中单独的 <code>ButtonState</code> 是可以序列化的, 但此处的 <code>ButtonState</code> 是内部类, 内部类偷偷的藏了个 外部类的 <code>this</code> 对象, 该对象不支持 序列化 , 所以报错了</p><p>只要把 <code>ButtonState</code> 改成 <code>static</code> 后就不会报错了</p><p><code>static class ButtonState implements State</code></p><p>而在 kotlin 中就不会出现这种问题</p><p>kotlin写在类内部的类, 默认是 <strong>嵌套类</strong>, 同时也是 <code>static</code> 类, 这样内部不会存放 外部类的 <code>this</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Button01</span> : <span class="type">View</span> &#123;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> buttonState: State</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCurrentState</span><span class="params">()</span></span>: State = ButtonState(<span class="number">12</span>, <span class="string">&quot;haha&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">restoreState</span><span class="params">(state: <span class="type">State</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.buttonState = state</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ButtonState</span>(_age: <span class="built_in">Int</span>, _name: String) : State &#123;</span><br><span class="line">        <span class="keyword">val</span> age: <span class="built_in">Int</span> = _age</span><br><span class="line">        <span class="keyword">val</span> name: String = _name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> button01 = Button01()</span><br><span class="line">    with(ObjectOutputStream(File(<span class="string">&quot;&quot;&quot;D:\test.txt&quot;&quot;&quot;</span>).outputStream())) &#123;</span><br><span class="line">        writeObject(button01.getCurrentState())</span><br><span class="line">        flush()</span><br><span class="line">        close()</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    ObjectOutputStream(File(&quot;&quot;&quot;D:\test.txt&quot;&quot;&quot;).outputStream()).apply &#123;</span></span><br><span class="line"><span class="comment">//        writeObject(button01.getCurrentState())</span></span><br><span class="line"><span class="comment">//        flush()</span></span><br><span class="line"><span class="comment">//        close()</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 kotlin 使用 <code>inner</code> 修饰符定义内部类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inner</span> <span class="keyword">class</span> <span class="title class_">ButtonState02</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/532674b8f7c8405caf6918e1a79c2f8d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="类委托-★"><a href="#类委托-★" class="headerlink" title="类委托 ★"></a>类委托 ★</h2><blockquote><p>委托有很多, 这里只讲类委托, 后续再整个讲一遍</p></blockquote><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h3><p>一个类借助另一个类的<code>对象</code>实现接口的函数, 说白了就是<code>借鸡生蛋</code></p><p>下面是不委托的情况下: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DelegateCollectionDemo01</span>&lt;<span class="type">T</span>&gt; : <span class="type">Collection</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> innerList = arrayListOf&lt;T&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> size: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = innerList.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">contains</span><span class="params">(element: <span class="type">T</span>)</span></span>: <span class="built_in">Boolean</span> = innerList.contains(element)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">containsAll</span><span class="params">(elements: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;)</span></span>: <span class="built_in">Boolean</span>= innerList.containsAll(elements)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = innerList.isNotEmpty()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">iterator</span><span class="params">()</span></span>: Iterator&lt;T&gt; = innerList.iterator()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的委托的情况: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DelegateCollectionDemo02</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">private</span> <span class="keyword">val</span> innerList: ArrayList&lt;T&gt; = arrayListOf()) : Collection&lt;T&gt;  <span class="keyword">by</span> innerList &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> collection01 = DelegateCollectionDemo01&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">    <span class="keyword">val</span> collection02 = DelegateCollectionDemo02&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心代码: </p><p><code>class DelegateCollectionDemo02&lt;T&gt;(private val innerList: ArrayList&lt;T&gt; = arrayListOf()) : Collection&lt;T&gt;  by innerList</code></p><p>而它实现的函数都是 <code>Collection</code> 接口的函数, 而不是 <code>innerList</code> 的 <code>ArrayList</code>的函数</p><h3 id="有什么好处-使用场景"><a href="#有什么好处-使用场景" class="headerlink" title="有什么好处? (使用场景)"></a>有什么好处? (使用场景)</h3><ol><li>源码变少了</li><li>类的函数和 接口 <code>Collection</code> 的函数一致, 如果<code>Collection</code> 被更改或者新增了新的函数, <code>DelegateCollection</code> 也不用修改, 代码自动生成的</li><li>如果有些函数不想用 <code>innerList</code> 对象的函数, 那么可以 override 重写改函数, 添加自己的方法</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DelegateCollectionDemo02</span>&lt;<span class="type">T</span>&gt;(<span class="keyword">private</span> <span class="keyword">val</span> innerList: ArrayList&lt;T&gt; = arrayListOf()) : Collection&lt;T&gt;  <span class="keyword">by</span> innerList &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">isEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> = innerList.isNotEmpty()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意: 委托类不能委托接口默认函数, 因为 <code>kotlin</code> 接口默认没有默认函数, 而是使用静态类实现类似效果</p></blockquote><h2 id="object-关键字-★"><a href="#object-关键字-★" class="headerlink" title="object 关键字 ★"></a><code>object</code> 关键字 ★</h2><blockquote><p><code>kotlin</code>中没有 <code>staitc关键字</code>, 它引入了新的方法 <code>object 关键字</code>, 它可以完美的代替 <code>static</code> 的所有场景, 并且添加了很多新的功能</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d262844d33f44710b82f6c988faa8698~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>上面的代码虽然没什么问题, 但是 <code>static</code> 和 普通 方法的代码混在在一起, 比较难以区分, 虽然它有 <code>static</code> 作为标记</p><p><code>static</code> 方法是 类 的方法, 而普通方法是对象的方法, 这两有着本质的区别</p><p>所以在 <code>kotlin</code>中做了区分</p><h3 id="伴生对象"><a href="#伴生对象" class="headerlink" title="伴生对象"></a>伴生对象</h3><p>表示跟随着类对象而出现, 它是属于这个类的Class对象所拥有, 因此它是个单例对象, 伴生对象需要声明在类的内部, 在类被加载时初始化</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Prize</span>(</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">val</span> count: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="keyword">val</span> type: <span class="built_in">Int</span></span><br><span class="line">) &#123;</span><br><span class="line">   <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> TYPE_REDPACK = <span class="number">0</span></span><br><span class="line">      <span class="keyword">val</span> TYPE_COUPON = <span class="number">1</span></span><br><span class="line">      <span class="function"><span class="keyword">fun</span> <span class="title">isRedpack</span><span class="params">(prize: <span class="type">Prize</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> prize.type == TYPE_REDPACK</span><br><span class="line">      &#125;</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> prize = Prize(<span class="string">&quot;红包&quot;</span>, <span class="number">10</span>, Prize.TYPE_REDPACK)</span><br><span class="line">   println(Prize.isRedpack(prize))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到静态的属性和方法都被存储到 <code>companion object</code> 中了, 代码变得更加的清晰</p><p>并且我们在调用 <code>companion object</code> 内的 <code>isRedpack</code>方法也非常的方便<code>Prize.isRedpack(prize)</code>, 不需要<code>Prize.Companion.isRedpack(prize)</code></p><h4 id="伴生对象还可以实现工厂方法模式"><a href="#伴生对象还可以实现工厂方法模式" class="headerlink" title="伴生对象还可以实现工厂方法模式"></a>伴生对象还可以实现工厂方法模式</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Prize</span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> count: <span class="built_in">Int</span>, <span class="keyword">val</span> type: <span class="built_in">Int</span>) &#123;</span><br><span class="line">   <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> TYPE_COMMON = <span class="number">1</span></span><br><span class="line">      <span class="keyword">val</span> TYPE_REDPACK = <span class="number">2</span></span><br><span class="line">      <span class="keyword">val</span> TYPE_COUPON = <span class="number">3</span></span><br><span class="line">      <span class="keyword">val</span> defaultCommonPrize = Prize(<span class="string">&quot;ptjp&quot;</span>, <span class="number">19</span>, Prize.TYPE_COMMON)</span><br><span class="line">      <span class="function"><span class="keyword">fun</span> <span class="title">newRedpackPrize</span><span class="params">(name: <span class="type">String</span>, count: <span class="type">Int</span>)</span></span> = Prize(name, count, Prize.TYPE_REDPACK)</span><br><span class="line">      <span class="function"><span class="keyword">fun</span> <span class="title">newCouponPrize</span><span class="params">(name: <span class="type">String</span>, count: <span class="type">Int</span>)</span></span> = Prize(name, count, Prize.TYPE_COUPON)</span><br><span class="line">      <span class="function"><span class="keyword">fun</span> <span class="title">defaultCommonPrize</span><span class="params">()</span></span> = defaultCommonPrize</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> redpackPrize = Prize.newRedpackPrize(<span class="string">&quot;红包&quot;</span>, <span class="number">10</span>)</span><br><span class="line">   <span class="keyword">val</span> couponPrize = Prize.newCouponPrize(<span class="string">&quot;十元代金券&quot;</span>, <span class="number">10</span>)</span><br><span class="line">   <span class="keyword">val</span> commonPrize = Prize.defaultCommonPrize()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="伴生对象实现接口▲"><a href="#伴生对象实现接口▲" class="headerlink" title="伴生对象实现接口▲"></a>伴生对象实现接口▲</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CompanionObjectDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">ObjectFactory</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">writeObject</span><span class="params">(t: <span class="type">T</span>)</span></span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">loadObject</span><span class="params">(text: <span class="type">String</span> = ClassLoader.getSystemResource(<span class="string">&quot;&quot;</span>)</span></span>.path + <span class="string">&quot;person02.txt&quot;</span>): T</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String) : Serializable &#123;</span><br><span class="line">        <span class="keyword">companion</span> <span class="keyword">object</span> : ObjectFactory&lt;Person&gt; &#123;</span><br><span class="line"><span class="comment">//            override fun loadObject(text: String): Person = File(text).let &#123; it -&gt;</span></span><br><span class="line"><span class="comment">//                if (!it.exists()) it.createNewFile()</span></span><br><span class="line"><span class="comment">//                ObjectInputStream(it.inputStream()).use &#123;</span></span><br><span class="line"><span class="comment">//                    it.readObject() as? Person ?: throw Exception(&quot;文件加载失败&quot;)</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadObject</span><span class="params">(text: <span class="type">String</span>)</span></span>: Person = File(text).run &#123;</span><br><span class="line">                myExists()</span><br><span class="line">                ObjectInputStream(inputStream()).use &#123;</span><br><span class="line">                    it.readObject() <span class="keyword">as</span>? Person ?: <span class="keyword">throw</span> Exception(<span class="string">&quot;文件加载失败&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> File.<span class="title">myExists</span><span class="params">()</span></span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!exists()) createNewFile()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeObject</span><span class="params">(t: <span class="type">Person</span>)</span></span> = with(File(ClassLoader.getSystemResource(<span class="string">&quot;&quot;</span>).path + <span class="string">&quot;person02.txt&quot;</span>)) &#123;</span><br><span class="line">                myExists()</span><br><span class="line">                ObjectOutputStream(outputStream()).use &#123;</span><br><span class="line">                    it.writeObject(t)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//            override fun writeObject(t: Person) = File(ClassLoader.getSystemResource(&quot;&quot;).path + &quot;person02.txt&quot;).run &#123;</span></span><br><span class="line"><span class="comment">//                myExists()</span></span><br><span class="line"><span class="comment">//                ObjectOutputStream(outputStream()).use &#123;</span></span><br><span class="line"><span class="comment">//                    it.writeObject(t)</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    CompanionObjectDemo02.Person.writeObject(CompanionObjectDemo02.Person(<span class="string">&quot;haha&quot;</span>))</span><br><span class="line">    <span class="keyword">val</span> person = CompanionObjectDemo02.Person.loadObject()</span><br><span class="line">    println(person)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@JvmStatic</code>, 但该注解不能添加到 <code>objects</code> 或者 <code>companion object</code> 之外的地方, ① 如果注解到字段上, 该字段的 <code>get/set</code> 函数变成静态函数; ② 如果修饰到函数上, 函数将变成静态的</p></blockquote><blockquote><p><code>@JvmField</code>, 添加了该注解, ①字段访问修饰符将从 <code>private</code> 变成 <code>public</code>; ② 该注解可以在伴生对象以外的地方使用</p></blockquote><h4 id="伴生对象的扩展▲"><a href="#伴生对象的扩展▲" class="headerlink" title="伴生对象的扩展▲"></a>伴生对象的扩展▲</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CompanionObjExtensionDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">val</span> name: String) : Serializable &#123;</span><br><span class="line">        <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> File.<span class="title">myExists</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!exists()) createNewFile()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> CompanionObjExtensionDemo01.Person.Companion.<span class="title">loadObject</span><span class="params">(path: <span class="type">String</span> = ClassLoader.getSystemResource(<span class="string">&quot;&quot;</span>)</span></span>.path + <span class="string">&quot;person03.txt&quot;</span>): CompanionObjExtensionDemo01.Person =</span><br><span class="line">    with(File(ClassLoader.getSystemResource(<span class="string">&quot;&quot;</span>).path + <span class="string">&quot;person03.txt&quot;</span>)) &#123;</span><br><span class="line">        myExists()</span><br><span class="line">        ObjectInputStream(inputStream()).use &#123;</span><br><span class="line">            it.readObject() <span class="keyword">as</span>? CompanionObjExtensionDemo01.Person ?: <span class="keyword">throw</span> Exception(<span class="string">&quot;文件加载失败&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> CompanionObjExtensionDemo01.Person.Companion.<span class="title">writeObject</span><span class="params">(t: <span class="type">CompanionObjExtensionDemo01</span>.<span class="type">Person</span>)</span></span> =</span><br><span class="line">    with(File(ClassLoader.getSystemResource(<span class="string">&quot;&quot;</span>).path + <span class="string">&quot;person03.txt&quot;</span>)) &#123;</span><br><span class="line">        myExists()</span><br><span class="line">        ObjectOutputStream(outputStream()).use &#123;</span><br><span class="line">            it.writeObject(t)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> person = CompanionObjExtensionDemo01.Person(<span class="string">&quot;haha&quot;</span>)</span><br><span class="line">    CompanionObjExtensionDemo01.Person.writeObject(person)</span><br><span class="line">    <span class="keyword">val</span> person1 = CompanionObjExtensionDemo01.Person.loadObject()</span><br><span class="line">    println(<span class="string">&quot;person = <span class="subst">$&#123;person.name&#125;</span>, person01 = <span class="subst">$&#123;person1.name&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例-▲"><a href="#单例-▲" class="headerlink" title="单例 ▲"></a>单例 ▲</h3><p>在 java 中实现单例的方法有很多:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (singleton == <span class="literal">null</span>) &#123;  </span><br><span class="line">                singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> singleton;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span> <span class="params">()</span>&#123;&#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whateverMethod</span><span class="params">()</span> &#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在 kotlin 中由于 <code>object</code>的存在, 我们可以直接用它来实现单例</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Singleton &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">   <span class="meta">@NotNull</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">var0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">      INSTANCE = var0;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种一种饿汉模式, 只要类被加载就会直接实例化单例</p><p>单例对象还可以继承别的接口或者类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> CaseInsensitiveFileComparator : Comparator&lt;File&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">compare</span><span class="params">(o1: <span class="type">File</span>, o2: <span class="type">File</span>)</span></span>: <span class="built_in">Int</span> = o1.path.compareTo(o2.path, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象表达式：改变写法的匿名内部类★"><a href="#对象表达式：改变写法的匿名内部类★" class="headerlink" title="对象表达式：改变写法的匿名内部类★"></a>对象表达式：改变写法的匿名内部类★</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">interface</span> <span class="title class_">ObjectFactory</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">writeObject</span><span class="params">(t: <span class="type">T</span>)</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">loadObject</span><span class="params">(text: <span class="type">String</span> = ClassLoader.getSystemResource(<span class="string">&quot;&quot;</span>)</span></span>.path + <span class="string">&quot;person02.txt&quot;</span>): T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Person02</span>(<span class="keyword">val</span> name: String) : Serializable</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> File.<span class="title">myExists</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!exists()) createNewFile()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> obj: ObjectFactory&lt;Person02&gt; = <span class="keyword">object</span> : ObjectFactory&lt;Person02&gt; &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeObject</span><span class="params">(t: <span class="type">Person02</span>)</span></span> =</span><br><span class="line">            with(File(ClassLoader.getSystemResource(<span class="string">&quot;&quot;</span>).path + <span class="string">&quot;person04.txt&quot;</span>)) &#123;</span><br><span class="line">                myExists()</span><br><span class="line">                ObjectOutputStream(outputStream()).use &#123;</span><br><span class="line">                    it.writeObject(t)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadObject</span><span class="params">(text: <span class="type">String</span>)</span></span>: Person02 =</span><br><span class="line">            with(File(ClassLoader.getSystemResource(<span class="string">&quot;&quot;</span>).path + <span class="string">&quot;person04.txt&quot;</span>)) &#123;</span><br><span class="line">                myExists()</span><br><span class="line">                ObjectInputStream(inputStream()).use &#123;</span><br><span class="line">                    it.readObject() <span class="keyword">as</span>? Person02 ?: <span class="keyword">throw</span> Exception(<span class="string">&quot;文件加载失败&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> person02 = Person02(<span class="string">&quot;haha&quot;</span>)</span><br><span class="line">    obj.writeObject(person02)</span><br><span class="line">    <span class="keyword">val</span> person021 = obj.loadObject()</span><br><span class="line">    println(<span class="string">&quot;person02 = <span class="subst">$&#123;person02.name&#125;</span>, person021 = <span class="subst">$&#123;person021.name&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意: </p><ol><li>匿名内部类不是单例, 每次表达式完成都会产生一个新的对象</li><li>匿名内部类可以访问外部函数的变量, 并且访问并没有 <code>final</code> 限制, 可以直接在匿名内部类中修改其值</li></ol><blockquote><p>总结: <code>object</code> 关键字如果 借助 <code>:</code> 修饰表示给 <code>object</code> 加上该类型, 而整体来看就是 new 一个该接口类型的子类对象, 这样我们可以得出结论, <code>object</code> 如果确定了类型, 那功能是定义一个类, 并<code>new</code>出一个<code>对象</code>, 如果修饰类名则默认为定义了个类, 并 <code>new</code> 了个<code>单例</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口 </tag>
            
            <tag> 继承 </tag>
            
            <tag> 多继承 </tag>
            
            <tag> 覆盖方法 </tag>
            
            <tag> 覆盖属性 </tag>
            
            <tag> 之类初始化顺序 </tag>
            
            <tag> super </tag>
            
            <tag> this </tag>
            
            <tag> 嵌套类 </tag>
            
            <tag> 内部类 </tag>
            
            <tag> 数据类 </tag>
            
            <tag> data class </tag>
            
            <tag> copy函数 </tag>
            
            <tag> componentN </tag>
            
            <tag> 解构 </tag>
            
            <tag> 元组 </tag>
            
            <tag> 抽象类 </tag>
            
            <tag> 可见修饰符 </tag>
            
            <tag> internal </tag>
            
            <tag> 局部变量 </tag>
            
            <tag> 模块 </tag>
            
            <tag> 密封类 </tag>
            
            <tag> seal </tag>
            
            <tag> 委托类 </tag>
            
            <tag> 委托 </tag>
            
            <tag> object </tag>
            
            <tag> 关键字 </tag>
            
            <tag> 伴生对象 </tag>
            
            <tag> 伴生类 </tag>
            
            <tag> 扩展 </tag>
            
            <tag> 单例 </tag>
            
            <tag> 匿名内部类 </tag>
            
            <tag> 对象表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、kotlin的函数</title>
      <link href="/2022/12/03/07kotlin/%E4%BA%8C%E3%80%81kotlin%E7%9A%84%E5%87%BD%E6%95%B0/"/>
      <url>/2022/12/03/07kotlin/%E4%BA%8C%E3%80%81kotlin%E7%9A%84%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="函数★"><a href="#函数★" class="headerlink" title="函数★"></a>函数★</h1><p>自定义一个打印集合的方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">joinToString</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">   collection: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">   separator: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">   prefix: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">   postfix: <span class="type">String</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: String &#123;</span><br><span class="line">   <span class="keyword">val</span> stringBuffer = StringBuilder(prefix)</span><br><span class="line">   <span class="keyword">for</span> ((index, value) <span class="keyword">in</span> collection.withIndex()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         stringBuffer.append(separator)</span><br><span class="line">      &#125;</span><br><span class="line">      stringBuffer.append(value)</span><br><span class="line">   &#125;</span><br><span class="line">   stringBuffer.append(postfix)</span><br><span class="line">   <span class="keyword">return</span> stringBuffer.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命名参数-又叫具名参数-★"><a href="#命名参数-又叫具名参数-★" class="headerlink" title="命名参数(又叫具名参数) ★"></a>命名参数(又叫具名参数) ★</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println(joinToString(list, separator = <span class="string">&quot;,&quot;</span>, prefix = <span class="string">&quot;[ &quot;</span>, postfix = <span class="string">&quot; ]&quot;</span>))</span><br><span class="line">println(joinToString(list, separator = <span class="string">&quot;,&quot;</span>, <span class="string">&quot;[ &quot;</span>, postfix = <span class="string">&quot; ]&quot;</span>))</span><br></pre></td></tr></table></figure><p><code>list, separator = &quot;,&quot;, prefix = &quot;[ &quot;, postfix = &quot; ]&quot;</code></p><p>给参数配上了名字, 然后根据名字传递给相同名字的参数位置上</p><h3 id="有什么用"><a href="#有什么用" class="headerlink" title="有什么用?"></a>有什么用?</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b481cdae9f9d4411914d84714ce667f5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>反着传递参数</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf2b5d9b56c64304a50e447314cdbcff~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>配合默认参数值, 跳过默认参数只传递下一个参数</p><h2 id="函数参数默认值-★"><a href="#函数参数默认值-★" class="headerlink" title="函数参数默认值 ★"></a>函数参数默认值 ★</h2><p>给函数的参数添加默认值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">joinToString</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">   collection: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">   separator: <span class="type">String</span> = <span class="string">&quot;, &quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">   prefix: <span class="type">String</span> = <span class="string">&quot;[ &quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">   postfix: <span class="type">String</span> = <span class="string">&quot; ]&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: String &#123;</span><br><span class="line">   <span class="keyword">val</span> stringBuffer = StringBuilder(prefix)</span><br><span class="line">   <span class="keyword">for</span> ((index, value) <span class="keyword">in</span> collection.withIndex()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         stringBuffer.append(separator)</span><br><span class="line">      &#125;</span><br><span class="line">      stringBuffer.append(value)</span><br><span class="line">   &#125;</span><br><span class="line">   stringBuffer.append(postfix)</span><br><span class="line">   <span class="keyword">return</span> stringBuffer.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">separator: String = <span class="string">&quot;, &quot;</span>,</span><br><span class="line">prefix: String = <span class="string">&quot;[ &quot;</span>,</span><br><span class="line">postfix: String = <span class="string">&quot; ]&quot;</span>   </span><br></pre></td></tr></table></figure><p>使用默认参数值之后, 可以这样调用这种函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println(joinToString(list, separator = <span class="string">&quot;,&quot;</span>, postfix = <span class="string">&quot; ]&quot;</span>))</span><br><span class="line">println(joinToString01(list, <span class="string">&quot;, &quot;</span>, postfix = <span class="string">&quot; ]&quot;</span>))</span><br></pre></td></tr></table></figure><p>我们可以选择省略掉默认参数值</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0099d444987a4214be37beab07160a2e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="默认函数参数的本质"><a href="#默认函数参数的本质" class="headerlink" title="默认函数参数的本质"></a>默认函数参数的本质</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8ae925eac504567a86c8fad5a51f99f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>函数默认参数就是生成一个叫<code>running$default</code>的函数, 在函数体内添加 一堆 if 语句赋值默认值</p><blockquote><p>在 java 中没有默认参数值, 不过我们可以用 <code>@JvmOverloads</code>, 让一个函数生成重载函数</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a5b952ead27e4e3186335a80e53990eb~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JvmOverloads</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">joinToString03</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">   collection: <span class="type">Collection</span>&lt;<span class="type">T</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">   separator: <span class="type">String</span> = <span class="string">&quot;, &quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">   prefix: <span class="type">String</span> = <span class="string">&quot;[ &quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">   postfix: <span class="type">String</span> = <span class="string">&quot; ]&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: String &#123;</span><br><span class="line">   <span class="keyword">val</span> stringBuffer = StringBuilder(prefix)</span><br><span class="line">   <span class="keyword">for</span> ((index, value) <span class="keyword">in</span> collection.withIndex()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         stringBuffer.append(separator)</span><br><span class="line">      &#125;</span><br><span class="line">      stringBuffer.append(value)</span><br><span class="line">   &#125;</span><br><span class="line">   stringBuffer.append(postfix)</span><br><span class="line">   <span class="keyword">return</span> stringBuffer.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他会生成这些函数</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/230eb821ad1d45b0a354f50bee2029e2~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>而java中每个函数的默认参数值都被省略</p><h2 id="反引号函数"><a href="#反引号函数" class="headerlink" title="反引号函数"></a>反引号函数</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7e04373113e44071adafb6c2a93f9933~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>如果函数名存在关键字或者别的不能使用的特殊字符, 可以使用 反引号</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> `<span class="keyword">fun</span>`<span class="params">()</span></span> &#123;</span><br><span class="line">   println(<span class="string">&quot;ffffff&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反引号函数还可以使用在, 只有 kotlin 才能拥有 java 不能调用的情况下</p><h2 id="顶层函数和属性-★"><a href="#顶层函数和属性-★" class="headerlink" title="顶层函数和属性 ★"></a>顶层函数和属性 ★</h2><blockquote><p>kotlin没有静态<code>static</code>关键字, 也就意味着, 没有显示的 <code>static</code> 函数或者属性, 很多人都说有, 那是伴生对象(<code>companion object</code>), 对, 那个让人看起来好像是代替java的<code>static</code>对象的, 不过本质上, 他仅仅定义了个静态类和一个静态对象罢了, 其中伴生对象的函数还是非静态的, 不过借助静态的伴生对象(静态单例对象)让其看起来像是静态函数</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">User01</span> <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="keyword">val</span> nickName: String) &#123;</span><br><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">newSubscribingUser</span><span class="params">(email: <span class="type">String</span>)</span></span>: User01 &#123;</span><br><span class="line"><span class="keyword">return</span> User01(email.substringBefore(<span class="string">&#x27;@&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译后</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">User01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="keyword">final</span> Companion Companion = new Companion();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User01(String nickName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String getNickName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Companion</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Companion() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> User01 newSubscribingUser(String email) &#123;</span><br><span class="line">            <span class="keyword">return</span> new User01(StringsKt.substringBefore$default((String)email, (char)<span class="string">&#x27;@&#x27;</span>, <span class="literal">null</span>, (int)<span class="number">2</span>, <span class="literal">null</span>), <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>而真正的静态属性和静态函数在kotlin中被叫做顶层属性&#x2F;函数, 只不过如果没有<code>@file:JvmName(&quot;PrintCollection&quot;)</code>特意的注释文件名, 则默认顶层属性&#x2F;函数属于<code>文件名+Kt</code></p></blockquote><h3 id="顶层函数-★"><a href="#顶层函数-★" class="headerlink" title="顶层函数 ★"></a>顶层函数 ★</h3><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h4><p><strong>顶层函数和顶层属性把定义的位置放在文件中, 而不是定义在类中, 该函数或者属性属于包</strong></p><blockquote><p>翻译成java代码, 该属性通常存在于 Kt 结尾的文件中</p></blockquote><blockquote><p>在java源码中看出顶层函数都是 static 函数</p></blockquote><p>顶层函数反编译成 java 后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">joinToString</span><span class="params">(Collection collection, String separator, String prefix, String postfix)</span></span><br></pre></td></tr></table></figure><p>如果要在 java 中调用这种顶层函数</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfc64c6703884dc989c7427ace6340e0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">// 导入了 kotlin 的文件名(文件名 + Kt)</span></span><br><span class="line"><span class="keyword">import</span> function.PrintCollectionDemoKt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        List&lt;Integer&gt; list = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> PrintCollectionDemoKt.joinToString(list, <span class="string">&quot;, &quot;</span>, <span class="string">&quot;[ &quot;</span>, <span class="string">&quot; ]&quot;</span>);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果不要以 文件名 + Kt 的形式在java中调用, 也可以在 kotlin 的文件顶上, 加上<code>@file:JvmName(&quot;PrintCollection&quot;)</code></p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3923b5d535a4599a400b9beab3f81a5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7fd476519e574ee4a09513721d47f1fa~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7cc321c2a8dc4802b07daf9ba5fd7c5c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>这里只针对顶层函数, 而不是 类</p></blockquote><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e57831ba0c034ba3854eb95a19bf5564~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="顶层属性-★"><a href="#顶层属性-★" class="headerlink" title="顶层属性 ★"></a>顶层属性 ★</h3><p>顶层属性就是在文件顶层的属性, 不属于kotlin能看到的任何类中, 它属于包</p><blockquote><p>kotlin顶层函数&#x2F;顶层属性都属于全局作用域</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span>) &#123;</span><br><span class="line">      count++</span><br><span class="line">   &#125;</span><br><span class="line">   println(count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译成java代码看看:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TopPropertiesDemoKt</span> &#123;</span><br><span class="line">   <span class="comment">// 看这里, static </span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">int</span> var0)</span> &#123;</span><br><span class="line">      count = var0;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">byte</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="number">100</span>; var1 &lt;= var2; ++var1) &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">var10000</span> <span class="operator">=</span> count++;</span><br><span class="line">      &#125;</span><br><span class="line">      var1 = count;</span><br><span class="line">      System.out.println(var1);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果顶层属性是 <code>val</code> 定义的, 那么只会生成 <code>get</code> 方法, 我们就不能进行任何的写操作了, java源码是<code>public static final int count</code>, 他是一个常量</p><blockquote><p>Ps: 在kotlin中 <code>static</code> 不再是关键字</p></blockquote><p>var 定义的顶层属性, 如果setter 需要自定义, 可以这样:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setCount</span><span class="params">(c: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">   count = c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不仅仅是顶层属性可以这样, 普通类中的属于也可以, 但是主构造函数中的属性不行, 需要放在类体内定义</p></blockquote><h3 id="常量-★"><a href="#常量-★" class="headerlink" title="常量 ★"></a>常量 ★</h3><p><code>const</code> + <code>val</code>修饰 <strong>顶层属性</strong>, 将会被解析成<strong>常量</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span> <span class="comment">// 顶层属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> INT_MAX = <span class="built_in">Int</span>.MAX_VALUE <span class="comment">// 常量</span></span><br><span class="line"><span class="keyword">val</span> INT_MIN = <span class="built_in">Int</span>.MIN_VALUE</span><br><span class="line"><span class="keyword">var</span> INT_MID = <span class="built_in">Int</span>.MIN_VALUE + <span class="built_in">Int</span>.MAX_VALUE</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>反编译后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INT_MAX</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INT_MIN</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">INT_MID</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="comment">// var count = 0 // 顶层属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123; <span class="keyword">return</span> count; &#125;</span><br><span class="line"><span class="comment">// var count = 0 // 顶层属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">int</span> var0)</span> &#123; count = var0; &#125;</span><br><span class="line"><span class="comment">// val INT_MIN = Int.MIN_VALUE</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getINT_MIN</span><span class="params">()</span> &#123; <span class="keyword">return</span> INT_MIN; &#125;</span><br><span class="line"><span class="comment">// var INT_MID = Int.MIN_VALUE + Int.MAX_VALUE</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getINT_MID</span><span class="params">()</span> &#123; <span class="keyword">return</span> INT_MID; &#125;</span><br><span class="line"><span class="comment">// var INT_MID = Int.MIN_VALUE + Int.MAX_VALUE</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setINT_MID</span><span class="params">(<span class="type">int</span> var0)</span> &#123; INT_MID = var0; &#125;</span><br></pre></td></tr></table></figure><p>(1) 常量不能放在类的内部, 他只能属于<code>顶层</code>或者<code>伴生对象</code>(有点像<code>静态代码块</code>)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> INT_MIN = <span class="built_in">Int</span>.MIN_VALUE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">val</span> INT_MAX = <span class="built_in">Int</span>.MAX_VALUE</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df60ddfda9d44f59982bc6828d7eb831~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="扩展-★"><a href="#扩展-★" class="headerlink" title="扩展 ★"></a>扩展 ★</h2><h3 id="是什么-☆"><a href="#是什么-☆" class="headerlink" title="是什么? ☆"></a>是什么? ☆</h3><p>扩展包含 <code>扩展函数</code> 和 <code>扩展属性</code>, 第三方库中的类通常不让修改, 但可以使用 <strong>扩展函数(扩展属性)为第三方库添加新的函数和属性, 不需要修改库源码</strong></p><h3 id="扩展函数-★"><a href="#扩展函数-★" class="headerlink" title="扩展函数 ★"></a>扩展函数 ★</h3><h4 id="什么是扩展函数-★"><a href="#什么是扩展函数-★" class="headerlink" title="什么是扩展函数?★"></a>什么是扩展函数?★</h4><p>扩展函数对类进行扩展, 不需要修改类中任何源码, 仅需要给函数添加 receiver 便可</p><h4 id="为什么需要扩展函数"><a href="#为什么需要扩展函数" class="headerlink" title="为什么需要扩展函数?"></a>为什么需要扩展函数?</h4><p>库中代码无法修改, 此时可以通过扩展函数扩展该库特定类的功能</p><h4 id="怎么用-★"><a href="#怎么用-★" class="headerlink" title="怎么用?★"></a>怎么用?★</h4><p>非常简单, 扩展函数说到底还是函数, 可以按照普通函数写</p><ol><li>写个函数</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">last01</span><span class="params">()</span></span>: <span class="built_in">Char</span> &#123; <span class="keyword">return</span> xxx &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>加上扩展的类(<code>receiver</code>)</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">last01</span><span class="params">()</span></span>: <span class="built_in">Char</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>] &#125;</span><br></pre></td></tr></table></figure><p>至此扩展函数写完了</p><p>该扩展函数给 <code>String</code> 类添加了 <code>last01</code> 函数</p><ol start="3"><li>调用扩展函数</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;<span class="subst">$&#123;<span class="string">&quot;zhazha&quot;</span>.last01()&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展函数的本质★"><a href="#扩展函数的本质★" class="headerlink" title="扩展函数的本质★"></a>扩展函数的本质★</h4><p>扩展函数的本质: <code>fun String.print(): Char</code> &#x3D;&#x3D;&gt; <code>fun print(str: String): Char</code></p><blockquote><p>对扩展函数的本质是: <code>fun print(str: String): Char</code>, 记住这点, 后续遇到的任何问题都可以解释</p></blockquote><p>反编译代码:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> char last01(String $<span class="keyword">this</span>$last01) &#123;</span><br><span class="line">    <span class="keyword">return</span> $<span class="keyword">this</span>$last01.charAt($<span class="keyword">this</span>$last01.length() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 <code>String.last01(): Char</code> 变成了 <code>char last01(String this)</code>, 这便是 kotlin 编译器为扩展函数做的处理</p><p>因此可如下使用:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> void test01() &#123;</span><br><span class="line">    println(<span class="string">&quot;<span class="subst">$&#123;last01(<span class="string">&quot;zhazha&quot;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此后遇见扩展函数便可看成: <code>Int.xxx()</code> &#x3D;&#x3D;&gt; <code>xxx(this: Int)</code></p><p>由此推导: <code>Int() -&gt; Char &lt;==&gt; (Int) -&gt; Char</code> 可相互转换使用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">last01</span><span class="params">()</span></span>: <span class="built_in">Char</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> vLast: (String) -&gt; <span class="built_in">Char</span> = String::last01</span><br><span class="line">   vLast(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line">   <span class="keyword">val</span> extLast: String.() -&gt; <span class="built_in">Char</span> = vLast</span><br><span class="line">   <span class="string">&quot;zhazha&quot;</span>.extLast()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>String.() -&gt; Char</code> 和 <code>(String) -&gt; Char</code> 相互转换</p><blockquote><p>注意:扩展函数可以以 <code>String::last01</code> 如此形式获取扩展函数引用</p></blockquote><blockquote><p>如若出现扩展函数与扩展属性同名时, <code>String::last01</code>默认引用成员函数</p></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><blockquote><p>效仿 <code>with</code> 标准函数复写一个属于自己的 <code>with</code> 扩展函数</p></blockquote><p>参考标准库代码如下:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@kotlin</span>.<span class="keyword">internal</span>.InlineOnly</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T, R&gt;</span> <span class="title">with</span><span class="params">(receiver: <span class="type">T</span>, block: <span class="type">T</span>.() -&gt; <span class="type">R</span>)</span></span>: R &#123;</span><br><span class="line">    contract &#123;</span><br><span class="line">        callsInPlace(block, InvocationKind.EXACTLY_ONCE)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> receiver.block()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以效仿模拟出两种写法:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;A, B&gt;</span> A.<span class="title">with01</span><span class="params">(block: <span class="type">A</span>.() -&gt; <span class="type">B</span>)</span></span> = <span class="keyword">this</span>.block()</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;A, B&gt;</span> A.<span class="title">with02</span><span class="params">(block: (<span class="type">A</span>) -&gt; <span class="type">B</span>)</span></span> = block(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test02</span><span class="params">()</span></span> &#123;</span><br><span class="line">   println(<span class="string">&quot;zhazha&quot;</span>.with01 &#123; <span class="comment">// this -&gt;</span></span><br><span class="line">      <span class="keyword">this</span>.length</span><br><span class="line">   &#125;)</span><br><span class="line">   println(<span class="string">&quot;zhazha&quot;</span>.with02 &#123; <span class="comment">// it -&gt;</span></span><br><span class="line">      it.length</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依据前面的总结, 在此处还可认为: <code>A.() -B</code> 与 <code>(A) -&gt; B</code>有着相同的效果</p><p>只不过使用的方式不同, 前者可以使用 <code>this</code> 后者 使用<code>it</code></p><h4 id="扩展函数没有多态性★"><a href="#扩展函数没有多态性★" class="headerlink" title="扩展函数没有多态性★"></a>扩展函数没有多态性★</h4><p>扩展函数的调用实际上不走底层java多态那一套, 是编译器在操作</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Shape</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>: <span class="type">Shape</span>() &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span>: <span class="type">Shape</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> Shape.<span class="title">getName</span><span class="params">()</span></span> = <span class="string">&quot;Shape = <span class="subst">$&#123;s.javaClass&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> Rectangle.<span class="title">getName</span><span class="params">()</span></span> = <span class="string">&quot;Rectangle&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> Triangle.<span class="title">getName</span><span class="params">()</span></span> = <span class="string">&quot;Triangle&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">printName</span><span class="params">(s: <span class="type">Shape</span>)</span></span> = println(s.getName())</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test01</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> s = Shape()</span><br><span class="line">   printName(s)</span><br><span class="line">   <span class="keyword">val</span> r = Rectangle()</span><br><span class="line">   printName(r)</span><br><span class="line">   <span class="keyword">val</span> t = Triangle()</span><br><span class="line">   printName(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Shape</span><br><span class="line">Shape</span><br><span class="line">Shape</span><br></pre></td></tr></table></figure><p>要记住, 扩展函数的原型是这样:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">(s: <span class="type">Shape</span>)</span></span> = <span class="string">&quot;Shape class = <span class="subst">$&#123;s.javaClass&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">(r: <span class="type">Rectangle</span>)</span></span> = <span class="string">&quot;Rectangle&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">(t: <span class="type">Triangle</span>)</span></span> = <span class="string">&quot;Triangle&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">printName</span><span class="params">(s: <span class="type">Shape</span>)</span></span> = println(getName(s))</span><br></pre></td></tr></table></figure><p>在执行这段代码<code>fun printName(s: Shape) = println(getName(s))</code>时, <code>getName(s)</code>调用的是 <code>fun getName(s: Shape)</code> 这个函数</p><p>这是简单的函数调用不是对象的方法调用</p><p>对象的方法调用才有多态, 函数调用不存在 <code>虚函数指针</code> 和<code>虚函数表</code>, 对象才有</p><p>除非代码改成这样:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">   <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String = <span class="string">&quot;Shape&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>: <span class="type">Shape</span>() &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String = <span class="string">&quot;Rectangle&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span>: <span class="type">Shape</span>() &#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getName</span><span class="params">()</span></span>: String = <span class="string">&quot;Triangle&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">printName</span><span class="params">(s: <span class="type">Shape</span>)</span></span> = println(s.getName())</span><br></pre></td></tr></table></figure><p>所以不要被扩展函数的 <code>s.getName()</code> 误导了, 其本质上是<code>getName(s)</code> 是函数调用</p><p>类对象的 <code>s.getName()</code>才会有多态</p><h4 id="成员函数的优先级大于扩展函数★"><a href="#成员函数的优先级大于扩展函数★" class="headerlink" title="成员函数的优先级大于扩展函数★"></a>成员函数的优先级大于扩展函数★</h4><p>当类中存在的一个函数和扩展函数有这相同的函数签名, 那么kotlin编译器会优先选择成员函数, 如果扩展函数和成员函数的函数签名不同时, 则不会收到任何影响</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">printFunctionType</span><span class="params">()</span></span> = println(<span class="string">&quot;class Method&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Example.<span class="title">printFunctionType</span><span class="params">()</span></span> = println(<span class="string">&quot;extension method&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> example = Example()</span><br><span class="line">   example.printFunctionType() <span class="comment">// class Method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可空接收者-使用-Any-给所有对象添加扩展函数"><a href="#可空接收者-使用-Any-给所有对象添加扩展函数" class="headerlink" title="可空接收者(使用 Any? 给所有对象添加扩展函数)"></a>可空接收者(使用 <code>Any?</code> 给所有对象添加扩展函数)</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Any?.<span class="title">toString</span><span class="params">()</span></span>: String = <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">null</span>) <span class="string">&quot;null&quot;</span> <span class="keyword">else</span> toString()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面这段代码可以简化, 看来我kotlin能力还是不行, 想到了可以用 ?: 表达式, 可是脑抽了, 用了 if 表达式, 上了 idea 才知道还能这样写, 失策失策~~~</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Any?.<span class="title">toString</span><span class="params">()</span></span>: String = <span class="keyword">this</span>?.toString() ?: <span class="string">&quot;null&quot;</span></span><br></pre></td></tr></table></figure><p><code>Any?</code>是 kotlin 中所有类的父类, 给 <code>Any?</code> 添加扩展函数则是给所有类添加了一个函数</p><h4 id="匿名扩展函数-★"><a href="#匿名扩展函数-★" class="headerlink" title="匿名扩展函数 ★"></a>匿名扩展函数 ★</h4><table><thead><tr><th>匿名扩展函数如何定义?</th></tr></thead><tbody><tr><td>函数?</td></tr><tr><td><code>fun print(): Char</code></td></tr><tr><td>匿名?</td></tr><tr><td><code>fun (): Char</code></td></tr><tr><td>扩展?</td></tr><tr><td><code>fun receiver.(): Char</code></td></tr></tbody></table><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> c: String.() -&gt; <span class="built_in">Char</span> = <span class="function"><span class="keyword">fun</span> String.<span class="params">()</span></span>: <span class="built_in">Char</span> = <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>]</span><br><span class="line"><span class="string">&quot;zhazha&quot;</span>.c()</span><br></pre></td></tr></table></figure><p>可以变成: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> c: String.() -&gt; <span class="built_in">Char</span> = &#123; <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>] &#125;</span><br></pre></td></tr></table></figure><p>再加强一点点, 把他变成参数呢? <code>匿名扩展函数类型参数</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">last03</span><span class="params">(str: <span class="type">String</span>, last: <span class="type">String</span>.() -&gt; <span class="type">Char</span>)</span></span> &#123;</span><br><span class="line">   last(str)</span><br><span class="line">   str.last()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> toC: String.() -&gt; <span class="built_in">Char</span> = <span class="function"><span class="keyword">fun</span> String.<span class="params">()</span></span>: <span class="built_in">Char</span> = <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>]</span><br><span class="line">    <span class="string">&quot;zhazha&quot;</span>.toC()</span><br><span class="line">    last03(<span class="string">&quot;zhazha&quot;</span>, <span class="function"><span class="keyword">fun</span> String.<span class="params">()</span></span>: <span class="built_in">Char</span> = <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java源码: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">last03</span><span class="params">(String str, Function1&lt;? <span class="built_in">super</span> String, Character&gt; last)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Function1</span> <span class="variable">toC2</span> <span class="operator">=</span> main.toC<span class="number">.1</span>.INSTANCE;</span><br><span class="line">toC2.invoke((Object)<span class="string">&quot;zhazha&quot;</span>);</span><br><span class="line">ExtensionFuncPropertyDemoKt.last03(<span class="string">&quot;zhazha&quot;</span>, (Function1&lt;? <span class="built_in">super</span> String, Character&gt;)((Function1)main<span class="number">.1</span>.INSTANCE));</span><br></pre></td></tr></table></figure><p><strong>匿名扩展函数对象</strong>不论作为变量还是参数都被kotlin定义成了 <code>Function1</code></p><blockquote><p>记住仅仅是对扩展函数的 变量 和 参数, 和定义的扩展函数无关</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfd1c1148b62401092e3ecf507264708~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><code>Function1</code> 接口, 看到 <code>in</code> 和 <code>out</code> 了么? 有进, 有出. <code>p1 进</code>, <code>R 出</code></p><blockquote><p>如果有学过 java 的话 , 你就把 <code>last</code> 当作接口<code>Function1</code>的匿名对象(<code>Function1</code>的子类), 而匿名对象里面有个 <code>invoke</code> 函数</p></blockquote><p>上面那段代码还可以这样写</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">last03</span><span class="params">(str: <span class="type">String</span>, last: <span class="type">String</span>.() -&gt; <span class="type">Char</span>)</span></span> &#123;</span><br><span class="line">   str.last()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它<strong>既是的匿名对象 也是 扩展函数</strong>, 这点需要注意</p><p>回到 <code>last03</code> 函数的调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">last03</span><span class="params">(str: <span class="type">String</span>, last: <span class="type">String</span>.() -&gt; <span class="type">Char</span>)</span></span> &#123;</span><br><span class="line">   str.last()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的调用: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">last03(<span class="string">&quot;zhazha&quot;</span>, <span class="function"><span class="keyword">fun</span> String.<span class="params">()</span></span>: <span class="built_in">Char</span> = <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>第二个参数是 <strong>匿名扩展函数</strong>, 那要怎么把第二个参数变成 传递 <strong>lambda</strong> 呢?</p><p>在 kotlin 中, lambda 表达式是以 <code>&#123;&#125;</code> 标识作用域, 使用 <code>-&gt;</code> 区分 参数 和 函数体 的表达式, 所以先写上 <code>&#123;&#125;</code></p><p>发现idea报错提示</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c84950d268f04da08bde8ec86c38bf91~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>你听了它的话 <code>last03</code> 函数声明就变成:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">last</span><span class="params">(str: <span class="type">String</span>, param: <span class="type">String</span>.() -&gt; <span class="type">Unit</span>)</span></span> = str.param()</span><br></pre></td></tr></table></figure><p>从 <code>Char</code> 变成 <code>Unit</code></p><p>然后函数调用就变成这样: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">last(<span class="string">&quot;xixi&quot;</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>懂了吧? 改回原先的代码, 试试返回个 <strong>Char</strong> 看看</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">last(<span class="string">&quot;xixi&quot;</span>) &#123; <span class="string">&#x27;a&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><p>没报错</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">last</span><span class="params">(str: <span class="type">String</span>, param: <span class="type">String</span>.() -&gt; <span class="type">Char</span>)</span></span> = str.param()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    last(<span class="string">&quot;xixi&quot;</span>) &#123; <span class="comment">// this: String // 这里隐藏着一个 this</span></span><br><span class="line">        <span class="keyword">this</span>.last()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>★ 总结: 这说明了 <code>String.() -&gt; Char</code> 转成 lambda 表达式的话, 可以 不用管 <strong>接收者</strong> 是怎样, 相当于写一个 <code>() -&gt; Char</code> 要怎么转成lambda就行, 只不过 lambda 作用域内多了个 <code>this</code>, 该对象由 我们主动以 <code>str.param()</code> 形式调用，被 kotlin 编译器识别注入了<code>receiver</code> 罢了</p></blockquote><p>如果上面的解释看不懂, 理解不了</p><p>我们可以将其还原成: <code>fun last(str: String, param: String.() -&gt; Char) = str.param()</code></p><p>这样我们可以这么使用:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">last(<span class="string">&quot;xixi&quot;</span>) &#123; it -&gt; <span class="comment">// 这是自带的</span></span><br><span class="line">    it.last()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>匿名扩展函数 <code>String.(): Char</code> 也就是 <code>(String): Char</code></p></blockquote><h3 id="扩展属性-★"><a href="#扩展属性-★" class="headerlink" title="扩展属性 ★"></a>扩展属性 ★</h3><p>它是一个属性, 有 <strong>get&#x2F;set</strong> 方法, 没有字段(field)</p><h4 id="怎么写"><a href="#怎么写" class="headerlink" title="怎么写???"></a>怎么写???</h4><p>既然是扩展的属性, 核心是属性</p><p>(1) 先写个字段</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> count: <span class="built_in">Int</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>(2) 加上扩展</p><p>这里的扩展我选择 <code>List&lt;Int&gt;</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> List&lt;<span class="built_in">Int</span>&gt;.count: <span class="built_in">Int</span></span><br></pre></td></tr></table></figure><p>(3) 最后加上自定义访问器(get&#x2F;set)</p><p>由于这里是 val 修饰, 所以只有 get 没有 set 访问器</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> List&lt;<span class="built_in">Int</span>&gt;.count: <span class="built_in">Int</span></span><br><span class="line">    <span class="keyword">get</span>() = <span class="keyword">this</span>.size</span><br></pre></td></tr></table></figure><p>完成</p><h4 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用?"></a>怎么用?</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line">println(list.count)</span><br></pre></td></tr></table></figure><p>翻译成java源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ExtensionPropertiesDemoKt</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">(List&lt;Integer&gt; count)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Object[] arrobject = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> CollectionsKt.listOf((Object[])arrobject);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ExtensionPropertiesDemoKt.getCount(list);</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>学完扩展函数, 再学扩展属性就简单过下完事</p></blockquote><h2 id="扩展函数-x2F-属性还可以这么理解"><a href="#扩展函数-x2F-属性还可以这么理解" class="headerlink" title="扩展函数&#x2F;属性还可以这么理解?"></a>扩展函数&#x2F;属性还可以这么理解?</h2><p>你可以认为扩展函数&#x2F;属性就是往函数或者属性的作用域中添加一个<code>receiver</code>对象</p><p>比如: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">first</span><span class="params">()</span></span>: <span class="built_in">Char</span> = <span class="keyword">this</span>[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>就是往一个 <code>first</code> 的函数作用域内添加一个 <code>String</code> 类型的对象</p><p>接着你就可以在该函数的作用域中使用 <code>String</code> 对象</p><h2 id="中缀表达式"><a href="#中缀表达式" class="headerlink" title="中缀表达式"></a>中缀表达式</h2><p>上面的 <code>in、step、downTo和until</code> 这些可以不通过点号调用的函数， 就是传说中的中缀表达式</p><h3 id="如何定义？"><a href="#如何定义？" class="headerlink" title="如何定义？"></a>如何定义？</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;A, B&gt;</span> A.<span class="title">to</span><span class="params">(that: <span class="type">B</span>)</span></span>: Pair&lt;A, B&gt;</span><br></pre></td></tr></table></figure><p><code>A to B</code> &#x3D;&#x3D;&gt; <code>A + 中缀表达式名字 + B</code></p><p>中缀表达式必须满足:</p><ol><li>必须是某个类型的扩展函数或成员函数</li><li>中缀表达式函数只能有一个函数</li><li>中缀表达式不能有默认参数值</li><li>中缀表达式参数不能是可变参数</li></ol><p>可以自己实现一个，比如 函数名叫 <code>vs</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Score</span>(<span class="keyword">val</span> name: String, <span class="keyword">var</span> score: <span class="built_in">Double</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> Score.<span class="title">vs</span><span class="params">(other: <span class="type">Score</span>)</span></span>: String = <span class="keyword">when</span> &#123;</span><br><span class="line">   <span class="keyword">this</span>.score &gt; other.score -&gt; <span class="string">&quot;congratulations！！！ <span class="subst">$&#123;this.name&#125;</span>: <span class="subst">$&#123;this.score&#125;</span> win！！！&quot;</span></span><br><span class="line">   <span class="keyword">this</span>.score == other.score -&gt; <span class="string">&quot;<span class="subst">$&#123;this.name&#125;</span> and <span class="subst">$&#123;other.score&#125;</span> have the same score！！！&quot;</span></span><br><span class="line">   <span class="keyword">else</span> -&gt; <span class="string">&quot;congratulations！！！<span class="subst">$&#123;other.name&#125;</span>: <span class="subst">$&#123;other.score&#125;</span> win！！！&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> xiaoMing = Score(<span class="string">&quot;xiangming&quot;</span>, <span class="number">98.5</span>)</span><br><span class="line">   <span class="keyword">val</span> xiaoHong = Score(<span class="string">&quot;xiaoHong&quot;</span>, <span class="number">99.0</span>)</span><br><span class="line">   println(xiaoMing vs xiaoHong)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以这么写</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Score</span>(<span class="keyword">val</span> name: String, <span class="keyword">var</span> score: <span class="built_in">Double</span>) &#123;</span><br><span class="line">   <span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="title">vs</span><span class="params">(other: <span class="type">Score</span>)</span></span>: String = <span class="keyword">when</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.score &gt; other.score -&gt; <span class="string">&quot;congratulations！！！ <span class="subst">$&#123;this.name&#125;</span>: <span class="subst">$&#123;this.score&#125;</span> win！！！&quot;</span></span><br><span class="line">      <span class="keyword">this</span>.score == other.score -&gt; <span class="string">&quot;<span class="subst">$&#123;this.name&#125;</span> and <span class="subst">$&#123;other.score&#125;</span> have the same score！！！&quot;</span></span><br><span class="line">      <span class="keyword">else</span> -&gt; <span class="string">&quot;congratulations！！！<span class="subst">$&#123;other.name&#125;</span>: <span class="subst">$&#123;other.score&#125;</span> win！！！&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> xiaoMing = Score(<span class="string">&quot;xiangming&quot;</span>, <span class="number">98.5</span>)</span><br><span class="line">   <span class="keyword">val</span> xiaoHong = Score(<span class="string">&quot;xiaoHong&quot;</span>, <span class="number">99.0</span>)</span><br><span class="line">   println(xiaoMing vs xiaoHong)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中缀表达式还支持函数调用方式调用, 只需要:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xiaoMing.vs(xiaoHong)</span><br></pre></td></tr></table></figure><p>经常会看到 我们在遍历 map 的时候会这样： </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>((index, value) <span class="keyword">in</span> map) &#123;</span><br><span class="line">    println(<span class="string">&quot;index = <span class="subst">$&#123;index&#125;</span>, value = <span class="subst">$&#123;value&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不对， 这是解构，不是中缀， 虽然他有 <code>toPair</code> 函数</p></blockquote><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><h3 id="可变参数-vararg"><a href="#可变参数-vararg" class="headerlink" title="可变参数: vararg"></a>可变参数: <code>vararg</code></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">arrOf</span><span class="params">(<span class="keyword">vararg</span> arr: <span class="type">Int</span>)</span></span>: Array&lt;<span class="built_in">Int</span>&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> arr.toTypedArray()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> arr = arrOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">arr.forEach &#123; println(it) &#125;</span><br></pre></td></tr></table></figure><p>我们可以使用 <code>* 星号</code>来传入外部变量作为可变参数的变量</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> arr = arrOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">arrOf(*arr.toIntArray())</span><br></pre></td></tr></table></figure><h2 id="字符串和正则表达式的处理"><a href="#字符串和正则表达式的处理" class="headerlink" title="字符串和正则表达式的处理"></a>字符串和正则表达式的处理</h2><h3 id="三重引号字符串-推荐使用-trimMargin-带边界的"><a href="#三重引号字符串-推荐使用-trimMargin-带边界的" class="headerlink" title="三重引号字符串: 推荐使用 trimMargin 带边界的"></a>三重引号字符串: 推荐使用 <code>trimMargin</code> 带边界的</h3><p><code>&quot;&quot;&quot;zhazha&quot;&quot;&quot;</code> 这就是三重引用字符串</p><ol><li>三重引号中的字符串不需要进行字符串转义</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parsePath</span><span class="params">(path: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">   <span class="comment">// 文件目录</span></span><br><span class="line">   <span class="keyword">val</span> directory = path.substringBeforeLast(<span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span>)</span><br><span class="line">   <span class="comment">// 文件名+扩展名</span></span><br><span class="line">   <span class="keyword">val</span> fullName = path.substringAfterLast(<span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span>)</span><br><span class="line">   <span class="comment">// 获取文件名</span></span><br><span class="line">   <span class="keyword">val</span> fileName = fullName.substringBefore(<span class="string">&quot;&quot;&quot;.&quot;&quot;&quot;</span>)</span><br><span class="line">   <span class="comment">// 获取扩展名</span></span><br><span class="line">   <span class="keyword">val</span> extension = fullName.substringAfter(<span class="string">&quot;&quot;&quot;.&quot;&quot;&quot;</span>)</span><br><span class="line">   println(<span class="string">&quot;文件目录: <span class="variable">$directory</span> \nfullName: <span class="variable">$fullName</span> \n文件名: <span class="variable">$fileName</span> \n扩展名: <span class="variable">$extension</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parsePathRegex</span><span class="params">(path: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> regex = <span class="string">&quot;&quot;&quot;(.+)\(.+).(.+)&quot;&quot;&quot;</span>.toRegex()</span><br><span class="line">   <span class="keyword">val</span> matchResult = regex.matchEntire(path)</span><br><span class="line">   <span class="keyword">if</span> (<span class="literal">null</span> != matchResult) &#123;</span><br><span class="line">      <span class="keyword">val</span> (directory, fileName, extension) = matchResult.destructured</span><br><span class="line">      println(matchResult.destructured.toList().toString())</span><br><span class="line">      println(<span class="string">&quot;文件目录: <span class="variable">$directory</span> \nfileName: <span class="variable">$fileName</span>\n扩展名: <span class="variable">$extension</span>&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> path = <span class="string">&quot;&quot;&quot;D:\programs\codes\java\autoShutdown\src\test\java\com\zhazha\test\FooBar.java&quot;&quot;&quot;</span></span><br><span class="line">   parsePathRegex(path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>三重字符串的第二个功能</li></ol><p>被包围的字符串, 保留换行符, 各种奇奇怪怪的符号</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">         ddddddddd</span></span><br><span class="line"><span class="string">         ggg</span></span><br><span class="line"><span class="string">         </span></span><br><span class="line"><span class="string">      hhhhhhhhh</span></span><br><span class="line"><span class="string">            wwwwwwwww</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">println(str)</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ddddddddd</span><br><span class="line">   ggg</span><br><span class="line">   </span><br><span class="line">hhhhhhhhh</span><br><span class="line">      wwwwwwwww</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>去除每一行前面共同的缩进</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;&quot;&quot;            ddddddddd</span></span><br><span class="line"><span class="string">         ggg\n</span></span><br><span class="line"><span class="string">         </span></span><br><span class="line"><span class="string">      hhhhhhhhh</span></span><br><span class="line"><span class="string">            wwwwwwwww&quot;&quot;&quot;</span>.trimIndent()</span><br><span class="line"></span><br><span class="line">println(str)</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ddddddddd</span><br><span class="line">   ggg\n</span><br><span class="line">   </span><br><span class="line">hhhhhhhhh</span><br><span class="line">      wwwwwwwww</span><br></pre></td></tr></table></figure><p>去除边界前缀之前的所有字符</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;&quot;&quot;            .ddddddddd</span></span><br><span class="line"><span class="string">         .ggg\n</span></span><br><span class="line"><span class="string">         .</span></span><br><span class="line"><span class="string">     .hhhhhhhhh</span></span><br><span class="line"><span class="string">            .wwwwwwwww&quot;&quot;&quot;</span>.trimMargin(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">println(str)</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ddddddddd</span><br><span class="line">ggg\n</span><br><span class="line"></span><br><span class="line">hhhhhhhhh</span><br><span class="line">wwwwwwwww</span><br></pre></td></tr></table></figure><p><code>trimMargin</code>函数默认使用<code>|</code>做边界前缀, 上面代码使用的<code>.</code>做边界前缀</p><h2 id="局部函数和扩展"><a href="#局部函数和扩展" class="headerlink" title="局部函数和扩展"></a>局部函数和扩展</h2><h3 id="什么是局部函数"><a href="#什么是局部函数" class="headerlink" title="什么是局部函数?"></a>什么是局部函数?</h3><p>在函数中写上函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">saveUser</span><span class="params">(user: <span class="type">User</span>)</span></span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">validate</span><span class="params">(user: <span class="type">User</span>, value: <span class="type">String</span>, fieldName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value.isEmpty()) &#123;</span><br><span class="line">         <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;can&#x27;t save user <span class="subst">$&#123;user.id&#125;</span>: empty <span class="variable">$fieldName</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   validate(user, user.name, <span class="string">&quot;name&quot;</span>)</span><br><span class="line">   validate(user, user.address, <span class="string">&quot;address&quot;</span>)</span><br><span class="line">   println(user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译成 java</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static <span class="keyword">final</span> void saveUser(User user) &#123;</span><br><span class="line">    Intrinsics.checkNotNullParameter((Object)user, (String)<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    LocalFuncDemo01Kt.saveUser$validate(user, user.getName(), <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    LocalFuncDemo01Kt.saveUser$validate(user, user.getAddress(), <span class="string">&quot;address&quot;</span>);</span><br><span class="line">    boolean bl = <span class="literal">false</span>;</span><br><span class="line">    System.<span class="keyword">out</span>.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> static <span class="keyword">final</span> void saveUser$validate(User user, String value, String fieldName) &#123;</span><br><span class="line">    CharSequence charSequence = value;</span><br><span class="line">    boolean bl = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (charSequence.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> new IllegalArgumentException(<span class="string">&quot;can&#x27;t save user &quot;</span> + user.getId() + <span class="string">&quot;: empty &quot;</span> + fieldName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>没找到应用场景, 看起来也挺麻烦的, 目前对我来说没啥用</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> 命名参数 </tag>
            
            <tag> 具名参数 </tag>
            
            <tag> 函数参数默认值 </tag>
            
            <tag> 反引号函数 </tag>
            
            <tag> 顶层函数 </tag>
            
            <tag> 顶层属性 </tag>
            
            <tag> 常量 </tag>
            
            <tag> 扩展函数 </tag>
            
            <tag> 扩展属性 </tag>
            
            <tag> 扩展函数没有多态性 </tag>
            
            <tag> 匿名扩展函数 </tag>
            
            <tag> 可空接收者 </tag>
            
            <tag> 成员函数优先级大于扩展函数 </tag>
            
            <tag> 中缀表达式 </tag>
            
            <tag> 可变参数 </tag>
            
            <tag> vararg </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> 字符串正则表达式 </tag>
            
            <tag> 局部函数 </tag>
            
            <tag> 局部函数扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、kotlin基础语法学习</title>
      <link href="/2022/12/03/07kotlin/%E4%B8%80%E3%80%81kotlin%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/12/03/07kotlin/%E4%B8%80%E3%80%81kotlin%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="kotlin基础语法学习"><a href="#kotlin基础语法学习" class="headerlink" title="kotlin基础语法学习"></a>kotlin基础语法学习</h1><blockquote><p>简单的入个门, 复杂的操作放在下一章节</p></blockquote><h2 id="kotlin-包"><a href="#kotlin-包" class="headerlink" title="kotlin 包"></a>kotlin 包</h2><ul><li>和java包不同, java类必须放在对应包名的目录下, 而kotlin没有强制要求</li><li>kotlin的类名可以和文件名不同</li><li>kotlin甚至可以不用写类</li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fc62ed05b4a405a819c10634de627aa~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> base</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">funcMax</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span>  <span class="keyword">if</span>(a &gt; b) a <span class="keyword">else</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">   <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">   println(funcMax(a, b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FuncDemo01Kt</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">funcMax</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="meta">@NotNull</span> String[] args)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">var3</span> <span class="operator">=</span> funcMax(a, b);</span><br><span class="line">      System.out.println(var3);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin编译器将文件<code>FuncDemo01</code>加上 <code>Kt</code> 做成了 java 的类名, 而<code>max</code> 是<code>FuncDemo01Kt</code>类的静态方法, 在 kotlin 中被称之为 <code>顶层函数</code></p><p>java调用kotlin<code>顶层函数</code>只需要如此:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FuncDemo01Kt.funcMax(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>下面是java调用kotlin顶层函数的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> base.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base.FuncDemo01Kt; <span class="comment">// ★</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaTestDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">        System.out.println(FuncDemo01Kt.funcMax(a, b)); <span class="comment">// ★</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数声明和定义"><a href="#函数声明和定义" class="headerlink" title="函数声明和定义"></a>函数声明和定义</h2><p>kotlin使用 fun 关键字定义函数: </p><p>普通函数体形式:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>:<span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fun关键字 + 空格 + 函数名字(参数名: 参数类型, ...): 函数返回值 &#123;函数体&#125;</code></p><p>kotlin中还有表达式函数体形式, 如下:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</span><br></pre></td></tr></table></figure><p><code>fun关键字 + 空格 + 函数名字(参数名: 参数类型, ...) 表达式函数体( = a + b)</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// kotlin函数无返回值时使用 `Unit` 关键字, 注意这里和`Uint`做区分, 表示`unsigned int`无符号</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>:<span class="built_in">Unit</span> &#123;</span><br><span class="line">    <span class="comment">// 字符串模板操作关键字 `$`</span></span><br><span class="line">    println(<span class="string">&quot;max = <span class="subst">$&#123;if(a &gt; b) a else b&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="什么是表达式"><a href="#什么是表达式" class="headerlink" title="什么是表达式?"></a>什么是表达式?</h3><p><strong><code>表达式是有返回值的语句</code></strong></p><p><code>1</code>, <code>-1</code>, <code>1 + 1</code>, <code>listOf(1, 2, 3)</code> 这些都是表达式</p><p>还有</p><p><code>&#123;x:Int -&gt; x + 1&#125;</code>  <code>fun(x: Int) &#123; println(x) &#125;</code> <code>if(x &gt; 1) x else 1</code> 这三个也是表达式</p><h4 id="表达式比语句更加安全"><a href="#表达式比语句更加安全" class="headerlink" title="表达式比语句更加安全"></a>表达式比语句更加安全</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">isStatement</span><span class="params">(Boolean flag)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        a = <span class="string">&quot;dive into kotlin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(a.toUpperCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里存在一个问题. 变量 <code>a</code> 为 <code>null</code>, 如果不经过 <code>if</code> 语句, 则会在下面变成 <code>null.toUpperCase()</code> 直接报错</p><p>如果我们使用 kotlin 的方式重新实现这种方式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isStatement</span><span class="params">(flag: <span class="type">Boolean</span>)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">   <span class="comment">// 我们会主动接收 if 的返回值</span></span><br><span class="line">   <span class="keyword">val</span> a = <span class="keyword">if</span> (flag) <span class="string">&quot;dive into kotlin&quot;</span> <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br><span class="line">   println(a.uppercase())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们不写上 <code>else</code> , idea会报错</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/868486cfe76641608aed938012e3201e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>表达式的目的是为了创建新值</p></blockquote><h3 id="什么是表达式函数体"><a href="#什么是表达式函数体" class="headerlink" title="什么是表达式函数体?"></a>什么是表达式函数体?</h3><p>如果一个函数的整个函数体都是<code>一个表达式</code>时, 我们就可以称之为<code>表达式函数体</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><blockquote><p>表达式函数体中, 可以省略 <code>return</code> 关键字, 加上 等号 和表达式 <code>if (a &gt; b) a else b</code>, 这意味着该函数返回了 <code>if 表达式</code> 的 结果</p></blockquote><h3 id="可变函数参数"><a href="#可变函数参数" class="headerlink" title="可变函数参数"></a>可变函数参数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printArray</span><span class="params">(<span class="keyword">vararg</span> arr: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(v <span class="keyword">in</span> arr) &#123;</span><br><span class="line">        println(v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意这种用法:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> list = listOf&lt;<span class="built_in">Int</span>&gt;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">   printArray(*list.toIntArray())</span><br><span class="line">   <span class="comment">//         👆</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kotlin函数值对象参数不可变"><a href="#kotlin函数值对象参数不可变" class="headerlink" title="kotlin函数值对象参数不可变"></a>kotlin函数值对象参数不可变</h3><p>kotlin值对象参数默认为 val 修饰(表面上这么认为就行)</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5380053d3f554011b277813c9a715aca~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><code>Val cannot be reassigned</code></p><p>如果你按住 <code>ctrl</code> 将鼠标放在参数 <code>a</code> 上面将会看到 <code>value-parameter a: Int</code> 字样</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5dacd54d1ab40fc8260f029f6aa77ec~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>放在变量 <code>b</code> 处, 将会看到 <code>val b: Int</code></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/598c9a72f3ea4f3e8fd3ca04cfa53e7d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这是kotlin值参数类型</p><p>kotlin所有函数的参数都是<code>值参数</code>, 都是不可修改的</p><p>但其不影响<code>值参数</code>当作<code>引用地址</code>修改在堆中对象的情况</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4976cb46e4774bd991252ddb158fb61b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>了解值参数这一概念没啥用, 所以当作 <code>val 变量</code>就行了</p></blockquote><p>如果将值再次赋值给 <code>val 变量</code>: </p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e75b3ddb6ec14d77a3ee45f3e68a754d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>在java中将体现为:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8777dd9461d840fdb893e2d8bec62d93~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="lambda和匿名函数"><a href="#lambda和匿名函数" class="headerlink" title="lambda和匿名函数"></a>lambda和匿名函数</h3><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>具名函数如下:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名函数需要将函数名去除</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fun</span> <span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种形式需要变量接收, 否则将报错</p><p>所以添加一个变量来代表匿名函数: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的 f 就是函数类型变量</span></span><br><span class="line"><span class="keyword">val</span> f1 = <span class="function"><span class="title">fun</span> <span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后使用 f 变量调用匿名函数</span></span><br><span class="line"><span class="keyword">val</span> sum = f1(<span class="number">190</span>, <span class="number">29</span>)</span><br></pre></td></tr></table></figure><blockquote><p>前面的 <code>fun</code> 不能省略, 否则会出错.</p></blockquote><p>可以使用 lambda 表达式代替匿名函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> f2 = &#123;x: <span class="built_in">Int</span>, y: <span class="built_in">Int</span> -&gt; x + y&#125;</span><br></pre></td></tr></table></figure><p>还可以这样用:</p><blockquote><p>比较超前, 不过学过 java 的应该看得懂点</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">running</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>, funType: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> funcType(x, y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">running(<span class="number">10</span>, <span class="number">299</span>, <span class="function"><span class="title">fun</span> <span class="params">(x, y)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> x + y</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambda表达式</span></span><br><span class="line">running(<span class="number">10</span>, <span class="number">299</span>, &#123; x, y -&gt; x + y &#125;)</span><br></pre></td></tr></table></figure><p>如果在 lambda 中写上多段代码可以这样:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">running(<span class="number">10</span>, <span class="number">299</span>) &#123; x, y -&gt;</span><br><span class="line">   <span class="keyword">val</span> ret = x + y</span><br><span class="line">   println(<span class="string">&quot;ret = <span class="variable">$ret</span>&quot;</span>)</span><br><span class="line">   ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>匿名函数是对象, 通过函数类型 new 出来的对象, 而函数类型仅仅是个类型, 类似于 <code>Int Double Float String Byte Long</code>等等</strong></p></blockquote><h4 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h4><p>在kotlin中凡是同时被 <code>&#123;&#125;</code> 包裹的使用 <code>-&gt;</code> 分割参数和函数体的表达式都可以称之为 <code>lambda 表达式</code>, 例如: <code>&#123; x, y -&gt; x + y &#125;</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lambda 表达式</span></span><br><span class="line"><span class="keyword">val</span> x1 = &#123; x: <span class="built_in">Int</span>, y: <span class="built_in">Int</span> -&gt; <span class="keyword">if</span> (x &gt; y) x <span class="keyword">else</span> y &#125;</span><br><span class="line"><span class="keyword">val</span> x2: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = &#123; x, y -&gt; <span class="keyword">if</span> (x &gt; y) x <span class="keyword">else</span> y &#125;</span><br><span class="line"><span class="comment">// 匿名函数方式</span></span><br><span class="line"><span class="keyword">val</span> y1 = <span class="function"><span class="title">fun</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (x &gt; y) x <span class="keyword">else</span> y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> y2: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> = <span class="function"><span class="title">fun</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (x &gt; y) x <span class="keyword">else</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>(Int, Int) -&gt; Int</code> 是函数类型, <code>他不是对象, 他是一个类型</code></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd45f216ef06492e9ce6904ffd5d9491~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p><code>var f = (Int, Int) -&gt; Int</code> 错误, 类型无法赋值</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// kotlin 的初始化, 使用 lambda表达式初始化 f 类型</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> f: <span class="params">(<span class="built_in">Int</span>, <span class="built_in">Int</span>)</span></span> -&gt; <span class="built_in">Int</span> = &#123; x, y -&gt; x + y &#125;</span><br></pre></td></tr></table></figure><blockquote><p>在学习的过程中, 我发现 <code>fun sum1(x: Int, y: Int) = &#123;x, y -&gt; x + y&#125;</code>会报错</p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d617d8f92dc4c3fb40a76ad1367fe81~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>报错是 “<strong>无法推断此参数的类型。 请明确指定。</strong>“, 初学者不熟悉 kotlin 语法, 在这里会看的比较懵逼</p></blockquote><blockquote><p>其本质问题是: <code>&#123;x, y -&gt; x + y &#125;</code> 是一个对象, 而函数返回值却是 <code>Int</code>, 返回值类型不匹配</p></blockquote><p>代码最终返回值类型是 <code>(???, ???) -&gt; Int</code>, <code>???</code> 表示不清楚是什么类型? <code>&#123;x, y -&gt; x + y &#125;</code> 根本就没给出 x 和 y 的类型是什么…</p><p>如果不理解, 可以把 <code>=</code> 修改成  <code>return</code> </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里报错, 返回值类型是: (???, ???) -&gt; Int</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum0</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;x, y -&gt; x + y&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>idea智能提示应该修改成:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在改成这样: (Int, Int) -&gt; Int, 这样就不会报错了</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum1</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span>: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;x, y -&gt; x + y&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是否更加容易理解了呢?</p><p>我们还可以像下面这种方式给 lambda 对象的参数添加类型:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span> = &#123;a: <span class="built_in">Int</span>, b: <span class="built_in">Int</span> -&gt; </span><br><span class="line">   println(<span class="string">&quot;a = <span class="variable">$a</span>, b = <span class="variable">$b</span>, x = <span class="variable">$x</span>, y = <span class="variable">$y</span>&quot;</span>) <span class="comment">// a = 10, b = 20, x = 1, y = 2</span></span><br><span class="line">   x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后, 我们可以这样调用:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><blockquote><p>解析: <code>sum(1, 2)</code> 返回一个 lambda 对象, 类型是<code>(Int, Int) -&gt; Int</code>, 还可以调用lambda函数 传递参数 10 和 20: <code>lambda函数(10, 20)</code></p></blockquote><h4 id="函数内联"><a href="#函数内联" class="headerlink" title="函数内联"></a>函数内联</h4><ul><li>什么是函数内联?</li></ul><p>我们学习过C语言的人应该都知道 宏定义 吧?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX xxx</span></span><br></pre></td></tr></table></figure><p>他的本质功能是代码替换, 而 kotlin 函数内联就类似于这样</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">running</span><span class="params">(x: <span class="type">Any</span>, funType: (<span class="type">Any</span>) -&gt; <span class="type">String</span>)</span></span> = funType(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> number: <span class="built_in">Double</span> = <span class="number">1.13121356456</span></span><br><span class="line">    running(number) &#123;</span><br><span class="line">        <span class="keyword">when</span> (it) &#123;</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Byte</span> -&gt; <span class="built_in">Byte</span>::<span class="keyword">class</span>.java.name</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Char</span> -&gt; <span class="built_in">Char</span>::<span class="keyword">class</span>.java.name</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Boolean</span> -&gt; <span class="built_in">Boolean</span>::<span class="keyword">class</span>.java.name</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; <span class="built_in">Int</span>::<span class="keyword">class</span>.java.name</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Long</span> -&gt; <span class="built_in">Long</span>::<span class="keyword">class</span>.java.name</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Float</span> -&gt; <span class="built_in">Float</span>::<span class="keyword">class</span>.java.name</span><br><span class="line">            <span class="keyword">is</span> <span class="built_in">Double</span> -&gt; <span class="built_in">Double</span>::<span class="keyword">class</span>.java.name</span><br><span class="line">            <span class="keyword">is</span> String -&gt; String::<span class="keyword">class</span>.java.name</span><br><span class="line">            <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> Exception(<span class="string">&quot;Unknown Type&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不使用内联的话, 字节码翻译出的java代码是这样: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">running</span><span class="params">(Object x, Function1 funType)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> (String)funType.invoke(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="meta">@NotNull</span> String[] args)</span> &#123;</span><br><span class="line">   <span class="type">double</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1.13121356456D</span>;</span><br><span class="line">   running(number, (Function1)<span class="literal">null</span>.INSTANCE); <span class="comment">// 创建了一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用内联的话, 代码是这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">running</span><span class="params">(Object x, Function1 funType)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> (String)funType.invoke(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="meta">@NotNull</span> String[] args)</span> &#123;</span><br><span class="line">   <span class="type">double</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1.13121356456D</span>;</span><br><span class="line">   <span class="type">Object</span> <span class="variable">x$iv</span> <span class="operator">=</span> number; <span class="comment">// 这是 running 函数的参数</span></span><br><span class="line">   <span class="keyword">if</span> (x$iv <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">      <span class="keyword">return</span> Integer.TYPE.getName();</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x$iv <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">      <span class="keyword">return</span> String.class.getName();</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x$iv <span class="keyword">instanceof</span> Long) &#123;</span><br><span class="line">      <span class="keyword">return</span> Long.TYPE.getName();</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x$iv <span class="keyword">instanceof</span> Float) &#123;</span><br><span class="line">      <span class="keyword">return</span> Float.TYPE.getName();</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Double.TYPE.getName();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>为什么需要函数内联?</li></ul><p>① 在未使用函数内联的情况下, kotlin的匿名函数(lambda)通常和java一样, 需要创建一个对象, 每遇到匿名函数就需要创建一个新的对象, 导致性能损耗, 但如果使用函数内联, 编译器会在任何需要匿名函数的地方, 直接拷贝函数体的源码过去, 不需要创建对象了</p><p>② 泛型的实化</p><blockquote><p>lambda的递归函数无法内联, 会导致编译器无限复制粘贴函数体</p></blockquote><h3 id="函数引用"><a href="#函数引用" class="headerlink" title="函数引用"></a>函数引用</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">running</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>, myFunction: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    println(<span class="string">&quot;x: <span class="variable">$x</span>, y: <span class="variable">$y</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> myFunction.invoke(x, y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">max</span><span class="params">(x: <span class="type">Int</span>, y: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = <span class="keyword">if</span> (x &gt; y) x <span class="keyword">else</span> y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> x = <span class="number">10</span></span><br><span class="line">    <span class="keyword">val</span> y = <span class="number">20</span></span><br><span class="line">    println(running(x, y, ::max)) <span class="comment">// ★</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数类型作为返回值"><a href="#函数类型作为返回值" class="headerlink" title="函数类型作为返回值"></a>函数类型作为返回值</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">running</span><span class="params">()</span></span>: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; String &#123;</span><br><span class="line">    <span class="keyword">val</span> prefix: String = <span class="string">&quot;计算: &quot;</span></span><br><span class="line">    <span class="keyword">val</span> postfix: String = <span class="string">&quot;计算结果为: &quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;x:<span class="built_in">Int</span>, y: <span class="built_in">Int</span> -&gt;</span><br><span class="line">        <span class="string">&quot;<span class="subst">$&#123;prefix&#125;</span><span class="subst">$&#123;x&#125;</span> + <span class="variable">$y</span> <span class="subst">$&#123;postfix&#125;</span><span class="subst">$&#123;x + y&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> function = running()</span><br><span class="line">    println(function(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul><li>什么是闭包?</li></ul><p>MDN对闭包的说明很到位:</p><p><code>A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).</code></p><p><strong>闭包是一个函数与引用该函数周围作用域变量绑定在一起的组合</strong></p><p><code>In other words, a closure gives you access to an outer function&#39;s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.</code></p><p><strong>换句话说, 闭包给了你从一个内部函数访问外部函数作用域的能力, 在 JavaScript 中, 每次创建一个函数都会在函数创建时创建闭包</strong></p><blockquote><p>除了 JavaScript 那段, 闭包概念应该算通用的</p></blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#emulating_private_methods_with_closures">Closures - JavaScript | MDN (mozilla.org)</a></p><ul><li>闭包的作用</li></ul><p>闭包给予了作用域保护, 防止作用域出现相同函数名冲突. 像c++提出的namespace一样, kotlin存在顶层函数和属性, 如果不做作用域保护, 随着项目变大, 将有一堆函数重名</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">running</span><span class="params">()</span></span>: (<span class="built_in">Int</span>, <span class="built_in">Int</span>) -&gt; String &#123;</span><br><span class="line">    <span class="keyword">val</span> prefix: String = <span class="string">&quot;计算: &quot;</span></span><br><span class="line">    <span class="keyword">val</span> postfix: String = <span class="string">&quot;计算结果为: &quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;x:<span class="built_in">Int</span>, y: <span class="built_in">Int</span> -&gt;</span><br><span class="line">        <span class="string">&quot;<span class="subst">$&#123;prefix&#125;</span><span class="subst">$&#123;x&#125;</span> + <span class="variable">$y</span> <span class="subst">$&#123;postfix&#125;</span><span class="subst">$&#123;x + y&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><code>val/var 变量名: 变量类型</code></p><blockquote><p><code>val</code> 是 <code>java</code> 中的 <code>final</code> 变量</p><p>这句话错了, 也没错. kotlin 的 <code>val</code> 强调只读性，也就是只有 <code>getter</code>构造器而没有 <code>setter</code> 构造器, 不强调是不是 <code>final</code> 因为 <code>final</code> 是 kotlin 自带的, 任何类、变量和函数不经强调默认都是 <code>final</code></p></blockquote><p>kotlin编译器只生成 <code>get</code> 函数</p><p><code>var</code> 则是可读写的属性, kotlin编译器会生成 <code>get/set</code> 函数</p><p>在<code>val v: Int</code>变量 <code>v</code> 声明时, 如果没有进行初始化, 则变量 <code>v</code> 需要在后续中初始化一次</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果是声明时, 需要确定类型</span></span><br><span class="line"><span class="keyword">val</span> v: <span class="built_in">Int</span></span><br><span class="line">v = <span class="number">10</span></span><br></pre></td></tr></table></figure><p><code>var</code> 定义的变量, 一旦初始化了类型, 下次赋值时该变量的类型不变</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v = <span class="number">10</span></span><br><span class="line">v = <span class="string">&quot;hello&quot;</span> <span class="comment">// 错误, v的类型已经是 Int 了, 不可能再变成 String</span></span><br></pre></td></tr></table></figure><h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="== 和 ===的区别"></a><code>==</code> 和 <code>===</code>的区别</h2><p>在java 中 <code>==</code> 表示引用比较, <code>equals</code> 比较的是对象内容</p><p>在 kotlin 中 <code>==</code> 比较的是对象的内容, <code>===</code> 比较的是引用</p><blockquote><p><code>===</code> 是不可以进行操作符重载的</p></blockquote><h2 id="字符串格式化模板"><a href="#字符串格式化模板" class="headerlink" title="字符串格式化模板"></a>字符串格式化模板</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> a: <span class="built_in">Int</span> = <span class="number">99</span>;</span><br><span class="line">   <span class="keyword">var</span> b = <span class="number">11</span>; <span class="comment">// 类型推导 为 Int</span></span><br><span class="line">   println(<span class="string">&quot;a = <span class="variable">$a</span>, b = <span class="variable">$b</span>, a + b = <span class="subst">$&#123;a + b&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码是kotlin字符串模板的使用方式</p><ol><li><code>$变量</code> 直接输出变量的值</li><li><code>$&#123;表达式&#125;</code> 在花括号内可以写上表达式</li></ol><p>上面那段字符串操作模板被反编译成java代码时就会变成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StringDemo01Kt</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="meta">@NotNull</span> String[] args)</span> &#123;</span><br><span class="line">      Intrinsics.checkNotNullParameter(args, <span class="string">&quot;args&quot;</span>);</span><br><span class="line">      <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="string">&quot;a = &quot;</span> + a + <span class="string">&quot;, b = &quot;</span> + b + <span class="string">&quot;, a + b = &quot;</span> + (a + b);</span><br><span class="line">      System.out.println(var3);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看亮点:<br><code>String var3 = &quot;a = &quot; + a + &quot;, b = &quot; + b + &quot;, a + b = &quot; + (a + b);</code></p><h2 id="类和属性"><a href="#类和属性" class="headerlink" title="类和属性"></a>类和属性</h2><blockquote><p>这个将会在后续章节中着重讲解</p></blockquote><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>在java中类被写成这样的形式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 idea 的java 转 kotlin 代码的转换器转换成 kotlin 源码后: </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="keyword">var</span> name: String, <span class="keyword">var</span> age: <span class="built_in">Int</span>)</span><br></pre></td></tr></table></figure><p>看起来舒服多了</p><blockquote><p>在<code>java</code>转化成<code>kotlin</code>后, <code>public</code> 被隐藏, 在<code>kotlin</code>中类是默认<code>public</code>, 而在<code>java</code>中默认是 <code>default</code> (<code>public default protected private</code>)</p></blockquote><blockquote><p>ps: 在作为类的成员字段, 也是属性所以需要显示的使用 <code>val/var</code> 来确定属性的 <code>set/get</code> 方法<code>class Person(var name: String, var age: Int)</code>而函数参数不需要 val&#x2F;var <code>fun sum(a: Int, b: Int)</code>可能是因为它不用 <code>get/set</code> 方法. 不过可变参数需要主动声明 <code>vararg</code>, 例如: <code>ListOf&lt;String&gt;(vararg arr: String)</code></p></blockquote><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><table><thead><tr><th>属性和字段的区别</th></tr></thead><tbody><tr><td>在java中<code>private String name</code> 是<strong>成员字段</strong>需要另外加上 <code>get/set</code> 方法成为属性</td></tr><tr><td>在kotlin <code>val/var</code> 声明变量时, 如果使用 <code>val</code> 定义变量, 将被标记成只读属性, 仅生成 <code>get</code> 方法, 不生成<code>set</code>方法, 如果使用的 <code>var</code> 定义变量, 则生成 <code>set/get</code> 方法</td></tr></tbody></table><ul><li>自定义属性访问器</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="keyword">val</span> height: <span class="built_in">Int</span>, <span class="keyword">val</span> width: <span class="built_in">Int</span>) &#123;</span><br><span class="line">   <span class="keyword">val</span> isSquare: <span class="built_in">Boolean</span></span><br><span class="line"><span class="comment">//    get() &#123;</span></span><br><span class="line"><span class="comment">//       return height == width</span></span><br><span class="line"><span class="comment">//    &#125; // 普通函数体形式</span></span><br><span class="line"><span class="comment">// get() &#123;height == width&#125; // lamdba形式</span></span><br><span class="line">   <span class="keyword">get</span>() = height == width <span class="comment">// 表达式函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当遇到 <code>kotlin</code> 属性 <code>var isDelete</code> 时, <code>kotlin</code>会生成 <code>isDelete</code> 方法和 <code>setDelete</code> 方法</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ad13392ed6a432ca845dd4059291a27~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="kotlin中的import关键字"><a href="#kotlin中的import关键字" class="headerlink" title="kotlin中的import关键字"></a>kotlin中的<code>import</code>关键字</h2><p>import关键字在kotlin中可以导入类和顶层函数(在java中叫静态函数)</p><p>在 kotlin 中写一个扩展函数(就是把this当作参数传递进去的函数)</p><blockquote><p>注意 this 当作参数的话, 将会被认为是 value-parameter 类型</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">lasts</span><span class="params">()</span></span>: <span class="built_in">Char</span> = <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>而在 kotlin中使用 扩展函数 的方法, <code>val ch = &quot;kotlin&quot;.lasts()</code></p><p>在 java 中写成这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 核心代码在这里, 把 调用 lasts 对象当作参数传递进去了, 这步骤由 kotlin 虚拟机完成</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Char <span class="title function_">lasts</span><span class="params">(String <span class="built_in">this</span> <span class="comment">/* 这个 this就是调用这个方法的对象, 就是前面例子的 &quot;kotlin&quot; */</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// &quot;kotlin&quot;.charAt(&quot;kotlin&quot;.length() - 1) 类似于这样</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.charAt(<span class="built_in">this</span>.length() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 先提出一些后面的知识点, 之后还能回头来看看</p></blockquote><p>回到正题, 我们在另一个包里调用 <code>lasts</code> 顶层函数(静态函数), 就会在kotlin上面见到</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base.func.lastChar</span><br></pre></td></tr></table></figure><p>前面的 <code>base.func</code> 是包名, 而 <code>lastChar</code> 是方法</p><p>如果要在另一个包的java中调用, 就变成了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base.func.ExtensionFuncKt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtensionDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(ExtensionFuncKt.lastChar(<span class="string">&quot;zhazha&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title class_">Color</span>(<span class="keyword">val</span> r: <span class="built_in">Int</span>, <span class="keyword">val</span> g: <span class="built_in">Int</span>, <span class="keyword">val</span> b: <span class="built_in">Int</span>) &#123;</span><br><span class="line">   RED(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), ORANGE(<span class="number">255</span>, <span class="number">165</span>, <span class="number">0</span>), YELLOW(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>), GREEN(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), BLUE(</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">255</span></span><br><span class="line">   ),</span><br><span class="line">   INDIGO(<span class="number">75</span>, <span class="number">0</span>, <span class="number">130</span>), VIOLET(<span class="number">238</span>, <span class="number">130</span>, <span class="number">238</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">rgb</span><span class="params">()</span></span> = (r * <span class="number">256</span> + g) * <span class="number">256</span> + b</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">getWarmth</span><span class="params">()</span></span> = <span class="keyword">when</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      RED, ORANGE, YELLOW -&gt; <span class="string">&quot;warm&quot;</span></span><br><span class="line">      GREEN -&gt; <span class="string">&quot;neutral&quot;</span></span><br><span class="line">      BLUE, INDIGO, VIOLET -&gt; <span class="string">&quot;cold&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意, 如果枚举类中存在额外的方法或者属性定义, 需要使用 <code>;</code> 进行隔离</p><blockquote><p>早期的枚举没有逗号和分号, 但定义枚举值比较麻烦, 需要这样:</p><p><code>RED: Color(255, 0, 0)</code> <code>ORANGE: Color(255, 165, 0)</code>这样相当的麻烦, 还有很多多余的调用, 比较理想的方式就像我们上面那种<code>RED(255, 0, 0)</code>然而带来了新的问题, 无法区分枚举值和类方法, 几经周转(加注解或者添加新关键字等等)他们没办法只能使用 <code>;</code> 来区分</p></blockquote><p>借助枚举类学习 <code>when</code> 表达式的使用方法</p><h2 id="when-表达式"><a href="#when-表达式" class="headerlink" title="when 表达式"></a>when 表达式</h2><p>(1) 使用函数表达式体的形式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getWarmth</span><span class="params">()</span></span> = <span class="keyword">when</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">   RED, ORANGE, YELLOW -&gt; <span class="string">&quot;warm&quot;</span></span><br><span class="line">   GREEN -&gt; <span class="string">&quot;neutral&quot;</span></span><br><span class="line">   BLUE, INDIGO, VIOLET -&gt; <span class="string">&quot;cold&quot;</span></span><br><span class="line">   <span class="keyword">else</span> -&gt; <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 函数体形式</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getWarmth1</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">   <span class="keyword">when</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      RED, ORANGE, YELLOW -&gt; <span class="keyword">return</span> <span class="string">&quot;warm&quot;</span></span><br><span class="line">      GREEN -&gt; <span class="keyword">return</span> <span class="string">&quot;neutral&quot;</span></span><br><span class="line">      BLUE, INDIGO, VIOLET -&gt; <span class="keyword">return</span> <span class="string">&quot;cold&quot;</span></span><br><span class="line">      <span class="keyword">else</span> -&gt; <span class="string">&quot;&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>when</code> 不需要 <code>break</code> 他会默认 <code>break</code>, <code>when</code> 的最后还有个 <code>else</code> 相当于 <code>switch</code> 的 <code>default</code> </p><p><code>when</code> 的每个分支都有返回值, 最终 <code>when</code> 表达式的返回类型就是所有分支相同的返回类型, 或者公共的父类型.</p><p><code>when</code> 的参数可以忽略</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">when</span> &#123;</span><br><span class="line">    sunny -&gt; library()</span><br><span class="line">    <span class="keyword">else</span> -&gt; study()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>左边的 <code>sunny</code> 必须是 <code>Boolean</code> 类型</p><p>所以只要满足左边表达式的返回值类型是 <code>Boolean</code> 都可以放到 <code>when</code> 中</p><h2 id="智能类型转换和is表达式类型隐式转换"><a href="#智能类型转换和is表达式类型隐式转换" class="headerlink" title="智能类型转换和is表达式类型隐式转换"></a>智能类型转换和is表达式类型隐式转换</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Expr</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Num</span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>): Expr</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sum</span>(<span class="keyword">val</span> left: Expr, <span class="keyword">val</span> right: Expr): Expr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">eval</span><span class="params">(e: <span class="type">Expr</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (e <span class="keyword">is</span> Num) &#123;</span><br><span class="line">      <span class="keyword">return</span> e.value</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">is</span> Sum) &#123;</span><br><span class="line">      <span class="keyword">return</span> eval(e.left) + eval(e.right)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;Unknown expression&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   println(eval(Sum(Num(<span class="number">1</span>), Sum(Num(<span class="number">2</span>), Num(<span class="number">3</span>)))))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>if (e is Num)</code> if判断返回为 true 时, 则变量 <code>e</code> 被智能转化成 <code>Num</code> 类型</p><blockquote><p>我们还可以使用 <code>when</code> 代替 <code>if</code> 表达式</p></blockquote><h3 id="使用-is-智能转换类型有前提"><a href="#使用-is-智能转换类型有前提" class="headerlink" title="使用 is 智能转换类型有前提"></a>使用 <code>is</code> 智能转换类型有前提</h3><blockquote><p>变量必须是 <code>val</code> 定义的变量, 否则无法智能转换, 只能使用 <code>as表达式</code>显示的转换</p></blockquote><h2 id="使用-as-强制转换类型"><a href="#使用-as-强制转换类型" class="headerlink" title="使用 as 强制转换类型"></a>使用 as 强制转换类型</h2><p>可以使用 <code>as</code> 强制类型, 如果强转不成, 直接报错.</p><p>我们还可以使用 <code>as?</code> , 强转不成, 直接返回 <code>null</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println((sum.left <span class="keyword">as</span> Num).value)</span><br><span class="line"><span class="keyword">val</span> n = e <span class="keyword">as</span> Num</span><br></pre></td></tr></table></figure><h2 id="for循环和范围表达式"><a href="#for循环和范围表达式" class="headerlink" title="for循环和范围表达式"></a>for循环和范围表达式</h2><p>在 Java 中我们经常这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 kotlin 中变成这样:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="范围表达式"><a href="#范围表达式" class="headerlink" title="范围表达式"></a>范围表达式</h3><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>上面那种情况<code>1..10</code> 在官网上说通过 <code>rangeTo</code> 函数实现, 能够使用这种方式的类型还需要实现<code>java.lang.Conparable</code>接口, 比如 <code>String</code> </p><p><code>&quot;a&quot;..&quot;z&quot;</code></p><p>就会从 <code>&quot;a&quot;</code> 遍历到 <code>&quot;z&quot;</code></p><p><code>for(i in 1..10) print(i)</code> &#x3D;&#x3D;&gt; <code>12345678910</code></p><p>1..10 区间表达形式,  <code>[1, 10]</code> 表示之间的数, 包括 1 和 10</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> interval: IntRange = <span class="number">1.</span><span class="number">.10</span></span><br><span class="line">   <span class="keyword">for</span> (v <span class="keyword">in</span> interval) &#123;</span><br><span class="line">      print(<span class="string">&quot;<span class="variable">$v</span> &quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   println()</span><br><span class="line">   <span class="keyword">for</span> (v <span class="keyword">in</span> interval.last downTo interval.first step <span class="number">1</span>) &#123;</span><br><span class="line">      print(<span class="string">&quot;<span class="variable">$v</span> &quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   println()</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// [1, 10)</span></span><br><span class="line">   <span class="keyword">for</span> (v <span class="keyword">in</span> interval.first until interval.last) &#123;</span><br><span class="line">      print(<span class="string">&quot;<span class="variable">$v</span> &quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">10</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> </span><br></pre></td></tr></table></figure><h4 id="步长"><a href="#步长" class="headerlink" title="步长"></a>步长</h4><p><code>kotlin</code>还提供了 <code>step</code> 函数定义迭代的步长</p><p><code>for (i in 1..10 step 2) println(i)</code>   &#x3D;&#x3D;&gt; <code>&quot;1359&quot;</code></p><h4 id="倒序"><a href="#倒序" class="headerlink" title="倒序"></a>倒序</h4><p>如果需要使用倒序, 则可以使用 <code>downTo</code>方法来实现:</p><p><code>for(i in 10 downTo 1 step 2) print(i)</code> &#x3D;&#x3D;&gt; <code>10 8 6 4 2</code></p><h4 id="半开区间"><a href="#半开区间" class="headerlink" title="半开区间"></a>半开区间</h4><p>还可以使用 <code>unitl</code> 函数实现 <code>半开区间</code></p><p><code>for (i in 1 until 10) &#123; println(i) &#125;</code> &#x3D;&#x3D;&gt; <code>123456789</code></p><h4 id="in-检查成员是否存在"><a href="#in-检查成员是否存在" class="headerlink" title="in 检查成员是否存在"></a>in 检查成员是否存在</h4><p><code>&quot;a&quot; in listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code> &#x3D;&#x3D;&gt; <code>true</code></p><p><code>&quot;kot&quot; in &quot;abc&quot;..&quot;xyz&quot;</code>  &#x3D;&#x3D;&gt; <code>true</code></p><p>上面那个等价于下面这个</p><p><code>&quot;kot&quot; &gt;= &quot;abc&quot; &amp;&amp; &quot;abc&quot; &lt;= &quot;xyz&quot;</code> &#x3D;&#x3D;&gt; <code>true</code></p><h4 id="in-检查成员配合感叹号-取反结果"><a href="#in-检查成员配合感叹号-取反结果" class="headerlink" title="in 检查成员配合感叹号: 取反结果"></a>in 检查成员配合感叹号: 取反结果</h4><p><code>&quot;a&quot; !in listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code></p><h4 id="for-使用迭代器遍历"><a href="#for-使用迭代器遍历" class="headerlink" title="for 使用迭代器遍历"></a>for 使用迭代器遍历</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(c <span class="keyword">in</span> array) &#123;</span><br><span class="line">    println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="withIndex键值组遍历"><a href="#withIndex键值组遍历" class="headerlink" title="withIndex键值组遍历"></a>withIndex键值组遍历</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((index, value) <span class="keyword">in</span> array.withIndex()) &#123;</span><br><span class="line">    println(<span class="string">&quot;the element at <span class="variable">$index</span>, is <span class="variable">$value</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代map"><a href="#迭代map" class="headerlink" title="迭代map"></a>迭代map</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> map = mutableMapOf(</span><br><span class="line">      <span class="number">1</span> to <span class="string">&quot;zhazha&quot;</span>,</span><br><span class="line">      <span class="number">2</span> to <span class="string">&quot;haha&quot;</span>,</span><br><span class="line">      <span class="number">3</span> to <span class="string">&quot;haha&quot;</span>,</span><br><span class="line">      Pair(<span class="number">4</span>, <span class="string">&quot;xixi&quot;</span>),</span><br><span class="line">      Pair&lt;<span class="built_in">Int</span>, String&gt;(<span class="number">5</span>, <span class="string">&quot;heihei&quot;</span>)</span><br><span class="line">   )</span><br><span class="line">   </span><br><span class="line">   map.forEach(<span class="function"><span class="title">fun</span><span class="params">(m: <span class="type">Map</span>.<span class="type">Entry</span>&lt;<span class="type">Int</span>, String&gt;)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">      println(<span class="string">&quot;key = <span class="subst">$&#123;m.key&#125;</span>, value = <span class="subst">$&#123;m.value&#125;</span>&quot;</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> ((key, value) <span class="keyword">in</span> map) &#123;</span><br><span class="line">      println(<span class="string">&quot;key = <span class="variable">$key</span>, value = <span class="variable">$value</span>&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// java forEach??? 调用的 java Map 里面的 BiConsumer 接口</span></span><br><span class="line">   map.forEach &#123; key, value -&gt;</span><br><span class="line">      println(<span class="string">&quot;key = <span class="variable">$key</span>, value = <span class="variable">$value</span>&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Kotlin forEach??? 调用的 kotlin 的 (key, value) -&gt; &#123;&#125; 遍历 Map 方法</span></span><br><span class="line">   map.forEach &#123; (key, value) -&gt;</span><br><span class="line">      println(<span class="string">&quot;key = <span class="variable">$key</span>, value = <span class="variable">$value</span>&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> Set<span class="type">&lt;String&gt;</span>.<span class="title">inSet</span><span class="params">(str: <span class="type">String</span>)</span></span> = str <span class="keyword">in</span> <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> <span class="keyword">set</span> = setOf&lt;String&gt;(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line"></span><br><span class="line">println(<span class="keyword">set</span>.inSet(<span class="string">&quot;a&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// (ch &gt;= &#x27;a&#x27; &amp;&amp; ch &lt;= &#x27;z&#x27;) || (ch &gt;= &#x27;A&#x27; &amp;&amp; ch &lt;= &#x27;Z&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">isLetter</span><span class="params">(ch: <span class="type">Char</span>)</span></span> = ch <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span>..<span class="string">&#x27;z&#x27;</span> || ch <span class="keyword">in</span> <span class="string">&#x27;A&#x27;</span>..<span class="string">&#x27;Z&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ch &gt;= &#x27;0&#x27; &amp;&amp; ch &lt;= &#x27;9&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">inNumber</span><span class="params">(ch: <span class="type">Char</span>)</span></span> = ch <span class="keyword">in</span> <span class="string">&#x27;0&#x27;</span>..<span class="string">&#x27;9&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="kotlin-异常"><a href="#kotlin-异常" class="headerlink" title="kotlin 异常"></a>kotlin 异常</h2><p>在kotlin中, 异常可以处理也可以不处理, 也不在函数声明上, 也不用写上<code>throws Exception</code>, 除非需要主动抛出异常, 则需要<code>throw new Exception()</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> bufferedReader = BufferedReader(InputStreamReader(System.`<span class="keyword">in</span>`))</span><br><span class="line">   <span class="keyword">val</span> number = readNumber(bufferedReader)</span><br><span class="line">   println(number)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">readNumber</span><span class="params">(reader: <span class="type">BufferedReader</span>)</span></span>: <span class="built_in">Int</span>? = <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="keyword">val</span> line = reader.readLine()</span><br><span class="line">   Integer.parseInt(line)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e: NumberFormatException) &#123;</span><br><span class="line">   <span class="keyword">throw</span> e</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">   reader.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
            <tag> 包 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 表达式 </tag>
            
            <tag> 表达式函数体 </tag>
            
            <tag> 可变函数参数 </tag>
            
            <tag> lambda </tag>
            
            <tag> 匿名函数 </tag>
            
            <tag> 函数内敛 </tag>
            
            <tag> 函数引用 </tag>
            
            <tag> 高阶函数 </tag>
            
            <tag> 闭包 </tag>
            
            <tag> 变量 </tag>
            
            <tag> 字符串模板 </tag>
            
            <tag> 类 </tag>
            
            <tag> 属性 </tag>
            
            <tag> import </tag>
            
            <tag> 枚举类 </tag>
            
            <tag> when表达式 </tag>
            
            <tag> 智能类型转换 </tag>
            
            <tag> 隐式转换 </tag>
            
            <tag> for循环 </tag>
            
            <tag> 范围表达式 </tag>
            
            <tag> 遍历 </tag>
            
            <tag> 步长 </tag>
            
            <tag> 倒叙 </tag>
            
            <tag> 半开区间 </tag>
            
            <tag> in </tag>
            
            <tag> 取反 </tag>
            
            <tag> 迭代 </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26SpringSecurity-权限模型</title>
      <link href="/2022/11/29/02springcloud/26SpringSecurity-%E6%9D%83%E9%99%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/11/29/02springcloud/26SpringSecurity-%E6%9D%83%E9%99%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="权限模型"><a href="#权限模型" class="headerlink" title="权限模型"></a>权限模型</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h2><p>权限模型是一种指导思想也是一种权限模型, 知道程序员如何开发出高效的, 易于维护的权限管理系统</p><h2 id="常见的权限模型"><a href="#常见的权限模型" class="headerlink" title="常见的权限模型"></a>常见的权限模型</h2><h3 id="DAC"><a href="#DAC" class="headerlink" title="DAC"></a>DAC</h3><p><code>DAC (Discretionary access control）</code>指自主访问控制。它是 <code>Tnusted Computer SystemEvaluation Criteria (TCSEC)</code>定义的一种<strong>访问控制模型</strong>。在这种访问控制模型中，<strong>系统会根据被操作对象的权限控制列表中的信息，来决定当前用户能够对其进行哪些操作</strong>，<strong>用户可以将其具备的权限直接或者间接授予其他用户</strong>，这也是其称为自主访问控制的原因。<br>自主访问控制经常与强制访问控制(MAC）对比。</p><blockquote><p>有点像已拥有权限的用户, 发布邀请码给未注册的用户, 让其注册, 否则没有邀请码无法注册论坛</p></blockquote><h3 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h3><p><code>MAC (Mandatory access control）</code>指强制访问控制，也叫非自主访问控制。这种访问控制方式可以限制主体对对象或目标执行某种操作的能力。通过强制访问控制，安全策略由安全策略管理员集中控制，用户无权覆盖策略。</p><blockquote><p>这种能力有点像, 小区门禁, 有小区物业统一给予小区业主访问某栋楼的权限</p></blockquote><h3 id="ABAC"><a href="#ABAC" class="headerlink" title="ABAC"></a>ABAC</h3><p><code>ABAC (Attribute-Based Access Control）</code>基于属性的访问控制，有时也被称为<code>PBAC(Policy-Based Access Control）</code>或者<code>CBAC (Claims-Based Access Control)</code>。<br><code>ABAC</code>也被称为下一代权限管理模型。<br>基于属性的访问控制中一般来说包含四类属性:用户属性、环境属性、操作属性以及资源属性，通过动态计算一个或者一组属性是否满足某一条件来进行授权。<br>当然，上面介绍的这三种权限模型并非本章重点，因为我们在Java 企业级开发中很少会用到它们。<br>在企业级开发领域，目前最为流行的权限管理模型当属RBAC。除了<code>RBAC</code>之外，还有一个<code>ACL</code>权限模型，Spring Security 中针对<code>ACL</code>也提供了相关的依赖，所以本章重点介绍这两种权限模型。</p><h2 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h2><h3 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么?"></a>是什么?</h3><p>一种古老的权限访问模型, 该模型针对资源配置权限, 用户&#x2F;角色必须拥有某些权限, 才能够访问某些资源</p><p><code>ACL</code>的一个核心思路就是:<strong>将某个对象的某种权限授予某个用户或某种角色，它们之间的关系是多对多，即一个用户&#x2F;角色可以具备某个对象的多种权限，某个对象的权限也可以被多个用户&#x2F;角色所持有。</strong></p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p><code>ACL</code>是一种粒度非常细的权限控制，<strong>它可以精确到某一个资源的某一个权限</strong>。这些权限数据都记录在数据库中，这带来的另外一个问题就是需要维护的权限数据量非常庞大，特别是对于一些大型系统而言，这一问题尤其突出，大量的数据需要维护可能会<strong>造成系统性能下降</strong>。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>对于一些简单的小型系统而言，使用<code>ACL</code>还是可以的，没有任何问题。</p><p>Spring Security对<code>ACL</code>提供了支持, 我们只要导入<code>spring-security-acl</code>依赖, 那么就可以在项目中使用了</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><h4 id="Sid"><a href="#Sid" class="headerlink" title="Sid"></a>Sid</h4><p>Sid表示用户和角色</p><blockquote><p>注意这里是 和 不是 或</p></blockquote><p>它拥有两种:</p><ul><li><code>GrantedAuthoritySid</code>(角色)</li><li><code>PrincipalSid</code>(用户)</li></ul><h2 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h2>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤器 </tag>
            
            <tag> 权限 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 权限模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25SpringSecurity-权限管理</title>
      <link href="/2022/11/29/02springcloud/25SpringSecurity-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2022/11/29/02springcloud/25SpringSecurity-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="基于URL地址的权限管理"><a href="#基于URL地址的权限管理" class="headerlink" title="基于URL地址的权限管理"></a>基于URL地址的权限管理</h1><p>基于URL地址的权限管理主要是通过过滤器<code>FilterSecurityInterceptor</code> 来实现的。如果开发者配置了基于URL地址的权限管理，那么<code>FilterSecurityInterceptor</code>就会被自动添加到 <code>SpringSecurity</code>过滤器链中，在过滤器链中拦截下请求，然后分析当前用户是否具备请求所需要的权限，如果不具备，则抛出异常。<br><code>FilterSecurityInterceptor</code>将请求拦截下来之后，会交给<code>AccessDecisionManager</code>进行处理，<code>AccessDecisionManager</code> 则会调用投票器进行投票，然后对投票结果进行决策，最终决定请求是否通过。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@GetMapping(&quot;admin&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String  <span class="title function_">admin</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;hello admin&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@GetMapping(&quot;admin/get&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">adminGet</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> id + <span class="string">&quot;\t admin get&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@GetMapping(&quot;user&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;hello user&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@GetMapping(&quot;user/get&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">userGet</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> id + <span class="string">&quot;\t user get&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@GetMapping(&quot;getInfo&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">(Long infoId)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> infoId + <span class="string">&quot;\t getInfo&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      auth.inMemoryAuthentication()</span><br><span class="line">            .withUser(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line">            .password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>)</span><br><span class="line">            .roles(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">&quot;haha&quot;</span>)</span><br><span class="line">            .password(<span class="string">&quot;&#123;noop&#125;112233&quot;</span>)</span><br><span class="line">            .roles(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">&quot;xixi&quot;</span>)</span><br><span class="line">            .password(<span class="string">&quot;&#123;noop&#125;123&quot;</span>)</span><br><span class="line">            .authorities(<span class="string">&quot;READ_NODE&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      http</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/user/**&quot;</span>).access(<span class="string">&quot;hasAnyRole(&#x27;admin&#x27;, &#x27;user&#x27;)&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/getInfo&quot;</span>).hasAuthority(<span class="string">&quot;READ_NODE&quot;</span>)</span><br><span class="line">            .anyRequest().access(<span class="string">&quot;isAuthenticated()&quot;</span>)</span><br><span class="line">            .and().formLogin()</span><br><span class="line">            .and().csrf().disable();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="角色继承"><a href="#角色继承" class="headerlink" title="角色继承"></a>角色继承</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RoleHierarchy <span class="title function_">roleHierarchy</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">RoleHierarchyImpl</span> <span class="variable">roleHierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">   <span class="comment">// 这里记得一定要加上角色的前缀, 因为前缀是大写, 所以角色名字通常也应该是大写</span></span><br><span class="line">   <span class="comment">// 不然就像下面那样, 尴尬, 这里做一个方面教材</span></span><br><span class="line">   roleHierarchy.setHierarchy(<span class="string">&quot;ROLE_admin &gt; ROLE_user&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> roleHierarchy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   auth.inMemoryAuthentication()</span><br><span class="line">         .withUser(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line">         .password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>)</span><br><span class="line">         .roles(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">         .and()</span><br><span class="line">         .withUser(<span class="string">&quot;haha&quot;</span>)</span><br><span class="line">         .password(<span class="string">&quot;&#123;noop&#125;112233&quot;</span>)</span><br><span class="line">         .roles(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">         .and()</span><br><span class="line">         .withUser(<span class="string">&quot;xixi&quot;</span>)</span><br><span class="line">         .password(<span class="string">&quot;&#123;noop&#125;123&quot;</span>)</span><br><span class="line">         .authorities(<span class="string">&quot;READ_NODE&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      http</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line"><span class="comment">//          .antMatchers(&quot;/user/**&quot;).access(&quot;hasAnyRole(&#x27;admin&#x27;, &#x27;user&#x27;)&quot;) // 使用了角色继承之后, 这个就不需要了</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/user/**&quot;</span>).access(<span class="string">&quot;hasAnyRole(&#x27;user&#x27;)&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/getInfo&quot;</span>).hasAuthority(<span class="string">&quot;READ_NODE&quot;</span>)</span><br><span class="line">            .anyRequest().access(<span class="string">&quot;isAuthenticated()&quot;</span>)</span><br><span class="line">            .and().formLogin()</span><br><span class="line">            .and().csrf().disable();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>这段源码分析是必须的, 晚上一堆配置方法, 但对于角色继承方法来说, 是有新旧方法之分的, 所以我们需要事先声明, 我们的版本是基于 Spring Boot 2.7.1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RoleHierarchy <span class="title function_">roleHierarchy</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">RoleHierarchyImpl</span> <span class="variable">roleHierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">   roleHierarchy.setHierarchy(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_USER &gt; ROLE_GUEST&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> roleHierarchy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们基于这段代码分析源码</p><p>首先我们进入的函数是这个:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHierarchy</span><span class="params">(String roleHierarchyStringRepresentation)</span> &#123;</span><br><span class="line">   <span class="comment">// 保存 ROLE_ADMIN &gt; ROLE_USER &gt; ROLE_GUEST</span></span><br><span class="line">   <span class="built_in">this</span>.roleHierarchyStringRepresentation = roleHierarchyStringRepresentation;</span><br><span class="line">   buildRolesReachableInOneStepMap();</span><br><span class="line">   buildRolesReachableInOneOrMoreStepsMap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后分为这两个方法<code>buildRolesReachableInOneStepMap</code> <code>buildRolesReachableInOneOrMoreStepsMap</code></p><h5 id="buildRolesReachableInOneStepMap"><a href="#buildRolesReachableInOneStepMap" class="headerlink" title="buildRolesReachableInOneStepMap"></a><code>buildRolesReachableInOneStepMap</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildRolesReachableInOneStepMap</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.rolesReachableInOneStepMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">   <span class="comment">// 首先对字符串进行 \n 分组, 然后遍历, 我们的代码少了 \n ROLE_ADMIN &gt; ROLE_USER &gt; ROLE_GUEST </span></span><br><span class="line">   <span class="keyword">for</span> (String line : <span class="built_in">this</span>.roleHierarchyStringRepresentation.split(<span class="string">&quot;\n&quot;</span>)) &#123;</span><br><span class="line">      <span class="comment">// 对 &#x27; &gt; &#x27;(大括号前面有空格, 至少一个空格) 进行分组</span></span><br><span class="line">      String[] roles = line.trim().split(<span class="string">&quot;\\s+&gt;\\s+&quot;</span>);</span><br><span class="line">      <span class="comment">// i = 1, 只对前面两个角色有处理</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; roles.length; i++) &#123;</span><br><span class="line">         <span class="comment">// 拿出第一个 ROLE_ADMIN 虽然 i = 1 但是拿的是第 0 个</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">higherRole</span> <span class="operator">=</span> roles[i - <span class="number">1</span>];</span><br><span class="line">         <span class="comment">// 拿到下一个角色, ROLE_USER </span></span><br><span class="line">         <span class="type">GrantedAuthority</span> <span class="variable">lowerRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(roles[i]);</span><br><span class="line">         Set&lt;GrantedAuthority&gt; rolesReachableInOneStepSet;</span><br><span class="line">         <span class="comment">// 不包含 ROLE_ADMIN</span></span><br><span class="line">         <span class="keyword">if</span> (!<span class="built_in">this</span>.rolesReachableInOneStepMap.containsKey(higherRole)) &#123;</span><br><span class="line">            rolesReachableInOneStepSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">// 以 ROLE_ADMIN 为 key, new 出 value</span></span><br><span class="line">            <span class="built_in">this</span>.rolesReachableInOneStepMap.put(higherRole, rolesReachableInOneStepSet);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            rolesReachableInOneStepSet = <span class="built_in">this</span>.rolesReachableInOneStepMap.get(higherRole);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 将 ROLE_USER 添加到 ROLE_ADMIN 分组底下</span></span><br><span class="line">         rolesReachableInOneStepSet.add(lowerRole);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码, 针对 <code>ROLE_ADMIN</code> 的分组, 添加了 <code>ROLE_USER</code></p><p>然后在内部的那个 <code>for</code> 循环中, 对 <code>ROLE_USER</code> 创建了一个分组, 然后在 分组中添加 <code>ROLE_GUEST</code></p><p>最终结果是</p><p><code>ROLE_ADMIN</code> 分组只有 <code>ROLE_USER</code> 的权限</p><p><code>ROLE_USER</code> 分组有 <code>ROLE_GUEST</code>权限</p><p>所以这么写, 最后的结果 原本 应该拥有 <code>ROLE_USER</code> 和 <code>ROLE_GUEST</code> 权限的 <code>ROLE_ADMIN</code> 只能有 <code>ROLE_USER</code> , 没有<code>ROLE_GUEST</code>的权限</p><blockquote><p>如果我们没看<code>roleHierarchy.getReachableGrantedAuthorities</code>方法的话, 这肯定是不对的</p></blockquote><blockquote><p>这里其实三种方法都行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="type">RoleHierarchyImpl</span> <span class="variable">roleHierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">   <span class="type">StrJoiner</span> <span class="variable">joiner</span> <span class="operator">=</span> StrJoiner.of(<span class="string">&quot;\n&quot;</span>).append(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_USER&quot;</span>).append(<span class="string">&quot;ROLE_USER &gt; ROLE_GUEST&quot;</span>).append(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_GUEST&quot;</span>);</span><br><span class="line">   roleHierarchy.setHierarchy(joiner.toString());</span><br><span class="line">   Collection&lt;GrantedAuthority&gt; authorityCollection = roleHierarchy.getReachableGrantedAuthorities(List.of(() -&gt; <span class="string">&quot;ROLE_ADMIN&quot;</span>));</span><br><span class="line">   <span class="keyword">for</span> (GrantedAuthority grantedAuthority : authorityCollection) &#123;</span><br><span class="line">      System.out.print(grantedAuthority.getAuthority() + <span class="string">&quot;\t&quot;</span>); <span class="comment">// ROLE_USER ROLE_GUEST ROLE_ADMIN</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="type">RoleHierarchyImpl</span> <span class="variable">roleHierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">   roleHierarchy.setHierarchy(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_USER &gt; ROLE_GUEST&quot;</span>);</span><br><span class="line">   Collection&lt;GrantedAuthority&gt; authorityCollection = roleHierarchy.getReachableGrantedAuthorities(List.of(() -&gt; <span class="string">&quot;ROLE_ADMIN&quot;</span>));</span><br><span class="line">   <span class="keyword">for</span> (GrantedAuthority grantedAuthority : authorityCollection) &#123;</span><br><span class="line">      System.out.print(grantedAuthority.getAuthority() + <span class="string">&quot;\t&quot;</span>); <span class="comment">// ROLE_USER ROLE_GUEST ROLE_ADMIN</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="type">RoleHierarchyImpl</span> <span class="variable">roleHierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">   <span class="type">StringJoiner</span> <span class="variable">stringJoiner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   stringJoiner.add(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_USER&quot;</span>);</span><br><span class="line">   stringJoiner.add(<span class="string">&quot;ROLE_USER &gt; ROLE_GUEST&quot;</span>);</span><br><span class="line">   roleHierarchy.setHierarchy(stringJoiner.toString());</span><br><span class="line">   Collection&lt;GrantedAuthority&gt; authorityCollection = roleHierarchy.getReachableGrantedAuthorities(List.of(() -&gt; <span class="string">&quot;ROLE_ADMIN&quot;</span>));</span><br><span class="line">   <span class="keyword">for</span> (GrantedAuthority grantedAuthority : authorityCollection) &#123;</span><br><span class="line">      System.out.print(grantedAuthority.getAuthority() + <span class="string">&quot;\t&quot;</span>); <span class="comment">// ROLE_USER ROLE_GUEST ROLE_ADMIN</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h5 id="buildRolesReachableInOneOrMoreStepsMap"><a href="#buildRolesReachableInOneOrMoreStepsMap" class="headerlink" title="buildRolesReachableInOneOrMoreStepsMap"></a><code>buildRolesReachableInOneOrMoreStepsMap</code></h5><p>给可达的分组继续添加剩余的角色</p><blockquote><p>我们分析源码的过程完全按照<code>&quot;ROLE_ADMIN &gt; ROLE_USER &gt; ROLE_GUEST&quot;</code>分析的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildRolesReachableInOneOrMoreStepsMap</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.rolesReachableInOneOrMoreStepsMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">   <span class="comment">// 迭代分组</span></span><br><span class="line">   <span class="keyword">for</span> (String roleName : <span class="built_in">this</span>.rolesReachableInOneStepMap.keySet()) &#123;</span><br><span class="line">      <span class="comment">// 拿出第一个分组下的成员列表</span></span><br><span class="line">      Set&lt;GrantedAuthority&gt; rolesToVisitSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(<span class="built_in">this</span>.rolesReachableInOneStepMap.get(roleName));</span><br><span class="line">      <span class="comment">// </span></span><br><span class="line">      Set&lt;GrantedAuthority&gt; visitedRolesSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">while</span> (!rolesToVisitSet.isEmpty()) &#123;</span><br><span class="line">         <span class="comment">// 拿到成员的第一个角色名</span></span><br><span class="line">         <span class="type">GrantedAuthority</span> <span class="variable">lowerRole</span> <span class="operator">=</span> rolesToVisitSet.iterator().next();</span><br><span class="line">         <span class="comment">// 把拿到的分组删除掉</span></span><br><span class="line">         rolesToVisitSet.remove(lowerRole);</span><br><span class="line">         <span class="comment">// 将拿到的成员添加到 visitedRolesSet 集合中, 添加成功, 继续下一次循环</span></span><br><span class="line">         <span class="comment">// 核心代码在!this.rolesReachableInOneStepMap.containsKey(lowerRole.getAuthority())</span></span><br><span class="line">         <span class="comment">// 如果添加的 ROLE_ADMIN 组长的成员 ROLE_USER 在原先分组中也担任组长的话, 那意味着 ROLE_USER 组长底下的所有成员也是 ROLE_ADMIN 的成员</span></span><br><span class="line">         <span class="comment">// 因为 ROLE_ADMIN 也是 ROLE_USER 的成员</span></span><br><span class="line">         <span class="comment">// 所以下面的那个 !containsKey(不包含) 方法, 不执行</span></span><br><span class="line">         <span class="keyword">if</span> (!visitedRolesSet.add(lowerRole)</span><br><span class="line">               || !<span class="built_in">this</span>.rolesReachableInOneStepMap.containsKey(lowerRole.getAuthority())) &#123;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// Already visited role or role with missing hierarchy</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (roleName.equals(lowerRole.getAuthority())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CycleInRoleHierarchyException</span>();</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="comment">// 将搜索到的所有可达成员, 添加到新的集合的分组中, 换句话说就是new了个新的分组, 在分组 ROLE_USER 下, 添加可达成员 ROLE_GUEST</span></span><br><span class="line">         <span class="comment">// 如果是 ROLE_ADMIN 分组组长, 那么就添加 ROLE_USER 和 ROLE_GUEST</span></span><br><span class="line">         <span class="comment">// !containsKey 不包含代码不执行 continue 之后, 就会将 ROLE_USER 底下的所有成员都给 ROLE_ADMIN</span></span><br><span class="line">         <span class="comment">// 往这个集合 rolesToVisitSet 添加另一个集合后, 上面的 !rolesToVisitSet.isEmpty() 条件也满足了, 继续添加 ROLE_USER 的成员</span></span><br><span class="line">         rolesToVisitSet.addAll(<span class="built_in">this</span>.rolesReachableInOneStepMap.get(lowerRole.getAuthority()));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将上面的结果visitedRolesSet 添加到 roleName 的分组中</span></span><br><span class="line">      <span class="built_in">this</span>.rolesReachableInOneOrMoreStepsMap.put(roleName, visitedRolesSet);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终添加的结果是这样:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212021623518.png" alt="image-20221202162341432"></p><p>至此分组彻底完成</p><h5 id="roleHierarchy-getReachableGrantedAuthorities"><a href="#roleHierarchy-getReachableGrantedAuthorities" class="headerlink" title="roleHierarchy.getReachableGrantedAuthorities"></a><code>roleHierarchy.getReachableGrantedAuthorities</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Collection&lt;GrantedAuthority&gt; <span class="title function_">getReachableGrantedAuthorities</span><span class="params">(</span></span><br><span class="line"><span class="params">      Collection&lt;? extends GrantedAuthority&gt; authorities)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (authorities == <span class="literal">null</span> || authorities.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> AuthorityUtils.NO_AUTHORITIES;</span><br><span class="line">   &#125;</span><br><span class="line">   Set&lt;GrantedAuthority&gt; reachableRoles = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">   <span class="comment">// 从参数拿到的角色名被存入到下面的函数 ROLE_ADMIN</span></span><br><span class="line">   Set&lt;String&gt; processedNames = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">   <span class="keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">      <span class="comment">// Do not process authorities without string representation</span></span><br><span class="line">      <span class="keyword">if</span> (authority.getAuthority() == <span class="literal">null</span>) &#123;</span><br><span class="line">         reachableRoles.add(authority);</span><br><span class="line">         <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// processedNames.add(&quot;ROLE_ADMIN&quot;)</span></span><br><span class="line">      <span class="keyword">if</span> (!processedNames.add(authority.getAuthority())) &#123;</span><br><span class="line">         <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Add original authority</span></span><br><span class="line">      reachableRoles.add(authority);</span><br><span class="line">      <span class="comment">// 从这里拿到可达集合, 根据数组 ROLE_ADMIN 拿到组长的成员 ROLE_USER 和 ROLE_GUEST</span></span><br><span class="line">      Set&lt;GrantedAuthority&gt; lowerRoles = <span class="built_in">this</span>.rolesReachableInOneOrMoreStepsMap.get(authority.getAuthority());</span><br><span class="line">      <span class="keyword">if</span> (lowerRoles == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">continue</span>; <span class="comment">// No hierarchy for the role</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (GrantedAuthority role : lowerRoles) &#123;</span><br><span class="line">         <span class="comment">// 添加已经添加了 (ROLE_ADMIN) , 现在准备添加 ROLE_USER 和 ROLE_GUEST</span></span><br><span class="line">         <span class="keyword">if</span> (processedNames.add(role.getAuthority())) &#123;</span><br><span class="line">            <span class="comment">// 将对象也添加到可达列表中(ROLE_ADMIN, ROLE_USER 和 ROLE_GUEST)</span></span><br><span class="line">            reachableRoles.add(role);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(reachableRoles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后结果: </p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212021631207.png" alt="image-20221202163159109"></p><p>结果返回到这样了:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212021632571.png" alt="image-20221202163239489"></p><p>至此源码分析完成</p><p>总结下:</p><p>整个过程, 像是借助我们的表达式, 解析出我们写入的字符串的表达式, 存放在 <code>Map&lt;String, Set&lt;GrantedAuthority&gt;&gt; rolesReachableInOneStepMap</code>对象</p><p>但该集合中的内容是不完整的, <code>rolesReachableInOneStepMap</code>集合只能存放一级角色关系, 比如你是 <code>admin</code> , 那么该集合只能存放到 <code>user</code> 这个级别, 不能存放 <code>guest</code> 这个级别</p><p>接着就是搜索可达角色, 存放在这个集合中<code>Map&lt;String, Set&lt;GrantedAuthority&gt;&gt; rolesReachableInOneOrMoreStepsMap</code></p><p>可达搜索的关键在于 <code>!this.rolesReachableInOneStepMap.containsKey(lowerRole.getAuthority())</code>判断. 如果该返回为 <code>true</code>, 则直接 <code>continue</code>, 返回 <code>false</code> 的话直接到<code>this.rolesReachableInOneOrMoreStepsMap.put(roleName, visitedRolesSet);</code></p><blockquote><p>上面的整个过程也非常简单, 如果 <code>ROLE_ADMIN</code> 的成员有一个 <code>ROLE_USER</code>, 然后在<code>rolesReachableInOneStepMap</code>分组中判断下 <code>ROLE_USER</code> 是否为组长, 如果是组长, 则意味着 <code>ROLE_ADMIN</code> 是<code>ROLE_USER</code> 的组长, 所以 <code>ROLE_USER</code> 的成员都是 <code>ROLE_ADMIN</code> 的</p></blockquote><h3 id="自定义表达式"><a href="#自定义表达式" class="headerlink" title="自定义表达式"></a>自定义表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionExpression</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkId</span><span class="params">(Authentication authentication, Long id)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (authentication.isAuthenticated()) &#123;</span><br><span class="line">         <span class="keyword">return</span> id % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(HttpServletRequest request1122)</span> &#123;</span><br><span class="line"><span class="comment">//    public boolean check(HttpServletRequest request) &#123;</span></span><br><span class="line">      <span class="comment">// 这里的 username 字符串是不行的, username 参数可能随时更新</span></span><br><span class="line"><span class="comment">//    return &quot;haha&quot;.equals(request.getParameter(&quot;username&quot;));</span></span><br><span class="line">      <span class="comment">// 我们可以从下面的 ThreadLocal 里拿</span></span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;haha&quot;</span>.equals(user.getUsername());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomSecurityConfig</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> InMemoryUserDetailsManager <span class="title function_">userDetailsManager</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">InMemoryUserDetailsManager</span> <span class="variable">userDetailsManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line">      userDetailsManager.createUser(</span><br><span class="line">            User</span><br><span class="line">                  .withUsername(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line">                  .password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>)</span><br><span class="line">                  .roles(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">                  .build()</span><br><span class="line">      );</span><br><span class="line">      userDetailsManager.createUser(</span><br><span class="line">            User.withUsername(<span class="string">&quot;haha&quot;</span>)</span><br><span class="line">                  .password(<span class="string">&quot;&#123;noop&#125;112233&quot;</span>)</span><br><span class="line">                  .roles(<span class="string">&quot;USER&quot;</span>)</span><br><span class="line">                  .build()</span><br><span class="line">      );</span><br><span class="line">      userDetailsManager.createUser(</span><br><span class="line">            User.withUsername(<span class="string">&quot;xixi&quot;</span>)</span><br><span class="line">                  .password(<span class="string">&quot;&#123;noop&#125;123&quot;</span>)</span><br><span class="line">                  .authorities(<span class="string">&quot;node&quot;</span>)</span><br><span class="line">                  .build()</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> userDetailsManager;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="keyword">return</span> httpSecurity.authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/admin/&#123;userId&#125;&quot;</span>)</span><br><span class="line">            .access(<span class="string">&quot;@permissionExpression.checkId(authentication, #userId)&quot;</span>)</span><br><span class="line">            .antMatchers(<span class="string">&quot;/user&quot;</span>)</span><br><span class="line">            .access(<span class="string">&quot;isAuthenticated() and @permissionExpression.check(request)&quot;</span>)</span><br><span class="line">            .and().formLogin().and().csrf().disable().build();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;admin/&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> Long userId)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> userId + <span class="string">&quot;\t path admin get&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello user&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h2><p>用户通过浏览器发送URL地址，由<code>FilterSecurityInterceptor</code>判断是否具有相应的访问权限。</p><p>对于用户请求的方法权限，例如注解<code>@PreAuthorize(&quot;hasRole(&#39;ADMIN&#39;)&quot;)</code>，由<code>MethodSecurityInterceptor</code>判断</p><p>两个拦截器都继承了<code>AbstractSecurityInterceptor</code></p><p>我们分析 <code>AbstractSecurityInterceptor</code>, 发现他有三个核心函数</p><ul><li><code>beforeInvocation</code>: 前置处理器</li><li><code>finallyInvocation</code>: 后置处理器</li><li><code>afterInvocation</code>: 收尾工作</li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212011617136.png" alt="image-20221201161714310"></p><p><code>FilterSecurityInterceptor</code>的核心代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(FilterInvocation filterInvocation)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">   <span class="comment">// 忽略代码上面代码</span></span><br><span class="line">   <span class="comment">// 调用 AbstractSecurityInterceptor的第一个核心代码, 前置处理器</span></span><br><span class="line">   <span class="type">InterceptorStatusToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="built_in">super</span>.beforeInvocation(filterInvocation);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      filterInvocation.getChain().doFilter(filterInvocation.getRequest(), filterInvocation.getResponse());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.finallyInvocation(token);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">super</span>.afterInvocation(token, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看上面的核心代码, 我们可以把分析过程分为三个部分:</p><ul><li>前置</li><li>后置</li><li>清除</li></ul><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p>源码分析一张图:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212011900238.png" alt="前置处理器源码分析"></p><ol><li>找匹配器<ol><li><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212011901297.png" alt="image-20221201190155219"></li></ol></li><li>匹配器跟 <code>request</code> 做匹配, 找到匹配器对应 <code>access</code> 的决策器</li><li>拿到对应的投票器</li><li>投票器拿到我们自定义的权限表达式</li><li>自定义表达式执行代码, 根据返回值判断是否有权限访问</li></ol><h2 id="动态管理权限规则"><a href="#动态管理权限规则" class="headerlink" title="动态管理权限规则"></a>动态管理权限规则</h2><blockquote><h6 id="注意使用动态管理规则后-角色继承将会失效-因为你只需要修改表结构就可以达到修改角色和权限之间的关系"><a href="#注意使用动态管理规则后-角色继承将会失效-因为你只需要修改表结构就可以达到修改角色和权限之间的关系" class="headerlink" title="注意使用动态管理规则后, 角色继承将会失效, 因为你只需要修改表结构就可以达到修改角色和权限之间的关系"></a>注意使用动态管理规则后, 角色继承将会失效, 因为你只需要修改表结构就可以达到修改角色和权限之间的关系</h6></blockquote><p>动态管理权限规则就是我们将URL拦截规则和访问URL所需要的权限都保存在数据库中，这样，在不改变源代码的情况下，只需要修改数据库中的数据，就可以对权限进行调整。</p><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212011948312.png" alt="image-20221201194729794"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212012022629.png" alt="image-20221201202247473"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212012044899.png" alt="image-20221201204456819"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212012045821.png" alt="image-20221201204514764"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212012103209.png" alt="image-20221201210323146"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212022147135.png" alt="image-20221202214744019"></p><blockquote><p>这里的Menu相当于资源</p></blockquote><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomSecurityMetaSource</span> <span class="keyword">implements</span> <span class="title class_">FilterInvocationSecurityMetadataSource</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Resource</span></span><br><span class="line">   <span class="keyword">private</span> MenuService menuService;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">antPathMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> object 该参数是受保护对象, 如果是基于 URL , 那么受保护对象就是 FilterInvocation</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 受保护对象所需的权限</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title function_">getAttributes</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">      <span class="comment">// 提取当前URL地址</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> ((FilterInvocation) object).getRequest().getRequestURI();</span><br><span class="line">      <span class="comment">// 拿到所有菜单, 该菜单里有匹配规则 pattern</span></span><br><span class="line">      List&lt;Menu&gt; allMenu = menuService.getAllMenu();</span><br><span class="line">      <span class="comment">// 做匹配</span></span><br><span class="line">      <span class="keyword">for</span> (Menu menu : allMenu) &#123;</span><br><span class="line">         <span class="keyword">if</span> (antPathMatcher.match(menu.getPattern(), requestURI)) &#123;</span><br><span class="line">            <span class="comment">// 匹配成功, 拿到 role 列表, 也就是我们的权限</span></span><br><span class="line">            <span class="keyword">if</span> (menu.getRoleList() == <span class="literal">null</span> || menu.getRoleList().isEmpty()) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] roles = menu.getRoleList().stream().map(Role::getName).toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">            <span class="keyword">return</span> SecurityConfig.createList(roles);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 都匹配不上, 返回 null</span></span><br><span class="line">      <span class="comment">// 需要修改 AbstractSecurityInterceptor 对象的 rejectPublicInvocations属性了, 默认为false , 表示当 getAttributes 返回 null时, 允许访问受保护对象</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 用来返回所有的权限属性, 以便在项目启动阶段做校验, 如果不需要校验, 则直接返回 null 即可</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title function_">getAllConfigAttributes</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 表示当前对象支持处理的受保护对象是 FilterInvocation</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> FilterInvocation.class.isAssignableFrom(clazz);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RoleMapper roleMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.loadUserByUsername(username);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> == user) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">user.setRoles(roleMapper.listRoleByUid(user.getId()));</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> MenuMapper menuMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Menu&gt; <span class="title function_">getAllMenu</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> menuMapper.getAllMenu();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserMapper</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select u.* from user u where u.enabled = true and u.locked = false and u.username = #&#123;username&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">loadUserByUsername</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br></pre></td></tr></table></figure><p><code>RoleMapper</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;SELECT r.* FROM user_role AS ur \n&quot; +</span></span><br><span class="line"><span class="meta">              &quot;INNER JOIN role AS r ON ur.rid = r.id \n&quot; +</span></span><br><span class="line"><span class="meta">              &quot;WHERE ur.uid = #&#123;uid&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResultMap(&quot;BaseResultMap&quot;)</span></span><br><span class="line">List&lt;Role&gt; <span class="title function_">listRoleByUid</span><span class="params">(<span class="meta">@Param(&quot;uid&quot;)</span> Long uid)</span>;</span><br></pre></td></tr></table></figure><p><code>MenuMapper</code>: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select m.*, r.*, r.id as rid from menu m &quot; +</span></span><br><span class="line"><span class="meta">              &quot; left join menu_role mr on mr.mid = m.id &quot; +</span></span><br><span class="line"><span class="meta">              &quot;left join role r on r.id = mr.rid &quot;)</span></span><br><span class="line"><span class="meta">@ResultMap(value = &quot;MenuAndRole&quot;)</span></span><br><span class="line">List&lt;Menu&gt; <span class="title function_">getAllMenu</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.zhazha.dynamic.entity.Menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--@mbg.generated--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--@Table menu--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pattern&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;MenuAndRole&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.zhazha.dynamic.entity.Menu&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roleList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.zhazha.dynamic.entity.Role&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整代码可以去我的<code>gitee</code>, 找<code>Spring Security</code>分支的</p><p> <img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212022149179.png" alt="image-20221202214906047"></p><p>项目中找</p><p>由于<code>/hello</code>接口不包含在 <strong>URL-权限</strong> 映射关系中，所以任何用户都可以访问<code>/hello</code>接口，包括匿名用户。<strong>如果希望所有的 URL地址都必须在数据库中配置URL-权限映射关系后才能访问</strong>，那么可以通过如下配置实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityWebFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> httpSecurity.getSharedObject(ApplicationContext.class);</span><br><span class="line">   <span class="keyword">return</span> httpSecurity</span><br><span class="line">         .apply(<span class="keyword">new</span> <span class="title class_">UrlAuthorizationConfigurer</span>&lt;&gt;(applicationContext))</span><br><span class="line">         .withObjectPostProcessor(<span class="keyword">new</span> <span class="title class_">ObjectPostProcessor</span>&lt;FilterSecurityInterceptor&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> &lt;O <span class="keyword">extends</span> <span class="title class_">FilterSecurityInterceptor</span>&gt; O <span class="title function_">postProcess</span><span class="params">(O object)</span> &#123;</span><br><span class="line">               object.setSecurityMetadataSource(customSecurityMetaSource);</span><br><span class="line">               <span class="comment">// 所有的url必须在数据库中存在, 才能够访问, 否则不行</span></span><br><span class="line">               object.setRejectPublicInvocations(<span class="literal">true</span>);</span><br><span class="line">               <span class="keyword">return</span> object;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;)</span><br><span class="line">         .and()</span><br><span class="line">       ...</span><br><span class="line">         .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咱们现在可以写源码流程图了, 上次写的源码流程图写的是SpEL的流程, 这次改正常流程</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212022320637.png" alt="Spring Security授权过程(基于URL)"></p><p>总体思路是</p><ol><li><p>从 <code>request</code> 的 <code>url</code> 拿出所需要的权限, 这里我们自定义实现了这个过程, 从数据库中拿到匹配的权限</p></li><li><p>拿出当前登录用户的权限, 这里我们也是从数据库中拿到数据, 也需要自定义实现</p><ol><li><blockquote><p>主要目的是实现让我们的<code>User</code>对象<code>UserDetails</code>的<code>getAuthorities</code>方法, 所以我们设置进来的 roles 集合最终还是需要通过<code>getAuthorities</code>返回出去</p></blockquote></li></ol></li><li><p>比较, 完事</p></li></ol><h1 id="基于方法的权限管理"><a href="#基于方法的权限管理" class="headerlink" title="基于方法的权限管理"></a>基于方法的权限管理</h1><p>基于方法的方式存在前置和后置处理方式</p><p>基本原理使用 <code>AOP</code> 实现, Spring Security中通过<code>MethodSecurityInterceptor</code>来提供相关实现</p><h2 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h2><p>目前在Spring Boot中基于方法的权限管理主要是通过注解来实现，我们需要通过<code>@EnableGlobalMethodSecurity</code>注解开启权限注解的使用，用法如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个注解中我们设置了三个属性:</p><ul><li><code>prePostEnabled</code>:开启Spring Security提供的四个权限注解，<code>@PostAuthorize</code>、<code>@PostFilter</code>、<code>@PreAuthorize</code> 以及<code>@PreFilter</code>，这四个注解支持权限表达式，功能比较丰富。</li><li><code>securedEnabled</code>:开启Spring Security提供的<code>@Secured</code>注解，该注解不支持权限表达式。</li><li><code>jsr250Enabled</code>:开启<code>JSR-250</code>提供的注解，主要包括<code>@DenyAll</code>、<code>@PermitAll</code>以及<code>@RolesAllowed</code>三个注解，这些注解也不支持权限表达式。</li></ul><p>这些注解的含义分别如下:<br><code>@PostAuthorize</code>:在目标方法执行之后进行权限校验。</p><p><code>@PostFilter</code>:在目标方法执行之后对方法的返回结果进行过滤。</p><p><code>@PreAuthorize</code>:在目标方法执行之前进行权限校验。</p><p><code>@PreFilter</code>:在目标方法执行之前对方法参数进行过滤。</p><p><code>@Secured</code>:访问目标方法必须具备相应的角色。</p><p><code>@DenyAll</code>:拒绝所有访问。</p><p><code>@PermitAll</code>:允许所有访问。</p><p><code>@RolesAllowed</code>:访问目标方法必须具备相应的角色。</p><blockquote><p>这些基于方法的权限管理相关的注解，一般来说只要设置<code>prePostEnabled=true</code>就够用了。</p></blockquote><h2 id="注解-访问前判断权限"><a href="#注解-访问前判断权限" class="headerlink" title="注解: 访问前判断权限"></a>注解: 访问前判断权限</h2><p>在调用函数前, 判断当前登录的用户是否满足条件</p><p>配置启动注解功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>prePostEnabled = true</code>注解启动了下面三个注解</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`@PostAuthorize`、`@PostFilter`、`@PreAuthorize` 以及`@PreFilter`</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在访问前判断权限</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;) and authentication.name == &#x27;zhazha&#x27;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;authentication.name == #name&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">world</span><span class="params">(String name)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello: &quot;</span> + name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WithMockUser(roles = &quot;ADMIN&quot;, username = &quot;zhazha&quot;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> helloService.hello();</span><br><span class="line">   Assert.notNull(s);</span><br><span class="line">   Assert.equals(<span class="string">&quot;hello&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WithMockUser(username = &quot;zhazha&quot;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">world</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> helloService.world(<span class="string">&quot;zhazha&quot;</span>);</span><br><span class="line">   Assert.notNull(s);</span><br><span class="line">   Assert.equals(<span class="string">&quot;hello: zhazha&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>WithMockUser</code>需要导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="注解-函数即将调用前过滤参数"><a href="#注解-函数即将调用前过滤参数" class="headerlink" title="注解: 函数即将调用前过滤参数"></a>注解: 函数即将调用前过滤参数</h2><p>函数调用前, 参数的过滤, 过滤后不满足条件的参数将被丢弃, 不再传递到函数中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreFilter(filterTarget = &quot;users&quot;, value = &quot;filterObject.id % 2 != 0&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(List&lt;User&gt; users, Integer other)</span> &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;users = &quot;</span> + users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@WithMockUser(username = &quot;zhazha&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">()</span> &#123;</span><br><span class="line">   ArrayList&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      users.add(<span class="keyword">new</span> <span class="title class_">User</span>(Integer.toUnsignedLong(i), <span class="string">&quot;zhazha&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   helloService.addUser(users, <span class="number">99</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">users</span> = [User(<span class="built_in">id</span>=1, username=zhazha, password=123456, enabled=<span class="literal">true</span>, locked=<span class="literal">false</span>), User(<span class="built_in">id</span>=3, username=zhazha, password=123456, enabled=<span class="literal">true</span>, locked=<span class="literal">false</span>), User(<span class="built_in">id</span>=5, username=zhazha, password=123456, enabled=<span class="literal">true</span>, locked=<span class="literal">false</span>), User(<span class="built_in">id</span>=7, username=zhazha, password=123456, enabled=<span class="literal">true</span>, locked=<span class="literal">false</span>), User(<span class="built_in">id</span>=9, username=zhazha, password=123456, enabled=<span class="literal">true</span>, locked=<span class="literal">false</span>)]</span><br></pre></td></tr></table></figure><h2 id="注解-函数调用后权限判断"><a href="#注解-函数调用后权限判断" class="headerlink" title="注解: 函数调用后权限判断"></a>注解: 函数调用后权限判断</h2><p>在函数调用后, 再进行权限判断, 很少用, 主要针对ACL权限模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostAuthorize(value = &quot;returnObject.password != null and @helloService.hello().equals(&#x27;hello&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(Long id, String passowrd)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(id,<span class="string">&quot;zhazha&quot;</span>,passowrd, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里还带着函数调用: <code>@helloService.hello().equals(&#39;hello&#39;)</code></p></blockquote><p>该注解主要处理点是返回值<code>returnObject</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WithMockUser(username = &quot;zhazha&quot;, roles = &quot;ADMIN&quot;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">getUserById</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> helloService.getUserById(<span class="number">1L</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种在函数调用之后判断权限的方式使用的比较少, 在ACL权限模式可能会用得到, 平时很少</p></blockquote><h2 id="注解-函数返回值过滤"><a href="#注解-函数返回值过滤" class="headerlink" title="注解: 函数返回值过滤"></a>注解: 函数返回值过滤</h2><p>过滤函数返回值的内容, 不满足过滤条件的返回值将被丢弃, 剩下的值返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostFilter(value = &quot;filterObject.id % 2 == 0&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">   ArrayList&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      users.add(<span class="keyword">new</span> <span class="title class_">User</span>(i, <span class="string">&quot;zhazha&quot;</span> + i, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@WithMockUser(roles = &quot;ADMIN&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">   List&lt;User&gt; all = helloService.getAll();</span><br><span class="line">   Assert.notNull(all);</span><br><span class="line">   Assert.equals(<span class="number">5</span>, all.size());</span><br><span class="line">   Assert.equals(<span class="number">2L</span>, all.get(<span class="number">1</span>).getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意, 很多时候, 我们使用角色, 不需要添加 <code>ROLE_</code> 前缀, <code>springsecurity</code>会指定添加的</p></blockquote><p>后面的几个注解可以不学</p><h2 id="Secured"><a href="#Secured" class="headerlink" title="@Secured"></a><code>@Secured</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许两个角色访问</span></span><br><span class="line"><span class="comment">// 该注解不支持表达式, 很少使用, 可以不学</span></span><br><span class="line"><span class="comment">// 需要 securedEnabled = true 才能启动</span></span><br><span class="line"><span class="meta">@Secured(value = &quot;ROLE_ADMIN ROLE_USER&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUserByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">99L</span>,username,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意这里不需要添加 ROLE_ 前缀, @Secured 注解需要</span></span><br><span class="line"><span class="meta">@WithMockUser(roles = &quot;ADMIN&quot;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">getUserByUsername</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> helloService.getUserByUsername(<span class="string">&quot;zhazha&quot;</span>);</span><br><span class="line">   Assert.equals(<span class="number">99L</span>, user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐使用这种方式, 不支持表达式, 不好用</p><blockquote><p>接下来是 <code>JSR-250</code>  添加的几个注解</p></blockquote><h2 id="注解-拒绝所有人访问"><a href="#注解-拒绝所有人访问" class="headerlink" title="注解: 拒绝所有人访问"></a>注解: 拒绝所有人访问</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DenyAll</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">denyAll</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;DenyAll&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解-允许所有人访问"><a href="#注解-允许所有人访问" class="headerlink" title="注解: 允许所有人访问"></a>注解: 允许所有人访问</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PermitAll</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">permitAll</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;PermitAll&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解-固定角色允许访问"><a href="#注解-固定角色允许访问" class="headerlink" title="注解: 固定角色允许访问"></a>注解: 固定角色允许访问</h2><p>在方法和类上添加该注解, 表示固定角色才能访问</p><p>如果方法和类上都添加了该注解, 那么方法优先</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 符合的角色允许访问</span></span><br><span class="line"><span class="meta">@RolesAllowed(&#123;&quot;ADMIN&quot;, &quot;USER&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">roleAllowed</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;roleAllowed&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不需要添加 <code>ROLE_</code> 前缀</p></blockquote><blockquote><p>这个注解比较常用, 直接往类上一添加, 全部方法就都配置了</p></blockquote><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="配置的过程"><a href="#配置的过程" class="headerlink" title="配置的过程"></a>配置的过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(&#123; GlobalMethodSecuritySelector.class &#125;)</span></span><br><span class="line"><span class="meta">@EnableGlobalAuthentication</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableGlobalMethodSecurity &#123;</span><br></pre></td></tr></table></figure><p>进入<code>GlobalMethodSecuritySelector</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">   <span class="comment">// 获得注解的属性</span></span><br><span class="line">   Class&lt;EnableGlobalMethodSecurity&gt; annoType = EnableGlobalMethodSecurity.class;</span><br><span class="line">   Map&lt;String, Object&gt; annotationAttributes = importingClassMetadata.getAnnotationAttributes(annoType.getName(),</span><br><span class="line">         <span class="literal">false</span>);</span><br><span class="line">   <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> AnnotationAttributes.fromMap(annotationAttributes);</span><br><span class="line">   Assert.notNull(attributes, () -&gt; String.format(<span class="string">&quot;@%s is not present on importing class &#x27;%s&#x27; as expected&quot;</span>,</span><br><span class="line">         annoType.getSimpleName(), importingClassMetadata.getClassName()));</span><br><span class="line">   <span class="comment">// 获得配置类的 Class</span></span><br><span class="line">   Class&lt;?&gt; importingClass = ClassUtils.resolveClassName(importingClassMetadata.getClassName(),</span><br><span class="line">         ClassUtils.getDefaultClassLoader());</span><br><span class="line">   <span class="type">boolean</span> <span class="variable">skipMethodSecurityConfiguration</span> <span class="operator">=</span> GlobalMethodSecurityConfiguration.class</span><br><span class="line">         .isAssignableFrom(importingClass);</span><br><span class="line">   <span class="type">AdviceMode</span> <span class="variable">mode</span> <span class="operator">=</span> attributes.getEnum(<span class="string">&quot;mode&quot;</span>);</span><br><span class="line">   <span class="type">boolean</span> <span class="variable">isProxy</span> <span class="operator">=</span> AdviceMode.PROXY == mode;</span><br><span class="line">   <span class="type">String</span> <span class="variable">autoProxyClassName</span> <span class="operator">=</span> isProxy ? AutoProxyRegistrar.class.getName()</span><br><span class="line">         : GlobalMethodSecurityAspectJAutoProxyRegistrar.class.getName();</span><br><span class="line">   <span class="comment">// 读取 jsr250 属性的值, 这里我们配置了 为 jsr250Enabled = true</span></span><br><span class="line">   <span class="type">boolean</span> <span class="variable">jsr250Enabled</span> <span class="operator">=</span> attributes.getBoolean(<span class="string">&quot;jsr250Enabled&quot;</span>);</span><br><span class="line">   List&lt;String&gt; classNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">   <span class="keyword">if</span> (isProxy) &#123;</span><br><span class="line">      classNames.add(MethodSecurityMetadataSourceAdvisorRegistrar.class.getName());</span><br><span class="line">   &#125;</span><br><span class="line">   classNames.add(autoProxyClassName);</span><br><span class="line">   <span class="keyword">if</span> (!skipMethodSecurityConfiguration) &#123;</span><br><span class="line">      classNames.add(GlobalMethodSecurityConfiguration.class.getName());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (jsr250Enabled) &#123;</span><br><span class="line">      classNames.add(Jsr250MetadataSourceConfiguration.class.getName());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> classNames.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码导入了四个类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MethodSecurityMetadataSourceAdvisorRegistrar</span><br><span class="line">org.springframework.context.annotation.AutoProxyRegistrar</span><br><span class="line">GlobalMethodSecurityConfiguration</span><br><span class="line">Jsr250MetadataSourceConfiguration</span><br></pre></td></tr></table></figure><p>这四个中, 后面两个是配置类, 第一个是整理后面两个配置类中 Bean 的类</p><p>现在我们看配置类</p><p>这个类算是核心配置类吧</p><p><code>GlobalMethodSecurityConfiguration</code></p><p>首先我们分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Role(BeanDefinition.ROLE_INFRASTRUCTURE)</span></span><br><span class="line"><span class="keyword">public</span> MethodSecurityMetadataSource <span class="title function_">methodSecurityMetadataSource</span><span class="params">()</span> &#123;</span><br><span class="line">   List&lt;MethodSecurityMetadataSource&gt; sources = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   <span class="type">ExpressionBasedAnnotationAttributeFactory</span> <span class="variable">attributeFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExpressionBasedAnnotationAttributeFactory</span>(</span><br><span class="line">         getExpressionHandler());</span><br><span class="line">   <span class="comment">// 拿到我们自定义的MethodSecurityMetadataSource接口, 这个接口返回 Collection&lt;ConfigAttribute&gt; 属性, 也即是我们的权限, 但是这里我们没有自定义</span></span><br><span class="line">   <span class="type">MethodSecurityMetadataSource</span> <span class="variable">customMethodSecurityMetadataSource</span> <span class="operator">=</span> customMethodSecurityMetadataSource();</span><br><span class="line">   <span class="keyword">if</span> (customMethodSecurityMetadataSource != <span class="literal">null</span>) &#123;</span><br><span class="line">      sources.add(customMethodSecurityMetadataSource);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 获取我们注解的配置, 这里获得的三个配置 true</span></span><br><span class="line">   <span class="type">boolean</span> <span class="variable">isPrePostEnabled</span> <span class="operator">=</span> prePostEnabled();</span><br><span class="line">   <span class="type">boolean</span> <span class="variable">isSecuredEnabled</span> <span class="operator">=</span> securedEnabled();</span><br><span class="line">   <span class="type">boolean</span> <span class="variable">isJsr250Enabled</span> <span class="operator">=</span> jsr250Enabled();</span><br><span class="line">   <span class="keyword">if</span> (isPrePostEnabled) &#123;</span><br><span class="line">      <span class="comment">// 配置前后置注解功能</span></span><br><span class="line">      <span class="comment">// 读取注解内的表达式</span></span><br><span class="line">      <span class="comment">// 这里读取的是这种PreFilter, PreAuthorize, PostFilter和PostAuthorize注解的内容</span></span><br><span class="line">      sources.add(<span class="keyword">new</span> <span class="title class_">PrePostAnnotationSecurityMetadataSource</span>(attributeFactory));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (isSecuredEnabled) &#123;</span><br><span class="line">      <span class="comment">// Secured 注解</span></span><br><span class="line">      sources.add(<span class="keyword">new</span> <span class="title class_">SecuredAnnotationSecurityMetadataSource</span>());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (isJsr250Enabled) &#123;</span><br><span class="line">      <span class="type">GrantedAuthorityDefaults</span> <span class="variable">grantedAuthorityDefaults</span> <span class="operator">=</span> getSingleBeanOrNull(GrantedAuthorityDefaults.class);</span><br><span class="line">      <span class="comment">// Jsr250MethodSecurityMetadataSource注解内容读取</span></span><br><span class="line">      <span class="comment">// Jsr250MetadataSourceConfiguration 这个配置类的Bean 在这里被读取了</span></span><br><span class="line">      <span class="type">Jsr250MethodSecurityMetadataSource</span> <span class="variable">jsr250MethodSecurityMetadataSource</span> <span class="operator">=</span> <span class="built_in">this</span>.context</span><br><span class="line">            .getBean(Jsr250MethodSecurityMetadataSource.class);</span><br><span class="line">      <span class="keyword">if</span> (grantedAuthorityDefaults != <span class="literal">null</span>) &#123;</span><br><span class="line">         jsr250MethodSecurityMetadataSource.setDefaultRolePrefix(grantedAuthorityDefaults.getRolePrefix());</span><br><span class="line">      &#125;</span><br><span class="line">      sources.add(jsr250MethodSecurityMetadataSource);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 把上面存储的几个注解内容读取器保存到委托读取器中, 里面存储了三个读取器了</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DelegatingMethodSecurityMetadataSource</span>(sources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从下图可以看的出来, 为什么<code>jsr-250</code>的注解不需要添加 <code>ROLE_</code> 前缀了</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212042208639.png" alt="image-20221204220855507"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212042210282.png" alt="image-20221204221022167"></p></blockquote><p><code>PrePostAnnotationSecurityMetadataSource</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title function_">getAttributes</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">      <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">PreFilter</span> <span class="variable">preFilter</span> <span class="operator">=</span> findAnnotation(method, targetClass, PreFilter.class);</span><br><span class="line">   <span class="type">PreAuthorize</span> <span class="variable">preAuthorize</span> <span class="operator">=</span> findAnnotation(method, targetClass, PreAuthorize.class);</span><br><span class="line">   <span class="type">PostFilter</span> <span class="variable">postFilter</span> <span class="operator">=</span> findAnnotation(method, targetClass, PostFilter.class);</span><br><span class="line">   <span class="comment">// <span class="doctag">TODO:</span> Can we check for void methods and throw an exception here?</span></span><br><span class="line">   <span class="type">PostAuthorize</span> <span class="variable">postAuthorize</span> <span class="operator">=</span> findAnnotation(method, targetClass, PostAuthorize.class);</span><br><span class="line">   <span class="keyword">if</span> (preFilter == <span class="literal">null</span> &amp;&amp; preAuthorize == <span class="literal">null</span> &amp;&amp; postFilter == <span class="literal">null</span> &amp;&amp; postAuthorize == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// There is no meta-data so return</span></span><br><span class="line">      <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">String</span> <span class="variable">preFilterAttribute</span> <span class="operator">=</span> (preFilter != <span class="literal">null</span>) ? preFilter.value() : <span class="literal">null</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">filterObject</span> <span class="operator">=</span> (preFilter != <span class="literal">null</span>) ? preFilter.filterTarget() : <span class="literal">null</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">preAuthorizeAttribute</span> <span class="operator">=</span> (preAuthorize != <span class="literal">null</span>) ? preAuthorize.value() : <span class="literal">null</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">postFilterAttribute</span> <span class="operator">=</span> (postFilter != <span class="literal">null</span>) ? postFilter.value() : <span class="literal">null</span>;</span><br><span class="line">   <span class="type">String</span> <span class="variable">postAuthorizeAttribute</span> <span class="operator">=</span> (postAuthorize != <span class="literal">null</span>) ? postAuthorize.value() : <span class="literal">null</span>;</span><br><span class="line">   ArrayList&lt;ConfigAttribute&gt; attrs = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">   <span class="type">PreInvocationAttribute</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="built_in">this</span>.attributeFactory.createPreInvocationAttribute(preFilterAttribute,</span><br><span class="line">         filterObject, preAuthorizeAttribute);</span><br><span class="line">   <span class="keyword">if</span> (pre != <span class="literal">null</span>) &#123;</span><br><span class="line">      attrs.add(pre);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">PostInvocationAttribute</span> <span class="variable">post</span> <span class="operator">=</span> <span class="built_in">this</span>.attributeFactory.createPostInvocationAttribute(postFilterAttribute,</span><br><span class="line">         postAuthorizeAttribute);</span><br><span class="line">   <span class="keyword">if</span> (post != <span class="literal">null</span>) &#123;</span><br><span class="line">      attrs.add(post);</span><br><span class="line">   &#125;</span><br><span class="line">   attrs.trimToSize();</span><br><span class="line">   <span class="keyword">return</span> attrs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="识别注解过程"><a href="#识别注解过程" class="headerlink" title="识别注解过程"></a>识别注解过程</h2><p>核心类是: <code>MethodSecurityInterceptor</code></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212041625598.png" alt="image-20221204162455597"></p><p>核心代码是这段:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">   <span class="type">InterceptorStatusToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="built_in">super</span>.beforeInvocation(mi);</span><br><span class="line">   Object result;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      result = mi.proceed();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.finallyInvocation(token);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">super</span>.afterInvocation(token, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个存储数据的对象<code>InterceptorStatusToken</code>, 很熟悉, 在前面分析 URL 为颗粒 方式中也是使用的这个对象, 存储了好几个数据</p><blockquote><p>可以回到上面找下 流程图 , 里面有介绍</p></blockquote><p>调用前, 调用后, 清除 三个步骤</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212041712589.png" alt="image-20221204171215462"></p><p>所以对这个函数下条件断点: <code>method.getName().equals(&quot;hello&quot;)</code></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212042233145.png" alt="image-20221204223358962"></p><p>三种类型的注解处理类:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212042234733.png" alt="image-20221204223446610"></p><p>进而分析上面三个方法的功能:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212042237283.png" alt="image-20221204223704129"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212042244282.png" alt="image-20221204224451148"></p><p>我们只添加了两个注解:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212042245441.png" alt="image-20221204224539224"></p><p>在方法上我们也只添加了一个注解</p><p>返回回到上级函数<code>PrePostAnnotationSecurityMetadataSource#getAttributes</code></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212042246353.png" alt="image-20221204224645243"></p><p>明显这里我们能够拿到对应的注解</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212042247262.png" alt="image-20221204224758103"></p><p>而且是个代理对象</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212042248747.png" alt="image-20221204224851642"></p><blockquote><p>除了<code>PreAuthorize</code>能够拿到注解外, 其他注解都能不到 等于 <code>null</code></p></blockquote><p>紧接着就是拿到注解的属性了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">preFilterAttribute</span> <span class="operator">=</span> (preFilter != <span class="literal">null</span>) ? preFilter.value() : <span class="literal">null</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">filterObject</span> <span class="operator">=</span> (preFilter != <span class="literal">null</span>) ? preFilter.filterTarget() : <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.METHOD, ElementType.TYPE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PreFilter &#123;</span><br><span class="line">   <span class="comment">// 这是定位后对参数的PreFilter功能</span></span><br><span class="line">   String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">   <span class="comment">// 这是定位参数</span></span><br><span class="line">   String <span class="title function_">filterTarget</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里拿到了表达式</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212042252909.png" alt="image-20221204225259797"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212042255773.png" alt="image-20221204225552611"></p><p>上面这两个方法的内容在这里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PreInvocationAttribute <span class="title function_">createPreInvocationAttribute</span><span class="params">(String preFilterAttribute, String filterObject,</span></span><br><span class="line"><span class="params">      String preAuthorizeAttribute)</span> &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> Optimization of permitAll</span></span><br><span class="line">      <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> getParser();</span><br><span class="line">      <span class="type">Expression</span> <span class="variable">preAuthorizeExpression</span> <span class="operator">=</span> (preAuthorizeAttribute != <span class="literal">null</span>)</span><br><span class="line">            ? parser.parseExpression(preAuthorizeAttribute) : parser.parseExpression(<span class="string">&quot;permitAll&quot;</span>);</span><br><span class="line">      <span class="type">Expression</span> <span class="variable">preFilterExpression</span> <span class="operator">=</span> (preFilterAttribute != <span class="literal">null</span>) ? parser.parseExpression(preFilterAttribute)</span><br><span class="line">            : <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PreInvocationExpressionAttribute</span>(preFilterExpression, filterObject, preAuthorizeExpression);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ParseException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Failed to parse expression &#x27;&quot;</span> + ex.getExpressionString() + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PostInvocationAttribute <span class="title function_">createPostInvocationAttribute</span><span class="params">(String postFilterAttribute,</span></span><br><span class="line"><span class="params">      String postAuthorizeAttribute)</span> &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> getParser();</span><br><span class="line">      <span class="type">Expression</span> <span class="variable">postAuthorizeExpression</span> <span class="operator">=</span> (postAuthorizeAttribute != <span class="literal">null</span>)</span><br><span class="line">            ? parser.parseExpression(postAuthorizeAttribute) : <span class="literal">null</span>;</span><br><span class="line">      <span class="type">Expression</span> <span class="variable">postFilterExpression</span> <span class="operator">=</span> (postFilterAttribute != <span class="literal">null</span>)</span><br><span class="line">            ? parser.parseExpression(postFilterAttribute) : <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (postFilterExpression != <span class="literal">null</span> || postAuthorizeExpression != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PostInvocationExpressionAttribute</span>(postFilterExpression, postAuthorizeExpression);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ParseException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Failed to parse expression &#x27;&quot;</span> + ex.getExpressionString() + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Expression</span> <span class="variable">preAuthorizeExpression</span> <span class="operator">=</span> (preAuthorizeAttribute != <span class="literal">null</span>)</span><br><span class="line">      ? parser.parseExpression(preAuthorizeAttribute) : parser.parseExpression(<span class="string">&quot;permitAll&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果<code>preAuthorizeAttribute</code>*(也就是注解的内容)不为空, 则执行<code>parser.parseExpression(preAuthorizeAttribute)</code>, 否则执行<code>parser.parseExpression(&quot;permitAll&quot;)</code>(也就是允许所有人访问)</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212042322747.png" alt="image-20221204232201637"></p><p>上面这个<code>attrs</code>的集合从 2 个变成 1 个</p><p>因为只有一个有值, 另一个为 <code>null</code></p><p>至此这个方法<code>PrePostAnnotationSecurityMetadataSource#getAttributes</code> 基本分析完毕了</p><p>现在分析这个段源码:</p><p><code>GlobalMethodSecurityConfiguration#methodSecurityInterceptor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MethodInterceptor <span class="title function_">methodSecurityInterceptor</span><span class="params">(MethodSecurityMetadataSource methodSecurityMetadataSource)</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.methodSecurityInterceptor = isAspectJ() ? <span class="keyword">new</span> <span class="title class_">AspectJMethodSecurityInterceptor</span>()</span><br><span class="line">         : <span class="keyword">new</span> <span class="title class_">MethodSecurityInterceptor</span>();</span><br><span class="line">   <span class="built_in">this</span>.methodSecurityInterceptor.setAccessDecisionManager(accessDecisionManager());</span><br><span class="line">   <span class="built_in">this</span>.methodSecurityInterceptor.setAfterInvocationManager(afterInvocationManager());</span><br><span class="line">   <span class="built_in">this</span>.methodSecurityInterceptor.setSecurityMetadataSource(methodSecurityMetadataSource);</span><br><span class="line">   <span class="type">RunAsManager</span> <span class="variable">runAsManager</span> <span class="operator">=</span> runAsManager();</span><br><span class="line">   <span class="keyword">if</span> (runAsManager != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.methodSecurityInterceptor.setRunAsManager(runAsManager);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">this</span>.methodSecurityInterceptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段源码算是比较核心的代码了, 学习完这段代码, 我们能够自定义Spring Security权限管理</p><p>首先第一行就有个核心变量: </p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212042331674.png" alt="image-20221204233110545"></p><p><code>MethodSecurityInterceptor</code>这个类可熟悉了</p><p>接着是这段代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.methodSecurityInterceptor.setAccessDecisionManager(accessDecisionManager());</span><br></pre></td></tr></table></figure><p><code>accessDecisionManager</code>这个不就是决策器么?</p><p>也就是这段代码最终会创建一个决策器并返回结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> AccessDecisionManager <span class="title function_">accessDecisionManager</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="comment">// 创建投票器集合</span></span><br><span class="line">   List&lt;AccessDecisionVoter&lt;?&gt;&gt; decisionVoters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   <span class="comment">// 获得@EnableGlobalMethodSecurity注解上的 prePostEnabled = true 属性的值</span></span><br><span class="line">   <span class="keyword">if</span> (prePostEnabled()) &#123;</span><br><span class="line">      <span class="comment">// 这里相当于AOP 的前置调用配置</span></span><br><span class="line">      <span class="type">ExpressionBasedPreInvocationAdvice</span> <span class="variable">expressionAdvice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExpressionBasedPreInvocationAdvice</span>();</span><br><span class="line">      <span class="comment">// 这里set了一个MethodSecurityExpressionHandler接口的实现类, 该接口有两个函数</span></span><br><span class="line">      <span class="comment">// filter: 只有表达式匹配函数后, 才会过滤目标集合或数据</span></span><br><span class="line">      <span class="comment">// setReturnObject: 用于通知给定评估上下文的返回对象的表达式系统。仅适用于方法调用。</span></span><br><span class="line">      expressionAdvice.setExpressionHandler(getExpressionHandler());</span><br><span class="line">      <span class="comment">// 创建一个投票器, 该投票器最终会根据传入的参数, 进行调用</span></span><br><span class="line">      decisionVoters.add(<span class="keyword">new</span> <span class="title class_">PreInvocationAuthorizationAdviceVoter</span>(expressionAdvice));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 紧接着又添加了 jsr 注解的投票器</span></span><br><span class="line">   <span class="keyword">if</span> (jsr250Enabled()) &#123;</span><br><span class="line">      decisionVoters.add(<span class="keyword">new</span> <span class="title class_">Jsr250Voter</span>());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 创建角色投票器, 主要还是针对 ROLE_ 开头</span></span><br><span class="line">   <span class="type">RoleVoter</span> <span class="variable">roleVoter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleVoter</span>();</span><br><span class="line">   <span class="type">GrantedAuthorityDefaults</span> <span class="variable">grantedAuthorityDefaults</span> <span class="operator">=</span> getSingleBeanOrNull(GrantedAuthorityDefaults.class);</span><br><span class="line">   <span class="keyword">if</span> (grantedAuthorityDefaults != <span class="literal">null</span>) &#123;</span><br><span class="line">      roleVoter.setRolePrefix(grantedAuthorityDefaults.getRolePrefix());</span><br><span class="line">   &#125;</span><br><span class="line">   decisionVoters.add(roleVoter);</span><br><span class="line">   <span class="comment">// 最后再来个认证投票器</span></span><br><span class="line">   decisionVoters.add(<span class="keyword">new</span> <span class="title class_">AuthenticatedVoter</span>());</span><br><span class="line">   <span class="comment">// 返回默认的决策器</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AffirmativeBased</span>(decisionVoters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一小段分析完毕</p><blockquote><p>大体上分析了, 剩下的懒得分析</p></blockquote><p>配置了这么多功能, 最终还是要走决策器 投票器 那个流程</p><p><code>MethodSecurityInterceptor#invoke</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">   <span class="type">InterceptorStatusToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="built_in">super</span>.beforeInvocation(mi);</span><br><span class="line">   Object result;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      result = mi.proceed();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.finallyInvocation(token);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">super</span>.afterInvocation(token, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只不过这里的投票器拿到的是</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202212050014214.png" alt="image-20221205001409075"></p><p>最后在这里进行比较:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExpressionBasedPreInvocationAdvice</span> <span class="keyword">implements</span> <span class="title class_">PreInvocationAuthorizationAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="type">MethodSecurityExpressionHandler</span> <span class="variable">expressionHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMethodSecurityExpressionHandler</span>();</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">before</span><span class="params">(Authentication authentication, MethodInvocation mi, PreInvocationAttribute attr)</span> &#123;</span><br><span class="line">      <span class="type">PreInvocationExpressionAttribute</span> <span class="variable">preAttr</span> <span class="operator">=</span> (PreInvocationExpressionAttribute) attr;</span><br><span class="line">      <span class="type">EvaluationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="built_in">this</span>.expressionHandler.createEvaluationContext(authentication, mi);</span><br><span class="line">      <span class="type">Expression</span> <span class="variable">preFilter</span> <span class="operator">=</span> preAttr.getFilterExpression();</span><br><span class="line">      <span class="type">Expression</span> <span class="variable">preAuthorize</span> <span class="operator">=</span> preAttr.getAuthorizeExpression();</span><br><span class="line">      <span class="keyword">if</span> (preFilter != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="type">Object</span> <span class="variable">filterTarget</span> <span class="operator">=</span> findFilterTarget(preAttr.getFilterTarget(), ctx, mi);</span><br><span class="line">         <span class="built_in">this</span>.expressionHandler.filter(filterTarget, preFilter, ctx);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 返回 true 完事</span></span><br><span class="line">      <span class="keyword">return</span> (preAuthorize != <span class="literal">null</span>) ? ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx) : <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面的代码就不再分析了, 腻了</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤器 </tag>
            
            <tag> 鉴权 </tag>
            
            <tag> 授权 </tag>
            
            <tag> 权限 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 权限管理 </tag>
            
            <tag> 注解 </tag>
            
            <tag> 基于函数 </tag>
            
            <tag> 基于注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24SpringSecurity-权限管理</title>
      <link href="/2022/11/29/02springcloud/24SpringSecurity-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2022/11/29/02springcloud/24SpringSecurity-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是权限管理"><a href="#什么是权限管理" class="headerlink" title="什么是权限管理?"></a>什么是权限管理?</h1><p>权限管理就是配置 某个用户, 拥有什么权限, 可以访问什么资源, 这整个过程都需要管理</p><h1 id="Spring-Security权限管理策略"><a href="#Spring-Security权限管理策略" class="headerlink" title="Spring Security权限管理策略"></a>Spring Security权限管理策略</h1><p>从技术上来说，Spring Security中提供的权限管理功能主要有两种类型:</p><ul><li>基于过滤器的权限管理(<code>FilterSecurityInterceptor</code> )。</li><li>基于<code>AOP</code>的权限管理(<code>MethodSecurityInterceptor</code> )。</li></ul><p>基于<strong>过滤器的权限管理</strong>主要用来拦截<code>HTTP</code> 请求，拦截下来之后，<strong>根据<code>HTTP</code>请求地址进行权限校验。</strong><br>基于**<code>AOP</code>的权限管理<strong>则主要用来处理</strong>方法级别的权限问题**。当需要调用某一个方法时，通过<code>AOP</code>将操作拦截下来，然后判断用户是否具备相关的权限，如果具备，则允许方法调用，否则禁止方法调用。<br>本章接下来的介绍都是基于这两种权限管理方式展开的。</p><h1 id="权限管理核心概念"><a href="#权限管理核心概念" class="headerlink" title="权限管理核心概念"></a>权限管理核心概念</h1><h2 id="角色和权限"><a href="#角色和权限" class="headerlink" title="角色和权限"></a>角色和权限</h2><p>用户登录成功, 用户的信息都保存在 Authentication 变量中, 而获得用户的权限都需要调用该类的<code>Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</code>函数, 不管你前面使用的是 <code>Http Basic认证</code>还是 <code>Http Digest认证</code>还是 <code>form 表单方式认证</code>, 鉴权都需要调用到上面的那个函数</p><blockquote><p>无论何种方式认证, 都不影响鉴权</p></blockquote><p>那么上面的 <code>getAuthorities</code>函数拿到的集合到底是角色还是权限呢?</p><p>从设计成层面看, 角色是一个权限集, 拥有对于某个个体的 <strong>增 删 改 查</strong> 中的某些权限(角色 一对多 权限)</p><p>但同时用一个权限也可能同时存在于多个角色中, 所以就变成了 <strong>角色 多对多 权限</strong></p><p>在代码层面, 角色和权限没什么区别, 所以在 Spring Security 中, 角色还被特意加上了 ROLE_ 前缀, 跟权限做了区分, 但是在处理上, 他们是相同的, 没有任何的区别</p><p>至于在 <code>Authentication</code>的<code>getAuthorities</code>方法怎么区分角色和权限呢?</p><p>需要看具体情况而论</p><ol><li><p>如果 用户 &lt;&#x3D;&gt; 权限 &lt;&#x3D;&gt; 资源 , 那么该方法就返回 权限</p></li><li><p>如果权限系统设计的比较复杂, 用户 &lt;&#x3D;&gt; 角色 &lt;&#x3D;&gt; 权限 &lt;&#x3D;&gt; 资源 , 那么该方法还是返回的权限, 只不过, 此时需要自定义 角色对象</p><blockquote><p>废话, <code>getAuthorities</code> 就英文单词而言就是权限</p></blockquote></li></ol><p>在 Spring Security中, 只有权限, 没有角色, 权限和角色只不过是一个字符串而已, Spring Security为了区分角色和权限, 在角色前面加上 <code>ROLE_</code>做区分</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211301908694.png" alt="image-20221130190835611"></p><p>所以你同时调用 </p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211301909520.png" alt="image-20221130190912455"></p><p>后面的<code>authorities</code>将会替换掉前面的<code>roles</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> User.withUsername(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">         .password(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">         .roles(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">         .authorities(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">         .build();</span><br><span class="line">   System.out.println(userDetails);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印出来的结果是:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.security.core.userdetails.User [Username=root, Password=[PROTECTED], Enabled=<span class="literal">true</span>, AccountNonExpired=<span class="literal">true</span>, credentialsNonExpired=<span class="literal">true</span>, AccountNonLocked=<span class="literal">true</span>, Granted Authorities=[admin]]</span><br></pre></td></tr></table></figure><p><code>admin</code> 是小写的, 而不是大写的</p><p>调换下顺序, </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> User.withUsername(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">         .password(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">         .authorities(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">         .roles(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">         .build();</span><br><span class="line">   System.out.println(userDetails);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果又变成这样:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.security.core.userdetails.User [Username=root, Password=[PROTECTED], Enabled=<span class="literal">true</span>, AccountNonExpired=<span class="literal">true</span>, credentialsNonExpired=<span class="literal">true</span>, AccountNonLocked=<span class="literal">true</span>, Granted Authorities=[ROLE_ADMIN]]</span><br></pre></td></tr></table></figure><p>大写的, 还给你添加上了 <code>ROLE_</code>前缀</p><p>所以由于没有角色这个概念, 所以你在比较复杂的环境下 <code>用户 &lt;=&gt; 角色 &lt;=&gt; 权限 &lt;=&gt; 资源</code></p><p>你需要主动去创建角色对象</p><p>一个角色拥有多个权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> <span class="keyword">implements</span> <span class="title class_">GrantedAuthority</span> &#123;</span><br><span class="line">   <span class="comment">// 这是角色名</span></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="comment">// 这是权限, 多个权限</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;SimpleGrantedAuthority&gt; allowedOperations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 获得角色名</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getAuthority</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个用户拥有多个角色, 一个角色拥有多个权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">   <span class="comment">// 一个用户多个角色</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;Role&gt; roles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 一个角色多个权限</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">      ArrayList&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      <span class="keyword">for</span> (Role role : roles) &#123;</span><br><span class="line">         authorities.addAll(role.getAllowedOperations());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> authorities.stream().distinct().collect(Collectors.toList());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="角色继承"><a href="#角色继承" class="headerlink" title="角色继承"></a>角色继承</h2><p>角色是可以继承的, 比如 老师角色可以被班主任角色继承</p><p>Spring Security中通过<code>RoleHierarchy</code>接口实现角色继承功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleHierarchy</span> &#123;</span><br><span class="line">   Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getReachableGrantedAuthorities(</span><br><span class="line">         Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RoleHierarchy</code>中只有一个<code>getReachableGrantedAuthorities</code>方法，该方法返回用户真正“可触达”的权限。举个简单例子，假设用户定义了<code>ROLE_ADMIN</code>继承自 <code>ROLE_USER</code>，<code>ROLE_USER</code>继承自<code>ROLE_GUEST</code>，现在当前用户角色是<code>ROLE_ADMIN</code>，但是它实际可访问的资源也包含<code>ROLE_USER</code>和<code>ROLE_GUEST</code>能访问的资源.<code>getReachableGrantedAuthorities</code>方法就是根据当前用户所具有的角色，从角色层级映射中解析出用户真正“可触达”的权限。</p><p><code>RoleHierarchy</code>只有一个实现类<code>RoleHierarchyImpl</code>，开发者一般通过<code>RoleHierarchyImpl</code>类来定义角色的层级关系,如下面代码表示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">roleHierarchy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RoleHierarchyImpl</span> <span class="variable">roleHierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">    roleHierarchy.setHierarchy(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_USER &gt; ROLE_GUEST&quot;</span>);</span><br><span class="line">    System.err.println(roleHierarchy.getReachableGrantedAuthorities(List.of(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_USER&quot;</span>)))); <span class="comment">// [ROLE_USER, ROLE_GUEST]</span></span><br><span class="line">    System.err.println(roleHierarchy.getReachableGrantedAuthorities(List.of(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_GUEST&quot;</span>)))); <span class="comment">// [ROLE_GUEST]</span></span><br><span class="line">    System.err.println(roleHierarchy.getReachableGrantedAuthorities(List.of(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_ADMIN&quot;</span>)))); <span class="comment">// [ROLE_USER, ROLE_GUEST, ROLE_ADMIN]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说白了, 就是一个分组对象</p><p>在项目中一般这么用?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleConfig</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> RoleHierarchy <span class="title function_">roleHierarchy</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">RoleHierarchyImpl</span> <span class="variable">roleHierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">      roleHierarchy.setHierarchy(<span class="string">&quot;ROLE_ADMIN &gt; ROLE_USER &gt; ROLE_GUEST&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> roleHierarchy;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我感觉也不是很方便的样子</p><h2 id="两种处理器"><a href="#两种处理器" class="headerlink" title="两种处理器"></a>两种处理器</h2><p>前面我们讲了，Spring Security中提供的权限管理功能主要有两种类型:</p><p>基于过滤器的权限管理(<code>FilterSecurityInterceptor</code>）和基于<code>AOP</code>的权限管理(<code>MethodSecurityInterceptor</code>)。</p><p>无论是哪种，都涉及一个前置处理器和后置处理器。</p><p>在基于过滤器的权限管理中，请求首先到达过滤器<code>FilterSecurityInterceptor</code>，在其执行过程中，首先会由前置处理器去判断发起当前请求的用户是否具备相应的权限，如果具备，则请求继续向下走，到达目标方法并执行完毕。在响应时，又会经过 <code>FilterSecurityInterceptor</code>过滤</p><p>器，此时由后置处理器再去完成其他收尾工作。在基于过滤器的权限管理中，后置处理器一般是不工作的。这也很好理解，因为基于过滤器的权限管理，实际上就是拦截请求<code>URL</code>地址，这种权限管理方式粒度较粗，而且过滤器中拿到的是响应的<code>HttpServletResponse</code>对象，对其所返回的数据做二次处理并不方便。</p><p>在基于方法的权限管理中，目标方法的调用会被 <code>MethodSecurityInterceptor</code>拦截下来，实现原理当然就是大家所熟知的<code>AOP</code>机制。当目标方法的调用被<code>MethodSecurityInterceptor</code>拦截下之后，在其<code>invoke</code>方法中首先会由前置处理器去判断当前用户是否具备调用目标方法所需要的权限，如果具备，则继续执行目标方法。当目标方法执行完毕并给出返回结果后，在<code>MethodSecurityInterceptor#invoke</code>方法中，由后置处理器再去对目标方法的返回结果进行过滤或者鉴权，然后在<code>invoke</code>方法中将处理后的结果返回。<br>可以看到，无论是基于过滤器的权限管理还是基于方法的权限管理，前置处理器都是重中之重，两者都会用到。而后置处理器则只是在基于方法的权限管理中会用到。</p><h3 id="前置处理器"><a href="#前置处理器" class="headerlink" title="前置处理器"></a>前置处理器</h3><h4 id="投票器"><a href="#投票器" class="headerlink" title="投票器"></a>投票器</h4><p>用于判断 <code>url</code>请求或者方法 是否有权限</p><p>如下图所示就是授权的简单过程: </p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211302026598.png" alt="授权过程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccessDecisionVoter</span>&lt;S&gt; &#123;</span><br><span class="line">   <span class="comment">// 通过</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">ACCESS_GRANTED</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">   <span class="comment">// 弃权</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">ACCESS_ABSTAIN</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="comment">// 拒绝</span></span><br><span class="line">   <span class="type">int</span> <span class="variable">ACCESS_DENIED</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">   <span class="comment">// 是否处理ConfigAttribute</span></span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(ConfigAttribute attribute)</span>;</span><br><span class="line">   <span class="comment">// 是否支持处理受保护的对象</span></span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span>;</span><br><span class="line">   <span class="comment">// 获取用户持有的权限</span></span><br><span class="line">   <span class="comment">// 受保护的对象, 可以是 url(FilterInvocation) 也可以是 方法(MethodInvocation)</span></span><br><span class="line">   <span class="comment">// 访问受保护对象所需的权限</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">vote</span><span class="params">(Authentication authentication, S object, Collection&lt;ConfigAttribute&gt; attributes)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211302034353.png" alt="image-20221130203443286"></p><ul><li><code>RoleVoter</code>: <code>RoleVoter</code>是根据登录主体的角色进行投票，即判断当前用户是否具备受保护对象所需要的角色。需要注意的是，默认情况下角色需以“<code>ROLE_</code>”开始，否则 <code>supports</code>方法直接返回<code>false</code>，不进行后续的投票操作。</li><li><code>RoleHierarchyVoter</code>: <code>RoleHierarchyVoter</code>继承自<code>RoleVoter</code>，投票逻辑和<code>RoleVoter</code>一致，不同的是<code>RoleHierarchyVoter</code>支持角色的继承，它通过<code>RoleHierarchylmpl</code>对象对用户所具有的角色进行解析，获取用户真正“可触达”的角色;而 <code>RoleVoter</code>则直接调用<code>authentication.getAuthorities()</code>方法获取用户的角色。</li><li><code>WebExpressionVoter</code>:基于URL地址进行权限控制时的投票器（支持<code>SpEL</code>)。</li><li><code>Jsr250Voter</code>:处理<code>JSR-250</code>权限注解的投票器，如<code>@PermitAll</code>、<code>@DenyAll</code>等。</li><li><code>AuthenticatedVoter</code>: <code>AuthenticatedVoter</code>用于判断当前用户的认证形式，它有三种取值:<code>IS_AUTHENTICATED_FULLY</code> 、<code>IS_AUTHENTICATED_REMEMBERED</code>以及<code>IS_AUTHENTICATED_ANONYMOUSLY</code>。其中:<code>IS_AUTHENTICATED_FULLY</code> 要求当前用户既不是匿名用户也不是通过<code>RememberMe</code>进行认证 ;<code>IS_AUTHENTICATED_REMEMBERED</code>则在前者的基础上,允许用户通过<code>RememberMe</code>进行认证;<code>IS_AUTHENTICATED_ANONYMOUSLY</code>则允许当前用户通过<code>RememberMe</code>认证，也允许当前用户是匿名用户。</li><li><code>AbstractAclVoter</code>:基于<code>ACL</code>进行权限控制时的投票器。这是一个抽象类，没有绑定到具体的<code>ACL</code>系统(关于<code>ACL</code>，后面会做详细介绍)）。</li><li><code>AclEntryVoter</code>: <code>AcIEntryVoter</code>继承自<code>AbstractAclVoter</code>，基于<code>Spring Security</code>提供的<code>ACL</code>权限系统的投票器。</li><li><code>PreInvocationAuthorizationAdviceVoter</code>: 处理<code>@PreFilter</code>和<code>@PreAuthorize</code>注解的投票器。</li></ul><blockquote><p>投票结果并非最终结果(通过或拒绝),最终结果还要看决策器(<code>AccessDecisionManager</code>)。</p></blockquote><h4 id="决策器"><a href="#决策器" class="headerlink" title="决策器"></a>决策器</h4><p>决策器由<code>AccessDecisionManager</code>负责，<code>AccessDecisionManager</code> 会同时管理多个投票器，由<code>AccessDecisionManager</code>调用投票器进行投票，然后根据投票结果做出相应的决策，所以我们将<code>AccessDecisionManager</code>也称作是一个决策管理器。我们来看一下它的源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccessDecisionManager</span> &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">decide</span><span class="params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span></span><br><span class="line">         <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(ConfigAttribute attribute)</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>decide</code>方法: 是核心的决策方法,在这个方法中判断是否允许当前URL或者方法的调用，如果不允许，则会抛出<code>AccessDeniedException</code>异常。</li><li><code>supports(ConfigAttribute)</code>方法: 用来判断是否支持处理<code>ConfigAttribute</code>对象。</li><li><code>supports(Class)</code>方法: 用来判断是否支持当前安全对象。</li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211302103203.png" alt="image-20221130210312101"></p><p>从图中可以看出，<code>AccessDecisionManager</code>有一个实现类<code>AbstractAccessDecisionManager</code>,一个<code>AbstractAccessDecisionManager</code>对应多个投票器。多个投票器针对同一个请求可能会给出不同的结果，那么听谁的呢?这就要看决策器了。</p><ul><li><code>AffirmativeBased</code>:一票通过机制，即只要有一个投票器通过就可以访问（默认即此)。</li><li><code>UnanimousBased</code>:一票否决机制，即只要有一个投票器反对就不可以访问。</li><li><code>ConsensusBased</code>:少数服从多数机制。如果是平局并且至少有一张赞同票，则根据<code>allowIfEqualGrantedDeniedDecisions</code>参数的取值来决定，如果该参数取值为true，则可以访问，否则不可以访问。</li></ul><p>这是Spring Security 中提供的三个决策器，如果这三个决策器无法满足需求，开发者也可以自定义类继承自<code>AbstractAccessDecisionManager</code>实现自己的决策器。<br>这就是前置处理器中的大致逻辑，无论是基于<code>URL</code>地址的权限管理，还是基于方法的权限管理,都是在前置处理器中通过<code>AccessDecisionManager</code>调用<code>AccessDecisionVoter</code>进行投票,进而做出相应的决策。</p><h4 id="后置处理器"><a href="#后置处理器" class="headerlink" title="后置处理器"></a>后置处理器</h4><p>后置处理器一般只在基于方法的权限控制中会用到，当目标方法执行完毕后，通过后置处理器可以对目标方法的返回值进行权限校验或者过滤。<br>后置处理器由<code>AfterInvocationManager</code> 负责，我们来看一下它的源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AfterInvocationManager</span> &#123;</span><br><span class="line"></span><br><span class="line">   Object <span class="title function_">decide</span><span class="params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; attributes,</span></span><br><span class="line"><span class="params">         Object returnedObject)</span> <span class="keyword">throws</span> AccessDeniedException;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(ConfigAttribute attribute)</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AfterInvocationManager</code>和<code>AccessDecisionManager</code>的源码高度相似，主要的区别在于decide方法的参数和返回值。当后置处理器执行时，被权限保护的方法已经执行完毕，后置处理器主要是对执行的结果进行过滤，所以decide方法中有一个<code>returnedObject</code>参数，这就是目标方法的执行结果，decide方法的返回值就是对<code>returnedObject</code>对象进行过滤&#x2F;鉴权后的结果。<br>我们来看官方提供的一幅<code>AfterInvocationManager</code>类图</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211302109902.png" alt="image-20221130210903805"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211302112978.png" alt="image-20221130211204894"></p><p>有没有感觉眼熟?这就是<code>AuthenticationManager</code>,<code>ProviderManager</code>以及<code>AuthenticationProvider</code>的翻版。<br><code>AfterInvocationManager</code>只有一个实现类<code>AfterInvocationProviderManager</code> ,一个<code>AfterInvocationProviderManager</code>关联多个<code>AfterInvocationProvider</code>。在<code>AfterInvocationManager</code>的decide 以及 supports方法执行时，都是遍历<code>AfterInvocationProvider</code>并执行它里边对应的方法。</p><p><code>AfterInvocationProvider</code>有多个不同的实现类，常见到的是<code>PostInvocationAdviceProvider</code>,该类主要用来处理@<code>PostAuthorize</code>和<code>@PostFilter</code> 注解配置的过滤器。另外还有<code>AbstractAclProvider</code>主要用来处理<code>ACL</code>中的验证逻辑，它有两个子类，<code>AclEntryAfterInvocationProvider</code>用来进行权限校验，<code>AclEntryAfterInvocationCollectionFilteringProvider</code>则用来做集合&#x2F;数组过滤(官方未给出该类的类图，读者可以查看源码）。<br>这就是Spring Security 中提供的后置处理器。</p><h3 id="权限元数据"><a href="#权限元数据" class="headerlink" title="权限元数据"></a>权限元数据</h3><p>这一小节主要介绍<code>ConfigAttribute</code>和 <code>SecurityMetadataSource</code>。</p><h4 id="ConfigAttribute"><a href="#ConfigAttribute" class="headerlink" title="ConfigAttribute"></a><code>ConfigAttribute</code></h4><p>在具体的投票方法 <code>vote</code> 中，受保护对象所需要的权限保存在一个<code>Collection&lt;ConfigAttribute&gt;</code>集合中，集合中的对象是<code>ConfigAttribute</code>，而不是我们所熟知的<code>GrantedAuthority</code>，那么这里就需要和大家介绍一下<code>ConfigAttribute</code>。<br><code>ConfigAttribute</code>用来存储与安全系统相关的配置属性，也就是系统关于权限的配置，通过<code>ConfigAttribute</code>来存储，我们来看一下 <code>ConfigAttribute</code>接口，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConfigAttribute</span> <span class="keyword">extends</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">   String <span class="title function_">getAttribute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口只有一个<code>getAttribute</code>方法返回具体的权限字符串,而 <code>GrantedAuthority</code>中则是通过<code>getAuthority</code>方法返回用户所具有的权限,两者返回值都是字符串。所以虽然是<code>ConfigAttribute</code>和<code>GrantedAuthority</code> 两个不同的对象，但是最终是可以比较的。</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211302235894.png" alt="image-20221130223507789"></p><p>接口就不做过多介绍了，主要来说一下最终的五个比较关键的实现类（接下来涉及的一些注解，会在本章后面做详细介绍）:</p><ul><li><code>WebExpressionConfigAttribute</code>:如果用户是基于URL地址来控制权限并且支持<code>SpEL</code>，那么默认配置的权限控制表达式最终会被封装为<code>WebExpressionConfigAttribute</code>对象。</li><li><code>SecurityConfig</code> :如果用户使用了<code>@Secured</code>注解来控制权限，那么配置的权限就会被封装为<code>SecurityConfig</code>对象。</li><li><code>Jsr250SecurityConfig</code>:如果用户使用了<code>JSR-250</code>相关的注解来控制权限（如<code>@PermitAll、@DenyAll</code> )，那么配置的权限就会被封装为<code>Jsr250SecurityConfig</code>对象。</li><li><code>PreInvocationExpressionAttribute</code>:如果用户使用了<code>@PreAuthorize</code>、<code>@PreFilter</code>注解来控制权限，那么相关的配置就会被封装为<code>PreInvocationExpressionAttribute</code>对象。</li><li><code>PostInvocationExpressionAttribute</code>:如果用户使用了<code>@PostAuthorize、@PostFilter</code>注解来控制权限，那么相关的配置就会被封装为<code>PostInvocationExpressionAttribute</code>对象。</li></ul><p>可以看到，针对不同的配置方式，配置数据会以不同的<code>ConfigAttribute</code>对象存储。</p><h4 id="SecurityMetadataSource"><a href="#SecurityMetadataSource" class="headerlink" title="SecurityMetadataSource"></a><code>SecurityMetadataSource</code></h4><p>当投票器在投票时，需要两方面的权限:其一是当前用户具备哪些权限;其二是当前访问的URL或者方法需要哪些权限才能访问。投票器所做的事情就是对这两种权限进行比较。<br>用户具备的权限保存在<code>authentication</code>中，那么当前访问的<code>URL</code>或者方法所需要的权限如何获取呢?这就和 <code>SecurityMetadataSource</code>有关了。<br>从字面上来理解，<code>SecurityMetadataSource</code>就是安全元数据源，<code>SecurityMetadataSource</code>所做的事情，就是提供受保护对象所需要的权限。例如，用户访问了一个URL地址，该URL地址需要哪些权限才能访问?这个就由<code>SecurityMetadataSource</code>来提供。<br><code>SecurityMetadataSource</code>本身只是一个接口，我们来看一下它的源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SecurityMetadataSource</span> <span class="keyword">extends</span> <span class="title class_">AopInfrastructureBean</span> &#123;</span><br><span class="line">   Collection&lt;ConfigAttribute&gt; <span class="title function_">getAttributes</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IllegalArgumentException;</span><br><span class="line">   Collection&lt;ConfigAttribute&gt; <span class="title function_">getAllConfigAttributes</span><span class="params">()</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只有三个方法:</p><ul><li><code>getAttributes</code>:根据传入的安全对象参数返回其所需要的权限。如果受保护的对象是一个<code>URL</code>地址，那么传入的参数<code>object</code> 就是一个<code>FilterInvocation</code>对象;如果受保护的是一个方法，那么传入的参数<code>object</code> 就是一个<code>MethodInvocation</code>对象。</li><li><code>getAllConfigAttributes</code>: <code>getAllConfigAttributes</code>方法返回所有的角色&#x2F;权限，以便验证是否支持。不过这个方法并不是必需的，也可以直接返回null。</li><li><code>supports</code>:返回当前的<code>SecurityMetadataSource</code>是否支持受保护的对象如<code>FilterInvocation</code>或者<code>MethodInvocation</code>。</li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211302239508.png" alt="image-20221130223923371"></p><p>由图中可以看到，直接继承自<code>SecurityMetadataSource</code>的接口主要有两个:<code>FilterInvocationSecurityMetadataSource</code>和 <code>MethodSecurityMetadataSource</code>。</p><ul><li><code>FilterInvocationSecurityMetadataSource</code>:这是一个空接口，更像是一个标记。如果被保护的对象是一个URL地址，那么将由<code>FilterInvocationSecurityMetadataSource</code>的实现类提供访问该<code>URL</code>地址所需要的权限。</li><li><code>MethodSecurityMetadataSource</code>:这也是一个接口，如果受保护的对象是一个方法，那么将通过<code>MethodSecurityMetadataSource</code>的实现类来获取受保护对象所需要的权限。</li></ul><p><code>FilterInvocationSecurityMetadataSource</code>有一个子类<code>DefaultFilterInvocationSecurityMetadataSource</code>，该类中定义了一个如下格式的<code>Map</code>集合:</p><p><code>private final Map&lt;RequestMatcher，Collection&lt;ConfigAttribute&gt;&gt; requestMap;</code></p><p>可以看到，在这个<code>Map</code>集合中，<code>key</code>是一个请求匹配器，<code>value</code>则是一个权限集合，也就是说<code>requestMap</code>中保存了请求<code>URL</code>和其所需权限之间的映射关系。</p><p>在 Spring Security中，如果直接在<code>configure(HttpSecurity)</code>方法中配置<code>URL</code>请求地址拦截，像下面这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">.antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">.antMatchers(<span class="string">&quot;/user/**&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;user&#x27;)&quot;</span>).anyRequest().access(<span class="string">&quot;isAuthenticated()&quot;</span>)</span><br></pre></td></tr></table></figure><p>这段配置表示访问<code>/admin/**</code>格式的<code>URL</code>地址需要<code>admin</code>角色，访问<code>/user/*</code>格式的 <code>URL</code>地址需要<code>user</code> 角色，其余地址认证后即可访问。这段请求和权限之间的映射关系，会经过<code>DefaultFilterInvocationSecurityMetadataSource</code> 的子类 <code>ExpressionBasedFilterInvocationSecurityMetadataSource</code>进行处理，并最终将映射关系保存到<code>requestMap</code>变量中，以备后续使用。<br>在实际开发中，<code>URL</code>地址以及访问它所需要的权限可能保存在数据库中，此时我们可以自定义类实现<code>FilterInvocationSecurityMetadataSource</code>接口,然后重写里边的<code>getAttributes</code>方法，在<code>getAttributes</code>方法中，根据当前请求的<code>URL</code>地址去数据库中查询其所需要的权限，然后将查询结果封装为相应的<code>ConfigAttribute</code>集合返回即可。<br>如果是基于方法的权限管理，那么对应的 <code>MethodSecurityMetadataSource</code>实现类就比较多了:</p><ul><li><code>PrePostAnnotationSecurityMetadataSource</code>:<code>@PreAuthorize、@PreFilter、@PostAuthorize、@PostFilter</code> 四个注解所标记的权限规则，将由<code>PrePostAnnotationSecurityMetadataSource</code>负责提供。</li><li><code>SecuredAnnotationSecurityMetadataSource</code>: <code>@Secured</code>注解所标记的权限规则，将由<code>SecuredAnnotationSecurityMetadataSource</code>负责提供。</li><li><code>MapBasedMethodSecurityMetadataSource</code>:基于<code>XML</code>文件配置的方法权限拦截规则（基于<code>sec:protect</code>节点)，将由<code>MapBasedMethodSecurityMetadataSource</code>负责提供。</li><li><code>Js250MethodSecurityMetadataSource</code>:<code>JSR-250</code>相关的注解（如<code>@PermitAll、@DenyAll</code> )所标记的权限规则，将由<code>Jsr250MethodSecurityMetadataSource</code>负责提供。</li></ul><p>这就是<code>SecurityMetadataSource</code>的作用。总之，不同的权限拦截方式都对应了一个<code>SecurityMetadataSource</code>实现类，请求的 <code>URL</code>或者方法需要什么权限，调用<code>SecurityMetadataSourcettgetAttributes</code> 方法就可以获取到。</p><h3 id="权限表达式"><a href="#权限表达式" class="headerlink" title="权限表达式"></a>权限表达式</h3><p><code>Spring Security 3.0</code>引入了<code>SpEL</code>表达式进行权限配置，我们可以在请求的<code>URL</code>或者访问的方法上，通过<code>SpEL</code>来配置需要的权限。<br>内置的权限表达式如表所示。</p><table><thead><tr><th>函数名</th><th>函数介绍</th></tr></thead><tbody><tr><td><code>hasRole(String role)</code></td><td>当前用户是否具备指定角色</td></tr><tr><td><code>hasAnyRole(String...roles)</code></td><td>当前用户是否具备指定角色中的任意一个</td></tr><tr><td><code>hasAuthority(String authority)</code></td><td>当前用户是否具备指定的权限</td></tr><tr><td><code>hasAnyAuthority(String...authorities)</code></td><td>当前用户是否具备指定权限中的任意一个</td></tr><tr><td><code>principal</code></td><td>代表当前登录主体 <code>Principal</code></td></tr><tr><td><code>authentication</code></td><td>这个是从<code>SecurityContext</code>中获取到的 <code>Authentication</code>对象</td></tr><tr><td><code>permitAll</code></td><td>允许所有的请求&#x2F;调用</td></tr><tr><td><code>denyAll</code></td><td>拒绝所有的请求&#x2F;调用</td></tr><tr><td><code>isAnonymous</code></td><td>当前用户是否是一个匿名用户</td></tr><tr><td><code>isRememberMe</code></td><td>当前用户是否是通过<code>RememberMe</code>自动登录</td></tr><tr><td><code>isAuthenticated</code></td><td>当前用户是否已经认证成功</td></tr><tr><td><code>isFullyAuthenticated</code></td><td>当前用户是否既不是匿名用户又不是通过<code>RememberMe</code>自动登录的</td></tr><tr><td><code>hasPermission(Object target, Object permission)</code></td><td>当前用户是否具备指定目标的指定权限</td></tr><tr><td><code>hasPermission(Object targetld,String targetType, Object permission)</code></td><td>当前用户是否具备指定目标的指定权限</td></tr><tr><td><code>hasIpAddress(String ipAddress)</code></td><td>当前请求<code>IP</code>地址是否为指定<code>IP</code></td></tr></tbody></table><p>这是Spring Security内置的表达式，一般来说就足够使用了。如果这些内置的表达式无法满足项目需求，开发者也可以自定义表达式，后面会介绍自定义表达式的方式。<br>Spring Security中通过<code>SecurityExpressionOperations</code> 接口定义了基本的权限表达式，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SecurityExpressionOperations</span> &#123;</span><br><span class="line">   Authentication <span class="title function_">getAuthentication</span><span class="params">()</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">hasAuthority</span><span class="params">(String authority)</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">hasAnyAuthority</span><span class="params">(String... authorities)</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">hasRole</span><span class="params">(String role)</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">hasAnyRole</span><span class="params">(String... roles)</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">permitAll</span><span class="params">()</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">denyAll</span><span class="params">()</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">isAnonymous</span><span class="params">()</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">isAuthenticated</span><span class="params">()</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">isRememberMe</span><span class="params">()</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">isFullyAuthenticated</span><span class="params">()</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">hasPermission</span><span class="params">(Object target, Object permission)</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">hasPermission</span><span class="params">(Object targetId, String targetType, Object permission)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回值为<code>boolean</code>类型的就是权限表达式，如果返回 <code>true</code>，则表示权限校验通过，否则表示权限校验失败。</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211302257527.png" alt="image-20221130225708370"></p><h4 id="SecurityExpressionRoot"><a href="#SecurityExpressionRoot" class="headerlink" title="SecurityExpressionRoot"></a><code>SecurityExpressionRoot</code></h4><p><code>SecurityExpressionRoot</code>对 <code>SecurityExpressionOperations</code> 接口做了基本的实现，并在此基础上增加了<code>principal</code>。<br>接口的实现原理都很简单，这里就不展示源码了，我们说一下实现思路。</p><p><code>hasAuthority</code>、<code>hasAnyAuthority</code>、<code>hasRole</code> 以及 <code>hasAnyRole</code> 四个方法主要是将传入的参数和 <code>authentication</code>对象中保存的用户权限进行比对，如果用户具备相应的权限就返回<code>true</code>，否则返回<code>false</code>。<code>permitAll</code> 方法总是返回<code>true</code>，而 <code>denyAll</code> 方法总是返回<code>false</code>。<code>isAnonymous</code>、<code>isAuthenticated</code>、<code>isRememberMe</code> 以及 <code>isFullyAuthenticated</code> 四个方法则是根据对<code>authentication</code>对象的分析，然后返回 <code>true</code>或者<code>false</code>。最后的 <code>hasPermission</code>则需要调用<code>PermissionEvaluator</code>中对应的方法进行计算，然后返回<code>true</code>或者<code>false</code>。<br><code>SecurityExpressionRoot</code>中定义的表达式既可以在基于URL地址的权限管理中使用，也可以在基于方法的权限管理中使用。</p><h4 id="WebSecurityExpressionRoot"><a href="#WebSecurityExpressionRoot" class="headerlink" title="WebSecurityExpressionRoot"></a><code>WebSecurityExpressionRoot</code></h4><p><code>WebSecurityExpressionRoot</code>继承自<code>SecurityExpressionRoot</code>，并增加了<code>hasIpAddress</code>方法，用来判断请求的<code>IP</code>地址是否满足要求。<br>在Spring Security中，如果我们的权限管理是基于URL地址的，那么使用的就是<code>WebSecurityExpressionRoot</code>，换句话说，这时可以使用<code>hasIpAddress</code>表达式。</p><h4 id="MethodSecurityExpressionOperations"><a href="#MethodSecurityExpressionOperations" class="headerlink" title="MethodSecurityExpressionOperations"></a><code>MethodSecurityExpressionOperations</code></h4><p><code>MethodSecurityExpressionOperations</code>定义了基于方法的权限管理时一些必须实现的接口，主要是参数对象的<code>get/set</code>、返回对象的<code>get/set</code>以及返回受保护的对象。</p><h4 id="MethodSecurityExpressionRoot"><a href="#MethodSecurityExpressionRoot" class="headerlink" title="MethodSecurityExpressionRoot"></a><code>MethodSecurityExpressionRoot</code></h4><p><code>MethodSecurityExpressionRoot</code> 实现了<code>MethodSecurityExpressionOperations</code>接口,并对其定义的方法进行了实现。<code>MethodSecurityExpressionRoot</code>虽然也继承自<code>SecurityExpressionRoot</code>，但是并未扩展新的表达式，换句话说，<code>SecurityExpressionRoot</code>中定义的权限表达式在方法上也可以使用，但是<code>hasIpAddress</code>不可以在方法上使用。</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤器 </tag>
            
            <tag> 鉴权 </tag>
            
            <tag> 授权 </tag>
            
            <tag> 权限 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 权限管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23SpringSecurity-异常处理</title>
      <link href="/2022/11/29/02springcloud/23SpringSecurity-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2022/11/29/02springcloud/23SpringSecurity-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring Security只拦截两种异常, 一种是认证异常, 另一种是权限异常, 其他异常交给 Spring 解决</p><h1 id="Spring-Security异常体系"><a href="#Spring-Security异常体系" class="headerlink" title="Spring Security异常体系"></a>Spring Security异常体系</h1><ul><li><p>AuthenticationException</p></li><li><p>AccessDeniedException</p></li><li><p>认证异常</p></li></ul><table><thead><tr><th>异常</th><th>异常介绍</th></tr></thead><tbody><tr><td>AuthenticationException</td><td>认证异常的父类，抽象类</td></tr><tr><td>BadCredentialsException</td><td>登录凭证(密码)异常</td></tr><tr><td>InsufficientAuthenticationException</td><td>登录凭证不够充分而抛出的异常</td></tr><tr><td>SessionAuthenticationException</td><td>会话并发管理时抛出的异常，例如会话总数超出最大限制数</td></tr><tr><td>UsernameNotFoundException</td><td>用户名不存在异常</td></tr><tr><td>PreAuthenticatedCredentialsNotFoundException</td><td>身份预认证失败异常</td></tr><tr><td>ProviderNotFoundException</td><td>未配置AuthenticationProvider 异常</td></tr><tr><td>AuthenticationServiceException</td><td>由于系统问题而无法处理认证请求异常。</td></tr><tr><td>IntemnalAuthenticationServiceException</td><td>由于系统问题而无法处理认证请求异常。和AuthenticationServiceException不同之处在于，如果外部系统出错，则不会抛出该异常</td></tr><tr><td>AuthenticationCredentialsNotFoundException</td><td>SecurityContext中不存在认证主体时抛出的异常</td></tr><tr><td>NonceExpiredException</td><td>HTTP摘要认证时随机数过期异常</td></tr><tr><td>RememberMeAuthenticationException</td><td>RememberMe 认证异常</td></tr><tr><td>CookieThefException</td><td>RememberMe 认证时Cookie被盗窃异常</td></tr><tr><td>InvalidCookieException</td><td>RememberMe 认证时无效的Cookie异常</td></tr><tr><td>AccountStatusException</td><td>账户状态异常</td></tr><tr><td>LockedException</td><td>账户被锁定异常</td></tr><tr><td>DisabledException</td><td>账户被禁用异常</td></tr><tr><td>CredentialsExpiredException</td><td>登录凭证（密码)过期异常</td></tr><tr><td>AccountExpiredException</td><td>账户过期异常</td></tr></tbody></table><ul><li>权限异常</li></ul><table><thead><tr><th>异常</th><th>异常介绍</th></tr></thead><tbody><tr><td>AccessDeniedException</td><td>权限异常的父类</td></tr><tr><td>AuthorizationServiceException</td><td>由于系统问题而无法处理权限时抛出异常</td></tr><tr><td>CsrfException</td><td>Csrf令牌异常</td></tr><tr><td>MissingCsrfTokenException</td><td>Csrf令牌缺失异常</td></tr><tr><td>InvalidCsrfTokenException</td><td>Csrf令牌无效异常</td></tr></tbody></table><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="ExceptionTranslationFilter源码分析"><a href="#ExceptionTranslationFilter源码分析" class="headerlink" title="ExceptionTranslationFilter源码分析"></a><code>ExceptionTranslationFilter</code>源码分析</h2><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211301623540.png" alt="image-20221130162330488"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211301625874.png" alt="image-20221130162531811"></p><p>首先, 如果你看过Spring Security过滤器的执行顺序, 你就会发现<code>ExceptionTranslationWebFilter</code>对象是倒二执行的, 所以会捕获异常</p><p>我们去找<code>ExceptionTranslationWebFilter</code>过滤器的<code>doFilter</code>方法: </p><blockquote><p>这就就不分析<code>ExceptionHandlingConfigurer</code>类的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(H http)</span> &#123;</span><br><span class="line">   <span class="type">AuthenticationEntryPoint</span> <span class="variable">entryPoint</span> <span class="operator">=</span> getAuthenticationEntryPoint(http);</span><br><span class="line">   <span class="type">ExceptionTranslationFilter</span> <span class="variable">exceptionTranslationFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExceptionTranslationFilter</span>(entryPoint,</span><br><span class="line">         getRequestCache(http));</span><br><span class="line">   <span class="type">AccessDeniedHandler</span> <span class="variable">deniedHandler</span> <span class="operator">=</span> getAccessDeniedHandler(http);</span><br><span class="line">   exceptionTranslationFilter.setAccessDeniedHandler(deniedHandler);</span><br><span class="line">   exceptionTranslationFilter = postProcess(exceptionTranslationFilter);</span><br><span class="line">   http.addFilter(exceptionTranslationFilter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法了, 主要就是往<code>ExceptionTranslationFilter</code>配置了一些对象</p></blockquote><p>核心代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Throwable[] causeChain = <span class="built_in">this</span>.throwableAnalyzer.determineCauseChain(ex);</span><br><span class="line"><span class="type">RuntimeException</span> <span class="variable">securityException</span> <span class="operator">=</span> (AuthenticationException) <span class="built_in">this</span>.throwableAnalyzer</span><br><span class="line">      .getFirstThrowableOfType(AuthenticationException.class, causeChain);</span><br><span class="line"><span class="keyword">if</span> (securityException == <span class="literal">null</span>) &#123;</span><br><span class="line">   securityException = (AccessDeniedException) <span class="built_in">this</span>.throwableAnalyzer</span><br><span class="line">         .getFirstThrowableOfType(AccessDeniedException.class, causeChain);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (securityException == <span class="literal">null</span>) &#123;</span><br><span class="line">   rethrow(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (response.isCommitted()) &#123;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;Unable to handle the Spring Security Exception &quot;</span></span><br><span class="line">         + <span class="string">&quot;because the response is already committed.&quot;</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">handleSpringSecurityException(request, response, chain, securityException);</span><br></pre></td></tr></table></figure><p>这段代码分为两个部分</p><ol><li>判断是认证异常还是权限异常?</li><li>最后执行处理异常的过程<code>handleSpringSecurityException</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleSpringSecurityException</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">      FilterChain chain, RuntimeException exception)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">   <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> AuthenticationException) &#123;</span><br><span class="line">      handleAuthenticationException(request, response, chain, (AuthenticationException) exception);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> AccessDeniedException) &#123;</span><br><span class="line">      handleAccessDeniedException(request, response, chain, (AccessDeniedException) exception);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面代码判断是认证异常还是权限异常?</p><p>根据不同的异常处理</p><p>如果是认证异常则执行这段代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendStartAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain,</span></span><br><span class="line"><span class="params">      AuthenticationException reason)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">   <span class="type">SecurityContext</span> <span class="variable">context</span> <span class="operator">=</span> SecurityContextHolder.createEmptyContext();</span><br><span class="line">   SecurityContextHolder.setContext(context);</span><br><span class="line">   <span class="built_in">this</span>.requestCache.saveRequest(request, response);</span><br><span class="line">   <span class="built_in">this</span>.authenticationEntryPoint.commence(request, response, reason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>清空<code>SecurityContextHolder</code>的内容</li><li>保存当前请求</li><li>调用<code>authenticationEntryPoint.commence(request, response, reason)</code>方法完成认证失败处理</li></ol><p>而上面的<code>authenticationEntryPoint</code>对象, 只有根据下面的方法才能判断它是什么类型?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AuthenticationEntryPoint <span class="title function_">createDefaultEntryPoint</span><span class="params">(H http)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.defaultEntryPointMappings.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Http403ForbiddenEntryPoint</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.defaultEntryPointMappings.size() == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.defaultEntryPointMappings.values().iterator().next();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">DelegatingAuthenticationEntryPoint</span> <span class="variable">entryPoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DelegatingAuthenticationEntryPoint</span>(</span><br><span class="line">         <span class="built_in">this</span>.defaultEntryPointMappings);</span><br><span class="line">   entryPoint.setDefaultEntryPoint(<span class="built_in">this</span>.defaultEntryPointMappings.values().iterator().next());</span><br><span class="line">   <span class="keyword">return</span> entryPoint;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211301710743.png" alt="image-20221130171017655"></p><blockquote><p>后续就不再分析了, 每个都分析源码太累了…</p></blockquote><h1 id="自定义异常配置"><a href="#自定义异常配置" class="headerlink" title="自定义异常配置"></a>自定义异常配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="type">AntPathRequestMatcher</span> <span class="variable">preferredMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;/xxxx&quot;</span>, <span class="string">&quot;POST&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> http</span><br><span class="line">         .authorizeRequests()</span><br><span class="line">         .antMatchers(<span class="string">&quot;/admin&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">         .anyRequest().authenticated()</span><br><span class="line">         .and()</span><br><span class="line">         .formLogin()</span><br><span class="line">         .and()</span><br><span class="line">         .exceptionHandling()</span><br><span class="line">         .authenticationEntryPoint((request, response, authException) -&gt; &#123;</span><br><span class="line">            authException.printStackTrace();</span><br><span class="line">            response.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;请登录&quot;</span>);</span><br><span class="line">         &#125;)</span><br><span class="line">         .accessDeniedHandler((request, response, accessDeniedException) -&gt; &#123;</span><br><span class="line">            accessDeniedException.printStackTrace();</span><br><span class="line">            response.setStatus(HttpStatus.FORBIDDEN.value());</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;forbidden&quot;</span>);</span><br><span class="line">         &#125;)</span><br><span class="line">         .defaultAuthenticationEntryPointFor((request, response, authException) -&gt; &#123;</span><br><span class="line">            authException.printStackTrace();</span><br><span class="line">            response.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;preferredMatcher: 请登录&quot;</span>);</span><br><span class="line">         &#125;, preferredMatcher)</span><br><span class="line">         .and().csrf().disable()</span><br><span class="line">         .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们在遇到权限异常时前端打印: <code>forbidden</code>, 遇到认证异常时前端打印: <code>请登录</code></p><p>还可以借助<code>defaultAuthenticationEntryPointFor</code>和 <code>defaultAccessDeniedHandlerFor</code>方法实现以 url, 请求 MediaType等 为单位的异常配置</p><p>请求头为单位的请求:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211301736309.png" alt="image-20221130173644246"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211301740633.png" alt="image-20221130174011564"></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤器 </tag>
            
            <tag> 认证 </tag>
            
            <tag> 登录 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 异常 </tag>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22SpringSecuiry-跨域问题</title>
      <link href="/2022/11/29/02springcloud/22SpringSecuiry-%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2022/11/29/02springcloud/22SpringSecuiry-%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="主要讲了什么"><a href="#主要讲了什么" class="headerlink" title="主要讲了什么?"></a>主要讲了什么?</h1><p>本篇将介绍跨域问题解决方案, 其中有 Spring 跨域 和 Spring Security跨域问题</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域?"></a>什么是跨域?</h2><p>浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域<br>域名：<br>　主域名不同 <a href="http://www.baidu.com/index.html">http://www.baidu.com/index.html</a> –&gt;<a href="http://www.sina.com/test.js">http://www.sina.com/test.js</a><br>　子域名不同 <a href="http://www.666.baidu.com/index.html">http://www.666.baidu.com/index.html</a> –&gt;<a href="http://www.555.baidu.com/test.js">http://www.555.baidu.com/test.js</a><br>　域名和域名<code>ip</code> <a href="http://www.baidu.com/index.html">http://www.baidu.com/index.html</a> –&gt;<a href="http://180.149.132.47/test.js">http://180.149.132.47/test.js</a><br>端口：<br>　<a href="http://www.baidu.com:8080/index.html%E2%80%93&gt;">http://www.baidu.com:8080/index.html–&gt;</a> <a href="http://www.baidu.com:8081/test.js">http://www.baidu.com:8081/test.js</a><br>协议：<br>　<a href="http://www.baidu.com:8080/index.html%E2%80%93&gt;">http://www.baidu.com:8080/index.html–&gt;</a> <a href="https://www.baidu.com:8080/test.js">https://www.baidu.com:8080/test.js</a><br>备注：<br>　1、端口和协议的不同，只能通过后台来解决<br>　2、<code>localhost</code>和<code>127.0.0.1</code>虽然都指向本机，但也属于跨域</p><h2 id="跨域问题的解决方案都有哪些"><a href="#跨域问题的解决方案都有哪些" class="headerlink" title="跨域问题的解决方案都有哪些?"></a>跨域问题的解决方案都有哪些?</h2><p><strong>1、客户端浏览器解除跨域限制</strong>（理论上可以但是不现实）</p><p><strong>2、发送<code>JSONP</code>请求替代<code>XHR</code>请求</strong>（并不能适用所有的请求方式，不推荐）</p><p><strong>3、修改服务器端</strong>（包括<code>HTTP</code>服务器和应用服务器）（<strong>推荐</strong>）</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a><code>JSONP</code></h3><p><code>JSONP（JSON with Padding）</code>是<code>JSON</code>的一种补充使用方式，不是官方协议</p><p><strong><code>JSONP</code> 利用了前端标签的属性<code>src</code>可以访问第三方网站请求并执行的漏洞, 访问第三方网站, 并返回第三方网站的内容</strong></p><p>所以站在用户网站来说, 你需要提供:</p><ul><li><p>一个带着 <code>src</code> 属性的标签, 比如 <code>&lt;script&gt; &lt;img&gt;</code> 等, 里面填入跨域服务端的请求地址</p><ul><li>&#96;&#96;&#96;js<script src="http://localhost:8080/jsonp?callback=callback"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 一个带着参数的回调函数, 该参数用户接收跨域服务端的数据</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    function callback(data) &#123;</span><br><span class="line">       console.log(data)</span><br><span class="line">       alert(data)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>想办法告知跨域服务端, 你的回调函数名(一般放在 <code>src</code> 末尾的 <code>callback</code> 属性上, 比如: <code>http://xxx.com?callback=回调函数名</code>)</p><ul><li>&#96;&#96;&#96;js<br>?callback&#x3D;callback &#x2F;&#x2F; 将回调函数的名字传递给跨域服务端<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">跨域服务端呢?</span><br><span class="line"></span><br><span class="line">- 需要构建一个`controller`或者说构建一个请求, 该请求对应着用户网站的 `src` 地址</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    @GetMapping(&quot;jsonp&quot;)</span><br><span class="line">    public void jsonp(@RequestParam(&quot;callback&quot;) String callback, @RequestParam(&quot;hello&quot;) String hello, HttpServletResponse response) throws IOException &#123;</span><br><span class="line">        System.out.println(&quot;前端给的数据 hello: &quot; + hello);</span><br><span class="line">        String data = &quot;我是第三方服务给出的数据&quot;;</span><br><span class="line">        response.setContentType(&quot;text/javascript;charset=UTF-8&quot;);</span><br><span class="line">        response.getWriter().write(callback + &quot;(&#x27;&quot; + data + &quot;&#x27;)&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>请求需要带上<code>callback</code>字符串</p><ul><li>&#96;&#96;&#96;java<br>String callback,<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 在该请求的最后返回一个`String`, 该`String`返回用户网站的回调函数名(`回调函数名(服务端的数据)`)</span><br><span class="line"></span><br><span class="line">  - ```java</span><br><span class="line">    response.setContentType(&quot;text/javascript;charset=UTF-8&quot;);</span><br><span class="line">    response.getWriter().write(callback + &quot;(&#x27;&quot; + data + &quot;&#x27;)&quot;); // 这里返回了一个正在回调函数调用的代码, 并且传递了参数 data</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>对了如果你得<code>application.yml</code>下有<code>Spring Security</code>的依赖, 可以添加下代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">zhazha</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&quot;&#123;noop&#125;123456&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>跨域服务端返回给前端 <code>&lt;script&gt;</code> 标签的字符串将被转化为 <code>callback</code> 函数执行</p></blockquote><p>我们还可以使用 <code>jquery</code> 的方式调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>跨域案例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(data)</span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript">   $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: <span class="string">&quot;http://localhost:8080/jqJsonp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dataType</span>: <span class="string">&quot;jsonp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;<span class="attr">hello</span>: <span class="string">&quot;hello&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">jsonp</span>: <span class="string">&quot;callback&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">alert</span>(data)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">alert</span>(<span class="string">&quot;Wrong!&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;jqJsonp&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jqJsonp</span><span class="params">(<span class="meta">@RequestParam(&quot;callback&quot;)</span> String callback, <span class="meta">@RequestParam(&quot;hello&quot;)</span> String hello)</span> &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;前端给的数据 hello: &quot;</span> + hello);</span><br><span class="line">   <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;我是第三方服务给出的数据&quot;</span>;</span><br><span class="line">   <span class="keyword">return</span> callback + <span class="string">&quot;(&#x27;&quot;</span> + data + <span class="string">&quot;&#x27;)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><code>jSONP</code>的优点:</p><ol><li>原理简单</li><li>方便快捷, 随时可以搞</li></ol><p><code>JSONP</code>的缺点:</p><ol><li>只支持<code>GET</code>请求</li><li>服务端需要修改代码</li><li>发送的不是 <code>XHR</code> 请求，无法使用 <code>XHR</code> 对象（但这也是为什么可以解决跨域问题的根本）</li></ol><p>这项技术在3-4年前可能还有人用, 现在基本上没什么人用, 因为有更好的选择, 但是思路很好</p><blockquote><p>其他方法就不介绍了, 思路差不错, 比如 <code>PostMessage</code> 等方案, 还有一部分借助<code>iframe</code>的, 可能被 Spring Security 拦截, 不好用</p></blockquote><h3 id="CORS跨域资源共享-推荐"><a href="#CORS跨域资源共享-推荐" class="headerlink" title="CORS跨域资源共享(推荐)"></a><code>CORS</code>跨域资源共享(推荐)</h3><p><code>CORS</code>(<code>Cross-Origin Resource Sharing</code>)该技术由 <code>W3C</code> 为浏览器提供了一种跨域资源共享方案</p><h4 id="跨域还有什么思路"><a href="#跨域还有什么思路" class="headerlink" title="跨域还有什么思路?"></a>跨域还有什么思路?</h4><p>可以告诉浏览器, 在两个域名之间开辟一个共享资源空间(或者管道), 这样两个域名就可以进行跨域调用了, 这是一种思路</p><blockquote><p>但是这个共享资源空间肯定是有限制的</p></blockquote><blockquote><p>共享资源空间, 可以是 <code>header</code> 可以是 <code>cookie</code>, 又或者是 <code>localStore</code> 只要浏览器能够读取到的位置</p></blockquote><p>那么<code>CORS</code>又是怎么实现的呢?</p><h4 id="CORS怎么实现的"><a href="#CORS怎么实现的" class="headerlink" title="CORS怎么实现的?"></a><code>CORS</code>怎么实现的?</h4><p><code>CORS</code>新增了一组<code>HTTP</code>请求头字段，通过这些字段，服务器告诉浏览器，哪些网站通过浏览器有权限访问哪些资源。</p><h5 id="简单请求-可以不看"><a href="#简单请求-可以不看" class="headerlink" title="简单请求(可以不看)"></a>简单请求(可以不看)</h5><p>假如站点 <code>https://foo.example</code> 的网页应用想要访问 <code>https://bar.other</code> 的资源。</p><p><code>foo.example</code> 的网页中可能包含类似于下面的 JavaScript 代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;https://bar.other/resources/public-data/&#x27;</span>;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = someHandler;</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><p>此操作实行了客户端和服务器之间的简单交换，使用 <code>CORS</code> 首部字段来处理权限：</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211301103125.png" alt="image-20221130110310008"></p><p>以下是浏览器发送给服务器的请求报文：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/resources/public-data/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>bar.other</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-us,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip,deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>https://foo.example</span><br></pre></td></tr></table></figure><p>请求首部字段 <code>Origin</code> 表明该请求来源于 <code>http://foo.example</code>。</p><p>让我们来看看服务器如何响应：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 01 Dec 2008 00:23:53 GMT</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache/2</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>*</span><br><span class="line"><span class="attribute">Keep-Alive</span><span class="punctuation">: </span>timeout=2, max=100</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/xml</span><br><span class="line"></span><br><span class="line"><span class="language-crmsh">[…<span class="keyword">XML</span> <span class="title">Data</span>…]</span></span><br></pre></td></tr></table></figure><p>本例中，服务端返回的 <code>Access-Control-Allow-Origin</code>标头的 <code>Access-Control-Allow-Origin: *</code> 值表明，该资源可以被<strong>任意</strong>外源访问。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>*</span><br></pre></td></tr></table></figure><p>使用<code>Origin</code>和 <code>Access-Control-Allow-Origin</code> 就能完成最简单的访问控制。如果 <code>https://bar.other</code> 的资源持有者想限制他的资源<em>只能</em>通过 <code>https://foo.example</code> 来访问（也就是说，非 <code>https://foo.example</code> 域无法通过跨源访问访问到该资源），他可以这样做：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>https://foo.example</span><br></pre></td></tr></table></figure><blockquote><p><strong>备注：</strong> 当响应的是<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E9%99%84%E5%B8%A6%E8%BA%AB%E4%BB%BD%E5%87%AD%E8%AF%81%E7%9A%84%E8%AF%B7%E6%B1%82">附带身份凭证的请求</a>时，服务端<strong>必须</strong>明确 <code>Access-Control-Allow-Origin</code> 的值，而不能使用通配符“<code>*</code>”。</p></blockquote><h5 id="复杂请求-可以不看"><a href="#复杂请求-可以不看" class="headerlink" title="复杂请求(可以不看)"></a>复杂请求(可以不看)</h5><blockquote><p>了解有预检请求便可</p></blockquote><p>与简单请求不同，“需预检的请求”要求必须首先使用OPTIONS方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。”预检请求”的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。<br>如下是一个需要执行预检请求的HTTP请求:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;https://bar.other/resources/post-here/&#x27;</span>);</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;X-PINGOTHER&#x27;</span>, <span class="string">&#x27;pingpong&#x27;</span>);</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/xml&#x27;</span>);</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = handler;</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>上面的代码使用<code>POST</code>请求发送一个<code>XML</code> 请求体，该请求包含了一个非标准的<code>HTTP X-PINGOTHER</code>请求首部。这样的请求首部并不是<code>HTTP/1.1</code>的一部分，但通常对于<code>web</code>应用很有用处。另外，该请求的<code>Content-Type</code>为<code>application/xml</code>，且使用了自定义的请求首部，所以该请求需要首先发起“预检请求”。</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211301109945.png" alt="image-20221130110925866"></p><blockquote><p><strong>备注：</strong> 如下所述，实际的 <code>POST</code> 请求不会携带 <code>Access-Control-Request-*</code> 首部，它们仅用于 <code>OPTIONS</code> 请求。</p></blockquote><p>下面是服务端和客户端完整的信息交互。首次交互是<em>预检请求&#x2F;响应</em>：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/doc</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>bar.other</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-us,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip,deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>https://foo.example</span><br><span class="line"><span class="attribute">Access-Control-Request-Method</span><span class="punctuation">: </span>POST</span><br><span class="line"><span class="attribute">Access-Control-Request-Headers</span><span class="punctuation">: </span>X-PINGOTHER, Content-Type</span><br><span class="line"></span><br><span class="line"><span class="language-http"><span class="meta">HTTP/1.1</span> <span class="number">204</span> No Content</span></span><br><span class="line"><span class="language-http"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 01 Dec 2008 01:15:39 GMT</span></span><br><span class="line"><span class="language-http"><span class="attribute">Server</span><span class="punctuation">: </span>Apache/2</span></span><br><span class="line"><span class="language-http"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>https://foo.example</span></span><br><span class="line"><span class="language-http"><span class="attribute">Access-Control-Allow-Methods</span><span class="punctuation">: </span>POST, GET, OPTIONS</span></span><br><span class="line"><span class="language-http"><span class="attribute">Access-Control-Allow-Headers</span><span class="punctuation">: </span>X-PINGOTHER, Content-Type</span></span><br><span class="line"><span class="language-http"><span class="attribute">Access-Control-Max-Age</span><span class="punctuation">: </span>86400</span></span><br><span class="line"><span class="language-http"><span class="attribute">Vary</span><span class="punctuation">: </span>Accept-Encoding, Origin</span></span><br><span class="line"><span class="language-http"><span class="attribute">Keep-Alive</span><span class="punctuation">: </span>timeout=2, max=100</span></span><br><span class="line"><span class="language-http"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive</span></span><br></pre></td></tr></table></figure><p>Copy to Clipboard</p><p>从上面的报文中，我们看到，第 1 - 10 行使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS"><code>OPTIONS</code></a> 方法发送了预检请求，浏览器根据上面的JavaScript代码片断所使用的请求参数来决定是否需要发送，这样服务器就可以回应是否可以接受用实际的请求参数来发送请求。OPTIONS 是 HTTP&#x2F;1.1 协议中定义的方法，用于从服务器获取更多信息，是<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Safe/HTTP">安全</a>的方法。该方法不会对服务器资源产生影响。注意 OPTIONS 预检请求中同时携带了下面两个首部字段：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Request-Method</span><span class="punctuation">: </span>POST</span><br><span class="line"><span class="attribute">Access-Control-Request-Headers</span><span class="punctuation">: </span>X-PINGOTHER, Content-Type</span><br></pre></td></tr></table></figure><p>Copy to Clipboard</p><p>首部字段 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Method"><code>Access-Control-Request-Method</code></a> 告知服务器，实际请求将使用 <code>POST</code> 方法。首部字段 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers"><code>Access-Control-Request-Headers</code></a> 告知服务器，实际请求将携带两个自定义请求首部字段：<code>X-PINGOTHER</code> 与 <code>Content-Type</code>。服务器据此决定，该实际请求是否被允许。</p><p>第 12 - 21 行为预检请求的响应，表明服务器将接受后续的实际请求方法（<code>POST</code>）和请求头（<code>X-PINGOTHER</code>）。重点看第 15 - 18 行：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>https://foo.example</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span><span class="punctuation">: </span>POST, GET, OPTIONS</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span><span class="punctuation">: </span>X-PINGOTHER, Content-Type</span><br><span class="line"><span class="attribute">Access-Control-Max-Age</span><span class="punctuation">: </span>86400</span><br></pre></td></tr></table></figure><p>服务器的响应携带了 <code>Access-Control-Allow-Origin: https://foo.example</code>，从而限制请求的源域。同时，携带的 <code>Access-Control-Allow-Methods</code> 表明服务器允许客户端使用 <code>POST</code> 和 <code>GET</code> 方法发起请求（与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Allow"><code>Allow</code></a> 响应首部类似，但该标头具有严格的访问控制）。</p><p>首部字段 <code>Access-Control-Allow-Headers</code> 表明服务器允许请求中携带字段 <code>X-PINGOTHER</code> 与 <code>Content-Type</code>。与 <code>Access-Control-Allow-Methods</code> 一样，<code>Access-Control-Allow-Headers</code> 的值为逗号分割的列表。</p><p>最后，首部字段 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Max-Age"><code>Access-Control-Max-Age</code></a> 给定了该预检请求可供缓存的时间长短，单位为秒，默认值是 5 秒。在有效时间内，浏览器无须为同一请求再次发起预检请求。以上例子中，该响应的有效时间为 86400 秒，也就是 24 小时。请注意，浏览器自身维护了一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Max-Age">最大有效时间</a>，如果该首部字段的值超过了最大有效时间，将不会生效。</p><p>预检请求完成之后，发送实际请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/doc</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>bar.other</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-us,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip,deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">X-PINGOTHER</span><span class="punctuation">: </span>pingpong</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/xml; charset=UTF-8</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>https://foo.example/examples/preflightInvocation.html</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>55</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>https://foo.example</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"></span><br><span class="line"><span class="language-pgsql">&lt;person&gt;&lt;<span class="type">name</span>&gt;Arun&lt;/<span class="type">name</span>&gt;&lt;/person&gt;</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span></span><br><span class="line"><span class="language-pgsql"><span class="type">Date</span>: Mon, <span class="number">01</span> <span class="type">Dec</span> <span class="number">2008</span> <span class="number">01</span>:<span class="number">15</span>:<span class="number">40</span> GMT</span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">Server</span>: Apache/<span class="number">2</span></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">Access</span>-Control-Allow-Origin: https://foo.example</span></span><br><span class="line"><span class="language-pgsql">Vary: Accept-<span class="keyword">Encoding</span>, Origin</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Encoding</span>: gzip</span></span><br><span class="line"><span class="language-pgsql">Content-Length: <span class="number">235</span></span></span><br><span class="line"><span class="language-pgsql">Keep-Alive: timeout=<span class="number">2</span>, max=<span class="number">99</span></span></span><br><span class="line"><span class="language-pgsql"><span class="keyword">Connection</span>: Keep-Alive</span></span><br><span class="line"><span class="language-pgsql">Content-<span class="keyword">Type</span>: <span class="type">text</span>/plain</span></span><br><span class="line"><span class="language-pgsql"></span></span><br><span class="line"><span class="language-pgsql">[<span class="keyword">Some</span> <span class="type">XML</span> payload]</span></span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="Spring的处理方式"><a href="#Spring的处理方式" class="headerlink" title="Spring的处理方式"></a>Spring的处理方式</h3><blockquote><p>注意, 如果你在项目中引入了 Spring Security, 那么下面几种 Spring 方式可能会报错, 也可能会失效</p></blockquote><p>spring有三种方式处理跨域问题</p><h4 id="CrossOrigin"><a href="#CrossOrigin" class="headerlink" title="@CrossOrigin"></a><code>@CrossOrigin</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许 http://localhost:8080 网址的请求</span></span><br><span class="line"><span class="meta">@CrossOrigin(origins = &quot;http://localhost:8080&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;post&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">post</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello, post&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@CrossOrigin</code>注解各属性含义如下:</p><ul><li><code>allowCredentials</code>: 浏览器是否应当发送凭证信息，如Cookie。</li><li><code>allowedHeaders</code>: 请求被允许的请求头字段，表示所有字段。</li><li><code>exposedHeaders</code>: 哪些响应头可以作为响应的一部分暴露出来。注意，这里只可以一一列举，通配符在这里是无效的。<br><code>maxAge</code>: 预检请求的有效期，有效期内不必再次发送预检请求，默认是1800秒。</li><li><code>methods</code>: 允许的请求方法，表示允许所有方法。</li><li><code>origins</code>: 允许的域，表示允许所有域。</li></ul><p>源码分析</p><ul><li><code>@CrossOrigin</code>注解在<code>AbstractHandlerMethodMapping</code> 的内部类<code>MappingRegistry</code> 的<code>register</code>方法中完成解析的，<code>@CrossOrigin</code>注解中的内容会被解析成一个配置对象<code>CorsConfiguration</code>。</li><li>将@<code>CrossOrigin</code>所标记的请求方法对象<code>HandlerMethod</code>和 <code>CorsConfiguration</code>一一对应存入一个名为<code>corsLookup</code> 的 <code>Map</code>集合中。</li><li>当请求到达 <code>DispatcherServlet#fdoDispatch</code> 方法之后，调用<code>AbstractHandlerMapping#getHandler</code>方法获取执行链 <code>HandlerExecutionChain</code>时，会从<code>corsLookup</code>集合中获取到<code>CorsConfiguration</code>对象。</li><li>根据获取到的<code>CorsConfiguration</code>对象构建一个<code>CorsInterceptor</code>拦截器。</li><li>在<code>CorsInterceptor</code>拦截器中触发对<code>DefaultCorsProcessor#processRequest</code> 的调用，跨域请求的校验工作将在该方法中完成。</li></ul><h4 id="全局跨域方式"><a href="#全局跨域方式" class="headerlink" title="全局跨域方式"></a>全局跨域方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置全局跨域解决方案</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">      registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">            .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">            .allowCredentials(<span class="literal">false</span>)</span><br><span class="line">            .exposedHeaders(<span class="string">&quot;&quot;</span>)</span><br><span class="line">            .maxAge(<span class="number">3600</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过注册CorsFilter的方式"><a href="#通过注册CorsFilter的方式" class="headerlink" title="通过注册CorsFilter的方式"></a>通过注册<code>CorsFilter</code>的方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean&lt;CorsFilter&gt; <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">  <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">  config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">  config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">  config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">  config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">  source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">  FilterRegistrationBean&lt;CorsFilter&gt; bean = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source));</span><br><span class="line">  bean.setOrder(-<span class="number">1</span>); <span class="comment">// 这行后面会解释, 为什么?</span></span><br><span class="line">  <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Security处理方案"><a href="#Spring-Security处理方案" class="headerlink" title="Spring Security处理方案"></a>Spring Security处理方案</h3><p>如果我们配置了 Spring Security的话, 上面的 Spring 解决跨域问题的方式可能失效, 有的还可以使用, 为什么呢?</p><p>通过<code>@CrossOrigin</code>注解或者重写<code>addCorsMappings</code>方法配置跨域，统统失效了, 通过<code>CorsFilter</code> 配置的跨域，有没有失效则要看过滤器的优先级，如果过滤器优先级高于Spring Security过滤器，即先于Spring Security过滤器执行，则<code>CorsFilter</code> 所配置的跨域处理依然有效;如果过滤器优先级低于Spring Security过滤器，则<code>CorsFilter</code> 所配置的跨域处理就会失效。这就是为什么我们配置优先级为 <code>-1</code></p><blockquote><p>意思说, Spring Security你可以看作一个拦截器, 如果 Spring Security优先级高于我们自己配置的<code>cors</code>跨域解决方案(在<code>CorsIntercepter</code>中校验), 那么就会以某些理由拦截下来, 而使得我们配置的跨域失效, 那是为什么呢?</p></blockquote><p>我们知道, 在复杂请求的情况下, 会发送一个预检请求, 但他没有携带任何的认证信息, 直接就会被 Spring Security拦截, 而等到复杂请求发送过来之后, 该请求没有预检请求的信息, 所以也是导致跨域请求失效</p><p>如果使用了<code>CorsFilter</code>配置跨域，只要过滤器的优先级高于Spring Security过滤器，即在Spring Security过滤器之前执行了跨域请求校验，那么就不会有问题。如果 <code>CorsFilter</code>的优先级低于Spring Security过滤器，则预检请求一样需要先经过Spring Security过滤器，由于没有携带认证信息，在经过Spring Security过滤器时就会被拦截下来。</p><p>那么怎么解决呢?</p><ul><li><p>可以放行 <code>OPTIONS</code> 请求, 但是不安全</p></li><li><p>可以继续使用前面的 <code>通过注册CorsFilter的方式</code> 这种方式, 只要优先级比Spring Security高就行, 不过那也太不专业了</p></li></ul><h4 id="Spring-Security的解决方案"><a href="#Spring-Security的解决方案" class="headerlink" title="Spring Security的解决方案"></a>Spring Security的解决方案</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      http</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">            .permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .cors().configurationSource(configurationSource())</span><br><span class="line">            .and().csrf().disable();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> UrlBasedCorsConfigurationSource <span class="title function_">configurationSource</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">      <span class="keyword">final</span> <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">      config.setAllowCredentials(<span class="literal">true</span>); <span class="comment">// 允许cookies跨域</span></span><br><span class="line">      config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);<span class="comment">// #允许向该服务器提交请求的URI，*表示全部允许，在SpringMVC中，如果设成*，会自动转成当前请求头中的Origin</span></span><br><span class="line">      config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);<span class="comment">// #允许访问的头信息,*表示全部</span></span><br><span class="line">      config.setMaxAge(<span class="number">18000L</span>);<span class="comment">// 预检请求的缓存时间（秒），即在这个时间段里，对于相同的跨域请求不会再预检了</span></span><br><span class="line">      config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">      source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">      <span class="keyword">return</span> source;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码就不分析了, 说白了就是借助上面的方法帮忙 <code>new CorsFilter</code> 过滤器和填充内容</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤器 </tag>
            
            <tag> 认证 </tag>
            
            <tag> 登录 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 跨域问题 </tag>
            
            <tag> cors </tag>
            
            <tag> 跨域 </tag>
            
            <tag> jsonp </tag>
            
            <tag> CrossOrigin </tag>
            
            <tag> CorsFilter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21SpringSecurity-Http认证</title>
      <link href="/2022/11/29/02springcloud/21SpringSecurity-Http%E8%AE%A4%E8%AF%81/"/>
      <url>/2022/11/29/02springcloud/21SpringSecurity-Http%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="主要讲什么"><a href="#主要讲什么" class="headerlink" title="主要讲什么?"></a>主要讲什么?</h1><p>本篇主要讲在 HTTP 头上的认证过程, 而非在传统的表单上认证</p><p>介绍了两种 HTTP 认证方法</p><ul><li>HTTP Basic authentication</li><li>HTTP Digest authentication</li></ul><h1 id="HTTP-Basic-authentication"><a href="#HTTP-Basic-authentication" class="headerlink" title="HTTP Basic authentication"></a>HTTP Basic authentication</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h2><p><code>HTTP Basic authentication</code>中文译作<code>HTTP</code>基本认证，在这种认证方式中，将用户的登录用户名&#x2F;密码经过<code>Base64</code>编码之后，放在请求头的<code>Authorization</code>字段中，从而完成用户身份的认证。</p><p>客户端: 我要拿到员工列表信息(GET <code>/list</code>)</p><p>服务端: 你没认证, 先去认证, 给你挑选一种认证的方式(<code>WWW-Authenticate: Basic realm: &quot;Realm&quot;</code>)</p><p>客户端: 好的, 我将用户名和密码整合在一起, 使用<code>Base64</code>加密, 将密码发送给你(<code>Authorization: Basic XXXXX=</code>)</p><p>服务端: 收到你的密码了, 我开始验证你的账号和密码, 验证通过, 给你员工信息列表</p><p>客户端: 谢谢</p><h2 id="使用场景是什么"><a href="#使用场景是什么" class="headerlink" title="使用场景是什么?"></a>使用场景是什么?</h2><p>这种方式不安全, 很少被使用, 一般有用也是在内网系统中, 默认客户端和服务端所处环境很安全的情况下, 使用这种方式认证</p><p>同时这种方式无法退出登录, 除非用户清除浏览器缓存或者关闭浏览器</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      http</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .httpBasic() <span class="comment">// 开始 Http basic authentication</span></span><br><span class="line">            .and().csrf().disable();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">zhazha</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&quot;&#123;noop&#125;123456&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211291512076.png" alt="image-20221129151222982"></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211291513457.png" alt="image-20221129151318369"></p><p>进入这个方法看到下面的方法</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211291513682.png" alt="image-20221129151348633"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211291516056.png" alt="image-20221129151618981"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211291517935.png" alt="image-20221129151716826"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211291525908.png" alt="image-20221129152531843"></p><p>意味客户端的每个请求都会触发该过滤器</p><p>找了下 <code>doFilter</code> 方法在<code>OncePerRequestFilter</code>类中, 我们可以看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain filterChain)</span></span><br><span class="line">      <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">   <span class="comment">// 代码被省略</span></span><br><span class="line">    request.setAttribute(alreadyFilteredAttributeName, Boolean.TRUE);</span><br><span class="line">    doFilterInternal(httpRequest, httpResponse, filterChain);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心代码: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span><br><span class="line">      <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authRequest</span> <span class="operator">=</span> <span class="built_in">this</span>.authenticationConverter.convert(request);</span><br><span class="line">      <span class="keyword">if</span> (authRequest == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Did not process authentication request since failed to find &quot;</span></span><br><span class="line">               + <span class="string">&quot;username and password in Basic Authorization header&quot;</span>);</span><br><span class="line">         chain.doFilter(request, response);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> authRequest.getName();</span><br><span class="line">      <span class="built_in">this</span>.logger.trace(LogMessage.format(<span class="string">&quot;Found username &#x27;%s&#x27; in Basic Authorization header&quot;</span>, username));</span><br><span class="line">      <span class="keyword">if</span> (authenticationIsRequired(username)) &#123;</span><br><span class="line">         <span class="type">Authentication</span> <span class="variable">authResult</span> <span class="operator">=</span> <span class="built_in">this</span>.authenticationManager.authenticate(authRequest);</span><br><span class="line">         <span class="type">SecurityContext</span> <span class="variable">context</span> <span class="operator">=</span> SecurityContextHolder.createEmptyContext();</span><br><span class="line">         context.setAuthentication(authResult);</span><br><span class="line">         SecurityContextHolder.setContext(context);</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.debug(LogMessage.format(<span class="string">&quot;Set SecurityContextHolder to %s&quot;</span>, authResult));</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">this</span>.rememberMeServices.loginSuccess(request, response, authResult);</span><br><span class="line">         <span class="built_in">this</span>.securityContextRepository.saveContext(context, request, response);</span><br><span class="line">         onSuccessfulAuthentication(request, response, authResult);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (AuthenticationException ex) &#123;</span><br><span class="line">      SecurityContextHolder.clearContext();</span><br><span class="line">      <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Failed to process authentication request&quot;</span>, ex);</span><br><span class="line">      <span class="built_in">this</span>.rememberMeServices.loginFail(request, response);</span><br><span class="line">      onUnsuccessfulAuthentication(request, response, ex);</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.ignoreFailure) &#123;</span><br><span class="line">         chain.doFilter(request, response);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.authenticationEntryPoint.commence(request, response, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接走流程图分析:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211291618913.png" alt="HttpBasic认证过程"></p><h1 id="HTTP-Digest-authentication"><a href="#HTTP-Digest-authentication" class="headerlink" title="HTTP Digest authentication"></a>HTTP Digest authentication</h1><h2 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么?"></a>是什么?</h2><p>为弥补基本认证的缺点，从<code>HTTP/1.1</code>就有了摘要认证。摘要认证利用摘要算法（如<code>MD5、SHA-256</code>）对用户名、密码、报文内容等做不可逆的编码，来防止重要信息被获取、篡改。</p><blockquote><p>和HTTP Basic认证方式基本一致, 只不过传递的参数存在差异而已</p></blockquote><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211291627761.png" alt="img"></p><ul><li><p>步骤 1： 请求需认证的资源时，服务器会随着状态码 <code>401 Authorization Required</code>，返回带<code>WWW-Authenticate</code> 首部字段的响应。该字段内包含质问响应方式认证所需的临时质询码（随机数<code>nonce</code>）。首部字段 <code>WWW-Authenticate</code> 内必须包含<code>realm</code> 和<code>nonce</code> 这两个字段的信息。客户端就是依靠向服务器回送这两个值进行认证的。<code>nonce</code> 是一种每次随返回的 <code>401</code> 响应生成的任意随机字符串。该字符串通常推荐由<code>Base64</code> 编码的十六进制数的组成形式，但实际内容依赖服务器的具体实现。</p></li><li><p>步骤 2：接收到<code>401</code>状态码的客户端，返回的响应中包含 <code>DIGEST</code> 认证必须的首部字段 <code>Authorization</code> 信息。首部字段 <code>Authorization</code> 内必须包含 <code>username</code>、<code>realm</code>、<code>nonce</code>、<code>uri</code> 和<code>response</code>的字段信息。其中，<code>realm</code> 和 <code>nonce</code> 就是之前从服务器接收到的响应中的字段。<br>　　<code>username</code>是<code>realm</code> 限定范围内可进行认证的用户名。<code>uri（digest-uri）</code>即<code>Request-URI</code>的值，但考虑到经代理转发后<code>Request-URI</code>的值可能被修改因此事先会复制一份副本保存在 <code>uri</code>内。</p></li></ul><p>　　<code>response</code> 也可叫做 <code>Request-Digest</code>，存放经过 <code>MD5</code> 运算后的密码字符串，形成响应码。</p><ul><li>步骤 3：接收到包含首部字段 <code>Authorization</code> 请求的服务器，会确认认证信息的正确性。认证通过后则返回包含 <code>Request-URI</code> 资源的响应。并且这时会在首部字段 <code>Authentication-Info</code> 写入一些认证成功的相关信息。（不过我下面的例子没有去写这个<code>Authentication-Info</code>，而是直接返回的数据。因为我实在<code>session</code>里缓存的认证结果）。</li></ul><blockquote><p>username: 用户名。</p><p>password: 用户密码。</p><p>realm: 认证域，由服务器返回。</p><p>opaque: 透传字符串，客户端应原样返回。</p><p>method: 请求的方法。</p><p>nonce: 由服务器生成的随机字符串，包含过期时间(默认过期时间300s)和密钥。</p><p>nc: 即nonce-count,指请求的次数，用于计数，防止重放攻击。qop被指定时，nc也必须被指定。</p><p>cnonce: 客户端发给服务器的随机字符串，qop被指定时，cnonce也必须被指定。</p><p>qop: 保护级别，客户端根据此参数指定摘要算法。若取值为 auth,则只进行身份验证；若取值为auth-int，则还需要校验内容完整性，默认的qop为auth。</p><p>uri: 请求的uri。</p><p>response: 客户端根据算法算出的摘要值，这个算法取决于qop。</p><p>algorithm: 摘要算法，目前仅支持MD5。</p><p>entity-body: 页面实体，非消息实体，仅在auth-int中支持。</p></blockquote><h2 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h2><p>Spring Security中为<code>HTTP摘要认证</code>提供了相应的<code>AuthenticationEntryPoint</code>和 <code>Filter</code>，但是<strong>没有自动化配置</strong>，需要我们手动配置，配置方式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.www.DigestAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">http.authorizeRequests()</span><br><span class="line">.anyRequest().authenticated()</span><br><span class="line">.and().csrf().disable()</span><br><span class="line">.exceptionHandling()</span><br><span class="line">.authenticationEntryPoint(digestAuthenticationEntryPoint()) <span class="comment">// 添加质询方式</span></span><br><span class="line">.and().addFilter(digestAuthenticationFilter()); <span class="comment">// 添加核心过滤器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * http digest 认证核心过滤器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> DigestAuthenticationFilter <span class="title function_">digestAuthenticationFilter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">DigestAuthenticationFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DigestAuthenticationFilter</span>();</span><br><span class="line">filter.setPasswordAlreadyEncoded(<span class="literal">true</span>);</span><br><span class="line">filter.setAuthenticationEntryPoint(digestAuthenticationEntryPoint());</span><br><span class="line">filter.setUserDetailsService(userDetailsServiceBean());</span><br><span class="line"><span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsServiceBean</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">InMemoryUserDetailsManager</span> <span class="variable">userDetailsService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line">userDetailsService.createUser(User.withUsername(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line">.password(<span class="string">&quot;afcfa5bad0d8e350a7c18eee9f691d1c&quot;</span>)</span><br><span class="line">.roles(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">.build());</span><br><span class="line"><span class="keyword">return</span> userDetailsService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供了摘要的质询功能 commence</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> DigestAuthenticationEntryPoint <span class="title function_">digestAuthenticationEntryPoint</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">DigestAuthenticationEntryPoint</span> <span class="variable">entryPoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DigestAuthenticationEntryPoint</span>();</span><br><span class="line">entryPoint.setNonceValiditySeconds(<span class="number">3600</span>);</span><br><span class="line">entryPoint.setRealmName(<span class="string">&quot;myrealm&quot;</span>);</span><br><span class="line">entryPoint.setKey(<span class="string">&quot;zhazha&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> entryPoint;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加密密码的方式是: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMd5</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">rawPassword</span> <span class="operator">=</span> <span class="string">&quot;zhazha:myrealm:123456&quot;</span>;</span><br><span class="line">   <span class="type">MessageDigest</span> <span class="variable">digest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">   <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Hex.encode(digest.digest(rawPassword.getBytes(StandardCharsets.UTF_8))));</span><br><span class="line">   System.err.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>username + &quot;:&quot; + realm + &quot;:&quot; + password</code></p><h2 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="质询"><a href="#质询" class="headerlink" title="质询"></a>质询</h3><p>质询核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">      AuthenticationException authException)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   <span class="comment">// 根据当前时间 + 阈值 算出未来的某个时间 当作过期时间</span></span><br><span class="line">   <span class="type">long</span> <span class="variable">expiryTime</span> <span class="operator">=</span> System.currentTimeMillis() + (<span class="built_in">this</span>.nonceValiditySeconds * <span class="number">1000</span>);</span><br><span class="line">   <span class="comment">// 签名: 过期时间 + : + key (这个key我们在前面配置过了 entryPoint.setKey(&quot;zhazha&quot;))</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">signatureValue</span> <span class="operator">=</span> DigestAuthUtils.md5Hex(expiryTime + <span class="string">&quot;:&quot;</span> + <span class="built_in">this</span>.key);</span><br><span class="line">   <span class="comment">// nonce未加密的值 = 过期时间 + : + 签名</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">nonceValue</span> <span class="operator">=</span> expiryTime + <span class="string">&quot;:&quot;</span> + signatureValue;</span><br><span class="line">   <span class="comment">// Base64加密 nonceValue</span></span><br><span class="line">   <span class="comment">// nonce = base64(expirationTime + &quot;:&quot; + md5Hex(expirationTime + &quot;:&quot; + key))</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">nonceValueBase64</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(nonceValue.getBytes()));</span><br><span class="line">   <span class="type">String</span> <span class="variable">authenticateHeader</span> <span class="operator">=</span> <span class="string">&quot;Digest realm=\&quot;&quot;</span> + <span class="built_in">this</span>.realmName + <span class="string">&quot;\&quot;, &quot;</span> + <span class="string">&quot;qop=\&quot;auth\&quot;, nonce=\&quot;&quot;</span></span><br><span class="line">         + nonceValueBase64 + <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">   <span class="keyword">if</span> (authException <span class="keyword">instanceof</span> NonceExpiredException) &#123;</span><br><span class="line">      authenticateHeader = authenticateHeader + <span class="string">&quot;, stale=\&quot;true\&quot;&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   logger.debug(LogMessage.format(<span class="string">&quot;WWW-Authenticate header sent to user agent: %s&quot;</span>, authenticateHeader));</span><br><span class="line">   <span class="comment">// 将得到的值存放到 WWW-Authenticate 中</span></span><br><span class="line">   response.addHeader(<span class="string">&quot;WWW-Authenticate&quot;</span>, authenticateHeader);</span><br><span class="line">   <span class="comment">// 响应未认证代码 401 和 未认证字符串 Unauthorized</span></span><br><span class="line">   response.sendError(HttpStatus.UNAUTHORIZED.value(), HttpStatus.UNAUTHORIZED.getReasonPhrase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211291757842.png" alt="image-20221129175707742"></p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span><br><span class="line">      <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">   <span class="comment">// 从 header 中取出 Authorization 也就是上面图片的字符串</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span> (header == <span class="literal">null</span> || !header.startsWith(<span class="string">&quot;Digest &quot;</span>)) &#123;</span><br><span class="line">      chain.doFilter(request, response);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 解析出 header 中的配置</span></span><br><span class="line">   <span class="type">DigestData</span> <span class="variable">digestAuth</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DigestData</span>(header);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 各种验证</span></span><br><span class="line">      digestAuth.validateAndDecode(<span class="built_in">this</span>.authenticationEntryPoint.getKey(),</span><br><span class="line">            <span class="built_in">this</span>.authenticationEntryPoint.getRealmName());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BadCredentialsException ex) &#123;</span><br><span class="line">      fail(request, response, ex);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 认证过程</span></span><br><span class="line">   <span class="type">boolean</span> <span class="variable">cacheWasUsed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">   <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userCache.getUserFromCache(digestAuth.getUsername());</span><br><span class="line">   String serverDigestMd5;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">         cacheWasUsed = <span class="literal">false</span>;</span><br><span class="line">         user = <span class="built_in">this</span>.userDetailsService.loadUserByUsername(digestAuth.getUsername());</span><br><span class="line">         <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationServiceException</span>(</span><br><span class="line">                  <span class="string">&quot;AuthenticationDao returned null, which is an interface contract violation&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">this</span>.userCache.putUserInCache(user);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 两个密码使用 md5 验证</span></span><br><span class="line">      serverDigestMd5 = digestAuth.calculateServerDigest(user.getPassword(), request.getMethod());</span><br><span class="line">      <span class="comment">// If digest is incorrect, try refreshing from backend and recomputing</span></span><br><span class="line">      <span class="keyword">if</span> (!serverDigestMd5.equals(digestAuth.getResponse()) &amp;&amp; cacheWasUsed) &#123;</span><br><span class="line">         logger.debug(<span class="string">&quot;Digest comparison failure; trying to refresh user from DAO in case password had changed&quot;</span>);</span><br><span class="line">         user = <span class="built_in">this</span>.userDetailsService.loadUserByUsername(digestAuth.getUsername());</span><br><span class="line">         <span class="built_in">this</span>.userCache.putUserInCache(user);</span><br><span class="line">         serverDigestMd5 = digestAuth.calculateServerDigest(user.getPassword(), request.getMethod());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (UsernameNotFoundException ex) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;DigestAuthenticationFilter.usernameNotFound&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; digestAuth.getUsername() &#125;, <span class="string">&quot;Username &#123;0&#125; not found&quot;</span>);</span><br><span class="line">      fail(request, response, <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(message));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// If digest is still incorrect, definitely reject authentication attempt</span></span><br><span class="line">   <span class="keyword">if</span> (!serverDigestMd5.equals(digestAuth.getResponse())) &#123;</span><br><span class="line">      logger.debug(LogMessage.format(</span><br><span class="line">            <span class="string">&quot;Expected response: &#x27;%s&#x27; but received: &#x27;%s&#x27;; is AuthenticationDao returning clear text passwords?&quot;</span>,</span><br><span class="line">            serverDigestMd5, digestAuth.getResponse()));</span><br><span class="line">      <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;DigestAuthenticationFilter.incorrectResponse&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Incorrect response&quot;</span>);</span><br><span class="line">      fail(request, response, <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(message));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 判断过期了没?</span></span><br><span class="line">   <span class="keyword">if</span> (digestAuth.isNonceExpired()) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;DigestAuthenticationFilter.nonceExpired&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Nonce has expired/timed out&quot;</span>);</span><br><span class="line">      fail(request, response, <span class="keyword">new</span> <span class="title class_">NonceExpiredException</span>(message));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   logger.debug(LogMessage.format(<span class="string">&quot;Authentication success for user: &#x27;%s&#x27; with response: &#x27;%s&#x27;&quot;</span>,</span><br><span class="line">         digestAuth.getUsername(), digestAuth.getResponse()));</span><br><span class="line">   <span class="comment">// 认证成功, 存储到 SecurityContextHolder 中</span></span><br><span class="line">   <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> createSuccessfulAuthentication(request, user);</span><br><span class="line">   <span class="type">SecurityContext</span> <span class="variable">context</span> <span class="operator">=</span> SecurityContextHolder.createEmptyContext();</span><br><span class="line">   context.setAuthentication(authentication);</span><br><span class="line">   SecurityContextHolder.setContext(context);</span><br><span class="line">   <span class="built_in">this</span>.securityContextRepository.saveContext(context, request, response);</span><br><span class="line">   chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>nonce</code>和<code>qop</code>:就是服务端返回的数据。</li><li><code>nc</code>:表示请求次数，该参数在防止重放攻击时有用。</li><li><code>cnonce</code>:表示客户端生成的随机数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤器 </tag>
            
            <tag> 认证 </tag>
            
            <tag> 登录 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> HTTP认证 </tag>
            
            <tag> HTTP Basic authentication </tag>
            
            <tag> HTTP Digest authentication </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20SpringSecurity-漏洞保护</title>
      <link href="/2022/11/28/02springcloud/20SpringSecurity-%E6%BC%8F%E6%B4%9E%E4%BF%9D%E6%8A%A4/"/>
      <url>/2022/11/28/02springcloud/20SpringSecurity-%E6%BC%8F%E6%B4%9E%E4%BF%9D%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring Security的先天优势是安全, 只要导入了 Spring security 依赖, 就已经防备住了很多的漏洞, 这是 Shiro和sa-token无法超越的优势, 但同时 Spring Security 也带来了”复杂”, 只能说各有优点吧</p><h1 id="漏洞保护"><a href="#漏洞保护" class="headerlink" title="漏洞保护"></a>漏洞保护</h1><h2 id="CSRF攻击与防御"><a href="#CSRF攻击与防御" class="headerlink" title="CSRF攻击与防御"></a>CSRF攻击与防御</h2><h3 id="csrf是什么"><a href="#csrf是什么" class="headerlink" title="csrf是什么?"></a>csrf是什么?</h3><p>跨站点请求伪造（<code>Cross Site Request Forgery</code>）又被称作 <code>CSRF</code>，攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p><blockquote><p>通俗易懂:</p><p>犯罪嫌疑人创造了天地银行的转账地址, 转账地址包含: 转账目标, 转账金额</p><p>转账目标: 犯罪嫌疑人自己的支付宝账号</p><p>转账金额: 9999999RMB</p><p>前提: </p><pre><code>1. 受害者事先已经登录过天地银行, 并且登录信息还没失效2. 天地银行未做任何csrf攻击防护</code></pre><p>开始:</p><p>这个地址给不同的用户有不同的效果: </p><ul><li>给犯罪嫌疑人使用: 犯罪嫌疑人天地银行将转账 9999999RMB 给 犯罪嫌疑人自己的支付宝账户</li><li>给受害者使用: 受害者天地银行将转账 9999999RMB 给 犯罪嫌疑人的支付宝账户, 通常受害者还不知情</li></ul></blockquote><p>说白了就是诈骗份子给了个账户, 叫跟受害者说, 这是妹子<strong>微信二维码</strong>, 你扫描下, 然后钱就被转走了</p><p>诈骗份子根本就不知道受害者的 <code>cookie</code> 是什么, 就创建了个”二维码”, 受害者自己就把钱转给诈骗份子了</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211281600247.png" alt="image-20221128160041164"></p><p>攻击演示可以看<code>spring_security</code>分支的</p><p><img src="C:%5CUsers%5Czhazha%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221128160720565.png" alt="image-20221128160720565"></p><p>这个项目</p><p>地址在这里: </p><p><a href="https://gitee.com/bangiao_admin/springcloud_study_parent/tree/spring_security/">springcloud_study_parent: 微服务学习 - Gitee.com</a></p><h3 id="如何防护"><a href="#如何防护" class="headerlink" title="如何防护?"></a>如何防护?</h3><p>文字版 <code>csrf</code> 过程</p><ol><li>用户正常认证天地银行, 用户本地存放有效 <code>cookie</code></li><li>攻击者伪造天地银行请求地址, 放置在第三方网站地址</li><li>攻击者诱惑用户访问他伪造好的请求地址</li><li>用户访问恶意地址, <code>cookie</code> 中的 <code>sessionid</code> 刚好在服务端找到对应 <code>session</code></li><li>验证通过, 钱转给攻击者</li></ol><p>防护方式:</p><ol><li>用户不被诱惑(用户能做到)</li><li><code>sessionid</code> 不存放在 <code>cookie</code> 上, 而是放在另外的位置, 等到验证时 拿出来验证(程序员能做到)</li><li>第三方地址访问 <code>cookie</code> 的时候, 不给 <code>cookie</code>(浏览器才能做到)</li><li>转钱的时候, 需要手机验证码(验证码方案)</li><li>网站这么重要的转钱地址, 怎么可以伪造呢? 不应该这么简单, 需要有效验证参数(同上验证码方案)</li><li>转账地址怎么能这么简单, 不应该再次数据密码么? (同上验证码方案)</li></ol><blockquote><p>无论是那种方式, 前提都是请求方法幂等, 即HTTP请求中的GET, HEAD, OPTIONS, TRACE方法不应该改变用户的状态</p></blockquote><blockquote><p>一个HTTP 方法是幂等的，指的是同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。 换句话说就是，幂等方法不应该具有副作用（统计用途除外）。 在正确实现的条件下， GET ， HEAD ， PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是</p></blockquote><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><p>给关键的地址添加验证码功能</p><p>比如:</p><ul><li>转账</li><li>登录</li><li>注册</li></ul><p>等</p><p>优点: 特点简单</p><p>缺点: 不够通用; 用户体验不好</p><h4 id="同源检测"><a href="#同源检测" class="headerlink" title="同源检测"></a>同源检测</h4><p>借助</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Origin <span class="keyword">Header</span></span><br><span class="line"><span class="keyword">Referer</span> <span class="keyword">Header</span></span><br></pre></td></tr></table></figure><p>这两个<code>Header</code>在浏览器发起请求时，大多数情况会自动带上，并且不能由前端修改，服务器接收到后可以根据这两个Header确定来源的域名；</p><p><strong>特殊情况:</strong> 如果<code>Origin</code>和<code>Referer</code>都不存在，建议直接进行阻止，特别是如果您没有使用随机 <code>CSRF Token</code> 作为第二次检查。</p><p>另外，<code>CSRF</code>大多数情况下来自第三方域名，但并不能排除本域发起。如果攻击者有权限在本域发布评论（含链接、图片等），那么它可以直接在本域发起攻击，这种情况下同源策略无法达到防护的作用。</p><blockquote><p>犯罪嫌疑人借助天地银行地址伪造针对天地银行的请求, 然后借助天地银行网页的评论（含链接、图片等）, 引导受害者访问伪造的地址</p></blockquote><p><strong>综上所述：</strong>同源验证是一个相对简单的防范方法，能够防范绝大多数的CSRF攻击。但这并不是万无一失的，对于安全性要求较高，或者有较多用户输入内容的网站，我们就要对关键的接口做额外的防护措施。</p><p>优点: 比较简单</p><p>缺点: </p><ul><li>不太全面</li><li>防护力度不行</li><li>可能有些合法的用户根本就没有<code>Origin</code>和<code>Referer</code></li><li>302重定向没有<code>Origin</code></li><li><code>Referer</code>各个浏览器自己实现的可能存在漏洞, 说白点犯罪嫌疑人自己也能实现一个浏览器, 所以也不是很安全的样子</li></ul><p>另外在以下情况下<code>Referer</code>没有或者不可信：</p><ol><li><code>IE6、7</code>下使用<code>window.location.href=url</code>进行界面的跳转，会丢失<code>Referer</code>。</li><li><code>IE6、7</code>下使用<code>window.open</code>，也会缺失<code>Referer</code>。</li><li><code>HTTPS</code>页面跳转到<code>HTTP</code>页面，所有浏览器<code>Referer</code>都丢失。</li><li>点击<code>Flash</code>上到达另外一个网站的时候，<code>Referer</code>的情况就比较杂乱，不太可信。</li></ol><blockquote><p>因此，服务器的策略是优先判断 <code>Origin</code>，如果请求头中没有包含 <code>Origin</code> 属性，再根据实际情况判断是否使用 <code>Referer</code> 值，从而增加攻击难度。</p></blockquote><h4 id="添加token"><a href="#添加token" class="headerlink" title="添加token"></a>添加token</h4><p>不要用 <code>cookie</code> 作为身份认证的工具了, 直接使用 <code>token</code></p><p>这种方式比 <code>cookie</code> 更加的安全些, 需要找到除 <code>cookie</code> 的地方存放 <code>token</code> (比如前端网页 表单, 比如<code>localstore</code>等方式), 然后在访问请求时, 浏览器不会自动带上 <code>token</code>, 这样也就不会出现问题</p><p>只有在需要<code>token</code>时, 由程序员主动读取 <code>token</code> 并添加到 <code>header</code> 中, 传递给后端进行进一步处理</p><blockquote><p>单机情况下, 服务端的 <code>token</code> 可能还是存放在 <code>session</code> 中, 只不过客户端的 <code>cookie</code> 内存放的 <code>sessionid</code> 改了个名字叫 <code>token</code> 放到 <code>cookie</code> 之外了</p></blockquote><p>但是这种方式会带来别的问题, 比如 分布式情况下, 服务端<code>session</code>存放的 <code>token</code> 存在问题</p><p>在<code>nginx</code> 反向代理的情况下, 存放到单机的 <code>session</code> 下肯定不行, 所以此时需要用上 <code>redis</code></p><p>另外由于对 <code>session</code> 的存储存在性能和比较复杂的问题, 很多网站的开发者不再使用 <code>session</code> 作为存储单位, 而是通过计算获得新的 <code>token</code> 然后将 <code>token</code> 存放在 <code>redis</code> 中</p><p>这里生成 <code>token</code> 的方式一般是 <strong>用户id + 时间戳 + 随机数</strong>  然后通过对称加密方式对其进行加密</p><p>在 <code>token</code> 解密之后, 服务端可以拿到 上面的数据 进行 <code>token</code> 有效性验证, 将<code>UserID</code>与当前登录的<code>UserID</code>进行比较，并将时间戳与当前时间进行比较。</p><blockquote><p><code>Token</code>是一个比较有效的<code>CSRF</code>防护方法，只要页面没有<code>XSS</code>漏洞泄露<code>Token</code>，那么接口的<code>CSRF</code>攻击就无法成功。</p><p>但是此方法的实现比较复杂，需要给每一个页面都写入<code>Token</code>（前端无法使用纯静态页面），每一个<code>Form</code>及<code>Ajax</code>请求都携带这个<code>Token</code>，后端对每一个接口都进行校验，并保证页面<code>Token</code>及请求<code>Token</code>一致。这就使得这个防护策略不能在通用的拦截上统一拦截处理，而需要每一个页面和接口都添加对应的输出和校验。这种方法工作量巨大，且有可能遗漏。</p></blockquote><h4 id="双重Cookie验证"><a href="#双重Cookie验证" class="headerlink" title="双重Cookie验证"></a>双重<code>Cookie</code>验证</h4><p>在会话中存储<code>CSRF Token</code>比较繁琐，而且不能在通用的拦截上统一处理所有的接口。</p><p>那么另一种防御措施是使用双重提交<code>Cookie</code>。利用<code>CSRF</code>攻击不能获取到用户<code>Cookie</code>的特点，我们可以要求<code>Ajax</code>和表单请求携带一个<code>Cookie</code>中的值。</p><blockquote><p>利用诈骗份子根本就不知道受害者 <code>cookie</code> 内容的情况, 在 <code>cookie</code> 中存放后端传递给<code>cookie</code>的密文, 最重要的来了, 在请求敏感数据前, <strong>将 <code>cookie</code> 中的内容取出来, 当作参数提交给后端验证数据是否相同</strong></p></blockquote><p>双重<code>Cookie</code>采用以下流程：</p><ul><li>在用户访问网站页面时，向请求域名注入一个<code>Cookie</code>，内容为随机字符串（例如<code>csrfcookie=v8g9e4ksfhw</code>）。</li><li>在前端向后端发起请求时，取出<code>Cookie</code>，并添加到<code>URL</code>的参数中（接上例<code>POST https://www.a.com/comment?csrfcookie=v8g9e4ksfhw</code>）。</li><li>后端接口验证<code>Cookie</code>中的字段与<code>URL</code>参数中的字段是否一致，不一致则拒绝。</li></ul><p>由于任何跨域都会导致前端无法获取<code>Cookie</code>中的字段（包括子域名之间），于是发生了如下情况：</p><ul><li>如果用户访问的网站为<code>www.a.com</code>，而后端的api域名为<code>api.a.com</code>。那么在<code>www.a.com</code>下，前端拿不到<code>api.a.com</code>的<code>Cookie</code>，也就无法完成双重Cookie认证。</li><li>于是这个认证<code>Cookie</code>必须被种在<code>a.com</code>下，这样每个子域都可以访问。</li><li>任何一个子域都可以修改<code>a.com</code>下的<code>Cookie</code>。</li><li>某个子域名存在漏洞被<code>XSS</code>攻击（例如<code>upload.a.com</code>）。虽然这个子域下并没有什么值得窃取的信息。但攻击者修改了<code>a.com</code>下的<code>Cookie</code>。</li><li>攻击者可以直接使用自己配置的<code>Cookie</code>，对<code>XSS</code>中招的用户再向<code>www.a.com</code>下，发起<code>CSRF</code>攻击。</li></ul><p>总结: </p><p><strong>用双重<code>Cookie</code>防御<code>CSRF</code>的优点：</strong></p><ul><li>无需使用<code>Session</code>，适用面更广，易于实施。</li><li><code>Token</code>储存于客户端中，不会给服务器带来压力。</li><li>相对于<code>Token</code>，实施成本更低，可以在前后端统一拦截校验，而不需要一个个接口和页面添加。</li></ul><p><strong>缺点：</strong></p><ul><li><code>Cookie</code>中增加了额外的字段。</li><li>如果有其他漏洞（例如<code>XSS</code>），攻击者可以注入<code>Cookie</code>，那么该防御方式失效。</li><li>难以做到子域名的隔离。</li><li>为了确保<code>Cookie</code>传输安全，采用这种防御方式的最好确保用整站<code>HTTPS</code>的方式，如果还没切<code>HTTPS</code>的使用这种方式也会有风险。</li></ul><h4 id="Samesite-Cookie属性"><a href="#Samesite-Cookie属性" class="headerlink" title="Samesite Cookie属性"></a>Samesite Cookie属性</h4><p><code>Google</code>起草了一份草案来改进HTTP协议，那就是为<code>Set-Cookie</code>响应头新增<code>Samesite</code>属性，它用来标明这个 <code>Cookie</code>是个<code>“同站 Cookie”</code>，同站Cookie只能作为第一方<code>Cookie</code>，不能作为第三方<code>Cookie</code>，<code>Samesite</code> 有两个属性值，分别是 <code>Strict</code> 和 <code>Lax</code>，下面分别讲解：</p><p><code>Samesite=Strict</code></p><p>这种称为严格模式. 如果淘宝配置了上面这种严格模式, 那么在百度搜索到的淘宝地址, 即便用户在前面已经登录过淘宝, 从百度点击进入的淘宝都不会有登录状态, 需要用户重新登录</p><p><code>Samesite=Lax</code></p><p>异步请求或者 <code>post</code> 请求时, 不会有 <code>cookie</code></p><p>如果<code>SamesiteCookie</code>被设置为<code>Strict</code>，浏览器在任何跨域请求中都不会携带<code>Cookie</code>，新标签重新打开也不携带，所以说<code>CSRF</code>攻击基本没有机会。</p><p>但是跳转子域名或者是新标签重新打开刚登陆的网站，之前的<code>Cookie</code>都不会存在。尤其是有登录的网站，那么我们新打开一个标签进入，或者跳转到子域名的网站，都需要重新登录。对于用户来讲，可能体验不会很好。</p><p>如果<code>SamesiteCookie</code>被设置为<code>Lax</code>，那么其他网站通过页面跳转过来的时候可以使用<code>Cookie</code>，可以保障外域连接打开页面时用户的登录状态。但相应的，其安全性也比较低。</p><p>另外一个问题是<code>Samesite</code>的兼容性不是很好，现阶段除了从新版<code>Chrome</code>和<code>Firefox</code>支持以外，<code>Safari</code>以及<code>iOS</code> <code>Safari</code>都还不支持，现阶段看来暂时还不能普及。</p><p>而且，<code>SamesiteCookie</code>目前有一个致命的缺陷：<strong>不支持子域。</strong>例如，种在<code>topic.a.com</code>下的<code>Cookie</code>，并不能使用<code>a.com</code>下种植的<code>SamesiteCookie</code>。这就导致了当我们网站有多个子域名时，不能使用<code>SamesiteCookie</code>在主域名存储用户登录信息。每个子域名都需要用户重新登录一次。</p><p>总之，<code>SamesiteCookie</code>是一个可能替代同源验证的方案，但目前还并不成熟，其应用场景有待观望。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>后端接口防止XSRF漏洞</p><ul><li>严格管理所有的上传接口，防止任何预期之外的上传内容（例如HTML）。</li><li>添加Header <code>X-Content-Type-Options: nosniff</code> 防止黑客上传HTML内容的资源（例如图片）被解析为网页。</li><li>对于用户上传的图片，进行转存或者校验。不要直接使用用户填写的图片链接。</li></ul><p>简单总结一下上文的防护策略：</p><ul><li><code>CSRF</code>自动防御策略：同源检测（<code>Origin</code> 和 <code>Referer</code> 验证）。</li><li><code>CSRF</code>主动防御措施：<code>Token</code>验证 或者 双重Cook<code>i</code>e验证 以及配合<code>Samesite Cookie</code>。</li><li>保证页面的幂等性，后端接口不要在GET页面中做用户操作。</li></ul><p>为了更好的防御<code>CSRF</code>，最佳实践应该是结合上面总结的防御措施方式中的优缺点来综合考虑，结合当前<code>Web</code>应用程序自身的情况做合适的选择，才能更好的预防<code>CSRF</code>的发生。</p><h3 id="落地实现"><a href="#落地实现" class="headerlink" title="落地实现"></a>落地实现</h3><h4 id="令牌同步模式"><a href="#令牌同步模式" class="headerlink" title="令牌同步模式"></a>令牌同步模式</h4><p>具体的操作方式就是在每一个<code>HTTP</code>请求中，除了默认自动携带的<code>Cookie</code>参数之外，再额外提供一个安全的、随机生成的字符串，我们称之为<code>CSRF</code>令牌。这个<code>CSRF</code>令牌由服务端生成，生成后在<code>HttpSession</code>中保存一份。当前端请求到达后，将请求携带的<code>CSRF</code>令牌信息和服务端中保存的令牌进行对比，如果两者不相等，则拒绝掉该<code>HTTP</code>请求。<br>考虑到会有一些外部站点链接到我们的网站，所以我们要求请求是幂等的，这样对于<code>GET、HEAD、OPTIONS、TRACE</code>等方法就没有必要使用<code>CSRF</code>令牌了，强行使用可能会导致令牌泄漏。</p><blockquote><p>注意这句话: <strong>对于<code>GET、HEAD、OPTIONS、TRACE</code>等方法就没有必要使用<code>CSRF</code>令牌了，强行使用可能会导致令牌泄漏</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">csrf-spring-security</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">zhazha</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello, world&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/index.html&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">th:name</span>=<span class="string">&quot;$&#123;_csrf.parameterName&#125;&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据前面所讲，请求方法要幂等，所以在 Spring Security中，<strong>默认不会对<code>GET、HEAD、OPTIONS 以及 TRACE</code>请求进行<code>CSRF</code>令牌校验，这也是<code>/hello</code>接口是<code>Post</code> 请求的原因。</strong></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211282109596.png" alt="image-20221128210938578"></p><p>如果此时, 提交表单 <code>form</code> , 并且, 带有 <code>_csrf</code> 参数的 <code>input</code> 标签被删除, 在提交表单时, 就会报错</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211282112363.png" alt="image-20221128211200170"></p><p>上面的方法使用的是 form 表单的方式, 但如果使用的是 Ajax 呢?</p><p>明显上面这种方式是不行的, 没有地方存储 _csrf 的数值</p><p>cookie 中也没有匹配的数值: </p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211282119000.png" alt="image-20221128211908899"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211282119737.png" alt="image-20221128211928646"></p><h5 id="针对Ajax"><a href="#针对Ajax" class="headerlink" title="针对Ajax"></a>针对Ajax</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/login.html&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.csrf.CookieCsrfTokenRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      http</span><br><span class="line">            .authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">            .successHandler((request, response, authentication) -&gt; &#123;</span><br><span class="line">               response.getWriter().write(<span class="string">&quot;login success&quot;</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            .permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf()</span><br><span class="line">            .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());</span><br><span class="line">            </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码在这里:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211282126489.png" alt="image-20221128212354090"></p><p>需要注意的是，这里将<code>csrfTokenRepository</code>配置为<code>CookieCsrfTokenRepository</code>，并设置<code>httpOnly</code> 属性为<code>false</code>，否则前端将无法读取到<code>Cookie</code>中的<code>CSRF</code>令牌。</p><p><code>login.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/3.4.0/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery-cookie/1.4.1/jquery.cookie.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> <span class="attr">id</span>=<span class="string">&quot;loginBtn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   $(<span class="string">&quot;#loginBtn&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> csrf = $.<span class="title function_">cookie</span>(<span class="string">&quot;XSRF-TOKEN&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      $.<span class="title function_">post</span>(<span class="string">&#x27;/login.html&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">username</span>: $(<span class="string">&#x27;#username&#x27;</span>).<span class="title function_">val</span>(),</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">password</span>: $(<span class="string">&quot;#password&quot;</span>).<span class="title function_">val</span>(),</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">_csrf</span>: csrf</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="title function_">alert</span>(data);</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">   &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动项目后访问<code>/login.html</code>页面</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211282145973.png" alt="image-20221128214549890"></p><p>前面存放在 表单的 <code>_csrf</code> 现在转移到 <code>session</code> 的 <code>XSRF-TOKEN</code>中了</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211282146885.png" alt="image-20221128214647802"></p><p>登录成功</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211282147306.png" alt="image-20221128214721203"></p><blockquote><p><code>token</code>放在 <code>cookie</code> 中不会造成 <code>csrf</code> 攻击, 因为 攻击者 根本不知道 <code>cookie</code> 中保存的内容, 还有在登录的时候, 请求参数中还得带上 <code>_csrf</code> 参数, 否则请求还会失败</p></blockquote><blockquote><p>这两个案例, 前面一个将 <code>_csrf token</code> 保存到 <code>HttpSession</code> 中, 另一个将 <code>_csrf</code> 保存到 <code>cookie</code> 中</p></blockquote><h4 id="SameSite防御方案"><a href="#SameSite防御方案" class="headerlink" title="SameSite防御方案"></a><code>SameSite</code>防御方案</h4><p><code>SameSite</code>是最近几年才出现的一个解决方案，是 <code>Chrome 51</code>开始支持的一个属性，用来防止 <code>CSRF</code>攻击和用户追踪。<br>这种方式通过在<code>Cookie</code>上指定<code>SameSite</code>属性，要求浏览器从外部站点发送请求时，不应携带<code>Cookie</code>信息，进而防止<code>CSRF</code> 攻击。添加了<code>SameSite</code>属性的响应头类似下面这样:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211282156838.png" alt="image-20221128215612739"></p><p><code>SameSite</code>属性值有三种:</p><ul><li><code>Strict</code>: 只有同一站点发送的请求才包含<code>Cookie</code>信息，不同站点发送的请求将不会包含<code>Cookie</code>信息。</li><li><code>Lax</code>: 同一站点发送的请求或者导航到目标地址的<code>GET</code> 请求会自动包含<code>Cookie</code>信息，否则不包含<code>Cookie</code>信息。</li><li><code>None</code>: <code>Cookie</code>将在所有上下文中发送，即允许跨域发送。</li></ul><p><code>Spring Security</code>不支持 <code>SameSite</code> , 但是 <code>Spring Session</code> 支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.155</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.web.http.CookieSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.web.http.DefaultCookieSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSessionConfig</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> CookieSerializer <span class="title function_">httpSessionIdResolver</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">DefaultCookieSerializer</span> <span class="variable">cookieSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultCookieSerializer</span>();</span><br><span class="line">      cookieSerializer.setSameSite(<span class="string">&quot;strict&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> cookieSerializer;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211282208058.png" alt="image-20221128220802945"></p><h4 id="会话超时"><a href="#会话超时" class="headerlink" title="会话超时"></a>会话超时</h4><p><code>CSRF</code>令牌生成后，往往都保存在 <code>HttpSession</code>中，但是<code>HttpSession</code>可能会因为超时而失效，导致前端请求传来的<code>CSRF</code>令牌无法得到验证，解决这一问题有如下几种方式:</p><ul><li>最佳方案是在表单提交时，通过<code>js</code>获取<code>CSRF</code>令牌，然后将获取到的<code>CSRF</code>令牌跟随表单一起提交。</li><li>当会话快要过期时，前端通过js提醒用户刷新页面，以给会话“续命”。</li><li>将令牌存储在<code>Cookie</code> 中而不是<code>HttpSession</code> 中。</li></ul><h4 id="登录和注销"><a href="#登录和注销" class="headerlink" title="登录和注销"></a>登录和注销</h4><p>为了保护用户的敏感信息，登录请求和注销请求需要注意CSRF 攻击防护。</p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>文件上传请求比较特殊，因此需要额外注意。如果将<code>CSRF</code>放在请求体中，就会面临一个“鸡和蛋”的问题。服务端需要先验证<code>CSRF</code>令牌以确认请求是否合法，而这也意味需要先读取请求体以获取<code>CSRF</code>令牌，这就陷入一个死循环了。<br>一般来说，将<code>CSRF</code> 防御与<code>multipart/form-data</code>一起使用，我们有两种不同的策略:</p><ul><li>将CSRF令牌放在请求体中。</li><li>将CSRF令牌放在请求URL中。</li></ul><p>将<code>CSRF</code>令牌放在请求体中，意味着任何人都可以向我们的服务器上传临时文件，但是只有<code>CSRF</code>令牌验证通过的用户，才能真正提交一个文件，这也是目前推荐的方案，因为上传临时文件对服务器的影响可以忽略不计。如果不希望未经授权的用户上传临时文件，那么可以将<code>CSRF</code>令牌放在请求<code>URL</code>地址中，但是这种方式可能带来令牌泄漏的风险。</p><h2 id="HTTP响应头处理"><a href="#HTTP响应头处理" class="headerlink" title="HTTP响应头处理"></a>HTTP响应头处理</h2><p>HTTP响应头中的许多属性都可以用来提高Web安全。本节我们来看一下Spring Security中提供显式支持的一些HTTP响应头。<br>Spring Security默认情况下，显式支持的HTTP响应头主要有如下几种:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* Cache-Control: no-cache, no-store, max-age=0, must-revalidate</span><br><span class="line">* Pragma: no-cache</span><br><span class="line">* Expires: 0</span><br><span class="line">* X-Content-Type-Options: nosniff</span><br><span class="line">* Strict-Transport-Security: max-age=31536000 ; includeSubDomains</span><br><span class="line">* X-Frame-Options: DENY</span><br><span class="line">* X-XSS-Protection: 1; mode=block</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这里一共有七个响应头，前三个都是与缓存相关的，因此一共可以分为五大类。<br>这些响应头都是在HeaderWriterFilter 中添加的,默认情况下,该过滤器就会添加到SpringSecurity过滤器链中，HeaderWriterFilter是通过HeadersConfigurer进行配置的，我们来看一下HeadersConfigurer 中几个关键的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;HeaderWriter&gt; <span class="title function_">getHeaderWriters</span><span class="params">()</span> &#123;</span><br><span class="line">   List&lt;HeaderWriter&gt; writers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   addIfNotNull(writers, contentTypeOptions.writer);</span><br><span class="line">   addIfNotNull(writers, xssProtection.writer);</span><br><span class="line">   addIfNotNull(writers, cacheControl.writer);</span><br><span class="line">   addIfNotNull(writers, hsts.writer);</span><br><span class="line">   addIfNotNull(writers, frameOptions.writer);</span><br><span class="line">   addIfNotNull(writers, hpkp.writer);</span><br><span class="line">   addIfNotNull(writers, contentSecurityPolicy.writer);</span><br><span class="line">   addIfNotNull(writers, referrerPolicy.writer);</span><br><span class="line">   addIfNotNull(writers, featurePolicy.writer);</span><br><span class="line">   writers.addAll(headerWriters);</span><br><span class="line">   <span class="keyword">return</span> writers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认前五个不为null</p><p>contentTypeOptions.writer：负责处理X-Content-Type-Options响应头</p><p>xssProtection.writer：负责X-XSS-Protection响应头</p><p>cacheControl.writer：负责处理Cache-Control Pragma Expires的响应头</p><p>hsts.writer：负载处理Strict-Transport-Security响应头</p><p>frameOptions.writer：负责处理X-Frame-Options响应头</p><h3 id="缓存控制"><a href="#缓存控制" class="headerlink" title="缓存控制"></a>缓存控制</h3><p>和缓存控制相关响应头有三个</p><ul><li><code>Cache-Control: no-cache, no-store, max-age=0, must-revalidate</code></li><li><code>Pragma: no-cache</code></li><li><code>Expires: 0</code></li></ul><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p><code>HTTP /1.1</code>引入，无论请求头还是响应头都支持该字段.</p><ul><li><p><code>no-store</code>表示不作任何缓存，每次请求都会从服务端完整地下载内容</p></li><li><p><code>no-cache</code>表示缓存但需要重新验证，数据虽然缓存在客户端，但是当需要使用该数据时，还是会向服务端发送请求，服务端则验证请求中所描述的缓存是否过期，如果没有过期，则返回<code>304</code>，客户端使用缓存；如果已经过期，则返回最新数据。</p></li><li><p><code>max-age</code>表示缓存的有效期，单位为秒</p></li><li><p><code>must-revalidate</code>表示当缓存在使用一个陈旧的资源时，必须先验证它的状态，已过期的将不被使用。</p></li></ul><h3 id="Pragma"><a href="#Pragma" class="headerlink" title="Pragma"></a>Pragma</h3><p>和<code>Cache-Control</code>类似，兼容<code>HTTP/1.0</code></p><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>Expires指在指定日期之后，缓存过期，如果日期为0，表示缓存已经过期。</p><p>Spring Security默认就是不做任何缓存，对于放行的url会缓存。</p><p>如果请求本身没有经过 Spring security , 那么就不会经过 Filter 过滤器, 也就会被缓存了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   web.ignoring()</span><br><span class="line">         .antMatchers(<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想经过过滤器的请求也开启缓存，需要禁用掉Security的cacheControl  <code>.headers().cacheControl().disable()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   http</span><br><span class="line">         .authorizeRequests()</span><br><span class="line">         .anyRequest().authenticated()</span><br><span class="line">         .and()</span><br><span class="line">         .headers()</span><br><span class="line">         .cacheControl()</span><br><span class="line">         .disable()</span><br></pre></td></tr></table></figure><h3 id="X-Content-Type-Options"><a href="#X-Content-Type-Options" class="headerlink" title="X-Content-Type-Options"></a>X-Content-Type-Options</h3><p><code>X-Content-Type-Options: nosniff</code>  表示禁用客户端的<code>MIME</code>类型的嗅探，即服务端告诉客户端对于<code>MIME</code>类型的设置没有任何问题，当<code>Content-Type</code>类型值缺失时，不需要客户端对响应报文进行自我解析。(防止被XSS攻击)</p><p>如果不想禁用<code>MIME</code>嗅探，配置 <code>.headers().contentTypeOptions().disable()</code></p><h3 id="Strict-Transport-Security"><a href="#Strict-Transport-Security" class="headerlink" title="Strict-Transport-Security"></a>Strict-Transport-Security</h3><p><code>Strict-Transport-Security</code>用来指定当前客户端只能通过<code>HTTPS</code>访问服务端，而不能通过<code>HTTP</code>访问。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strict-Transport-Security: max-age=31536000 ; includeSubDomains</span><br></pre></td></tr></table></figure><p>(1) <code>max-age</code>:设置在浏览器收到这个请求后的多少秒的时间内，凡是访问这个域名下的请求都使用HTTPS请求。<br>(2) <code>includeSubDomains</code>:这个参数是可选的，如果被指定，表示第1条规则也适用于子域名。</p><p>这个响应头并非总是会添加，如果当前请求是<code>HTTPS</code>请求，这个请求头才会添加，否则该请求头就不会添加，具体实现逻辑在<code>HstsHeaderWriter#writeHeaders</code>方法中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeHeaders</span><span class="params">(HttpservletRequest request,</span></span><br><span class="line"><span class="params">                         HttpservletResponse response)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.requestMatcher.matches(request)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!response.containsHeader(HSTS_HEADER_NAME)) &#123;</span><br><span class="line">response.setHeader(HSTS_HEADER_NAME， <span class="built_in">this</span>.hstsHeaderValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，向<code>response</code> 中添加响应头之前，会先调用<code>requestMatcher.matches</code>方法对当前请求进行判断，判断当前请求是否是<code>HTTPS</code>请求，如果是<code>HTTPS</code>请求，则添加该响应头，否则不添加。</p><p>可以通过<code>java</code>自带的<code>keytool</code>来生成<code>HTTPS</code>证书。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> tomcathttps -keyalg RSA -keysize 2048 -keystore zhazha.p1 -validity 365</span><br></pre></td></tr></table></figure><p>命令含义如下:</p><ul><li><code>genkey</code>:表示要创建一个新的密钥。</li><li><code>alias</code>:表示<code>keystore</code> 的别名。</li><li><code>keyalg</code>:表示使用的加密算法是RSA ，一种非对称加密算法。</li><li><code>keysize</code>:表示密钥的长度。</li><li><code>keystore</code>:表示生成的密钥存放位置。</li><li><code>validity</code>:表示密钥的有效时间，单位为天。</li></ul><p>接下来将生成的<code>zhazha.p1</code>证书复制到<code>Spring Boot</code> 项目的<code>resources</code>目录下，并在<code>application.properties</code>中添加如下配置:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.ssl.key-store</span>=<span class="string">classpath:zhazha.p1</span></span><br><span class="line"><span class="attr">server.ssl.key-alias</span>=<span class="string">tomcathttps</span></span><br><span class="line"><span class="attr">server.ssl.key-store-password-111111</span></span><br></pre></td></tr></table></figure><p>配置完成后，启动项目。浏览器中输入<code>https://localhost:8080/login</code>进行访问，<strong>由于这个<code>HTTPS</code>证书是我们自己生成的，并不被浏览器认可，所以在访问的时候会有安全提示，允许即可</strong>.</p><p>如果需要对<code>Strict-Transport-Security</code> 的值进行具体配置，例如关闭<code>includeSubDomains</code> 属性并重新设置<code>max-age</code>，方式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.and()</span><br><span class="line">.formLogin()</span><br><span class="line">.loginProcessingUrl(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">.successHandler((request, response, authentication) -&gt; &#123;</span><br><span class="line">   response.getWriter().write(<span class="string">&quot;login success&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.permitAll()</span><br><span class="line">.and()</span><br><span class="line">.csrf()</span><br><span class="line">.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())</span><br><span class="line">.and()</span><br><span class="line">.headers()</span><br><span class="line">.httpStrictTransportSecurity()</span><br><span class="line">.includeSubDomains(<span class="literal">false</span>)</span><br><span class="line">.maxAgeInSeconds(<span class="number">3600</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意位置, 如果放在上面, 那么就是报错哦~</p></blockquote><h3 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h3><p><code>X-Frame-Options</code>响应头用来告诉浏览器是否允许一个页面在<code>&lt;frame&gt; &lt;iframe&gt; &lt;embed&gt; </code>或者<code> &lt;object&gt;</code>中展现，通过该响应头可以确保网站没有被嵌入到其他站点里面，进而避免发生单击劫持。</p><ul><li><code>deny</code> 表示该页面不允许在<code>frame</code>中展现(默认)。</li><li><code>sameorigin</code>：该页面可以在相同域名页面的<code>frame</code>中展示。</li><li><code>allow-from uri</code>：表示该页面可以在指定来源的<code>frame</code>中展示。</li></ul><blockquote><p>所谓<strong>单击劫持</strong>是指攻击者被劫持的页面放在一个<code>iframe</code>标签中，设置该<code>iframe</code>不可见，然后将<code>iframe</code>标签覆盖在另一个页面上，诱使用户在该页面上进行操作，通过调制<code>iframe</code>页面位置，使用户单击<code>iframe</code>页面的按钮。</p></blockquote><h3 id="X-XSS-Protection"><a href="#X-XSS-Protection" class="headerlink" title="X-XSS-Protection"></a>X-XSS-Protection</h3><p><code>X-XSS-Protection</code>响应头告诉浏览器当检测到跨站脚本攻击时，浏览器将停止加载页面</p><ul><li>0 表示禁止<code>XSS</code>过滤</li><li>1 表示启用<code>XSS</code>过滤。如果检测到跨站脚本攻击，浏览器将清除页面。</li><li><code>1:mode=block</code> 表示启用<code>XSS</code>过滤。如果检测到攻击，浏览器不会清除页面，而是阻止页面加载。Spring Security设置是这个</li><li><code>1:report=&lt;reporting-URI&gt;</code>表示启用<code>XSS</code>过滤，如果检测到跨站脚本攻击，浏览器将清除页面并发送违规报告</li></ul><blockquote><p> 所谓<code>XSS</code>攻击是<code>Crocs-Site Scripting</code>  跨站脚本攻击，攻击者在网站上注入恶意的<code>JavaScript</code>代码，窃取<code>Cookie</code>信息，监听用户行为，修改<code>DOM结构</code>。</p></blockquote><blockquote><p>这里就不提供关闭的方式了, 最好不要</p></blockquote><h3 id="Content-Security-Policy"><a href="#Content-Security-Policy" class="headerlink" title="Content-Security-Policy"></a>Content-Security-Policy</h3><p><code>Content-Security-Policy</code> 为内容安全策略，简称CSP，用于检测并削弱某些特定类型的攻击，例如跨站脚本（XSS）和数据注入攻击</p><p>CSP<strong>相当于通过一个白名单明确告诉客户端，哪些外部资源可以加载和执行</strong>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src <span class="string">&#x27;self&#x27;</span> ; script-src <span class="string">&#x27;self&#x27;</span>; object-src <span class="string">&#x27;none&#x27;</span>; style-src <span class="string">&#x27;self&#x27;</span> https://maxcdn.bootstrapcdn.com https://getbootstrap.com; img-src *; child-src https:</span><br></pre></td></tr></table></figure><p>这个响应头含义如下:</p><ul><li><code>default-src &#39;self&#39;</code>:默认情况下所有资源只能从当前域中加载。接下来细化的配置会覆盖<code>default-src</code>，没有细化的选项则使用<code>default-src</code>。</li><li><code>script-src &#39;self&#39;</code>:表示脚本文件只能从当前域名加载。</li><li><code>object-src &#39;none&#39;</code>:表示<code>object</code>标签不加载任何资源。</li><li><code>style-src cdn.zhazha.com</code>:表示只加载来自<code>cdn.zhazha.com</code> 的样式表。</li><li><code>img-src *</code>:表示可以从任意地址加载图片。</li><li><code>child-src https</code>:表示必须使用<code>HTTPS</code>来加载<code>frame</code>。(已弃用)</li></ul><p><code>Spring Security</code>为 <code>Content-Security-Policy</code>提供了配置方法，如果我们需要配置，则方式如下:</p><p><code>csrf</code>之后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.and() <span class="comment">// 添加白名单</span></span><br><span class="line">.headers()</span><br><span class="line">.contentSecurityPolicy(<span class="string">&quot;default-src &#x27;self&#x27; ; script-src &#x27;self&#x27;; object-src &#x27;none&#x27;; style-src &#x27;self&#x27; https://maxcdn.bootstrapcdn.com/bootstrap https://getbootstrap.com/docs; img-src *;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Referrer-Policy"><a href="#Referrer-Policy" class="headerlink" title="Referrer-Policy"></a>Referrer-Policy</h3><p><code>Referrer-Policy</code>描述用户从哪里进入到当前页面</p><p>这个表示如果是从<code>HTTPS</code> 网址链接到<code>HTTP</code>网址，就不发送 <code>Referer</code>字段，其他情况发送。开发者可以通过<code>Spring Security</code>中提供的方法对此进行修改，方式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.and()</span><br><span class="line">.headers()</span><br><span class="line">.referrerPolicy()</span><br><span class="line">.policy(ReferrerPolicyHeaderWriter.ReferrerPolicy.ORIGIN)</span><br></pre></td></tr></table></figure><p>事先是这样:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211291128186.png" alt="image-20221129112815077"></p><p>修改之后是这样:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211291129851.png" alt="image-20221129112944704"></p><p>这个配置取值是<code>origin</code>，表示总是发送源信息（源信息仅包含请求协议和域名，不包含其他路径信息，与之相对的是完整的URL）。其他的取值还有:</p><ul><li><code>no-referrer</code>:表示从请求头中移除Referer字段。</li><li><code>same-origin</code>:表示链接到同源地址时，发送文件源信息作为引用地址，否则不发送。</li><li><code>strict-origin</code>:表示从HTTPS链接到HTTP时不发送源信息，否则发送。</li><li><code>origin-when-cross-origin</code>:表示对于同源请求会发送完整的URL作为引用地址，但是对于非同源请求，则只发送源信息。</li><li><code>strict-origin-when-cross-origin</code>:表示对于同源的请求，会发送完整的URL作为引用地址;跨域时，如果是从HTTPS链接到HTTP，则不发送Referer字段，否则发送文件的源信息</li><li><code>unsafe-url</code>:表示无论是同源请求还是非同源请求，都发送完整的URL（移除参数信息之后)作为引用地址。</li></ul><h3 id="Feature-Policy"><a href="#Feature-Policy" class="headerlink" title="Feature-Policy"></a>Feature-Policy</h3><p><code>Feature-Policy</code>响应头提供了一种可以在本<strong>页面</strong>或包含的<code>iframe</code><strong>上启用或禁止浏览器特性的机制</strong>（<strong>移动端开发使用较多</strong>)。举一个简单例子，如果想要禁用震动和定位API，那么可以在响应头中添加如下内容:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Feature-Policy: vibrate <span class="string">&#x27;none&#x27;</span> ; geolocation <span class="string">&#x27;none&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Clear-Site-Data"><a href="#Clear-Site-Data" class="headerlink" title="Clear-Site-Data"></a>Clear-Site-Data</h3><p><code>Clear-Site-Data</code> 一般用在注销登录响应头中，表示告诉浏览器清除当前网站相关的数据，可以通过具体参数指定想要清除的数据，比如<code>cookies cache storage</code>等，也可以通过”*”表示清除所有的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .and()</span><br><span class="line">            .logout()</span><br><span class="line">            .addLogoutHandler(<span class="keyword">new</span> <span class="title class_">HeaderWriterLogoutHandler</span>(<span class="keyword">new</span> <span class="title class_">ClearSiteDataHeaderWriter</span>(ClearSiteDataHeaderWriter.Directive.ALL)))</span><br><span class="line">            .and()</span><br><span class="line">            .headers().contentTypeOptions().disable()</span><br><span class="line">            .csrf().disable()</span><br><span class="line">            .headers()</span><br><span class="line">            .featurePolicy(<span class="string">&quot;vibrate &#x27;none&#x27;; geolocation &#x27;none&#x27;&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .referrerPolicy()</span><br><span class="line">            .policy(ReferrerPolicyHeaderWriter.ReferrerPolicy.ORIGIN_WHEN_CROSS_ORIGIN)</span><br><span class="line">            .and()</span><br><span class="line">            .contentSecurityPolicy(contentSecurityPolicyConfig -&gt; &#123;</span><br><span class="line">                contentSecurityPolicyConfig.policyDirectives(<span class="string">&quot;default-src &#x27;self&#x27; ; script-src &#x27;self&#x27;; object-src &#x27;none&#x27;; style-src &#x27;self&#x27; https://maxcdn.bootstrapcdn.com/bootstrap https://getbootstrap.com/docs; img-src *;&quot;</span>);</span><br><span class="line">                contentSecurityPolicyConfig.reportOnly(); <span class="comment">// 配置报告行为</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTTP通信安全"><a href="#HTTP通信安全" class="headerlink" title="HTTP通信安全"></a>HTTP通信安全</h2><p>HTTP通信安全主要从三个方面入手:</p><p>(1）使用HTTPS代替HTTP。</p><p>(2)Strict-Transport-Security 配置。</p><p>(3）代理服务器配置。<br>其中第2点我们前面已经讲过，这里主要和大家分享第1点和第3点。</p><h3 id="使用HTTPS"><a href="#使用HTTPS" class="headerlink" title="使用HTTPS"></a>使用HTTPS</h3><p>作为一个框架，Spring Security不处理HTTP连接问题，因此不直接提供对HTTPS的支持。但是，它提供了许多有助于HTTPS使用的功能。<br>接下来我们通过一个简单的案例来演示其具体用法。<br>首先创建一个Spring Boot项目，引入 Spring Security和 Web，然后参考<code>Strict-Transport-Security</code>小节中的方式创建HTTPS 证书，并配置到Spring Boot 项目中。<br>配置完成后，我们再在application.yml中添加如下配置修改项目端口号:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8443</span> <span class="comment"># 这个端口将被用于 https</span></span><br><span class="line">  <span class="attr">ssl:</span></span><br><span class="line">    <span class="attr">key-store:</span> <span class="string">classpath:zhazha.p1</span> <span class="comment"># ssl 证书创建</span></span><br><span class="line">    <span class="attr">key-alias:</span> <span class="string">tomcathttps</span></span><br><span class="line">    <span class="attr">key-store-password:</span> <span class="number">112233</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">&#x27;zhazha&#x27;</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&#x27;&#123;noop&#125;123456&#x27;</span></span><br></pre></td></tr></table></figure><p>此时我们的项目就支持<code>HTTPS</code> 访问了，<code>HTTPS</code> 的访问端口是<code>8443</code>。为了更好地演示Spring Security的功能，我们需要项目同时支持<code>HTTPS</code>和 <code>HTTP</code>，所以还需要在项目中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> TomcatServletWebServerFactory <span class="title function_">tomcatServletWebServerFactory</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">TomcatServletWebServerFactory</span> <span class="variable">tomcatServletWebServerFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line">      tomcatServletWebServerFactory.addAdditionalTomcatConnectors(createTomcatConnector());</span><br><span class="line">      <span class="keyword">return</span> tomcatServletWebServerFactory;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> Connector <span class="title function_">createTomcatConnector</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Connector</span>(<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);</span><br><span class="line">      connector.setScheme(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">      connector.setPort(<span class="number">8080</span>);</span><br><span class="line">      <span class="keyword">return</span> connector;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供了两个url:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 只能通过 https 访问</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/https&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">https</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;https&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 只能通过 http 访问</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;http&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">http</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;http&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着开始 url 分配到 https 还是 http:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      http.authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and().formLogin()</span><br><span class="line">            .and().requiresChannel()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/https&quot;</span>).requiresSecure() <span class="comment">// 只能 https 访问</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/http&quot;</span>).requiresInsecure()</span><br><span class="line">            .and().csrf().disable()</span><br><span class="line">      ;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们有两个端口的登录地址:</p><ul><li><a href="http://localhost:8080/login">http://localhost:8080/login</a></li><li><a href="http://localhost:8443/login">http://localhost:8443/login</a></li></ul><p>我们通过 <code>8080</code> 地址登录之后, 可以访问 <code>/http</code>, 但是在访问 <code>/https</code> 的时候会自动跳转到 <code>8443</code>路径</p><p>之所以重定向到<code>8443</code>端口，并非因为我们项目端口是<code>8443</code>，而是因为<code>8443</code>是<code>HTTPS</code>的默认监听端口，无论项目端口号是多少，这里都会重定向到<code>8443</code>端口。</p><p>如果需要修改成其他端口, 比如: <code>8444</code>, 则需要这么玩:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.and().portMapper().http(<span class="number">8080</span>).mapsTo(<span class="number">8444</span>) <span class="comment">// 修改https默认监控端口为 8444</span></span><br></pre></td></tr></table></figure><blockquote><p>这里为什么是 <code>8080</code> 转 <code>8444</code> 呢? 看类的注释: <img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211291407326.png" alt="image-20221129140728188"></p><p>当在 Http 和 Https 之间重定向时, 允许为给定的Http端口指定Https端口</p><p>意思是说, 如果你在 8080 的 http 路径下访问<code>http://localhost:8080/http</code>, 如果访问了<code>http://localhost:8080/https</code>, 此时上面的配置就用上了, 直接从 <code>8080</code> 跳转到 <code>8444</code></p></blockquote><blockquote><p>主要注意, 如果使用 <code>https</code> <code>login</code> 登录, 就会在 <code>Cookie</code> 中多出一个 <code>Secure</code> 的字符串, 此时如果访问 <code>/http</code>, 会重新跳转到 <code>http</code>的 <code>login</code> 登录接口, 因为 <code>http</code> 的 <code>cookie</code> 不存在 <code>Secure</code>字符串, 又 <code>cookie</code> 不区分端口号, 所以访问 <code>http</code> 地址时, <code>cookie</code>多出的字符串无法被 <code>http</code> 识别, 无法被识别那么表示<code>cookie</code>失效, 需要重新登录.</p><p><code>http login</code> 登录 <code>cookie</code> 没有改字符串: </p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211291417712.png" alt="image-20221129141753612"></p><p><code>https login</code>登录 <code>cookie</code> 内容:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211291417430.png" alt="image-20221129141709300"></p></blockquote><h3 id="代理服务配置"><a href="#代理服务配置" class="headerlink" title="代理服务配置"></a>代理服务配置</h3><p>在分布式环境下, 一般使用<code>Nginx</code>进行负载均衡, 此时需要确保自己的代理服务器和Spring Security的配置是正确的, 以便Spring Security能够准确的获取请求的真实IP, 避免各种潜在的威胁和应用程序错误</p><p>为了在服务端能够真实的拿到客户端的IP信息等, 代理服务器需要配置 <code>X-Forwarded-*</code> 以便将信息从客户端转发到 服务端, 服务端接收到改请求后, 开发者可以借助 <code>request.getXXX</code> 方法拿到客户端真实的信息, 不会感到有代理服务器的存在</p><p>这点需要开发者注意</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤器 </tag>
            
            <tag> 认证 </tag>
            
            <tag> 登录 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 漏洞保护 </tag>
            
            <tag> 漏洞 </tag>
            
            <tag> http </tag>
            
            <tag> https </tag>
            
            <tag> header安全 </tag>
            
            <tag> header </tag>
            
            <tag> SameSite </tag>
            
            <tag> 防御 </tag>
            
            <tag> 双重Cookie验证 </tag>
            
            <tag> cookie </tag>
            
            <tag> session </tag>
            
            <tag> token </tag>
            
            <tag> 同源检查 </tag>
            
            <tag> referer </tag>
            
            <tag> 验证码 </tag>
            
            <tag> crsf </tag>
            
            <tag> 令牌同步模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19SpringSecurity-HttpFirewall防火墙</title>
      <link href="/2022/11/28/02springcloud/19SpringSecurity-HttpFirewall/"/>
      <url>/2022/11/28/02springcloud/19SpringSecurity-HttpFirewall/</url>
      
        <content type="html"><![CDATA[<h1 id="HttpFirewall介绍"><a href="#HttpFirewall介绍" class="headerlink" title="HttpFirewall介绍"></a>HttpFirewall介绍</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h2><p>一个Spring Security提供的 HTTP 防火墙</p><p>在这个防火墙中 Spring Security 帮我们防住了很多危险请求</p><p>而<code>HttpFirewall</code>接口便用于处理<code>request</code>和<code>response</code>请求的</p><p>现在我们分析下这个接口的两个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HttpFirewall</span> &#123;</span><br><span class="line">   FirewalledRequest <span class="title function_">getFirewalledRequest</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> RequestRejectedException;</span><br><span class="line">   HttpServletResponse <span class="title function_">getFirewalledResponse</span><span class="params">(HttpServletResponse response)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getFirewalledRequest</code>这个方法接收了我们的请求, 通过某种方法, 将我们的请求处理成<code>FirewalledRequest</code>对象, 如果失败抛出了一个<code>RequestRejectedException</code>拒绝请求异常</p><p>而<code>getFirewalledResponse</code>这个方法接受了我们的响应, 将其包装下, 最后返回相同的 <code>HttpServletResponse</code>给我们的客户</p><p>这个接口有两个实现类</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211281307324.png" alt="image-20221128130753240"></p><p>默认是严格模式的HTTP防火墙</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211281342319.png" alt="image-20221128134201236"></p><p>我们还可以定义Spring Bean:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211281343618.png" alt="image-20221128134337519"></p><p>还可以接着<code>WebSecurity</code>的方法配置<code>HttpFirewall</code>:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211281345251.png" alt="image-20221128134506179"></p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>HttpFirewall的执行流程非常简单</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211281453874.png" alt="HttpFirewall执行流程"></p><h1 id="HttpFirewall严格模式"><a href="#HttpFirewall严格模式" class="headerlink" title="HttpFirewall严格模式"></a>HttpFirewall严格模式</h1><p>上面的流程将整个严格模式HttpFirewall算是研究的差不多了</p><p>这里再强调下他有哪些功能</p><ul><li><code>rejectForbiddenHttpMethod</code>: 校验请求方法是否合法</li><li><code>rejectedBlocklistedUrls</code>: 校验请求中的非法字符</li><li><code>rejectedUntrustedHosts</code>: 校验主机信息(这里默认信任所有Host)</li><li><code>isNormalized</code>: 判断参数格式是否合法</li><li><code>rejectNonPrintableAsciiCharactersInFieldName</code>: 判断请求字符是否合法</li></ul><h1 id="HttpFirewall普通模式"><a href="#HttpFirewall普通模式" class="headerlink" title="HttpFirewall普通模式"></a>HttpFirewall普通模式</h1><p>普通模式的类名叫<code>DefaultHttpFirewall</code></p><p>在源码中, 首先</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FirewalledRequest</span> <span class="variable">firewalledRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestWrapper</span>(request);</span><br></pre></td></tr></table></figure><p>构造了一个 <code>RequestWrapper</code> 对象, 在这个过程中做了</p><ul><li>将请求地址中的<code>//</code>格式化为<code>/</code></li><li>将请求中的<code>servletPath</code>和<code>pathInfo</code>中的分号隔开的参数提取出来, 只保留路径即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isNormalized(firewalledRequest.getServletPath()) || !isNormalized(firewalledRequest.getPathInfo())) &#123;</span><br></pre></td></tr></table></figure><p>通过<code>isNormalized</code>来判断<code>ServletPath</code>和<code>PathInfo</code>是否符合标准</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (containsInvalidUrlEncodedSlash(requestURI)) &#123;</span><br></pre></td></tr></table></figure><p>判断requestURI中是否包含编码后的斜杠, 即<code>%2f</code>或<code>%2F</code>, 默认是不允许存在编码后的斜杠的, 如果开发者有需求, 则取修改<code>allowUrlEncodedSlash = true</code>即可</p><blockquote><p>默认不建议在项目中使用 <code>DefaultHttpFirewall</code> 方案, 不安全, 如果开发者需要使用, 则默认<code>new</code>一个出来当作<code>Spring Bean</code>就行了</p></blockquote><p>更多信息可以查看: <a href="https://www.cnblogs.com/LQBlog/p/14343497.html">spring-security使用-安全防护HttpFirewall(七) - 意犹未尽 - 博客园 (cnblogs.com)</a></p><h1 id="详细情况"><a href="#详细情况" class="headerlink" title="详细情况"></a>详细情况</h1><h2 id="必须是标准化-URL"><a href="#必须是标准化-URL" class="headerlink" title="必须是标准化 URL"></a>必须是标准化 URL</h2><p>请求地址必须是标准化 URL。</p><p>什么是标准化 URL？标准化 URL 主要从四个方面来判断，我们来看下源码：</p><p><code>StrictHttpFirewall#isNormalized</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNormalized</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!isNormalized(request.getRequestURI())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!isNormalized(request.getContextPath())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!isNormalized(request.getServletPath())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!isNormalized(request.getPathInfo())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getRequestURI</code> 就是获取请求协议之外的字符；<code>getContextPath</code> 是获取上下文路径，相当于是 <code>project</code> 的名字；<code>getServletPath</code> 这个就是请求的 <code>servlet</code> 路径，<code>getPathInfo</code> 则是除过 <code>contextPath</code> 和 <code>servletPath</code> 之后剩余的部分。</p><p>这四种路径中，都不能包含如下字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;./&quot;</span>, <span class="string">&quot;/../&quot;</span> or <span class="string">&quot;/.&quot;</span></span><br></pre></td></tr></table></figure><h2 id="限制请求方法"><a href="#限制请求方法" class="headerlink" title="限制请求方法"></a>限制请求方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrictHttpFirewall</span> <span class="keyword">implements</span> <span class="title class_">HttpFirewall</span> &#123;</span><br><span class="line">    <span class="comment">//空的集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; ALLOW_ANY_HTTP_METHOD = Collections.unmodifiableSet(Collections.emptySet());</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; allowedHttpMethods = createDefaultAllowedHttpMethods();</span><br><span class="line">    <span class="comment">//设置允许的请求方式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title function_">createDefaultAllowedHttpMethods</span><span class="params">()</span> &#123;</span><br><span class="line">        Set&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        result.add(HttpMethod.DELETE.name());</span><br><span class="line">        result.add(HttpMethod.GET.name());</span><br><span class="line">        result.add(HttpMethod.HEAD.name());</span><br><span class="line">        result.add(HttpMethod.OPTIONS.name());</span><br><span class="line">        result.add(HttpMethod.PATCH.name());</span><br><span class="line">        result.add(HttpMethod.POST.name());</span><br><span class="line">        result.add(HttpMethod.PUT.name());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUnsafeAllowAnyHttpMethod</span><span class="params">(<span class="type">boolean</span> unsafeAllowAnyHttpMethod)</span> &#123;</span><br><span class="line">        <span class="comment">//如果是false则设置空的集合</span></span><br><span class="line">        <span class="built_in">this</span>.allowedHttpMethods = unsafeAllowAnyHttpMethod ? ALLOW_ANY_HTTP_METHOD : createDefaultAllowedHttpMethods();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rejectForbiddenHttpMethod</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.allowedHttpMethods != ALLOW_ANY_HTTP_METHOD) &#123;</span><br><span class="line">            <span class="comment">//如果不存在运行的方法里面 则抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.allowedHttpMethods.contains(request.getMethod())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RequestRejectedException</span>(<span class="string">&quot;The request was rejected because the HTTP method \&quot;&quot;</span> + request.getMethod() + <span class="string">&quot;\&quot; was not included within the whitelist &quot;</span> + <span class="built_in">this</span>.allowedHttpMethods);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">HttpFirewall <span class="title function_">httpFirewall</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StrictHttpFirewall</span> <span class="variable">firewall</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrictHttpFirewall</span>();</span><br><span class="line">    firewall.setUnsafeAllowAnyHttpMethod(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> firewall;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求地址不能有分号"><a href="#请求地址不能有分号" class="headerlink" title="请求地址不能有分号"></a>请求地址不能有分号</h2><p>如地址:<a href="http://localhost:8080/index;id=ddd">http://localhost:8080/index;id=ddd</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrictHttpFirewall</span> <span class="keyword">implements</span> <span class="title class_">HttpFirewall</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; encodedUrlBlacklist = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; decodedUrlBlacklist = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//;的urlecod和decode的几种</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; FORBIDDEN_SEMICOLON = Collections.unmodifiableList(Arrays.asList(<span class="string">&quot;;&quot;</span>, <span class="string">&quot;%3b&quot;</span>, <span class="string">&quot;%3B&quot;</span>));</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAllowSemicolon</span><span class="params">(<span class="type">boolean</span> allowSemicolon)</span> &#123;</span><br><span class="line">        <span class="comment">//如果是false则删除调</span></span><br><span class="line">        <span class="keyword">if</span> (allowSemicolon) &#123;</span><br><span class="line">            <span class="built_in">this</span>.urlBlacklistsRemoveAll(FORBIDDEN_SEMICOLON);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.urlBlacklistsAddAll(FORBIDDEN_SEMICOLON);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加入到校验list</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">urlBlacklistsAddAll</span><span class="params">(Collection&lt;String&gt; values)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.encodedUrlBlacklist.addAll(values);</span><br><span class="line">        <span class="built_in">this</span>.decodedUrlBlacklist.addAll(values);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清除到校验list</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">urlBlacklistsRemoveAll</span><span class="params">(Collection&lt;String&gt; values)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.encodedUrlBlacklist.removeAll(values);</span><br><span class="line">        <span class="built_in">this</span>.decodedUrlBlacklist.removeAll(values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rejectedBlacklistedUrls</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">this</span>.encodedUrlBlacklist.iterator();</span><br><span class="line"></span><br><span class="line">        String forbidden;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!var2.hasNext()) &#123;</span><br><span class="line">                var2 = <span class="built_in">this</span>.decodedUrlBlacklist.iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!var2.hasNext()) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    forbidden = (String)var2.next();</span><br><span class="line">                &#125; <span class="keyword">while</span>(!decodedUrlContains(request, forbidden));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RequestRejectedException</span>(<span class="string">&quot;The request was rejected because the URL contained a potentially malicious String \&quot;&quot;</span> + forbidden + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            forbidden = (String)var2.next();</span><br><span class="line">        &#125; <span class="keyword">while</span>(!encodedUrlContains(request, forbidden));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RequestRejectedException</span>(<span class="string">&quot;The request was rejected because the URL contained a potentially malicious String \&quot;&quot;</span> + forbidden + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果请求<code>URL</code>（无论是<code>URL</code>编码前还是<code>URL</code>编码后)包含了分号(<code>;</code>或者<code>%3b</code>或者<code>%3B</code>)则该请求会被拒绝。</p><blockquote><p>通过开关函数<code>setAllowSemicolon(boolean)</code> 可以设置是否关闭该规则。缺省使用该规则。</p></blockquote></li></ul><h2 id="必须是可打印的-ASCII-字符"><a href="#必须是可打印的-ASCII-字符" class="headerlink" title="必须是可打印的 ASCII 字符"></a>必须是可打印的 ASCII 字符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">containsOnlyPrintableAsciiCharacters</span><span class="params">(String uri)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> uri.length();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> uri.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (c &lt; <span class="string">&#x27;\u0020&#x27;</span> || c &gt; <span class="string">&#x27;\u007e&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不能使用双斜杠"><a href="#不能使用双斜杠" class="headerlink" title="不能使用双斜杠"></a>不能使用双斜杠</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">HttpFirewall <span class="title function_">httpFirewall</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StrictHttpFirewall</span> <span class="variable">firewall</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrictHttpFirewall</span>();</span><br><span class="line">    firewall.setAllowUrlEncodedDoubleSlash(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> firewall;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不被允许"><a href="#不被允许" class="headerlink" title="% 不被允许"></a>% 不被允许</h2><p>如果需要去掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">HttpFirewall <span class="title function_">httpFirewall</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StrictHttpFirewall</span> <span class="variable">firewall</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrictHttpFirewall</span>();    <span class="comment">//允许%的配置</span></span><br><span class="line">    firewall.setAllowUrlEncodedPercent(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> firewall;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果请求<code>URL</code>在<code>URL</code>编码后包含了<code>%25</code>(<code>URL</code>编码了的百分号<code>%</code>),或者在<code>URL</code>编码前包含了百分号<code>%</code>则该请求会被拒绝。</p><blockquote><p>通过开关函数<code>setAllowUrlEncodedPercent(boolean)</code> 可以设置是否关闭该规则。缺省使用该规则。</p></blockquote></li></ul><h2 id="反斜杠不被允许"><a href="#反斜杠不被允许" class="headerlink" title="反斜杠不被允许"></a>反斜杠不被允许</h2><p>如果需要去掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">HttpFirewall <span class="title function_">httpFirewall</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StrictHttpFirewall</span> <span class="variable">firewall</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrictHttpFirewall</span>();</span><br><span class="line">    firewall.setAllowBackSlash(<span class="literal">true</span>);</span><br><span class="line">    firewall.setAllowUrlEncodedSlash(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> firewall;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果请求<code>URL</code>（无论是<code>URL</code>编码前还是<code>URL</code>编码后)包含了斜杠(<code>%2f</code>或者<code>%2F</code>)则该请求会被拒绝。</p><blockquote><p>通过开关函数<code>setAllowUrlEncodedSlash(boolean)</code> 可以设置是否关闭该规则。缺省使用该规则。</p></blockquote></li><li><p>如果请求<code>URL</code>（无论是<code>URL</code>编码前还是<code>URL</code>编码后)包含了反斜杠(<code>\</code>或者<code>%5c</code>或者<code>%5B</code>)则该请求会被拒绝。</p><blockquote><p>通过开关函数<code>setAllowBackSlash(boolean)</code> 可以设置是否关闭该规则。缺省使用该规则。</p></blockquote></li></ul><h2 id="不被允许-1"><a href="#不被允许-1" class="headerlink" title=". 不被允许"></a><code>.</code> 不被允许</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">HttpFirewall <span class="title function_">httpFirewall</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StrictHttpFirewall</span> <span class="variable">firewall</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrictHttpFirewall</span>();</span><br><span class="line">    firewall.setAllowUrlEncodedPeriod(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> firewall;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果请求<code>URL</code>在<code>URL</code>编码后包含了<code>URL</code>编码的英文句号<code>.</code>(<code>%2e</code>或者<code>%2E</code>)则该请求会被拒绝。</p><blockquote><p>通过开关函数<code>setAllowUrlEncodedPeriod(boolean)</code> 可以设置是否关闭该规则。缺省使用该规则。</p></blockquote></li></ul><blockquote><p>注意：这里提到的”<code>URL</code>编码后”对应英文是<code>URL encoded</code>,”<code>URL</code>编码前”指的是未执行<code>URL</code>编码的原始<code>URL</code>字符串，或者是”<code>URL</code>编码后”的<code>URL</code>经过解码<code>URL decode</code>得到的<code>URL</code>字符串(应该等于原始<code>URL</code>字符串)。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤器 </tag>
            
            <tag> 认证 </tag>
            
            <tag> 登录 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> HttpFirewall </tag>
            
            <tag> Spring Security防火墙 </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18SpringSecurity-会话管理</title>
      <link href="/2022/11/28/02springcloud/18SpringSecurity-%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/"/>
      <url>/2022/11/28/02springcloud/18SpringSecurity-%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="会话并发管理"><a href="#会话并发管理" class="headerlink" title="会话并发管理"></a>会话并发管理</h1><h2 id="什么是会话"><a href="#什么是会话" class="headerlink" title="什么是会话?"></a>什么是会话?</h2><p>当用户通过浏览器登录成功后, 用户和系统之间便会保持一个会话(用户端会存储一个叫<code>sessionId</code>的属性), 通过这个会话, 系统可以确定出访问用户的身份.</p><blockquote><p>用户端借助<code>sessionId</code>去访问服务端, 根据服务端去查找相应的<code>session</code>会话相关信息, 以找到相应的用户身份</p></blockquote><p><code>SpringSecuity</code>和会话相关的功能由<code>SessionManagementFilter</code>和<code>SessionAuthenticationStrategy</code>接口的组合来处理, 过滤器委托该策略接口对会话进行处理, 比较典型的用法有防止会话固定攻击, 配置会话并发数等</p><h2 id="会话并发管理-1"><a href="#会话并发管理-1" class="headerlink" title="会话并发管理"></a>会话并发管理</h2><p>一个用户持有多个会话, 如果一台设备有一个会话的话, 那么一个用户就有在多台设备上登录</p><h3 id="quick-start"><a href="#quick-start" class="headerlink" title="quick start"></a>quick start</h3><h4 id="挤人下线方案"><a href="#挤人下线方案" class="headerlink" title="挤人下线方案"></a>挤人下线方案</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ObjectMapper <span class="title function_">objectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserDetailsService <span class="title function_">inMemoryUserDetailsManager</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">InMemoryUserDetailsManager</span> <span class="variable">userDetailsManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line">userDetailsManager.createUser(User.withUsername(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line">.password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>)</span><br><span class="line">.roles(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">.build());</span><br><span class="line">userDetailsManager.createUser(User.withUsername(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">.password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>)</span><br><span class="line">.roles(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">.build());</span><br><span class="line"><span class="keyword">return</span> userDetailsManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * session的创建和session的销毁都会被 HttpSessionEventPublisher 监控,</span></span><br><span class="line"><span class="comment"> * 这种方式可以及时清理session的记录，以确保最新的session状态可以被及时感知到。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> HttpSessionEventPublisher <span class="title function_">httpSessionEventPublisher</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpSessionEventPublisher</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">return</span> httpSecurity</span><br><span class="line">.csrf().disable()</span><br><span class="line">.sessionManagement() <span class="comment">// 设置 session 配置管理</span></span><br><span class="line">.sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED) <span class="comment">// 设置session创建策略</span></span><br><span class="line">.maximumSessions(<span class="number">1</span>) <span class="comment">// 设置最大会话数</span></span><br><span class="line"><span class="comment">//.expiredUrl(&quot;/login&quot;) // session 被挤下线之后, 跳转的位置</span></span><br><span class="line">.expiredSessionStrategy(event -&gt; &#123; <span class="comment">// 在前后端分离的情况下, 则不能使用上面的 expiredUrl, 但可以使用 expiredSessionStrategy</span></span><br><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> event.getResponse();</span><br><span class="line">response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">HashMap&lt;String, Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">result.put(<span class="string">&quot;status&quot;</span>, <span class="number">500</span>);</span><br><span class="line">result.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;当前会话失效, 请重新登录&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> objectMapper().writeValueAsString(result);</span><br><span class="line">response.getWriter().write(s); <span class="comment">// 写入响应缓存</span></span><br><span class="line">response.flushBuffer(); <span class="comment">// 刷新缓存</span></span><br><span class="line">&#125;)</span><br><span class="line">.and().and()</span><br><span class="line">.authorizeRequests()</span><br><span class="line">.anyRequest()</span><br><span class="line">.authenticated()</span><br><span class="line">.and()</span><br><span class="line">.formLogin()</span><br><span class="line">.and().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211271318334.png" alt="image-20221127131833403"></p><blockquote><p>我们之所以要<strong>创建<code>HttpSessionEventPublisher</code>这个<code>Bean</code>，是因为在 <code>Spring Security</code> 中，它可以通过监听<code>session</code>的创建及销毁事件，来及时的清理<code>session</code>记录。</strong>用户从不同的浏览器登录，都会有对应的<code>session</code>，当用户注销登录之后，<code>session</code>就会失效，<strong>但是默认的失效是通过调用 <code>StandardSession#invalidate</code> 方法来实现的。这一失效事件无法被 <code>Spring</code> 容器感知到，进而导致当前用户注销登录之后，<code>Spring Security</code> 没有及时清理会话信息表，以为用户还在线，进而导致用户无法重新登录进来。</strong></p><p>注意如果引入了 <code>spring-session</code> 之后, 就不需要配置<code>HttpSessionEventPublisher</code>了, 引入spring-session通过<code>SessionRepositoryFilter</code>将请求对象重新封装为<code>SessionRepositoryRequestWrapper</code>,并重写了<code>getSession</code>方法，在重写的<code>getSession</code>方法中，最终返回的是<code>HttpSessionWrapper</code>实例，而在<code>HttpSessionWrapper</code>定义时，就重写了<code>invalidate</code>方法，当调用会话的<code>invalidate</code>方法去销毁会话时，就会调用<code>RedisIndexedSessionRepository</code>中的方法，从<code>Redis</code>中移除相应的会话信息，所以不再需要<code>HttpSessionEventPublisher</code>实例。</p></blockquote><p>我们直接看源码就能看得出来了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpSessionEventPublisher</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span>, HttpSessionIdListener &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOGGER_NAME</span> <span class="operator">=</span> HttpSessionEventPublisher.class.getName();</span><br><span class="line"></span><br><span class="line">   ApplicationContext <span class="title function_">getContext</span><span class="params">(ServletContext servletContext)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> SecurityWebApplicationContextUtils.findRequiredWebApplicationContext(servletContext);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Handles the HttpSessionEvent by publishing a &#123;<span class="doctag">@link</span> HttpSessionCreatedEvent&#125; to the</span></span><br><span class="line"><span class="comment">    * application appContext.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> event HttpSessionEvent passed in by the container</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent event)</span> &#123;</span><br><span class="line">      extracted(event.getSession(), <span class="keyword">new</span> <span class="title class_">HttpSessionCreatedEvent</span>(event.getSession()));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Handles the HttpSessionEvent by publishing a &#123;<span class="doctag">@link</span> HttpSessionDestroyedEvent&#125; to</span></span><br><span class="line"><span class="comment">    * the application appContext.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> event The HttpSessionEvent pass in by the container</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent event)</span> &#123;</span><br><span class="line">      extracted(event.getSession(), <span class="keyword">new</span> <span class="title class_">HttpSessionDestroyedEvent</span>(event.getSession()));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionIdChanged</span><span class="params">(HttpSessionEvent event, String oldSessionId)</span> &#123;</span><br><span class="line">      extracted(event.getSession(), <span class="keyword">new</span> <span class="title class_">HttpSessionIdChangedEvent</span>(event.getSession(), oldSessionId));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">extracted</span><span class="params">(HttpSession session, ApplicationEvent e)</span> &#123;</span><br><span class="line">      <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(LOGGER_NAME);</span><br><span class="line">      log.debug(LogMessage.format(<span class="string">&quot;Publishing event: %s&quot;</span>, e));</span><br><span class="line">      getContext(session.getServletContext()).publishEvent(e);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不让挤下线方案"><a href="#不让挤下线方案" class="headerlink" title="不让挤下线方案"></a>不让挤下线方案</h4><p>关键代码<code>.maxSessionsPreventsLogin(true)</code></p><p>如果设置为 <code>true</code>, 则在达到最大的<code>session</code>数量时, 阻止用户认证. 否则(设置为 false, 默认情况), 访问时允许重新认证用户并且前一次认证的<code>session</code>被置为过期状态. 前一个认证成功的用户在再次访问时由于<code>session</code>过期将被重定向到<code>expiredUrl(String)</code>配置的地址. 这种情况的好处在于管理员不再需要手动干预或者等待他们的<code>session</code>过期.</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211280734079.png" alt="image-20221128073424996"></p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p><strong>从容量上来说，服务器内存有限</strong>，除了系统正常运行的消耗，留给<code>session</code>的空间不多，当访问量增大时，内存就会捉襟见肘。</p><p><strong>从稳定性上来说，Session依赖于内存</strong>，而内存并非持久性存储容器，就算服务器本身是可靠的，但当部署在上面的服务停止或重启时，也会导致所有会话状态丢失。</p><blockquote><p>后面我们会使用 spring session 来解决此问题</p></blockquote><h2 id="怎么做到的"><a href="#怎么做到的" class="headerlink" title="怎么做到的?"></a>怎么做到的?</h2><p>根据这句话分析源码:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`SpringSecuity`和会话相关的功能由`SessionManagementFilter`和`SessionAuthenticationStrategy`接口的组合来处理, 过滤器委托该策略接口对会话进行处理, 比较典型的用法有防止会话固定攻击, 配置会话并发数等</span><br></pre></td></tr></table></figure><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>在Spring Security中，对会话的并发控制也有特定的执行控制流程，该流程是在如下类中被触发执行的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UsernamePasswordAuthenticationFilter--&gt;AbstractAuthenticationProcessingFilter--&gt;AbstractAuthenticationProcessingFilter#doFilter()</span><br></pre></td></tr></table></figure><h4 id="AbstractAuthenticationProcessingFilter-doFilter-源码"><a href="#AbstractAuthenticationProcessingFilter-doFilter-源码" class="headerlink" title="AbstractAuthenticationProcessingFilter#doFilter()源码"></a><code>AbstractAuthenticationProcessingFilter#doFilter()</code>源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span><br><span class="line">      <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">   <span class="keyword">if</span> (!requiresAuthentication(request, response)) &#123;</span><br><span class="line">      chain.doFilter(request, response);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Authentication</span> <span class="variable">authenticationResult</span> <span class="operator">=</span> attemptAuthentication(request, response);</span><br><span class="line">      <span class="keyword">if</span> (authenticationResult == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="comment">// return immediately as subclass has indicated that it hasn&#x27;t completed</span></span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 核心代码在这里 这个方法就是用来处理 session 的并发问题的</span></span><br><span class="line">      <span class="built_in">this</span>.sessionStrategy.onAuthentication(authenticationResult, request, response);</span><br><span class="line">      <span class="comment">// Authentication success</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.continueChainBeforeSuccessfulAuthentication) &#123;</span><br><span class="line">         chain.doFilter(request, response);</span><br><span class="line">      &#125;</span><br><span class="line">      successfulAuthentication(request, response, chain, authenticationResult);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (InternalAuthenticationServiceException failed) &#123;</span><br><span class="line">      <span class="built_in">this</span>.logger.error(<span class="string">&quot;An internal error occurred while trying to authenticate the user.&quot;</span>, failed);</span><br><span class="line">      unsuccessfulAuthentication(request, response, failed);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (AuthenticationException ex) &#123;</span><br><span class="line">      <span class="comment">// Authentication failed</span></span><br><span class="line">      unsuccessfulAuthentication(request, response, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SessionAuthenticationStrategy接口"><a href="#SessionAuthenticationStrategy接口" class="headerlink" title="SessionAuthenticationStrategy接口"></a><code>SessionAuthenticationStrategy</code>接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SessionAuthenticationStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当一个新的认证发生时，执行与session相关的功能。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">onAuthentication</span><span class="params">(Authentication authentication, HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="keyword">throws</span> SessionAuthenticationException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211280747650.png" alt="image-20221128074736587"></p><p>默认为</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211280750067.png" alt="image-20221128075001986"></p><h4 id="ConcurrentSessionControlAuthenticationStrategy"><a href="#ConcurrentSessionControlAuthenticationStrategy" class="headerlink" title="ConcurrentSessionControlAuthenticationStrategy"></a><code>ConcurrentSessionControlAuthenticationStrategy</code></h4><p>当涉及到<code>session</code>的并发处理时，会由**<code>ConcurrentSessionControlAuthenticationStrategy</code>**这个子类来实现会话并发处理，核心方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthentication</span><span class="params">(Authentication authentication, HttpServletRequest request,</span></span><br><span class="line"><span class="params">      HttpServletResponse response)</span> &#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">allowedSessions</span> <span class="operator">=</span> getMaximumSessionsForThisUser(authentication);</span><br><span class="line">   <span class="keyword">if</span> (allowedSessions == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// We permit unlimited logins</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 获取当前用户的所有 session信息，该方法在调用时会传递两个参数：一个是当前用户的 authentication，另一个参数 false 表示不包含已经过期的 session(在用户登录成功后，会将用户的 sessionid 存起来，其中 key 是用户的主体（principal)，value 则是该主题对应的 sessionid 组成的一个集合)。接下来计算当前用户已经有几个有效的 session，同时获取允许的 session 并发数。</span></span><br><span class="line">   List&lt;SessionInformation&gt; sessions = <span class="built_in">this</span>.sessionRegistry.getAllSessions(authentication.getPrincipal(), <span class="literal">false</span>);</span><br><span class="line">   <span class="type">int</span> <span class="variable">sessionCount</span> <span class="operator">=</span> sessions.size();</span><br><span class="line">   <span class="keyword">if</span> (sessionCount &lt; allowedSessions) &#123;</span><br><span class="line">      <span class="comment">// They haven&#x27;t got too many login sessions running at present</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 如果当前 session 数(sessionCount)小于 session 并发数(allowedSessions)，则不做任何处理；如果 allowedSessions 的值为 -1，表示对 session 数量不做任何限制。</span></span><br><span class="line">   <span class="comment">// 如果当前的 session 数(sessionCount)等于 session 并发数(allowedSessions)，那就先看看当前 session对象是否不为null，并且是否已经存在于 sessions 中了。如果已经存在了，则不做任何处理；如果当前 session 为 null，那么意味着将有一个新的 session 被创建出来，届时当前 session 数(sessionCount)就会超过 session 并发数(allowedSessions)。</span></span><br><span class="line">   <span class="keyword">if</span> (sessionCount == allowedSessions) &#123;</span><br><span class="line">      <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(<span class="literal">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (session != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="comment">// Only permit it though if this request is associated with one of the</span></span><br><span class="line">         <span class="comment">// already registered sessions</span></span><br><span class="line">         <span class="keyword">for</span> (SessionInformation si : sessions) &#123;</span><br><span class="line">            <span class="keyword">if</span> (si.getSessionId().equals(session.getId())) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// If the session is null, a new one will be created by the parent class,</span></span><br><span class="line">      <span class="comment">// exceeding the allowed number</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 如果前面的代码中都没能 return 掉，那么将进入策略判断方法 allowableSessionsExceeded 中。</span></span><br><span class="line">   allowableSessionsExceeded(sessions, allowedSessions, <span class="built_in">this</span>.sessionRegistry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先会有 exceptionIfMaximumExceeded 属性，这就是我们在 SecurityConfig 中配置的 maxSessionsPreventsLogin 的值，默认为 false。如果为 true，就直接抛出异常，那么这次登录就失败了；如果为 false，则对 sessions 按照请求时间进行排序，然后再使多余的 session 过期即可。</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">allowableSessionsExceeded</span><span class="params">(List&lt;SessionInformation&gt; sessions, <span class="type">int</span> allowableSessions,</span></span><br><span class="line"><span class="params">                                         SessionRegistry registry)</span> <span class="keyword">throws</span> SessionAuthenticationException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.exceptionIfMaximumExceeded || (sessions == <span class="literal">null</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SessionAuthenticationException</span>(</span><br><span class="line">            <span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;ConcurrentSessionControlAuthenticationStrategy.exceededAllowed&quot;</span>,</span><br><span class="line">                                     <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; allowableSessions &#125;, <span class="string">&quot;Maximum sessions of &#123;0&#125; for this principal exceeded&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Determine least recently used sessions, and mark them for invalidation</span></span><br><span class="line">    sessions.sort(Comparator.comparing(SessionInformation::getLastRequest));</span><br><span class="line">    <span class="type">int</span> <span class="variable">maximumSessionsExceededBy</span> <span class="operator">=</span> sessions.size() - allowableSessions + <span class="number">1</span>;</span><br><span class="line">    List&lt;SessionInformation&gt; sessionsToBeExpired = sessions.subList(<span class="number">0</span>, maximumSessionsExceededBy);</span><br><span class="line">    <span class="keyword">for</span> (SessionInformation session : sessionsToBeExpired) &#123;</span><br><span class="line">        session.expireNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="会话固定攻击和防御"><a href="#会话固定攻击和防御" class="headerlink" title="会话固定攻击和防御"></a>会话固定攻击和防御</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h2><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211280831448.png" alt="img"></p><p>每个用户都有属于自己的 <code>sessionId</code></p><blockquote><p>会话ID（SID）：由服务器产生并返回给浏览器的请求，并且在浏览器中存储（通常来说是Cookie），它用来标识浏览器与服务器会话的唯一值。</p></blockquote><ul><li><p>攻击者将自己的 <code>sessionId</code> 伪造成一个 <code>url</code> 地址, 发送给攻击目标</p></li><li><p>攻击目标的 <code>sessionId</code> 被替换为攻击者的 <code>sessionId</code>, 然后攻击目标使用自己的 <code>username</code> 和 <code>password</code> 认证服务器</p></li><li><p><code>sessionId</code> 就变成标记该用户的地址(换句话说攻击者的 <code>sessionId</code> 转正了)</p></li><li><p>攻击者 可以拿着 <code>sessionId</code> 获取攻击目标的信息</p></li></ul><p>这就是固定会话攻击</p><blockquote><p>如果你的网站支持 <strong>URL 重写</strong>方式也就是<code>https://www.xx.com;jsessionid=xxxx</code>这种形式, 那么将更容易</p></blockquote><blockquote><p>攻击的整个过程，会话ID是没变过的，所以导致此漏洞。</p></blockquote><h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><p>1、登录重建会话</p><p>每次登录后都重置<code>会话ID</code>，并生成一个新的<code>会话ID</code>，这样攻击者就无法用自己的<code>会话ID</code>来劫持会话，核心代码如下。</p><p>2、禁用客户端访问<code>Cookie</code></p><p>此方法也避免了配合<code>XSS</code>攻击来获取<code>Cookie</code>中的会话信息以达成会话固定攻击。在<code>Http</code>响应头中启用<code>HttpOnly</code>属性，或者在<code>tomcat</code>容器中配置。</p><h3 id="Spring-Security提供哪些落地的防御方案"><a href="#Spring-Security提供哪些落地的防御方案" class="headerlink" title="Spring Security提供哪些落地的防御方案?"></a>Spring Security提供哪些落地的防御方案?</h3><ol><li>Spring Security自带<code>Http</code>防火墙，如果<code>sessionid</code>放在地址栏中，这个请求就会直接被拦截下来</li><li>在<code>Http</code>响应的<code>Set-Cookie</code>字段中有<code>httpOnly</code>属性，这样避免了通过<code>XSS</code>攻击来获取<code>Cookie</code>中的会话信息，进而达成会话固定攻击</li><li>既然会话固定攻击是由于<code>sessionid</code>不变导致的，那么其中一个解决方案就是在用户登录成功后，改变<code>sessionid</code>，Spring Security中默认实现了这种方案，实现类就是<code>ChangeSessionIdAuthenticationStrategy</code></li></ol><p>前两种都是默认行为，一般来说不需要更改。第三种方案在Spring Security中有几种不同的配置策略，我们先来看以下配置方式：</p><p><code>http.sessionManagement().sessionFixation().changeSessionId();</code></p><p>通过<code>sessionFixation()</code>方法开启会话固定攻击防御的配置，一共有四种不同的策略，不同策略对应了不同的<code>SessionAuthenticationStrategy</code>:</p><ul><li><code>changeSessionId()</code>:用户登录成功后，直接修改<code>HttpSession</code>的<code>SessionId</code>即可，对应的处理类是<code>ChangeSessionIdAuthenticationStrategy</code></li><li><code>none()</code>:用户登录成功后，<code>HttpSession</code>不做任何变化，对应的处理类是<code>NullAuthenticatedSessionStrategy</code></li><li><code>migrateSession()</code>:用户登录成功后，创建一个新的<code>HttpSession</code>对象，并将旧的<code>HttpSession</code>中的数据拷贝到新的<code>HttpSession</code>中，对应的处理类是<code>SessionFixationProtectionStrategy</code></li><li><code>newSession()</code>:用户登录成功后，创建一个新的<code>HttpSession</code>对象，对应的处理类也是<code>SessionFixationProtectionStrategy</code>,只不过将其里边的<code>migrateSessionAttributes</code>属性设置为<code>false</code>。需要注意的是，该方法并非所有的属性都不可拷贝，一些Spring Security使用的属性，如请求缓存，还是会从旧的<code>HttpSession</code>上复制到新的<code>HttpSession</code>。</li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211280901710.png" alt="image-20221128090109619"></p><p>默认是<code>changeSessionId</code>方案:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211280904998.png" alt="image-20221128090443909"></p><h3 id="其他防御方案"><a href="#其他防御方案" class="headerlink" title="其他防御方案"></a>其他防御方案</h3><pre><code>登录前的匿名会话强制失效session id与浏览器绑定：session id与所访问浏览器有变化，立即重置session id与所访问的IP绑定：session id与所访问IP有变化，立即重置</code></pre><h1 id="Session共享"><a href="#Session共享" class="headerlink" title="Session共享"></a>Session共享</h1><h2 id="前面我们留下了两个问题"><a href="#前面我们留下了两个问题" class="headerlink" title="前面我们留下了两个问题"></a>前面我们留下了两个问题</h2><ul><li><p><strong>从容量上来说，服务器内存有限</strong>，除了系统正常运行的消耗，留给<code>session</code>的空间不多，当访问量增大时，内存就会捉襟见肘。</p></li><li><p><strong>从稳定性上来说，Session依赖于内存</strong>，而内存并非持久性存储容器，就算服务器本身是可靠的，但当部署在上面的服务停止或重启时，也会导致所有会话状态丢失。</p></li></ul><p>Spring Security提供了三种针对集群session的方案：</p><ol><li><code>Session</code>复制：多个服务之间互相复制<code>Session</code>信息，这样每个服务中都包含有所有的<code>Session</code>信息了，<code>Tomcat</code>通过<code>IP</code>组播对这种方案提供支持。但是这种方案占用带宽，有时延，服务数量越多效率越低，所以<strong>使用较少</strong></li><li><code>Session</code>粘滞：也叫会话保持，就是在<code>Nginx</code>上通过一致性<code>Hash</code>,将<code>Hash</code>结果相同的请求总是分发到一个服务上去，这种方案可以解决一部分集群会话带来的问题，但是<strong>无法解决集群会话并发管理问题</strong></li><li><code>Session</code>共享：<code>Session</code>共享就是将不同服务的会话统一放在一个地方，所有的服务共享一个会话，一般使用一些<code>Key-Value</code>数据库来存储<code>Session</code>，例如在<code>redis</code>中，比较常见的方案是使用<code>redis</code>存储，<code>session</code>共享方案由于其简便性和稳定性，<strong>是目前使用较多的方案</strong>。</li></ol><p>我们会发现最后一种方案能够解决我们提出的两个问题, 而且刚好这套方案也是用的最多以解决集群<code>session</code>的方案</p><h2 id="为什么集群session也有问题"><a href="#为什么集群session也有问题" class="headerlink" title="为什么集群session也有问题?"></a>为什么集群session也有问题?</h2><p>在单机方案中, 每一个<code>tomcat</code> 都有属于自己的一个<code>session</code>且<code>session</code>保存在内存中</p><p>在集群方案下, 我们使用 <code>nginx</code> 进行反向代理, 此时一个用户的信息只能保存在一个<code>tomcat</code>中, 此时因为是集群关系, 在另一个<code>tomcat</code>中根本就不存在 <code>sessionId</code>对应的信息</p><p>为了解决这些问题, 在集群中专门提供一个session管理工具是有必要的</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>1.引入<code>redis</code>,<code>spring security</code>,<code>spring session</code>的依赖<br>2.配置<code>redis</code>连接信息<br>3.修改配置类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-session-application</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.155</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">zhazha</span></span><br><span class="line">      <span class="attr">password:</span> &#123;<span class="string">noop</span>&#125;<span class="number">123456</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.FindByIndexNameSessionRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.security.SpringSessionBackedSessionRegistry;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> FindByIndexNameSessionRepository sessionRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">SpringSessionBackedSessionRegistry <span class="title function_">sessionRegistry</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringSessionBackedSessionRegistry</span>(sessionRepository);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">http</span><br><span class="line">.authorizeRequests()</span><br><span class="line">.anyRequest()</span><br><span class="line">.authenticated()</span><br><span class="line">.and()</span><br><span class="line">.formLogin()</span><br><span class="line">.and()</span><br><span class="line">.csrf()</span><br><span class="line">.disable()</span><br><span class="line">.sessionManagement()</span><br><span class="line">.maximumSessions(<span class="number">1</span>)</span><br><span class="line">.sessionRegistry(sessionRegistry());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先注入一个<code>FindByIndexNameSessionRepository</code>对象，这是一个会话的存储和加载工具, 会话信息是保存在内存中，现在的会话信息保存在<code>redis</code>中，具体的保存和加载工程则由<code>FindByIndexNameSessionRepository</code>接口的实现类来完成，默认是<code>RedisIndexedSessionRepository</code>即我们一开始注入的实际是一个<code>RedisIndexedSessionRepository</code>类型的对象</li><li>接下来我们还配置了一个<code>SpringSessionBackedSessionRegistry</code>实例，构建时传入<code>sessionRepository</code>，<code>SpringSessionBackedSessionRegistry</code>继承自<code>SessionRegistry</code>，用来维护会话信息注册表</li><li>最后在<code>HttpSecurity</code>中配置<code>sessionRegistry</code>即可，相当于<code>spring-session</code>提供的<code>SpringSessionBackedSessionRegistry</code>接管了会话信息注册表的维护工作。</li></ul><blockquote><p>再次强调: </p><p><strong>需要注意的是引入<code>spring-session</code>后不需要在配置<code>HttpSessionEventPublicsher</code>实例</strong>，引入<code>spring-session</code>通过<code>SessionRepositoryFilter</code>将请求对象重新封装为<code>SessionRepositoryRequestWrapper</code>,并重写了<code>getSession</code>方法，在重写的<code>getSession</code>方法中，最终返回的是<code>HttpSessionWrapper</code>实例，而在<code>HttpSessionWrapper</code>定义时，就重写了<code>invalidate</code>方法，当调用会话的<code>invalidate</code>方法去销毁会话时，就会调用<code>RedisIndexedSessionRepository</code>中的方法，从<code>Redis</code>中移除相应的会话信息，所以不再需要<code>HttpSessionEventPublisher</code>实例。</p></blockquote><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211281536595.png" alt="image-20221128153621520"></p><p>key:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring:session:index:org.springframework.session.FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME:zhazha</span><br></pre></td></tr></table></figure><p>value: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\xac\xed\x00\x05t\x00<span class="variable">$e354335b</span>-48a3-4e51-91d7-d814ac996913</span><br></pre></td></tr></table></figure><h2 id="其他解决方案"><a href="#其他解决方案" class="headerlink" title="其他解决方案"></a>其他解决方案</h2><h3 id="使用Token代替Session"><a href="#使用Token代替Session" class="headerlink" title="使用Token代替Session"></a>使用<code>Token</code>代替<code>Session</code></h3><p><strong><code>Token</code>是指访问资源的令牌凭据，用于检验请求的合法性，适用于前后端分离的项目。常用的<code>Token</code>是<code>JSON Web Token(JWT)</code>认证授权机制，这是目前最流行的跨域认证解决方案。</strong></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211281002015.png" alt="img"></p><p><strong>该方案的优点如下:</strong></p><blockquote><ul><li>可以用数据库存储<code>token</code>，也可以选择放在内存当中，比如 <code>redis</code> 很适合对 <code>token</code> 查询的需求。</li><li><code>token</code> 可以避免 <code>CSRF</code> 攻击(因为不需要 <code>cookie</code> 了)。</li><li>完美契合移动端的需求。</li></ul></blockquote><h3 id="Session持久化到数据库"><a href="#Session持久化到数据库" class="headerlink" title="Session持久化到数据库"></a><code>Session</code>持久化到数据库</h3><p>该方案就是需要设计一个数据库表，专门用来存储<code>Session</code>信息，保证<code>Session</code>的持久化。</p><p><strong>优点:</strong> 服务器出现问题时，<code>Session</code>不会丢失。</p><p><strong>缺点:</strong> 如果网站的访问量很大，把所有的<code>Session</code>存储到数据库中，会对数据库造成很大压力，还需要增加额外的开销维护数据库。</p><h3 id="Terracotta实现Session复制"><a href="#Terracotta实现Session复制" class="headerlink" title="Terracotta实现Session复制"></a><code>Terracotta</code>实现<code>Session</code>复制</h3><p><code>Terracotta</code>的基本原理是，对于集群间共享的数据，当在一个节点发生变化的时候，<code>Terracotta</code>只把变化的部分发送给<code>Terracotta</code>服务器，然后由服务器把它转发给真正需要这个数据的节点，这可以看成是对第二种方案的优化。</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211281005909.png" alt="img"></p><p><strong>优点</strong>: 对网络的压力就非常小，各个节点也不必浪费<code>CPU</code>时间和内存进行大量的序列化操作。把这种集群间数据共享的机制应用在<code>Session</code>同步上，既避免了对数据库的依赖，又能达到负载均衡和灾难恢复的效果。</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤器 </tag>
            
            <tag> 认证 </tag>
            
            <tag> 登录 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 会话管理 </tag>
            
            <tag> 会话并发管理 </tag>
            
            <tag> 会话固定攻击 </tag>
            
            <tag> session共享 </tag>
            
            <tag> 集群session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09翻译</title>
      <link href="/2022/11/25/06%E8%8B%B1%E8%AF%AD/09%E7%BF%BB%E8%AF%91/"/>
      <url>/2022/11/25/06%E8%8B%B1%E8%AF%AD/09%E7%BF%BB%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h1 id="定语"><a href="#定语" class="headerlink" title="定语"></a>定语</h1><h2 id="识别"><a href="#识别" class="headerlink" title="识别"></a>识别</h2><p>名词后可能是: 定语&#x2F;状语&#x2F;同位语&#x2F;插入语&#x2F;谓语</p><p>插入语 前后都 逗号 隔开</p><p>翻译中 定语和同位语 翻译一样</p><p>状语暂时不讲</p><blockquote><p>只要名词后有一坨东西, 只要它不是动词, 就暂定为修饰这个名词的定语成分(还有可能是状语)</p></blockquote><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><ol><li>前置</li><li>后置</li><li>融合法</li></ol><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p>当定语的成分比较简单, 信息量不大的时候, 就把定语翻译在它所修饰的名词前面</p><h3 id="后置"><a href="#后置" class="headerlink" title="后置"></a>后置</h3><p>当定语的成分比较复杂, 信息量比较大的时候, 就把定语翻译在它所修饰的名词的后面, 此时通常需要重复先行词或使用代词</p><h3 id="融合法"><a href="#融合法" class="headerlink" title="融合法"></a>融合法</h3><p>把关系词当作谓语翻译(或者直接忽略关系词)</p><h3 id="翻译-1"><a href="#翻译-1" class="headerlink" title="翻译"></a>翻译</h3><ol><li>如果单词指代的内容很明确, 则无需查找代词所指代的内容</li><li>如果不明确, 就一定要找出代词所指代的内容 一一 <code>就近原则和一致原则(语法上的一致和意思上的一致)</code></li><li>如果找不到代词所指代的内容或者不会翻译, 就把代词翻译成 “这” 或者是 “那”</li></ol><p>They may teach very well and more than earn their salaries, but most of them make little or no independent reflections on human problems which involve moral judgment.</p><p>they在上下文是很多的知识分子</p><p>They may teach very well &#x2F;&#x2F; and more than earn their salaries &#x2F;&#x2F; , but most of them make little or no independent reflections on human problems &#x2F;&#x2F; which involve moral judgment.</p><p>知识分子可以教得很好，而且不仅仅是为了挣薪水，但他们大多数人却很少或没有对需要进行道德批判的人的问题进行独立思考</p><p>His function is analogous to that of a judge &#x2F;&#x2F; , who must accept the obligation &#x2F;&#x2F; of revealing in as obvious a manner as possible the course of reasoning &#x2F;&#x2F; which led him to his decision.</p><p>他的职责与法官的职责相似，他必须承担这样的责任：用尽可能清楚明了的方式来告诉大家自己做出决定的推理过程。</p><h1 id="状语"><a href="#状语" class="headerlink" title="状语"></a>状语</h1><h2 id="识别-1"><a href="#识别-1" class="headerlink" title="识别"></a>识别</h2><p>只要在句子中见到下面一坨东西都认为是状语</p><ol><li>副词(什么样地动作)</li><li>原因(什么样的原因发出这个动作)</li><li>条件(什么样的条件下做这个动作)</li><li>目的(什么样的目的做这个动作)(<code>to do</code> or <code>in order to</code>)</li><li>结果(这个动过导致什么样的结果)(<code>so ... that</code>)</li><li>方式(以什么方式做这个动作)(manner or by)</li><li>比较(做这个动作比你做的如何)(as … as or than)</li><li>although(让步)</li><li>伴随(这个动作伴随着什么现象)</li></ol><h3 id="定语和状语的区别"><a href="#定语和状语的区别" class="headerlink" title="定语和状语的区别"></a>定语和状语的区别</h3><p>如果有时间或地点出现在名词之后, 有可能是定语, 也可能是状语</p><p>当无法确实是定语还是状语时, 定语优先原则, 只有翻译成定语原则之后恶心就是状语</p><h2 id="翻译-2"><a href="#翻译-2" class="headerlink" title="翻译"></a>翻译</h2><ol><li>英语原文中的状语翻译成状语的时候, 状语通常放在离他最近的那句话的前面或者是那句话的主谓之间</li><li>一句话当中既有时间又有地点状语的, 先翻译时间后翻译状语</li><li>如果表示原因的状语比较复杂, 也可以直接翻译成”之所以…是因为…”</li></ol><p>He adds humbly that perhaps he was “superior to the common run of men in noticing things which easily escape attention, and in observing them carefully.”</p><blockquote><p>in doing sth 表示在什么什么过程中, 在什么什么的时候</p></blockquote><p>Creates a RateLimiter with the specified stable throughput, given as “permits per second” (commonly referred to as QPS, queries per second).</p><p>创建一个具有稳定吞吐量的 RateLimiter 对象，以”permits per second（每秒许可次数）”的形式给出（通常， 作为成为QPS：每秒查询数）</p><p>The returned RateLimiter ensures that on average no more than permitsPerSecond are issued during any given second, with sustained requests being smoothly spread over each second. </p><p>返回 RateLimiter 对象，该对象确保在平均值上没有超出 任何给定秒内的 permitsPerSecond ，而持续的请求也将被分散在每一秒中</p><p>When the incoming request rate exceeds permitsPerSecond the rate limiter will release one permit every (1.0 &#x2F; permitsPerSecond) seconds. </p><p>当请求的速率超出 permitsPerSecond 值时，限速器将会在每一个（1.0 &#x2F; permitsPerSecond）秒释放一个许可。</p><p>When the rate limiter is unused, bursts of up to permitsPerSecond permits will be allowed, with subsequent requests being smoothly limited at the stable rate of permitsPerSecond.</p><p>当未使用限速器时，将允许最多为permitsPerSecond许可的爆发，随后的请求将被平稳地限制在permitsPerSecond的稳定速率上。</p><p>If none of the configured AuthenticationProviders can authenticate, then authentication will fail with a ProviderNotFoundException which is a special AuthenticationException that indicates the ProviderManager was not configured to support the type of Authentication that was passed into it.</p><p>如果配置的AuthenticationProviders类没有一个可以进行身份认证，则身份认证将会失败并抛出ProviderNotFoundException异常，该异常是一个特殊的AuthenticationException异常，它表明ProviderManager类未配置以支持传递给它（ProviderManager类）的Authentication类型。</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状语 </tag>
            
            <tag> 翻译 </tag>
            
            <tag> 前置 </tag>
            
            <tag> 后置 </tag>
            
            <tag> 融合法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08补充</title>
      <link href="/2022/11/25/06%E8%8B%B1%E8%AF%AD/08%E8%A1%A5%E5%85%85/"/>
      <url>/2022/11/25/06%E8%8B%B1%E8%AF%AD/08%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="★到底是定语还是状语"><a href="#★到底是定语还是状语" class="headerlink" title="★到底是定语还是状语?"></a>★到底是定语还是状语?</h1><p>看了好多方法来判断定语还是状语，不过好像都不太好用</p><p>我总结了些步骤判断到底是定语还是状语</p><ol><li>如果是 名词 + 介词短语 这种形式，一般先认定为 定语 翻译成什么什么的， 其他 + 介词短语形式，绝对是状语（当然还可以在他们中间加上 be 动词，判断 名词 和 介宾 形式中的 名词 和 宾语 是不是有关系，一般有关系也可以认为大概率是定语）</li><li>把介词短语的意思翻译出来，然后和动词做组合，介词短语 + 动词（可能是状语），或者动词 + 介词短语（可能是定语），看看能不能翻译，如果翻译不通顺那绝对是定语无疑</li><li>还不懂得到底是定语还是状语，一律看作定语，只要整句翻译出来意思上过得去逻辑正确就行，不强求</li><li>还不清楚到底是定语还是状语，但定语和状语都没有错的话，那带入上下文判断吧</li></ol><p>现在我们把下面全部网友举的例子都试一遍</p><p>（1）The doctors and nurses in the hospital are very patient with patients.</p><p>in the hospital 不用多说了吧？这明显是定语，为什么我这么认为呢？</p><p>主干是 主系表， 插入位置标号： 1 主 2 系 3 表 4 </p><p>明显上面的 in the hospital 位置 是 2 号 位置， 修饰的 主语，有时候还得注意 4 号位置，如果主干是 1 主 2 谓 3 宾 4 此时 4 号位置的介词短语有百分之60的可能是宾语， 记住是可能</p><p>然后还需要注意 1，3 号 位置的 介词短语，百分之九十九是 状语，特别是 1 号位置后面还可能有逗号，那百分百是状语</p><p>然后到 with patients， 先不提已经有的固定搭配”be patient with…对…有耐心“</p><p>从主干入手分析前面的 are very patient 是表语， 表示有耐心的，前面的 patient 是形容词 with patients 修饰形容词，符合“其他 + 介词短语”条件明显是状语</p><p>如果你还不确定他是状语，用我总结的第二个步骤： are with patients 或者 with patients are，判断发现 第二个句子可以翻译”对待病人是什么什么“ 再次证明是状语</p><p>整句翻译：医院里的医生和护士对待病人（是）非常有耐心（的） perfect~~~</p><p>（2）Don’t make noise in the hospital.</p><p>名词 + 介词短语 可能是定语，翻译成 ”不要制造在医院里的噪音“ 很奇怪不是？作为纯种中国人能明显地感到这句话不通顺但能明白它的意思（这就是我们的第三步骤：判断是否通顺方法）</p><p>用位置的方法也说他是定语（在4号位置修饰宾语） </p><p>当然站在上帝视角能看出来这么理解也没问题，那认定为定语又何妨？但不敢保证，保证其他语句不会翻译出其他意思</p><p>用第二种方法：make in the hospital 和 in the hospital make 明显 </p><p>in the hospital make 能翻译通顺”在医院中制造&#x2F;引起&#x2F;发出 什么什么“，状语无疑</p><p>整句翻译：不要在医院制造噪音 </p><p>再彻底汉化下： 不要在医院中大声喧哗</p><p>（3）Look at the sentences on the blackboard.<br>Write the sentences on the blackboard.</p><p>明显第一种用 名词 + 介词 短语的方式，全部认定为 定语 翻译成”看在黑板上的句子“， ”写在黑板上的句子“ 第一句没问题，第二句也没问题</p><p>位置方法也是 定语（4号位置）</p><p>那当作定语又何妨？</p><p>第二种方法：on the blackboard look 在黑板上看？！！！ look on the blackboard 不对 要 at</p><p>蚁人说：我能站在黑板上看什么什么。。。（明显不对，是定语）</p><p>on the blackboard write 在黑板上写，nice， write on the blackboard 写在黑板上 nice</p><p>都行，那么我选择第四种方法：带入上下文判断是</p><p> ”在黑板上写句子“（状语） or ”写在黑板上的句子“（定语）</p><h1 id="独立主格需要注意的地方"><a href="#独立主格需要注意的地方" class="headerlink" title="独立主格需要注意的地方"></a>独立主格需要注意的地方</h1><p>独立主格需要注意:</p><ol><li>being 可以省略(这点可以解决很多困惑)</li><li>主语相同, 必须省略掉一个 (不过则是伴随状语了)</li><li>主语不同, 可以加上 with 作区分功能</li></ol><h1 id="汉语中定语的位置和英语的差别"><a href="#汉语中定语的位置和英语的差别" class="headerlink" title="汉语中定语的位置和英语的差别"></a>汉语中定语的位置和英语的差别</h1><p>对于中文和英文的主干来说, 顺序一致, 但英文的修饰成分和中文存在差异</p><p>所以, 我们汉化的过程中, 需要注意, 定语, 一般在名词附近, 可能在名词前面, 叫<strong>前置定语</strong>, 这种定语&#x2F;作定语的短语一般比较短</p><p>还有就是作<strong>后置定语</strong>, 这种定语一般较长</p><blockquote><p><code>1 主 2 谓 3 宾 4 </code></p><p><strong><code>英语中定语可能在 1 2 位置, 修饰主语, 可能在 3 4 位置修饰宾语</code></strong></p><p><strong><code>但在中文中宾语只能放在 1 位置修饰主语, 3位置修饰宾语</code></strong></p></blockquote><h2 id="A-of-B"><a href="#A-of-B" class="headerlink" title="A of B"></a><code>A of B</code></h2><ul><li>百分之99都翻译成 B 的 A</li><li>A有形容词含义: A 的 B</li><li>A有动词含义: AB</li><li>A抽象意思B具体事物: BA或者只翻译B (上义词中有个类型是下义词, 比如城市和南京)</li></ul><p>上义词和下义词: in 2022 使用这种方式 in the year of 2022 </p><blockquote><p>这种方式比较正式</p></blockquote><h1 id="汉语中状语的位置和英语中的差别"><a href="#汉语中状语的位置和英语中的差别" class="headerlink" title="汉语中状语的位置和英语中的差别"></a>汉语中状语的位置和英语中的差别</h1><p>英语状语的位置是随机的, 但翻译成汉语后, 状语的位置并不是随机的, <strong>只能放在谓语之前</strong></p><p>翻译成中文后, 状语的位置必须在谓语前面</p><blockquote><p><code>1 主 2 谓 3 宾 4</code></p><p><strong><code>上面是 1 ~ 4 号位置在英文中都可以放状语</code></strong></p><p><strong><code>但在中文中, 状语只能放在 1 2 4 位置</code></strong></p></blockquote><blockquote><p>状语一般情况下, 不会放在 <code>宾 宾 之间</code>, 也不会放在 <code>宾 宾补之间</code></p></blockquote><h2 id="为什么会强调3号位置的状语"><a href="#为什么会强调3号位置的状语" class="headerlink" title="为什么会强调3号位置的状语?"></a>为什么会强调3号位置的状语?</h2><p><code>1 A 2 谓语 3 B 4</code></p><p>如果状语写到除 3 号位置意外的地方容易造成阅读者误判为定语, 特别是 2 和 4 号位置, 状语写 2 4 位置有些情况下特别难以判断</p><blockquote><p>状语写在 1 号位置还可以用逗号隔开, 还算好些</p></blockquote><h3 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h3><p>They maintain with a certain fidelity the principle of this school.</p><p>谓语是 maintain</p><p>with a certain fidelity 是状语</p><p>“他们坚定地支持这个学派的原则”</p><blockquote><p>将 3 号位置上的状语放到2号位置上翻译</p></blockquote><p>He has elected as his primary duty and pleasure in life the activity of thinking in a Socratic way about moral problems.</p><p>谓语  has  elected</p><p>as his primary duty and pleasure in life 状语</p><p>of thinking in a Socratic way about moral problems. 定语</p><p>他把用苏格拉底的方式来思考道德问题的行为当成他一生的基本责任和最大的快乐</p><blockquote><p>这里就要把三号位上的状语放到4号位置上翻译, 一般情况下, 放在 2 号位上就不错了, 不行就放 1 号位上, 结果这状语 1 2 都不行, 翻译不顺利, 只能放在 4 号位置上</p></blockquote><h3 id="定语和状语不确定怎么办"><a href="#定语和状语不确定怎么办" class="headerlink" title="定语和状语不确定怎么办?"></a>定语和状语不确定怎么办?</h3><p>优先考虑为定语, 如果不通顺, 则改成状语</p><h3 id="定语和状语都可以时怎么办"><a href="#定语和状语都可以时怎么办" class="headerlink" title="定语和状语都可以时怎么办?"></a>定语和状语都可以时怎么办?</h3><blockquote><p>放到上下文中判断</p></blockquote><p>在实际汉化过程中, 可能会遇到 既是 状语 也是 定语 的情况, 比如:</p><p>I saw a man with a telescope.</p><ul><li>这里的 with a telescope 既可以作定语, 修饰 man , 在 4 号位置, 翻译时需要放到 3 号位置</li></ul><p>汉化为: “我看到一个带着望远镜的男人”</p><ul><li>也可以作状语, 修饰 saw 动词, 在 4 号位置, 翻译时需要放到 1 或 2 号位置(谓语之前), 这里放到 2 号位置更好翻译</li></ul><p>汉化为: 我带着望远镜看到一个男人</p><p>上面这种情况, 只能够借助 语境 (也就是上下文情况) 具体分析到底是修饰的动词还是名词</p><h2 id="一些副词在修饰一个句子"><a href="#一些副词在修饰一个句子" class="headerlink" title="一些副词在修饰一个句子"></a>一些副词在修饰一个句子</h2><blockquote><p>我们可以独立翻译成一句话, “这是 … 的”</p></blockquote><p>She is admittedly reliable. 她很可靠, 这是大家承认的</p><p>It is painfully apparent that she is a liar.</p><p>很明显她是一个骗子, 这很令人心痛</p><blockquote><p>这里需要注意, 这句话是主语从句变出来的, 原句是 That she is a liar is painfully apparent, 所以这里的副词在三号位置, 提前到前面 1号 2号或者4号位置, 这里提到4号位置, 翻译成”很明显她是一个骗子, 这很令人心痛”</p></blockquote><h1 id="长难句"><a href="#长难句" class="headerlink" title="长难句"></a>长难句</h1><p>while it is easy to ignore in our contact with them the effect of our acts upon their disposition, it is not so easy as in dealing with adults</p><p>While it is …, it is …</p><p>While 放在句首一般被翻译成“虽然。。。但是”</p><p>找下连词:</p><p>while 没了</p><p>断句：</p><ul><li>while it is easy to ignore in our contact with them the effect of our acts upon their disposition, </li><li>it is not so easy as in dealing with adults</li></ul><p>找下谓语候选：</p><p>is is 断句没问题</p><p>简化：</p><ul><li>while it is easy to ignore 【in 。。。 with 。。。】 the effect 【of 。。。 upon 。。。】, </li><li>it is not so easy as 【in 。。。】</li></ul><blockquote><p>为什么 to ignore 。。。 effect 中间会有in our contact with them？</p><p>这里其实涉及到 3号 位置的状语问题，如果你把in our contact with them放在their disposition之后，会产生二义性，in our contact with them到底修饰的是disposition还是修饰的ignore？</p><p>作者想要修饰的是动词 ignore（作状语），而不是名词 disposition（作定语）</p></blockquote><p>简单翻译：</p><p>虽然 忽略影响很简单，但没有这么简单（很困难）以至于。。。</p><blockquote><p>这里前面的一句翻译没什么问题，但后面一句很奇怪，这里的 so adj&#x2F;adv as to do sth，说明后面一句话有省略的部分，不然突兀的加上 in dealing with adults 就很奇怪不是？</p></blockquote><p>还原：</p><p>前面一句我们能够翻译的出来：</p><p>虽然在我们接触他们时忽略了我们的行为对他们心理的影响</p><p>后面一句话，翻译需要补充省略的部分</p><blockquote><ol><li><p>我们知道省略一般都是前面已经有的成分，后面可以忽略掉</p></li><li><p>这次的省略提醒了我们未必就一定需要 连词 才能够产生省略</p></li></ol></blockquote><p>跟上面的提示我们补充省略的部分：</p><p>it is easy to ignore 【in our contact with them 状语】 （the effect of our acts upon their disposition）</p><p>it is not so easy as to ignore the effect of our acts upon their disposition in dealing with adults</p><p>这样我们就补全了我们的代码，同时为了防止状语从句被二义成定语，需要放在 3 号位置</p><p>it is not so easy as to ignore in dealing with adults the effect of our acts upon their disposition</p><p>可以翻译了</p><p>但在面对成年人的时候，它是如此的困难，以至于忽视了我们的行为对他们（成年人）心理的影响</p><p>完整翻译：</p><p>虽然在面对未成年人时忽略了我们的行为对他们心理的影响，但在面对成年人的时候，它更加的困难【以至于忽视了我们的行为对他们心理的影响】</p><p>Now the nation’s top patent court appears completely ready to scale back on business-method patents, which have been controversial ever since they were first authorized 10 years ago.</p><p>现在, 国家顶级专利法案似乎已经完成并准备缩减商业办法法案, 自从十年前他们首次授权以来, 这项法案已经引起了争议.</p><p>Curbs(限制) on business-method claims would be a dramatic about-face(反转), because it was the Federal Circuit itself that introduced such patents with is 1998 decision in the so-called state Street Bank case, approving a patent on a way of pooling mutual-fund assets.</p><p>对商业方法索赔的限制将是一个戏剧性的转折点，因为正是联邦巡回法院本身在1998年的所谓的道富银行案中提出了这类专利，批准了一项共同基金资产集资方法的专利。</p><blockquote><p>这句话的 on a way of pooling mutual-fund assets 到底是状语还是定语? 默认定语</p></blockquote><p>The Federal Circuit issued(发布) an unusual order stating that the case would be heard by all 12 of the court’s judges, rather than a typical panel of three, and that one issue it wants to evaluate is whether it should“reconsider”its State Street Bank ruling.</p><ul><li><p>The Federal Circuit issued an unusual order 这是个主干</p></li><li><p>stating that the case would be heard by all 1 2 of the court’s judges 宾语从句这是一个动宾结构</p></li><li><p>, rather than a typical panel of three, 看起来很像插入语, 但是看到了后面的 and, 可能是 , , and 形式, 看看句子词性顺序是否相同, 前面的 that 宾语从句和后面的 that 宾语从句 都是主谓宾结构, 但是中间的 ,rather than …, 却没有, 明显是插入语</p></li><li><p>and that one issue it wants to evaluate is whether it should“reconsider”its State Street Bank ruling. 并列句, 看情况对应前面的 that the case would be heard… 所以后面的句子省略了 stating</p></li><li><p>whether it should“reconsider”its State Street Bank ruling. 刚看的时候以为是 to evaluate 的宾语从句形式, 也就是动宾形式</p><blockquote><p>这也是只找连词的问题, 不清楚有些句子的形式, 按我总结来看, 连词必须配合谓语, 应该要 谓语和连词一起找, 所以以后改下, 上面的总结步骤直接不要, 重新分析</p></blockquote></li></ul><ol><li>找动词</li></ol><ul><li><code>issued</code>: 没有连词, 怀疑是 谓语, 再前面加上 <code>is issued</code> 判断是否是被动形式, “联邦巡回法庭被发布了一项不寻常的指示”, 明显不是被动发布的指示, 所以是 <code>谓语</code>, 找到了主干”<code>The Federal Circuit issued an unusual order</code>“</li><li>找到 <code>that</code> 连词, 找找后面的 动词 是哪个, <code>would be heard</code></li><li>找到并列连词<code>and that one issue</code>, 发现有省略(前面有对应的 <code>that the case</code>), 所以后面的句子加上<code>and stating that one issue </code></li><li>找到连词 <code>and that</code>, 前面还有两个 <code>,</code> 的形式, 通过分析句子的词性, 发现中间的部分是插入语, 可以不看, 在后面找到了两个 动词, <code>wants</code> 和 <code>is</code> 说明有 <code>主主谓谓</code> 或者 <code>主谓主谓</code>的形式, 我们分析下谓语和谓语之间是否有合适的主语, 发现之间是 <code>to evaluate</code> 不是名词或者代词, 所以是 <code>主主谓谓</code>形式, 当然我们还可以从<code>名词 + 名词</code>的形式判断, 如果有<code>名词 + 名词</code> 这种形式就能判断是<code>主主谓谓</code>形式, 明显这里有<code>one issue it</code>, 所以我们可以知道<code>主主谓谓</code>中间的<code>主谓</code>是从句, 前面是个名词, 所以中间的<code>主谓</code>是<code>定语从句</code> : <code>it wants to evaluate</code></li><li><code>is whether it should“reconsider”its State Street Bank ruling.</code> 明显这是个<code>表语从句</code>, 连词是<code>whether</code>后面的动词是<code>should“reconsider”</code></li></ul><p>至此语法分析完毕</p><ol start="2"><li>分析主干和修饰部分</li></ol><ul><li><p>主干是: <code>The Federal Circuit issued(发布) an unusual order</code> 意思是 “联邦巡回法院发布了一项不同寻常的指示”</p></li><li><p><code>order stating(陈述) that</code> 是<code>动宾结构</code>, <code>order</code> 是名词, 默认究竟修饰表<code>定语</code></p></li><li><p><code>by all 1 2 of the court&#39;s judges</code> 还是<code>就近修饰</code>, 看到前面的 <code>would be heard</code> 是动词, 说明这是状语</p></li><li><p><code>, rather than a typical panel of three,</code> 插入语不看, 不过还是就近修饰修饰<code>the court&#39;s judges</code></p></li></ul><ol start="3"><li>整体翻译</li></ol><p>联邦巡回法院发布了一项特殊的指示, 这项指示描述了该案件将由12个法院的法官听审, 而不是一个典型的三人陪审组, 并且也描述了法院想要审查的问题是 是否应该”重新考虑”对道富银行的裁定</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 独立主格 </tag>
            
            <tag> 状语 </tag>
            
            <tag> 定语 </tag>
            
            <tag> of从属 </tag>
            
            <tag> 3号位置 </tag>
            
            <tag> 位置 </tag>
            
            <tag> 汉语和英语的区别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07长难句分析</title>
      <link href="/2022/11/25/06%E8%8B%B1%E8%AF%AD/07%E9%95%BF%E9%9A%BE%E5%8F%A5%E5%88%86%E6%9E%90/"/>
      <url>/2022/11/25/06%E8%8B%B1%E8%AF%AD/07%E9%95%BF%E9%9A%BE%E5%8F%A5%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="长难句分析-——-断句"><a href="#长难句分析-——-断句" class="headerlink" title="长难句分析 —— 断句"></a>长难句分析 —— 断句</h1><blockquote><p>将句子断开</p></blockquote><h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><p>, 后面一般有连词</p><p>; 相当于并列连词</p><p>: 相当于同位语</p><h2 id="连接词"><a href="#连接词" class="headerlink" title="连接词"></a>连接词</h2><h3 id="使用连词断开句子"><a href="#使用连词断开句子" class="headerlink" title="使用连词断开句子"></a>使用连词断开句子</h3><blockquote><p>后期总结：田静老师的方式是找连词</p><p><strong><code>我的建议是 连词和动词一起找 来断句，因为有些类连词其实不是连词，有些连词还被省略</code></strong></p></blockquote><blockquote><p><strong><code>记住，只要从句前面有个名词，就有可能是同位语或者定语</code></strong></p><p><strong><code>如果 引导词 还做从句成分，那毕竟是定语从句，否则就是同位语从句</code></strong></p><p><strong><code>如果 that 还没省略了，那必定是定语从句</code></strong></p></blockquote><p>从句开始于连接词, 结束于三个位置：</p><ol><li>结束于标点</li><li>结束于下一个连接词之前</li><li>结束于第二个谓语前</li><li>句末</li></ol><hr><p>One of the reasons why the appointment came as such a surprise, however, is that Gilbert is comparatively little known.</p><ol><li><p>找标点，看到两个逗号，后面一个逗号直接连接着谓语，判定他是一个插入语</p></li><li><p>找到两个连词， why 和 that</p></li></ol><p>why 到标点符号结束，that到句末</p><ol start="3"><li>看主干</li></ol><p>One of the reasons is that 。。。 主系表</p><ol start="4"><li>看从句</li></ol><p>reason 后面的 why 定语从句</p><p>翻译成 “这个任命来的这么突然的一种一个原因”</p><p>is that + 从句 明显是表语从句</p><h2 id="例句、攻略的使用"><a href="#例句、攻略的使用" class="headerlink" title="例句、攻略的使用"></a>例句、攻略的使用</h2><blockquote><p>在实际翻译过程中，并不需要知道他到底是什么从句，只需要符合<strong>就近修饰原则</strong>就行</p><p>此方法是根据连词断句，方法特别好，比根据谓语断句门槛低多了</p><p>但找连词的方式有问题，省略了怎么办？如果是宾语从句或者定语从句作关系词作宾语的情况，根本就不能知道连词已经省略</p></blockquote><blockquote><p>找到连词的话，我们可以使用 连词和谓语的比 n ：n + 1 来看，找到两个连词就有三件事（两个动词+一个谓语），找到四个连词就有五件事（四个动词+一个谓语），没有找到连词就只有一件事（一个谓语）</p></blockquote><hr><p>Some species of trees have been “read out of the party” by economics-minded foresters<br><em>because</em> they grow too slowly, <em>or</em> have too low a sale value to pay as timber crops.</p><p>找到 because 和 or （找到两个连词，应该会有三个句子）</p><ul><li>Some species of trees have been “read out of the party” by economics-minded foresters（主干，主系表结构）</li><li><em>because</em> they grow too slowly, （原因状语从句，主谓结构）</li><li>they have too low a sale value to pay as timber crops. （原因状语从句，主谓宾结构）</li></ul><blockquote><p>发现 or 后面的句子不完整，省略了主语</p></blockquote><hr><p>Today they argue that market prices overstate losses, because they largely reflect the<br>temporary illiquidity of markets, not the likely extent of bad debts.</p><p>that 从句作宾语从句，because 引出了原因状语从句</p><p>找到两个连词，应该会有三个动词</p><p>句子分成：</p><ul><li><p>Today they argue</p></li><li><p>that market prices overstate losses,</p></li><li><p>because they largely reflect the temporary illiquidity of markets, not the likely extent of bad debts</p></li></ul><hr><p>But take a longer view and there is a surprising amount that we can say with considerable assurance.</p><p>and that 找到两个连词，应该会有三个动词</p><p>句子断成： </p><ul><li>But take a longer view </li><li>and there is a surprising amount </li><li>that we can say with considerable assurance. （定语从句，修饰 amount）</li></ul><blockquote><p>如果不知道是否断句成功，可以看看每个句子是否有且只有一个谓语</p></blockquote><hr><p>Now the nation’s top patent court appears completely ready to scale back on business-method patents, which have been controversial ever since they were first authorized 10 years ago.</p><p>, which 这里明显有连词</p><p>ever since 从。。。开始</p><p>找到两个连词，应该会有三个动词</p><ul><li>Now the nation’s top patent court appears completely ready to scale back on business-method patents</li><li>, which have been controversial （定语从句，修饰前面一件事）</li><li>ever since they were first authorized 10 years ago.（时间状语从句）</li></ul><hr><p>The principle of British welfare is no longer that you can insure yourself against the risk of unemployment and receive unconditional payments if the disaster happens.</p><p>这里断句有个小坑</p><p>连词有 that and 和 if</p><p>找到三个连词，应该会有四个动词</p><p>但是断句的话是：</p><ul><li>The principle of British welfare is no longer </li><li>that you can insure yourself against the risk of unemployment  （表语从句，前面的 no longer是状语）</li><li>and you can receive unconditional payments （表语从句，前面的 no longer是状语）</li><li>if the disaster happens （条件状语从句）</li></ul><p>因为 and 后面的句子不完整，被省略了主语 you can </p><blockquote><p>上面有两个表语从句</p></blockquote><hr><p>Until now, many sellers that have a physical presence in only a single state or a few states have been able to avoid charging sales taxes when they ship to addresses outside those states.</p><p>这里也有坑，但其实也没有</p><p>找连词：that or when </p><p>找到三个连词，应该会有四个动词</p><p>句子分断时发现不行：</p><ul><li>Until now, many sellers</li></ul><p>这样作一句明显缺少了成分，所以后面的 that从句 肯定有两个动词</p><p>要这样分断：</p><ul><li>Until now（放句首用逗号隔开，明显是状语，无所谓了）, many sellers have been able to avoid charging sales taxes （主谓宾）</li><li>that have a physical presence in only a single state or a few states （定语从句，先行词 sellers，差点判断是同位语从句，不过that做了从句成分）</li><li>when they ship to addresses outside those states.（时间状语从句，when前面没有类似时间的名词，所以不是定语，前面主系表都有，主干不缺成分，所以也不是名词性从句）</li></ul><hr><p>Second, the majority of people who use networked computers to upload are not even aware of the significance of what they are doing.</p><p>句首短语+逗号一般认为是状语</p><p>连词：who what</p><p>找到俩个连词，应该会有三个动词</p><p>还是同样问题，断开句子存在不完整的地方</p><ul><li>the majority of people</li></ul><p>所以 who 引导的从句有两个动词，who从句到下一个动词前面结束， 明显到 are</p><p>断句：</p><ul><li>the majority of people are not even aware of the significance（主系表）</li><li>who use networked computers to upload(定语从句，修饰 people)</li><li>of what they are doing（宾语从句，介宾结构）</li></ul><hr><p>If the bar exam is truly a stern enough test for a would-be lawyer, those who can sit it earlier should be allowed to do so.</p><p>逗号 可以断开成两句</p><ul><li>If the bar exam is truly a stern enough test for a would-be lawyer,</li><li>those who can sit it earlier should be allowed to do so.</li></ul><p>找连词：if，who</p><p>找到俩个连词，应该会有三个动词</p><p>还是同样的问题，断句，断出来的句子必须成分完整 those who 显然不完整，只有 those， who 后面有两个动词</p><p>断句：</p><ul><li>those should be allowed to do so. (主谓， to do作主语的补足语)</li><li>If the bar exam is truly a stern enough test for a would-be lawyer, （条件状语从句）</li><li>who can sit it earlier（定语从句，修饰先行词those）</li></ul><hr><p>When the competitive environment pushed our ancestors to achieve that potential, they could in turn afford more education.</p><p>这里需要注意：that 引导的是一个从句才算是 连词</p><p>上面的句子中 that potential 只引导了一个单词，所以明显不是 连词</p><p>连词：when</p><p>找到一个连词，应该会有俩个动词</p><p>断句：</p><ul><li><p>they could in turn afford more education.（主干 主谓宾结构）</p></li><li><p>When the competitive environment pushed our ancestors to achieve that potential,（时间状语从句，从句到标点符号结束）</p></li></ul><hr><p>Amazon.com… also collects sales tax in every state that charges it, though third-party sellers who use the site don’t have to.</p><p>发现逗号可以断开成两句：</p><ul><li>Amazon.com… also collects sales tax in every state that charges it</li><li>though third-party sellers who use the site don’t have to.</li></ul><p>找连接词：that，though，who <code>三个连词可以断成四个动词</code></p><ul><li>Amazon.com… also collects sales tax in every state</li><li>that charges it</li><li>though third-party sellers don’t have to.</li><li>who use the site</li></ul><hr><p>People who perceived greater social support were less likely to come down with a cold,<br>and the researchers calculated that the stress-reducing effects of hugging explained about 32 percent of that beneficial effect.</p><p>连词：who，and，that，that（但其实不是 that beneficial[adj] effect[只能是名词]）</p><p>找到 三个连词，共有四个动词</p><ul><li>People were less likely to come down with a cold（主系表）</li><li>who perceived greater social support (定语从句，先行词People)</li><li>and the researchers calculated （主谓宾）</li><li>that the stress-reducing effects of hugging explained about 32 percent of that beneficial effect（宾语从句）</li></ul><hr><p>We have to suspect that continuing economic growth promotes the development of education even when governments don’ t force it.</p><p>连词：that，when 找到两个连词，有三句话</p><ul><li>We have to suspect （主谓宾）</li><li>that continuing economic growth promotes the development of education （宾语从句，作宾语）</li><li>even when governments don’ t force it（时间状语从句）</li></ul><hr><p>The notion is that people have failed to detect the massive changes which have happened in the ocean because they have been looking back only a relatively short time into the past。</p><p>连词：that，which，because</p><p>找到三个连词，必定有四个动词</p><ul><li>The notion is （主系表）</li><li>that people have failed to detect the massive changes （表语从句）</li><li>which have happened in the ocean （定语从句，先行词是changes）</li><li>because they have been looking back only a relatively short time into the past。（原因状语从句）</li></ul><hr><p>They are the possessions of the autonomous (self-governing) man of traditional theory, and they are essential to practices in which a person is held responsible for his conduct and given credit for his achievements.</p><p>找并列连词：and，and</p><p>找主从连词：in which</p><p>找到三个连词，就有四个动词</p><ul><li>They are the possessions of the autonomous (self-governing) man of traditional theory,（主系表）</li><li>and they are essential to practices （主系表）</li><li>in which a person is held responsible for his conduct （定语从句）</li><li>and a person is given credit for his achievements.</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>找连词，断句子（不包含省略的方式，省略方式需要配合 #分析主谓 章节）</p></blockquote><p>攻略1.现在从句，但先看主句</p><p>攻略2.不要纠结从句</p><p>攻略3.并列注意忽略</p><blockquote><ul><li><p>从句修饰前面的名词并且关系词作从句成分 &#x3D;&#x3D;&gt; 定语从句</p></li><li><p>主干缺少成分，使用从句代替名词成分，并且引导词不做从句成分 &#x3D;&#x3D;&gt; 名词性从句</p></li><li><p>从属连词 + 完整的句子（主谓宾） &#x3D;&#x3D;&gt; 状语从句</p></li></ul></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p>连词的方式确实更加简单（刘晓艳推荐以找动词为主，不太一样），但其带来的了的问题，那就是连词省略了咋办？所以需要别的方法解决遇到连词省略的问题</p></blockquote><h2 id="分析主谓"><a href="#分析主谓" class="headerlink" title="分析主谓"></a>分析主谓</h2><p>这种方式合适没有连词，没有标点符号的情况，比如：连词被省略了，或是独立主格，又或者是伴随关系状语从句</p><ul><li><strong><code>主谓主谓(后面的主谓是从句)</code></strong></li><li><strong><code>主主谓谓(中间的主谓是从句)</code></strong></li></ul><blockquote><p>限定词 + 单词，这个单词应该是 名词&#x2F;代词</p></blockquote><blockquote><p>从上面可以找到这种方法：</p><ul><li>找找有没有 <strong>双名词（不做定语同位语）</strong> 形式，如果有，那么大概率是 <strong>主主谓谓</strong>，如果没有则是 <strong>主谓主谓</strong></li><li><strong>找到谓语和谓语之间是否有合适的名词作主语</strong>，没有则是 <strong>主主谓谓</strong>，否则可能是 <strong>主谓主谓</strong></li></ul></blockquote><hr><p>The IASB says it does not want to act without overall planning, </p><p>主干：The IASB says </p><p>从句：it does not want to act without overall planning</p><blockquote><p>says it does not want to act （主谓主谓）</p><p> 👆   👆        👆     says 和 does not want 两个动词  中间有个代词（名词）</p></blockquote><hr><p>Allen’s contribution was to take an assumption we all share…</p><p>主干：Allen’s contribution was to take an assumption </p><p>从句：we all share</p><p>这里从句可能是定语从句，因为前面是一个名词 assumption</p><blockquote><p>was to take an assumption we all share 主谓主谓</p><p>👆                         👆       👆 谓语 名词 谓语</p></blockquote><hr><p>When the court deals with social policy decisions, the law it shapes is inescapably political..</p><p>找符号：，</p><p>找连词：when</p><p>句子分成两句：</p><ul><li>When the court deals with social policy decisions,（时间状语从句）</li><li>the law it shapes is inescapably political..（主主谓谓）</li></ul><p>找动词：shapes，is两个动词，说明这句话说了两件事</p><ul><li><p>it shapes （从句）</p></li><li><p>the law is inescapably political..（主干）</p></li></ul><p>这里的 it shapes 修饰的 law 是名词，所以大概率是定语从句</p><blockquote><p>the law it shapes is inescapably political..</p><p>​     👆 👆   👆    👆   n + n + v + v 谓语谓语中间没东西，主主谓谓，当然还可以用 n + n 配合判断</p></blockquote><blockquote><p>the law it shapes is </p><p>名词 + 名词 + 谓语 + 谓语， 根据下面 #两个名词连续待在一起 章节</p><p>明显，the law 的 law 是名词，因为前面用了限定词 the</p><p>但是 it 也是 名词：it是代词属于名词</p><p>按照上面章节给出的四种情况，明显，作定语，状语的情况都不符合，句子中间没有介词也不符合第四种情况，只能是 主主谓谓 这种情况，其中中间的主谓是从句 it shapes 是从句，前面 law 是名词，所以是定语从句</p></blockquote><blockquote><p>这句绝不可能是同位语从句，因为同位语从句引导词不能省略，也不是名词性从句，因为主干不缺少名词成分</p></blockquote><hr><p>The way consumers now approach the process of making purchase decisions means that marketing’s impact stems from a broad range of factors beyond conventional paid media.</p><blockquote><p>主主谓谓</p><p>The way consumers now approach the process 这里极有可能有谓语</p><p>​     ↑    ↑               👆           ↑   如果不看意思，看词性的话，标标的位置全是名词，连续4个名词，怎么可能？明显 approach 是 动词 形式</p></blockquote><blockquote><p>marketing’s impact stems from a broad range 这句话怎么分析？</p><p>marketing’s impact： impact 这个明显是 名词</p><p>stems from：固定搭配，源自… </p><p><code>a broad range</code>：range 范围，broad 形容词 宽泛的</p></blockquote><p>连词：that， 说明有两个动词，但实际上有三个动词，一个连词 that（in which）被省略</p><ul><li>consumers now approach the process of making purchase decisions means（定语从句，修饰way）</li><li>The way means that 。。。（主干，主谓宾）</li><li>that marketing’s impact stems from a broad range of factors beyond conventional paid media.（宾语从句）</li></ul><blockquote><p>上面 The way consumers 之间有个 in which（that）成分被省略，我看过另一个考研男老师说的，只要是 that 都可以省略，而大部分老师都说that作宾语从句、定语从句的宾语成分时才能省略，看到这句话，我觉得 that 好像都能省略似的。。。</p></blockquote><hr><p>the way you present yourself has an impact. </p><p>the way you 名词 + 名词</p><p>这里 present 翻译成 “礼物”，但大概率是动词，不然就会变成 <code>冠词 + 名词 + 名词 + 名词 + 代词(名词) + 动词。。。</code>你觉得可能么？</p><p>三个名词都顶天了（除非是专业性术语），这里是四个名词，根本不可能</p><p>所以这里是 主主谓谓 的情况，实际情况是 主主谓宾谓宾</p><p>所以句子是</p><ul><li>the way has an impact</li><li>you present yourself（定语从句）</li></ul><p>这里的 present 作动词不知道的话，就翻译成“礼物”吧，你礼物你自己？不就是你把自己送出去了么？再好听点 “你展现了你自己”</p><p>翻译“你展示你自己的方式会产生影响”</p><blockquote><p>限定词只能限定名词或代词，所以只要遇到限定词那么之后就是名词</p></blockquote><hr><p>Cartwright believes one can exercise conscious control over recurring bad dreams.</p><p>没有连词，但又有两个动词（believes，can exercise），存在被省略的连词</p><p>主谓主谓结构，是：主谓 + 引导词 + 主谓， 宾语从句</p><ul><li>Cartwright believes that。。。（主谓宾）</li><li>one can exercise conscious control over recurring bad dreams.（宾语从句）</li></ul><hr><p>But the regular time it takes to get a doctoral degree in the humanities is nine years.</p><p>the regular time 这里不管 regular 是名词还是形容词，都是定语，根据前面的四种双名词形式</p><p>那为什么 time 不可以是动词形式呢？</p><p>这么判断：</p><p>But 连词，所以会抵消掉后面的一个动词， 所以至少有两个动词（当然也有可能省略了连词，需要注意是否有算名词的情况）</p><p>找找可疑的动词都有哪些：time</p><p>保证他是动词的有：tasks，is</p><p>大概率 time 不是动词</p><ul><li>But the regular time is nine years.</li><li>it takes to get a doctoral degree in the humanities</li></ul><hr><p>Instead, the new habits we deliberately press into ourselves create parallel pathways that can bypass those old roads.</p><p>that 连词，说明至少有两个动词</p><p>结果发现三个（press into, create, can bypass），说明省略了一个连词</p><p>找多名词组合或者找谓语之间的名词</p><p>the new habits we &#x3D;&#x3D;&gt; 双名词结构</p><p>press into, create &#x3D;&#x3D;&gt; 谓语之间的名词：没有</p><p>推断出是：主主谓谓 结构 &#x3D;&#x3D;&gt; 主 + 从句 + 主 + 谓 + 谓</p><ul><li>（that）we deliberately press into ourselves  （定语从句，修饰 habits）复习下，从句从连词开始到下一个谓语前结束</li><li>the new habits create parallel pathways that 。。。 （主干，主谓宾结构）</li><li>that can bypass those old roads.（定语从句，修饰 pathways）</li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>判断省略连词的成分</p><h4 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h4><p>主主谓谓</p><p>主谓主谓</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>根据核心找方法：</p><ol><li>多名词结构判断（名词作定语；名词作同位语；介词+名词+名词；主主谓谓）</li><li>找谓语之间是否有合适的名词判断</li></ol><hr><p>an inability to consider the big picture was leading decision-makers to be biased by the daily samples of information they were working with.</p><h2 id="俩名词连续待在一起"><a href="#俩名词连续待在一起" class="headerlink" title="俩名词连续待在一起"></a>俩名词连续待在一起</h2><p>一般遇到连续两个名词在一起的时候需要注意可能是下面这些情况：</p><ol><li><p><code>A B：A 作 B 的定语 B of A，限定 B（B范围太广需要A限制范围）</code></p></li><li><p><code>A B：B 作 A 的同位语，解释 A（A不够详细需要B解释）</code></p></li><li><p><code>主主谓谓的情况</code></p></li><li><p><code>谓 + 介词 + 名词 + 名词（谓语~名词之间可能连续出现 介词 + 名词的结构，而且中间的这个介宾结构在动词之后大概率只能是状语）</code></p></li></ol><p>所以看到两个名词连续的情况需要警惕，可能是上面四种情况之一</p><h3 id="同位语的方式"><a href="#同位语的方式" class="headerlink" title="同位语的方式"></a>同位语的方式</h3><ul><li>A, B</li><li>A 破折号 B</li><li>A or B</li><li>A of B</li><li>句子 + 破折号 or 逗号 + 名词(名词可能被修饰)</li></ul><h3 id="根据句子短语词性判断状语"><a href="#根据句子短语词性判断状语" class="headerlink" title="根据句子短语词性判断状语"></a>根据句子短语词性判断状语</h3><p><code>V + 介词 + N1 + N2</code> 一般情况下, 中间的 <code>介词 + N1</code> 肯定不是宾语但可能是状语, 因为在动词之后的介宾短语, <code>N2</code>可能是宾语</p><hr><p>A few art collections established in their respective communities the idea of the value art.</p><p>in their respective communities 这段就是 介词 + 名词 的部分</p><h1 id="长难句分析-——-简化"><a href="#长难句分析-——-简化" class="headerlink" title="长难句分析 —— 简化"></a>长难句分析 —— 简化</h1><blockquote><p>找核心：主语，谓语，宾语，补语（宾补，主补【表语】）</p></blockquote><h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h2><p>找非核心，去掉非核心</p><blockquote><p>形容词、副词、介词短语、非谓语动词、同位语、插入语、状语从句等</p></blockquote><hr><p>Also, some research suggests that the explanation for rising rates of mortality, mental-health problems, and addiction among poorly-educated, middle-aged people is shortage of well-paid jobs.</p><p>步骤都一样</p><h3 id="一、找逗号"><a href="#一、找逗号" class="headerlink" title="一、找逗号"></a>一、找逗号</h3><p>发现 “，” 都是and连接的名词，所以不看</p><h3 id="二、找连词"><a href="#二、找连词" class="headerlink" title="二、找连词"></a>二、找连词</h3><p>that 只有一个</p><p>找动词，suggests is 只有两个</p><h3 id="三、断开句子"><a href="#三、断开句子" class="headerlink" title="三、断开句子"></a>三、断开句子</h3><ul><li>Also, some research suggests that…</li><li>that the explanation for rising rates of mortality, mental-health problems, and addiction among poorly-educated, middle-aged people is shortage of well-paid jobs.</li></ul><p>发现句子太复杂了，</p><h3 id="四、简化句子（找到主干）"><a href="#四、简化句子（找到主干）" class="headerlink" title="四、简化句子（找到主干）"></a>四、简化句子（找到主干）</h3><hr><p>the explanation for rising rates of mortality, mental-health problems, and addiction among poorly-educated, middle-aged people is shortage of well-paid jobs.</p><p>介词短语：</p><ul><li>for rising rates of mortality, mental-health problems, and addiction</li><li>among poorly-educated, middle-aged people</li><li>of well-paid jobs</li></ul><p>简化完毕：</p><p>some research suggests that the explanation is shortage.</p><h3 id="五、找到动词"><a href="#五、找到动词" class="headerlink" title="五、找到动词"></a>五、找到动词</h3><p>suggests，is</p><h3 id="六、分析修饰成分是定、状语"><a href="#六、分析修饰成分是定、状语" class="headerlink" title="六、分析修饰成分是定、状语"></a>六、分析修饰成分是定、状语</h3><p>for rising rates of mortality, mental-health problems, and addiction &#x3D;&#x3D;&gt; 定语</p><p>among poorly-educated, middle-aged people &#x3D;&#x3D;&gt; 状语</p><p>of well-paid jobs &#x3D;&#x3D;&gt; 定语</p><blockquote><p>我的判断方法是：</p><ol><li>判断介词前面是否有名词？</li></ol><p>有，大概率是定语</p><p>没有，大概率是状语</p><p>但还不能断定他就是定语还是状语，需要下面这个步骤判断</p><ol start="2"><li>是否能够翻译成 “。。。的”并且修饰“名词”？ &#x3D;&#x3D;&gt; 定语（只要不修饰动词或者整个句子）</li><li>是否能够翻译出表示： “目的，结果，对比，条件，原因，让步，方式” &#x3D;&#x3D;&gt; 是，就是状语（其中时间和地点不能够确定一定是状语）</li></ol></blockquote><hr><p>When people in developing countries worry about migration, they are usually concerned at the prospect of their best and brightest departure to Silicon Valley or to hospitals and universities in the developed world.</p><p>同样的方法</p><p>找标点：没有</p><p>找连词：when，至少两个动词</p><p>断开句子：</p><ul><li>When people in developing countries worry about migration,</li><li>they are usually concerned at the prospect of their best and brightest departure to Silicon Valley or to hospitals and universities in the developed world.</li></ul><p>简化句子：</p><ul><li>When people worry,</li><li>they are concerned.</li></ul><p>找到动词：</p><p>worry，are concerned</p><p>定、状语：</p><p>名词n + in developing countries：定语</p><p>about migration 没有名词修饰： 状语</p><p>at the prospect of their best and brightest departure to Silicon Valley or to hospitals and universities 状语</p><p>in the developed world 定语 修饰 hospitals and universities</p><blockquote><p>名词 + 介宾 一般情况下，介宾修饰的名词作定语，否则作状语</p></blockquote><hr><p>From the beginning of our history, says Hofstadter, our democratic and populist urges have driven us to reject anything that smells of elitism.</p><p>我们把主要步骤简化下，要不然有 六个 步骤太过于复杂了</p><h2 id="简化步骤"><a href="#简化步骤" class="headerlink" title="简化步骤"></a>简化步骤</h2><h3 id="一、断句"><a href="#一、断句" class="headerlink" title="一、断句"></a>一、断句</h3><blockquote><p>看符号，看连词</p></blockquote><ul><li>From the beginning of our history, says Hofstadter, our democratic and populist urges have driven us to reject anything</li><li>that smells of elitism.</li></ul><h3 id="二、简化（找动词）"><a href="#二、简化（找动词）" class="headerlink" title="二、简化（找动词）"></a>二、简化（找动词）</h3><blockquote><p>简化并不是全部部分都简化的干干净净，保留部分（简短的）修饰成分好理解主干的意思</p><p>也可以叫代替，用 “。。。”或者“…”代替修饰的部分</p></blockquote><ul><li>。。。，。。。，our democratic and populist urges have driven us to reject anything（主谓宾宾补）</li><li>that smells of elitism.（定语成分）</li></ul><blockquote><p>这步骤的目的主要是：</p><ul><li>看看断句是否错误</li><li>找到谓语</li></ul></blockquote><p>have driven，smells</p><p>简化后的翻译：“我们对民主化和平民化的渴求驱使我们拒绝一切精英主义的事物”</p><h3 id="三、还原（翻译）"><a href="#三、还原（翻译）" class="headerlink" title="三、还原（翻译）"></a>三、还原（翻译）</h3><blockquote><p>还原修饰部分到简化的句子中</p></blockquote><p>霍夫斯塔德说（插入语没人权可以不看），自我们的历史开始，我们对民主化和平民化的渴求驱使我们拒绝一切精英主义的事物</p><hr><p>The coming of age of the postwar baby boom and an entry of women into the male-dominated job market have limited the opportunities of teenagers who are already questioning the heavy personal sacrifices involved in climbing Japan’s rigid social ladder to good schools and jobs.</p><p>断句：who</p><ul><li>The coming of age of the postwar baby boom and an entry of women into the male-dominated job market have limited the opportunities of teenagers</li><li>who are already questioning the heavy personal sacrifices involved in climbing Japan’s rigid social ladder to good schools and jobs.</li></ul><p>简化：</p><ul><li>The coming 。。。 and an entry 。。。 have limited the opportunities of teenagers</li><li>who are already questioning the heavy personal sacrifices 。。。.</li></ul><blockquote><p>看到介词之后的东西，不管有几个名词，大胆的删除 比如： of the postwar baby boom</p></blockquote><blockquote><p>involved 这个分词引导的句子，要么作定语（这里作定语修饰sacrifices），要么作状语，直接删除</p></blockquote><p>简单的翻译下：</p><p>。。。到来和。。。进入现象的出现已经限制了青少年的机会，他们正在质疑这沉重的个人牺牲。。。</p><p>还原：</p><p>战后婴儿潮时期的到来和妇女进入男性主导的工作，这种现象的出现已经限制了青少年的发展机会，他们正在质疑参与攀登日本等级森严的社会阶梯以获得好的教育和工作所付出的沉重牺牲是否值得</p><blockquote><p>翻译就不是一蹴而就的事情，特别是部分恶心人的翻译，我们需要加上自己对该英语句子意思的理解然后加上部分该句子中根本就不存在的汉字，补充完整个汉化的意思</p></blockquote><hr><p>For example, British anthropologists Grafton Elliot Smith and W. J. Perry incorrectly suggested, on the basis of inadequate information, that farming, pottery making, and metallurgy all originated in ancient Egypt and diffused throughout the world.</p><p>断句：</p><ul><li>For example, British anthropologists Grafton Elliot Smith and W. J. Perry incorrectly suggested, on the basis of inadequate information, </li><li>that farming, pottery making, and metallurgy all originated in ancient Egypt and diffused throughout the world.</li></ul><p>简化：</p><ul><li>。。。。British anthropologists 。。。 incorrectly suggested,。。。, （主谓宾）</li><li>that farming, pottery making, and metallurgy all originated 。。。 and diffused 。。。.（宾语从句）</li></ul><p>简单翻译：“英国人类学家错误地认为农业、制陶和冶金都起源和传播”</p><p>还原：</p><p>例如，英国人类学家Grafton Elliot Smith 和 W. J. Perry 错误地认为农业、制陶和冶金都起源于古埃及并且传播到世界</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><h3 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h3><ol><li>遇到两个+逗号，比如 a，b，c and d 这种只要看到末尾的 and 或者 or 这种连词，直接断定 ，不断句子</li></ol><h3 id="两步分析法"><a href="#两步分析法" class="headerlink" title="两步分析法"></a>两步分析法</h3><hr><p>The same dramatic technological changes that have provided marketers with more (and more diverse) communications choices have also increased the risk that passionate consumers will voice their opinions in quicker, more visible, and much more damaging ways.</p><p>连词：that that</p><p>断句：</p><ul><li>The same dramatic technological changes（changes是名词）</li><li>that have provided marketers with more (and more diverse) communications choices have also increased the risk（定语从句，为什么？that作从句成分所以是定语从句，所以上面的changes是名词【先行词】，主干没有谓语，估计在这句话中）</li><li>that passionate consumers will voice their opinions in quicker, more visible, and much more damaging ways.（同位语从句，that不做成分，解释修饰 risk）</li></ul><h3 id="现在我们换一种方式断句"><a href="#现在我们换一种方式断句" class="headerlink" title="现在我们换一种方式断句"></a><strong>现在我们换一种方式断句</strong></h3><h4 id="断句："><a href="#断句：" class="headerlink" title="断句："></a>断句：</h4><ul><li><p>The same dramatic technological changes that从句1 have also increased the risk that从句2.</p></li><li><p>that have provided marketers with more (and more diverse) communications choices</p></li><li><p>that passionate consumers will voice their opinions in quicker, more visible, and much more damaging ways</p></li></ul><h4 id="简化："><a href="#简化：" class="headerlink" title="简化："></a>简化：</h4><ul><li><p>。。。 changes that从句1 have also increased the risk that从句2.</p></li><li><p>that have provided marketers 。。。</p></li><li><p>that passionate consumers will voice their opinions 。。。</p></li></ul><blockquote><p>默认从句都是修饰的前面的单词</p></blockquote><p>那么翻译出来将会是这样：</p><p><strong>什么样的 changes 也会完成 什么样的 risk</strong></p><p>这两个什么样的，刚好配合下面的两个 that</p><h4 id="还原："><a href="#还原：" class="headerlink" title="还原："></a>还原：</h4><ul><li><p>【The same dramatic technological】 changes that从句1 have also increased the risk that从句2.</p></li><li><p>that have provided marketers 【with more (and more diverse) communications choices】</p></li><li><p>that passionate consumers will voice their opinions 【in quicker, more visible, and much more damaging ways】</p></li></ul><h1 id="长难句的结构-——-分裂"><a href="#长难句的结构-——-分裂" class="headerlink" title="长难句的结构 —— 分裂"></a>长难句的结构 —— 分裂</h1><blockquote><p>在断开和简化之前，要进行一次分裂结构的还原</p></blockquote><h2 id="插入式（同位语，插入语和状语从句）"><a href="#插入式（同位语，插入语和状语从句）" class="headerlink" title="插入式（同位语，插入语和状语从句）"></a>插入式（同位语，插入语和状语从句）</h2><blockquote><ol><li><p>如果是插入语一般都会有成对的逗号&#x2F;破折号出现</p></li><li><p>而且插入语比较突兀的出现，可能截断了其他句子本身的表达（也就是说插入语优先级较高直接错开的原本的句子）</p></li><li><p>插入语如果是同位语的话，作用就是解释前面的名词；如果是单纯插入语的话，则可以不看；如果是状语从句的插入语必须要看</p></li></ol></blockquote><hr><p>Bob Liodice, the chief executive of the Association of National Advertisers, says consumers will be worse off if the industry cannot collect information about their preferences.</p><ul><li>Bob Liodice, the chief executive of the Association of National Advertisers, says consumers will be worse off</li><li>if the industry cannot collect information about their preferences.</li></ul><p>断开句子，发现前面一句有两个谓语：says，will be</p><ul><li><p>Bob Liodice, 插入语 , says consumers will be worse off</p></li><li><p>the chief executive of the Association of National Advertisers</p></li></ul><p>says consumers will be 动词 + 名词 + 动词，主谓主谓结构</p><ul><li><p>Bob Liodice, 插入语 , says(主谓宾)</p></li><li><p>(that) consumers will be worse off（主系表）</p></li><li><p>the chief executive of the Association of National Advertisers（插入语）</p></li><li><p>if the industry cannot collect information about their preferences.（条件状语从句，主谓宾）</p></li></ul><hr><p>These benefactors have succeeded in their chosen fields, they say, and they want to use their wealth to draw attention to those who have succeeded in science.</p><ul><li>These benefactors have succeeded in their chosen fields,(主谓)</li><li>they say（插入语）, </li><li>and they want to use their wealth to draw attention to those（主谓宾）</li><li>who have succeeded in science.（定语从句修饰 those；主谓）</li></ul><blockquote><p>简化未必是必须的，要看断句之后的句子是否还是很复杂</p></blockquote><hr><p>Yet these creatures are members of the biotic community and, if its stability depends on its integrity, they are entitled to continuance.</p><ul><li>Yet these creatures are members of the biotic community and,（主系表）</li><li>if its stability depends on its integrity,（条件状语从句；插入语）</li><li>they are entitled to continuance.（主谓宾）</li></ul><blockquote><p>不是每个插入语都可以省略，只有同位语，一些解释性的插入语可以不看，但像上面的状语从句就不能省略</p></blockquote><p>上面的条件状语从句如果是插入语的话，建议转移到别的地方</p><blockquote><p>非限定性定语从句也可以插入到句子中间，但可以不看</p></blockquote><h2 id="后移式（从句太长后移）"><a href="#后移式（从句太长后移）" class="headerlink" title="后移式（从句太长后移）"></a>后移式（从句太长后移）</h2><blockquote><p>从句太长了，后移，那么产生了新的问题，就是找不到从句所修饰的成分</p></blockquote><blockquote><p>如果从句前面的那个短语是 短语（一般是介词短语），则可能需要注意 从句后移 的情况</p></blockquote><h3 id="什么样的概念叫太长了？"><a href="#什么样的概念叫太长了？" class="headerlink" title="什么样的概念叫太长了？"></a>什么样的概念叫太长了？</h3><p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwx1.sinaimg.cn%2Forj360%2F006wfW1Zly1g5fwsy13n1j30k00na3z9.jpg&refer=http%3A%2F%2Fwx1.sinaimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1652250933&t=7c1623965c34943b1e76df6648459d20" alt="我和大佬的差距就一点点"></p><blockquote><p>说明有个部分比从句短，而且断得多</p></blockquote><p>比如下面这些：</p><ol><li>evidence was found that levels of productivity were related to changes in lighting.</li></ol><p>原句是：evidence that levels of productivity were related to changes in lighting was found.</p><p>that 修饰的是 evidence 但它放到了后面</p><p>到底是长了多少呢？</p><p>was found &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>that levels of productivity were related to changes in lighting</p><ol start="2"><li>keep in mind what promises from Entergy are worth</li></ol><p>原句是：keep what promises from Entergy are worth in mind</p><p>what从句 做的是 keep 的宾语</p><p>in mind &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>what promises from Entergy are worth</p><h3 id="找从句修饰词的方法"><a href="#找从句修饰词的方法" class="headerlink" title="找从句修饰词的方法"></a>找从句修饰词的方法</h3><blockquote><p>非常简单，既然前面的那个单词不是，那就往前面找，直到找到合适的</p></blockquote><hr><p>Contrary to the descriptions on record, no systematic evidence was found that levels of productivity were related to changes in lighting.</p><ul><li>Contrary to the descriptions on record, no systematic evidence was found</li><li>that levels of productivity were related to changes in lighting.</li></ul><p>如果你把 that 的先行词认为是 found 那就不对劲了</p><p>was found 是一整个谓语， that 明显不是修饰的 found</p><p>that levels of productivity were related to changes in lighting. 这句话本身就不是定语从句，至少 that 不做成分， 所以大概率是 宾语从句？</p><p>看看主干是否缺少成分？</p><p>主干翻译成 “没有系统性的证据被找到” 明显不缺少成分</p><p>所以也不是宾语从句</p><p>那么只能是 同位语从句</p><p>那同位语从句修饰的哪个词呢？</p><p>简单，既然 found 不是，那么就往前找，找到了 evidence （再往前找可就没货了）</p><p>这就是从句后移的情况</p><hr><p>But as the Nuclear Regulatory Commission (NRC) reviews the company’s application, it should keep in mind what promises from Entergy are worth.</p><p>这里的第一个 But 可以不看</p><p>as the Nuclear Regulatory Commission (NRC) reviews the company’s application 这是一个状语从句</p><p>keep in mind what promises from Entergy are worth.</p><p>what 引导的从句，只有名词性从句，所以应该放在 keep 之后，但上面的例子中却放在 in mind 之后</p><p>What is being called artificial general intelligence, machines that would mimic the way humans think, continues to elude scientists.</p><p>, machines that would mimic the way humans think,这是插入语，额外的补充说明罢了</p><p>​            👆      👆                👆     👆</p><p>后面的 humans think 还是一个定语从句 主谓主谓</p><hr><p>Concerns were raised that witnesses might be encouraged to exaggerate their stories in court to ensure guilty verdicts.</p><p>担心，不及物 主谓结构</p><p>that witnesses might be encouraged to exaggerate their stories in court to ensure guilty verdicts 是同位语，后置了</p><hr><p>Consumers say they’ re not in despair because, despite the dreadful headlines, their own fortunes still feel pretty good.</p><p>, despite the dreadful headlines, 这是一个介词短语作插入语</p><hr><p>George Annas, chair of the health law department at Boston University, maintains that, as long as a doctor prescribes a drug for a legitimate medical purpose, the doctor has done nothing illegal even if the patient uses the drug to hasten death.</p><p>George Annas名词作主语，然后突然被逗号中断了原先的句子，插入了插入语 , chair of the health law department at Boston University, 这种跟在名词后的插入语一般都是解释的前面的名词</p><p>maintains that 谓语 + 从句又被插入语中断了 , as long as a doctor prescribes a drug for a legitimate medical purpose, 不过此处的插入语是 条件状语从句 必须翻译出来</p><p>the doctor has done nothing illegal even if the patient uses the drug to hasten death这句就是从句的本体</p><p>其中还有一个让步状语从句even if the patient uses the drug to hasten death</p><p>主干是：George Annas maintains that the doctor has done nothing illegal even if the patient uses the drug to hasten death</p><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><ol><li><p>状语从句的插入语不能省略外，同位语，插入语和非限定性定语从句都可以省略不看，不会影响句子的意思</p></li><li><p>从句后置主要的原因是对比主干的部分太长了</p></li></ol><p>比如：</p><p><strong>A + 从句 + 谓语 + 宾语&#x2F;补语&#x2F;短语等</strong></p><p>如果从句对比 谓语和宾语&#x2F;补语&#x2F;短语等 太长了</p><p>此时最好把从句后置为下面这样：</p><p><strong>A + 谓语 + 宾语&#x2F;补语&#x2F;短语等 + 从句</strong></p><h1 id="长难句的结构-——-嵌套结构"><a href="#长难句的结构-——-嵌套结构" class="headerlink" title="长难句的结构 —— 嵌套结构"></a>长难句的结构 —— 嵌套结构</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>俄罗斯套娃式的英语</p><blockquote><p>大从句内有小从句，小从句内有小小从句 这种。。。</p></blockquote><h2 id="怎么分析？"><a href="#怎么分析？" class="headerlink" title="怎么分析？"></a>怎么分析？</h2><blockquote><p>我的建议是从小从句分析到大从句，当然也可以从外往里看，这样比较有顺序</p></blockquote><hr><p>The great question is who should benefit from the analysis of all the data that our lives now generate.</p><ul><li>The great question is（主系表）</li><li>who should benefit from the analysis of all the data（表语从句）</li><li>that our lives now generate.（定语从句，先行词是 data）</li></ul><p>If we are serious about ensuring that our science is both meaningful and reproducible, we must ensure that our institutions incentivise that kind of science.</p><ul><li>If we are serious about ensuring that our science is both meaningful and reproducible,</li><li>we must ensure that our institutions incentivise that kind of science.</li></ul><p>这里头连词比较多，需要判断哪个连词没有用</p><table><thead><tr><th>连词</th><th>动词</th></tr></thead><tbody><tr><td>if（条件状语从句）</td><td>are serious</td></tr><tr><td>that（先行词是ensuring）</td><td>is</td></tr><tr><td>主谓宾结构，宾语是从句</td><td>must ensure （明显这是谓语）</td></tr><tr><td>that（宾语从句）</td><td>incentivise</td></tr><tr><td>that（明显这个 that 不是连词）</td><td></td></tr></tbody></table><p>上面需要注意，有大从句包含小从句的情况</p><p>If we are serious about ensuring that our science is both meaningful and reproducible</p><p>ensuring 是及物动词，所以需要加上宾语 所以 ensuring that 后面的从句就是宾语</p><hr><p>It hoped they would learn how shop-floor lighting affected workers’ productivity.</p><p>↑   👆  ①  ↑        👆                       ↑        👆</p><p>上面的 ↑ 都是名词，👆都是动词</p><p>我们能够看到 ① 号位置缺少了 引导词，这里 hope 是希望的意思，是及物动词，所以后面将会有宾语从句</p><p>中间有个连词：how</p><p>我们还可以断开句子：how shop-floor lighting affected workers’ productivity</p><p>使用 how 的话就是宾语从句</p><p>Carnegie would be right if arguments were fights, which is how we often think of them.</p><ul><li>Carnegie would be right（主系表）</li><li>if arguments were fights（条件状语从句）</li><li>, which is（非限定性定语从句）</li><li>how we often think of them.（表语从句）</li></ul><p>A few generative rules are then sufficient to unfold the entire fundamental structure of a language, which is why children can learn it So quickly.</p><h1 id="长难句的结构-——-平行结构"><a href="#长难句的结构-——-平行结构" class="headerlink" title="长难句的结构 —— 平行结构"></a>长难句的结构 —— 平行结构</h1><p>连词和逗号配合的一种句型</p><p>A，B，C and&#x2F;or D</p><p>或者是 not only 。。。but also。。。 这种并列方式</p><p>其实这种句型没什么好讲的，主要就是找省略成分，这在并列句中讲的很清楚了</p><blockquote><p><strong><code>A and B</code></strong></p><p><strong><code>一般情况下 A 所拥有的成分 &gt;= B 所拥有的成分</code></strong></p><p><strong><code>所以我们可以按照 B 中的成分去 A 中一个个对应着找匹配成分，最后就能看到 A 中哪些成分 B 中没有</code></strong></p><p><strong><code>那么这些没有的成分就是 B 中省略的部分</code></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 连词 </tag>
            
            <tag> 断句 </tag>
            
            <tag> 标点符号 </tag>
            
            <tag> 分析主谓 </tag>
            
            <tag> 多个动词识别谓语 </tag>
            
            <tag> 长难句简化 </tag>
            
            <tag> 修饰成分定语还是状语 </tag>
            
            <tag> 还原 </tag>
            
            <tag> 两步分析法 </tag>
            
            <tag> 分裂 </tag>
            
            <tag> 嵌套结构 </tag>
            
            <tag> 平行结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06倒装</title>
      <link href="/2022/11/25/06%E8%8B%B1%E8%AF%AD/06%E7%89%B9%E6%AE%8A/"/>
      <url>/2022/11/25/06%E8%8B%B1%E8%AF%AD/06%E7%89%B9%E6%AE%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="倒装"><a href="#倒装" class="headerlink" title="倒装"></a>倒装</h1><h2 id="全部倒装"><a href="#全部倒装" class="headerlink" title="全部倒装"></a>全部倒装</h2><h3 id="为什么会有倒装？"><a href="#为什么会有倒装？" class="headerlink" title="为什么会有倒装？"></a>为什么会有倒装？</h3><ol><li>突出强调</li><li>主语太复杂往后面放</li></ol><h3 id="什么是全部倒装？"><a href="#什么是全部倒装？" class="headerlink" title="什么是全部倒装？"></a>什么是全部倒装？</h3><p>谓语动词跑到主语前</p><p>On the north bank of the Ohio River sits Evansville, Ind.</p><p>Also unclear is why Microsoft has gone it alone.</p><h3 id="怎么判断是倒装？"><a href="#怎么判断是倒装？" class="headerlink" title="怎么判断是倒装？"></a>怎么判断是倒装？</h3><p>找到谓语，看下面的主语是否为 介词 或 副词 等 这种不能作主语的成分，如果是，则是倒装</p><h3 id="There-be-句型（必会）"><a href="#There-be-句型（必会）" class="headerlink" title="There be 句型（必会）"></a>There be 句型（必会）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There be + n. + [介词短语]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There is a girl.</span><br></pre></td></tr></table></figure><blockquote><p>客观存在，不是拥有</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There is a book on the table.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There is a great deal of this kind of nonsense in the medical journals </span><br></pre></td></tr></table></figure><blockquote><p>主语在前面，根据主语判断是 is 还是 are</p></blockquote><p>be 可以是 was， were， has be， have be，must be，may be</p><h2 id="部分倒装"><a href="#部分倒装" class="headerlink" title="部分倒装"></a>部分倒装</h2><h3 id="什么是部分倒装？"><a href="#什么是部分倒装？" class="headerlink" title="什么是部分倒装？"></a>什么是部分倒装？</h3><p>主语的一部分移动到谓语前面</p><h3 id="怎么样写一个部分倒装？"><a href="#怎么样写一个部分倒装？" class="headerlink" title="怎么样写一个部分倒装？"></a>怎么样写一个部分倒装？</h3><p>相当于写一个疑问句, 将谓语的部分成分提前的主语前面</p><h4 id="1-否定副词或词组谓语句首"><a href="#1-否定副词或词组谓语句首" class="headerlink" title="1. 否定副词或词组谓语句首"></a>1. 否定副词或词组谓语句首</h4><p>it has never served so much to connect different peoples and nations before…</p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol><li><p>has 提前，相当于写个疑问句</p></li><li><p>never before 词组提前</p></li></ol><p>never before has it served so much to connect different peoples and nations.</p><blockquote><p>部分倒装也是强调的意思</p></blockquote><h5 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h5><p>They developed not only such a device..</p><p>Not only did they develop such a device…</p><h4 id="2-only-提前"><a href="#2-only-提前" class="headerlink" title="2. only 提前"></a>2. only 提前</h4><p>They will be useful servants and not  Frankenstein’s out-of-control monster only then.</p><ol><li>把 only 和 only 所带的词提前</li><li>写个疑问句的方式</li></ol><p>Only then will they be useful servants and not Frankenstein’s out-of-control monster.</p><p>And scholars have examined history from the bottom up only over the past 30 years.</p><p>And only over the past 30 years have scholars examined history from the bottom up.</p><h4 id="3-虚拟条件省略if后倒装"><a href="#3-虚拟条件省略if后倒装" class="headerlink" title="3. 虚拟条件省略if后倒装"></a>3. 虚拟条件省略if后倒装</h4><p>But if Entergy had kept its word, that debate would be beside the point.</p><ol><li>省略 if</li><li>写个疑问句</li></ol><p>But had Entergy kept its word, that debate would be beside the point.</p><h1 id="强调句"><a href="#强调句" class="headerlink" title="强调句"></a>强调句</h1><h2 id="什么是强调句？"><a href="#什么是强调句？" class="headerlink" title="什么是强调句？"></a>什么是强调句？</h2><p>将一个普通的完整的句子拆分出需要强调的部分，放中间，其余的放后面</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It is ...(强调的部分) that ...（句子的剩余部分）</span><br></pre></td></tr></table></figure><p>如果是强调人或者过去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It is/was ... that/who ...</span><br></pre></td></tr></table></figure><p>we hear the more honest argument only in recent years。</p><p>比如我们需要强调 only in recent years，那就放到 is that 之间，剩下的部分放到 that </p><p>It is only in recent years that we hear the more honest argument.</p><p>It is they, not America, who have become anti-intellectual. </p><p>it was not until the 19th century that the newspaper became the dominant pre-electronic medium,</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>只有形容词和动词不能强调</p></blockquote><h2 id="判断是不是强调句？"><a href="#判断是不是强调句？" class="headerlink" title="判断是不是强调句？"></a>判断是不是强调句？</h2><p>主语从句往后放和强调句</p><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>我们可以使用还原法（去掉 it is，然后再还原），判断是不是完整的句子，如果是完整的句子那么就是强调句，否则就是主语从句</p><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>如果 is that 中间不是形容词和动词，就是强调句</p><h1 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h1><h2 id="虚拟是什么？"><a href="#虚拟是什么？" class="headerlink" title="虚拟是什么？"></a>虚拟是什么？</h2><ul><li>跟真实对比不相符的，就是虚拟</li><li>假设的情况，就是虚拟</li></ul><h2 id="如何表达虚拟？"><a href="#如何表达虚拟？" class="headerlink" title="如何表达虚拟？"></a>如何表达虚拟？</h2><p>谓语动词变态：谓语动词改变时态</p><h2 id="虚拟用在哪？"><a href="#虚拟用在哪？" class="headerlink" title="虚拟用在哪？"></a>虚拟用在哪？</h2><h3 id="if虚拟条件"><a href="#if虚拟条件" class="headerlink" title="if虚拟条件"></a>if虚拟条件</h3><h4 id="假设现在时"><a href="#假设现在时" class="headerlink" title="假设现在时"></a>假设现在时</h4><p><strong>从句往前推一个时态, 主句4加一，将来同现在</strong></p><p>if 从句 + 往前推一个时态 did + be 动词只能用 were + 主句 could&#x2F;would&#x2F;should&#x2F;might + do</p><blockquote><p>现在时，往前推一个时态就是 did，从句 4 个词 could&#x2F;would&#x2F;should&#x2F;might 加上一个 do</p></blockquote><p>Your prospects would be almost as dismal if arguments were even just competitions一一like, say, tennis games.</p><h4 id="假设过去"><a href="#假设过去" class="headerlink" title="假设过去"></a>假设过去</h4><p>if 从句 + 过去完成时（过去的之前） had done + 主句 could&#x2F;would&#x2F;should&#x2F;might + have done</p><blockquote><p>只能用 have，has不是原型</p></blockquote><p>If he had played last season, however, he would have been one of 42.</p><h4 id="假设将来"><a href="#假设将来" class="headerlink" title="假设将来"></a>假设将来</h4><p>口诀：将来同现在</p><blockquote><p>假设将来，有可能会实现，所以用的很少</p></blockquote><p>if从句 + did（were）&#x2F;were to do&#x2F;should do + 主句 could&#x2F;would&#x2F;should&#x2F;might + do</p><p>If railroads <em>charged</em> all customers the same average rate… shippers… <em>would do</em> so, leaving remaining customers to shoulder the cost of keeping up the line.</p><h3 id="名词性从句的虚拟"><a href="#名词性从句的虚拟" class="headerlink" title="名词性从句的虚拟"></a>名词性从句的虚拟</h3><p>主句当中有表示建议，命令和要求的词，里面的小从句都需要虚拟</p><p>This year, it was proposed that the system (should) be changed:</p><p>European ministers instantly demanded that the International Accounting Standards Board (IASB) do likewise.</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 倒装 </tag>
            
            <tag> 全部倒装 </tag>
            
            <tag> 部分倒装 </tag>
            
            <tag> there be句型 </tag>
            
            <tag> 强调句 </tag>
            
            <tag> 虚拟语气 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05状语从句(副词性从句)</title>
      <link href="/2022/11/25/06%E8%8B%B1%E8%AF%AD/05%E7%8A%B6%E8%AF%AD%E4%BB%8E%E5%8F%A5(%E5%89%AF%E8%AF%8D%E6%80%A7%E4%BB%8E%E5%8F%A5)/"/>
      <url>/2022/11/25/06%E8%8B%B1%E8%AF%AD/05%E7%8A%B6%E8%AF%AD%E4%BB%8E%E5%8F%A5(%E5%89%AF%E8%AF%8D%E6%80%A7%E4%BB%8E%E5%8F%A5)/</url>
      
        <content type="html"><![CDATA[<h1 id="形容词和副词"><a href="#形容词和副词" class="headerlink" title="形容词和副词"></a>形容词和副词</h1><h2 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h2><ol><li>放在系动词后面做表语</li><li>放在宾语之后做补语</li><li>放在名词前面做定语</li></ol><blockquote><p>形容词只修饰名词&#x2F;代词</p></blockquote><h2 id="副词"><a href="#副词" class="headerlink" title="副词"></a>副词</h2><ol><li><p>副词做状语, 修饰实义动词, 形容词, 副词和整个句子</p><p>He smiles sweetly.(副词修饰动词)</p><p>He looks pretty sweet. (状语修饰形容词)</p><p>He smiles especially sweetly.(副词修饰副词)</p><p>Actually, he smiles sweetly. (副词修饰整个句子)</p></li></ol><h1 id="什么是状语"><a href="#什么是状语" class="headerlink" title="什么是状语"></a>什么是状语</h1><p>状语就是在一句话当中修饰实义动词, 形容词, 副词和句子的成分, 就是状语.</p><blockquote><p>定语修饰名词, 状语修饰除名词外的所有成分</p></blockquote><h2 id="充当状语的成分"><a href="#充当状语的成分" class="headerlink" title="充当状语的成分"></a>充当状语的成分</h2><ol><li>副词&#x2F;副词短语: She smiles sweetly.  I tried again and again.</li><li>介词短语: He runs fast like a crazy dog.</li><li>非谓语动词: He leaves, crying.</li><li>从句: I will return the book as soon as I have read it.</li></ol><blockquote><p>名词不能做状语</p></blockquote><h2 id="状语的位置"><a href="#状语的位置" class="headerlink" title="状语的位置"></a>状语的位置</h2><blockquote><p>状语的位置随便放, 当是, 当状语放在句首或句中通常要用逗号隔开(当然也可以不加)</p></blockquote><ol><li>In Chongqing, I am now working.</li><li>I am now working in Chongqing.</li><li>Now, in Chongqing, I am working.</li><li>I now am in Chongqing working.</li><li>…</li></ol><h1 id="状语从句"><a href="#状语从句" class="headerlink" title="状语从句"></a>状语从句</h1><p>状语从句的引导词是按照引导词本身的<code>词意</code>分的类, 一共把引导词分成9类</p><blockquote><p>名词性从句按照从句的类型分类</p></blockquote><blockquote><p>定语从句的种类按照先行词的种类分类, 后来又按照引导词的方式分类</p></blockquote><blockquote><p>状语从句的引导词被叫作“从属连词”，对的他是一个带连词意思的连词</p></blockquote><h2 id="九大状语从句"><a href="#九大状语从句" class="headerlink" title="九大状语从句"></a>九大状语从句</h2><h3 id="时间状语从句"><a href="#时间状语从句" class="headerlink" title="时间状语从句"></a><code>时间状语从句</code></h3><h4 id="引导词"><a href="#引导词" class="headerlink" title="引导词"></a>引导词</h4><p>(连词): <code>when</code>, <code>as</code>, <code>while</code>, <code>once</code>, <code>as soon as</code>, <code>before</code> , <code>after</code>, <code>since</code>, <code>until/till...</code>, not … until, by the time, each time&#x2F;every time, the next time</p><blockquote><p>when, as, while 都翻译成 当…的时候</p><p>since 自从</p><p>as soon as 一…就</p><p>once 一旦</p></blockquote><p>(名词短语) the moment, every time, the day, the instant</p><p>(副词) immediately, directly, no sooner… than, hardly…when, scarcely…when</p><h4 id="when-while-as-的区别"><a href="#when-while-as-的区别" class="headerlink" title="when, while, as 的区别"></a>when, while, as 的区别</h4><ul><li><p>when 引导的从句, 其谓语动词可延续可短暂</p><p>When the teacher came in, we stopped talking. (短暂性动词)</p><p>When I lived in the countryside, I used to live a tough life.(延续性动词)</p></li><li><p>while 延续性</p><p>While my mother was reading the newspaper, I was watching TV.</p></li><li><p>as 延续性, 表示”一边…一边”, 一般用于主句和从句动词同时发生; as 也可以表示伴随</p><p>As families moved away from their stable community, the informal flow of information is cut off.</p></li></ul><h4 id="until-和-not-…-until的区别"><a href="#until-和-not-…-until的区别" class="headerlink" title="until 和 not … until的区别"></a>until 和 not … until的区别</h4><ul><li>I will wait here until you come.</li><li>I will not leave until you come.</li></ul><blockquote><p>区别在于: wait 和 leave</p><p>until 是延续性动词</p><p>not … until 是短暂性动词</p></blockquote><blockquote><p>看主句的谓语动词是瞬间动词还是延续性动词, 如果是瞬间动词就用 not … until, 如果是延续性动词就用 until</p></blockquote><p>知道我有了自己的女儿, 我才意识到母亲的伟大</p><p>意识: 瞬间动词, 用 not … until</p><p>I did not realize the greatness of mother until I had my own daughter.</p><h3 id="地点状语从句"><a href="#地点状语从句" class="headerlink" title="地点状语从句"></a>地点状语从句</h3><ol><li><p>引导词: <code>where</code>, wherever, anywhere, everywhere</p><p>这种树在潮湿的地方生长的很好</p><p>The tree grows well in wet places.</p><p>The tree grows well where it is wet.</p><blockquote><p>充当地点的状语通常都是介词短语, 而不是从句.</p></blockquote></li><li><p>where 引导的状语从句和定语从句</p></li></ol><p>区别: 看 where 是否指代前面的先行词</p><p>I find my phone where I had lost it.(状语)</p><p>This is the house where I lived two years ago.(定语)</p><blockquote><p>只需要看 where 前面的这个单词, 如果他是一个表示<code>地点</code>的<code>名词</code>(并且该名词需要被明确限定范围)就是定语从句并且充当从句的成分, 如果不是则是状语从句</p></blockquote><h3 id="原因状语从句"><a href="#原因状语从句" class="headerlink" title="原因状语从句"></a><code>原因状语从句</code></h3><p><code>because</code>, <code>since</code>, <code>as</code>, <code>for...</code>, <code>now that</code></p><p>seeing that, now that, in that, considering that, given that, as much as, so much as</p><blockquote><p>都翻译成因为</p></blockquote><p>because of , due to, owing to , thanks to, for the sake of, as a result of + N&#x2F;Ving</p><blockquote><p>都是介词</p></blockquote><p>Because he was careless, he had a car accident yesterday.</p><p>Because of his carelessness, ~</p><h3 id="目的状语从句"><a href="#目的状语从句" class="headerlink" title="目的状语从句"></a>目的状语从句</h3><p><code>so that</code>, <code>in order that...</code></p><blockquote><p>翻译成 : 为了&#x2F;以便</p></blockquote><p>动词不定式: to , in order to, so as to</p><blockquote><p>都翻译成 为了是, 或者 目的是</p></blockquote><p>We climb higher in order to see farther.</p><p>We climb higher so that We see farther.</p><blockquote><p>so that 后面需要接上主语, 而 in order to 后面接动词, to Ving, 动词不定式, 主语已经在前面了, 不需要再加个</p></blockquote><p>so as to 不能放在句首 &#x3D;&#x3D; in order to</p><blockquote><p>so that 可以引导 目的 和 结果 状语从句, 如果 so that 后面有情态动词, 那么就是目的状语, 否则就是结果状语</p></blockquote><h3 id="结果状语从句"><a href="#结果状语从句" class="headerlink" title="结果状语从句"></a><code>结果状语从句</code></h3><p><code>so that</code>, <code>so...that(中间adj)...</code>, <code>such...that(中间跟N)...</code></p><p>to the degree that, to the extent that …</p><p>so that , so … that 和 such … that 的区别</p><ul><li>so that 引导目的状语(与情态动词连用)和结果状语从句</li></ul><p>I hurried through my work so that I could be on time for the TV.</p><p>We moved to the country so that we were away from the noisy city.</p><ul><li>so … that 的区别</li></ul><p>so + adj&#x2F;adv + that</p><p>The movie was so boring that I gave up watching it halfway though.</p><blockquote><p>只要用到形容词或者副词的地方都可以考虑写成 so … that</p></blockquote><p>so + 形容词 + a&#x2F;an + 可数名词单数 + that</p><p><code>Zhanglili is so nice a teacher that everyone loves and respects her.</code></p><ul><li>such … that 的用法</li></ul><p><code>such + a/an + 形容词 + 可数名词单数 + that</code></p><p>It was such a terrible show that none of us would pay for watching it again.</p><p><code>such + 形容词 + 不可数名词单数 + that</code></p><h3 id="条件状语从句"><a href="#条件状语从句" class="headerlink" title="条件状语从句"></a><code>条件状语从句</code></h3><p><code>if</code> <code>once</code>, unless</p><p><code>as/so long as</code>, <code>so long as</code>, only if, providing&#x2F;provided that, on condition that…</p><p>If love is a cup of poison, I will drink it up without hesitating.</p><h3 id="让步状语从句"><a href="#让步状语从句" class="headerlink" title="让步状语从句"></a><code>让步状语从句</code></h3><p><code>though</code>, <code>although</code>, <code>even if</code>, <code>even though</code>, <code>while</code>, <code>however</code></p><blockquote><p>让步就是话说的严重, 后面一部分要退一步, 说话要用让步, 说的很严重, 怕人生气, 挽回, 说好话</p><p>“盲目追星会影响到青少年正常工作和学习, 虽然他们工作的很努力(虽然他们长得很好看)”</p></blockquote><p>as, while, no matter…, in spite of the fact that, whatever, whoever, wherever, whenever, however, whichever</p><p>Although&#x2F;Though he failed again and again, he still adheres to pursuing his dream.</p><h4 id="让步状语从句的使用"><a href="#让步状语从句的使用" class="headerlink" title="让步状语从句的使用"></a>让步状语从句的使用</h4><ol><li>她是一个美女, 美女也有缺点</li></ol><p>She is a beauty although she has a pair of small eyes.</p><ol start="2"><li>宠物的确给我奶奶带来了很多快乐</li></ol><p>Pets indeed bring much delight to my grandma although taking care of them needs enough time and energy.</p><h3 id="方式状语从句"><a href="#方式状语从句" class="headerlink" title="方式状语从句"></a>方式状语从句</h3><p><code>as</code>, <code>as if</code>, as though (好像;似乎)</p><p>介词: by, through, in… way, in…manner</p><ul><li><p>She talks with me as she were my mother.</p><p>说话的方式像… were 虚拟语气</p></li><li><p>I can still remember the whole thing in great detail as though it happened yesterday.</p></li></ul><h3 id="比较状语从句"><a href="#比较状语从句" class="headerlink" title="比较状语从句"></a>比较状语从句</h3><p><code>as</code>, <code>than</code></p><p>the more… the more…, more than…, more … than…, not so much … as…</p><p>你看起来比我年轻</p><p>You look younger than I (look).</p><blockquote><p>他是状语从句, 所以 than 之后需要有一个完整的 句子, 所以后面是 I look 但是不美观, 所以 look省略了</p></blockquote><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p><code>A is to B what/as C is to D</code></p><p>A 对 B 来说, 就像 C 对 D 来说</p><p>Honesty is to humans as perfume is to a flower.</p><p>Confidence is to university students as water is to fish.</p><h3 id="more-than-的用法"><a href="#more-than-的用法" class="headerlink" title="more than 的用法"></a>more than 的用法</h3><p>He is more than a teacher. In fact, he writes some poems in his spare time.</p><p>他不仅仅是一个老师…</p><blockquote><p>more than 后面如果加的是名词或者是动词就翻译成 “不仅仅是”</p></blockquote><p>Americans are more than hospitable when facing strangers.</p><blockquote><p>more than + adj&#x2F;adv 翻译成 very</p></blockquote><p>I have more than 10 boyfriends.</p><blockquote><p>more than + 数词 &#x3D;&#x3D;&gt; 超过</p></blockquote><blockquote><p>more than + 动词 &#x3D;&#x3D;&gt; 不仅仅是</p></blockquote><p><code>not so much as == not even 甚至不/没有</code></p><p>He cannot so much as sing a song.</p><p><code>not so much A as B 与其说A, 倒不如说 B</code></p><p>He is not so much a teacher as a poet.</p><p><code>more A than B 与其说B, 不如说A</code></p><p>He is more a teacher than a poet.</p><h2 id="分词做状语"><a href="#分词做状语" class="headerlink" title="分词做状语"></a>分词做状语</h2><blockquote><p>非谓语动词做状语</p></blockquote><h3 id="状语从句转化成分词状语"><a href="#状语从句转化成分词状语" class="headerlink" title="状语从句转化成分词状语"></a>状语从句转化成分词状语</h3><blockquote><p>这就是伴随状语从句</p></blockquote><p>Because I am fat, I feel delighted.</p><p>I feel delighted being fat.</p><blockquote><p>这里需要区分下, 主语不一致就是独立主格, 如果主语一致就是伴随状语</p></blockquote><p>工作结束后, 我们都各自回家了</p><p>After the job was finished , we went home respectively.</p><p>The job finished, we went home respectively.</p><blockquote><p>只要出现逗号分开前后两句话, 只要把不重要的句子变成分词做状语就行</p></blockquote><p>自信是一种积极的心态, 它能使很多奇迹降临</p><p>Self-confidence is an active mentality, it enable many miracles to happen.</p><p>Being an active mentality, self-confidence enable many miracles to happen.</p><blockquote><p>如果把状语从句变成分成做状语</p><ol><li>去掉状语从句的引导词</li><li>把从句的谓语动词变成非谓语动词</li><li>看分词的主语是否和句子的主语一致, 如果一致分词主语省略, 如果不一致, 分词的主语保留</li></ol></blockquote><h2 id="状语和状语从句的应用"><a href="#状语和状语从句的应用" class="headerlink" title="状语和状语从句的应用"></a>状语和状语从句的应用</h2><blockquote><p>作文中任何一句话的旁边都可以加上状语的成分把句子拉长</p></blockquote><p>Setting off firecrackers can add the atmosphere.</p><p>Although quite a few individuals argue that it sounds too noisy(让步状语)，setting off firecrackers, an ancient Chinese tradition with thousands of years (同位语)，can add the<br>atmosphere of holidays and festivals (定语) when Chinese are gathering with their families or their friends at home (时间状语)</p><h2 id="长难句分析"><a href="#长难句分析" class="headerlink" title="长难句分析"></a>长难句分析</h2><blockquote><p>只要在句子中见到以下的一坨东西就一定是状语: 除了时间和地点可能是定语以外, 见到副词, 原因, 条件, 目的, 结果, 比较, 方式, 伴随, 让步一定是状语. 时间和地点看位置而定</p><p>如果名词后有时间或地点, 既像定语又像状语的时候, 定语优先原则, 只有翻译成定语特别恶心的时候, 才是状语</p></blockquote><p>The Greeks assumed that the structure of language had some connection with the process of thought, which took root in Europe long before people realized how diverse languages could be.</p><p>荷兰人认为语言的结构和思想的过程有关, 在人们意识到语言的多样化之前, 在欧洲这种思想已经扎根</p><p>Social science is that branch of intellectual enquiry(知识探索) which seeks to study humans and their endeavors(努力) in the same reasoned, orderly, systematic, and dispassioned manner that natural scientists use for the study of natural phenomena.  </p><p>When this practice first started decades ago, it was usually limited to freshmen, to give them a second chance to take a class in their first year if they struggled in their transition to college-level courses.</p><p>The history of the EEOB began long before its foundations were laid.</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 形容词 </tag>
            
            <tag> 副词 </tag>
            
            <tag> 状语 </tag>
            
            <tag> 状语从句 </tag>
            
            <tag> 时间状语从句 </tag>
            
            <tag> 引导词 </tag>
            
            <tag> when </tag>
            
            <tag> while </tag>
            
            <tag> as </tag>
            
            <tag> until </tag>
            
            <tag> 地点状语从句 </tag>
            
            <tag> 原因状语从句 </tag>
            
            <tag> 目的状语从句 </tag>
            
            <tag> 结果状语从句 </tag>
            
            <tag> 条件状语从句 </tag>
            
            <tag> 让步状语从句 </tag>
            
            <tag> 方式状语从句 </tag>
            
            <tag> 比较状语从句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04形容词性从句(定语从句)</title>
      <link href="/2022/11/25/06%E8%8B%B1%E8%AF%AD/04%E5%BD%A2%E5%AE%B9%E8%AF%8D%E6%80%A7%E4%BB%8E%E5%8F%A5(%E5%AE%9A%E8%AF%AD%E4%BB%8E%E5%8F%A5)/"/>
      <url>/2022/11/25/06%E8%8B%B1%E8%AF%AD/04%E5%BD%A2%E5%AE%B9%E8%AF%8D%E6%80%A7%E4%BB%8E%E5%8F%A5(%E5%AE%9A%E8%AF%AD%E4%BB%8E%E5%8F%A5)/</url>
      
        <content type="html"><![CDATA[<h1 id="定语"><a href="#定语" class="headerlink" title="定语"></a>定语</h1><h2 id="什么是定语"><a href="#什么是定语" class="headerlink" title="什么是定语?"></a>什么是定语?</h2><p>修饰名词的成分就是定语</p><blockquote><p>只要听到 “…的 + 名词”或者”名词 + of …”就是定语</p></blockquote><h2 id="什么样的结构可以做定语"><a href="#什么样的结构可以做定语" class="headerlink" title="什么样的结构可以做定语?"></a>什么样的结构可以做定语?</h2><h3 id="形容词修饰名词-做定语"><a href="#形容词修饰名词-做定语" class="headerlink" title="形容词修饰名词(做定语)"></a>形容词修饰名词(做定语)</h3><p>那只善良的夜莺失去了他的生命。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The naive nightingale lost his life.</span><br></pre></td></tr></table></figure><h3 id="名词修饰名词-做定语"><a href="#名词修饰名词-做定语" class="headerlink" title="名词修饰名词(做定语)"></a>名词修饰名词(做定语)</h3><p>名词修饰名词时, 该名词已经被形容词化了</p><p>夜莺的歌声能使这朵玫瑰花开放。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The nightingale&#x27;s singing can make the rose bloom.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The singing of nightingale can make the rose bloom.</span><br></pre></td></tr></table></figure><h3 id="介词短语做定语"><a href="#介词短语做定语" class="headerlink" title="介词短语做定语"></a>介词短语做定语</h3><p>窗外的夜莺听到了年轻人的感叹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The nightingale out of the window heard the sighs of the young man.</span><br></pre></td></tr></table></figure><h3 id="非谓语动词修饰名词-做定语"><a href="#非谓语动词修饰名词-做定语" class="headerlink" title="非谓语动词修饰名词(做定语)"></a>非谓语动词修饰名词(做定语)</h3><p>唱歌的夜莺最终因爱而死</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In the end, the singing nightingale died because of love.</span><br></pre></td></tr></table></figure><p>单纯的夜莺一定是爱上了那个被女孩欺骗的学生。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The innocent nightingale must have fallen in love with the student deceived by the girl.</span><br></pre></td></tr></table></figure><h3 id="从句修饰名词-从句做定语"><a href="#从句修饰名词-从句做定语" class="headerlink" title="从句修饰名词(从句做定语)"></a>从句修饰名词(从句做定语)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The rose which the nightingale exchanged with his life failed to help the student.</span><br></pre></td></tr></table></figure><h2 id="定语的位置"><a href="#定语的位置" class="headerlink" title="定语的位置"></a>定语的位置</h2><p>当一个单词修饰名词(短语)时, 通常放在单词之前</p><p>当多个单词修饰名词(短语)时, 通常放在单词之后</p><blockquote><p>前小后大</p></blockquote><p>这是一个夜莺和玫瑰的故事。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a story about a rose and a nightingale.</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>可数名词不能单独使用</code></strong></p></blockquote><p>在王子的舞会上，那个懂爱的年轻人被拒绝了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">At the party of prince, the young man understanding love was rejected.</span><br></pre></td></tr></table></figure><p>那个被抛弃的男孩看起来很可怜</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The dumped boy looks pitiful.</span><br><span class="line"></span><br><span class="line">The boy dumped looks pitiful.</span><br></pre></td></tr></table></figure><blockquote><p> 当过去分词修饰名词的时候即使是一个单词的时候都放在名词之后</p></blockquote><h1 id="定语从句"><a href="#定语从句" class="headerlink" title="定语从句"></a>定语从句</h1><h2 id="什么是定语从句"><a href="#什么是定语从句" class="headerlink" title="什么是定语从句?"></a>什么是定语从句?</h2><p>找个句子限定<code>主干需要限定的名词</code>(我们叫<code>先行词</code>), 并且用<code>关系词</code>连接起来, 而<code>关系词</code>充当从句成分</p><blockquote><p>所白了就是两个句子, 找个相同的名词, 用关系词代替, 并将关系词提前, 最后连接两个句子</p><p><code>Law is discipline. discipline encourages responsible judgement.</code></p><p>将上面两个句子找出相同的名词连接起来</p><p><code>Law is discipline(先行词) which(关系词, 这里叫关系代词) encourages responsible judgment</code></p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p><strong><code>定语从句的关系词都做成分</code></strong></p></blockquote><blockquote><p><strong><code>关系词 = 先行词</code></strong></p></blockquote><h3 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h3><blockquote><p><code>[名词(短语)] + 引导词 + 分句</code></p></blockquote><blockquote><p>名词 &lt;&#x3D;&#x3D;&gt; 先行词, 引导词 &lt;&#x3D;&#x3D;&gt; 关系词</p></blockquote><h2 id="关系词-引导词"><a href="#关系词-引导词" class="headerlink" title="关系词(引导词)"></a>关系词(引导词)</h2><p>定语从句的引导词是按照先行词的种类分的类, 一种把引导词分成 5 类</p><ul><li>当先行词是人的时候引导词有: that who whom whose</li><li>当先行词是物的时候引导词有: that which whose</li><li>当先行词是时间的时候引导词有: that which when</li><li>当先行词是地点的时候有: that which where</li><li>当先行词是原因的时候: that which why</li></ul><p>到底是谁决定了定语从句的引导词用法?</p><p><code>I will never forget the day when I met you</code></p><blockquote><p>这里为什么选 when ? 不选 that?</p><p>因为 that 是一个代词, 代词能作为 主语 , 宾语 和 表语</p><p>明显上面的从句 I met you 的主语 宾语 表语 都不缺成分, 所以不能用 代词 that </p><p>所以只能选择 when , 因为 when 是 副词 且 前面的 the day 表示时间</p><p>副词不能做 主语, 谓语, 宾语</p></blockquote><p><code>I will never forget the day that(which) we spent</code></p><blockquote><p>正常人看到前面的 the day 第一时间一般都以为这里填写 when 但 when 是个副词, 从句 spent 过去分词做谓语, 表示”花费”, 具体用尽了什么不知道, 明显缺少宾语, 只能用 that 或者 which</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You had better have some reason why you are late.</span><br><span class="line"></span><br><span class="line">You had better have some reason that/which sounds perfect.</span><br></pre></td></tr></table></figure><h3 id="到底是什么决定了关系词用哪一个"><a href="#到底是什么决定了关系词用哪一个" class="headerlink" title="到底是什么决定了关系词用哪一个?"></a>到底是什么决定了关系词用哪一个?</h3><p>我们再拿这两句判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I will never forget the day that(which) we spent</span><br><span class="line"></span><br><span class="line">I will never forget the day when I met you</span><br></pre></td></tr></table></figure><p>为什么上面一句, 写 that 却不写 when ?</p><p>我们发现<strong>从句其实缺少成分</strong>, <code>spent(花费)</code> 什么? 缺少 宾语</p><p><strong>那么我们就不能选用 when 做关系词(这里叫关系副词)了</strong> </p><p>所以完整的两句话应该是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I will never forget the day.</span><br><span class="line">We spent the day.</span><br></pre></td></tr></table></figure><p>这里的 the day 表示事物, 绝对可以用 which , 没有特殊情况还可以用 that</p><blockquote><p>总结: </p><ol><li>根据从句判断是否缺少成分</li><li>从主干中找先行词(一般和关系词紧贴在一起, 当然还有特殊情况)</li><li>找到对应的 先行词 将其代替成 关系词</li><li>将关系词放在从句句首</li></ol></blockquote><p>那么对于下面那句话呢?  I will never forget the day when I met you</p><p>为什么下面那句话又可以用 when </p><p>按照上面总结的方式看看</p><ol><li><p>从句不缺少成分, 所以这里需要用 关系副词 when where why</p></li><li><p>从主句中找名词, 从主句末尾开始找名词, 找到一个名词代替放入从句看看是否符合</p></li><li><p>the day 是时间, 又只能用 关系副词, 所以只能用 when</p></li></ol><blockquote><p>注意: 我们需要注意一点, 定语从句的先行词一般是比较宽泛的, 有点像同位语从句被修饰名词的另一种解释一样, 同位语从句有抽象名词, 而定语从句的先行词也差不多类似抽象名词</p></blockquote><p>还有更多的例子</p><p>He is the man who loves me. 做主语,  who&#x2F;that</p><p>He is the man who&#x2F;whom I love. 可以做宾语的 who&#x2F;whom</p><p>He is the man whose father is wealthy. 先行词是名词 人, 所以 who whom whose, 然后 从句不缺少成分, 只能是 whose</p><h2 id="关系词按照本身的词性分类"><a href="#关系词按照本身的词性分类" class="headerlink" title="关系词按照本身的词性分类"></a>关系词按照本身的词性分类</h2><ul><li>代词(在从句中一定要充当主语或者宾语的成分): who whom that which</li><li>副词(在从句中补充当任何主干成分): where when why</li><li>形容词(在从句中修饰离他最近的名词): whose</li></ul><p>我喜欢屋顶是圆的房子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I love the house whose roofs are round.</span><br></pre></td></tr></table></figure><p>那个老人在她儿子到达的那天去世了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The old lady died on that day when her son arrived.</span><br></pre></td></tr></table></figure><p>我们应该尊重那些坚持梦想的穷孩子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">We should respect those children who stick to their dreams.</span><br></pre></td></tr></table></figure><p>她从来都喜欢父母有钱的男生.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">She love the man whose parents are rich.</span><br><span class="line"></span><br><span class="line">Boys whose parents are rich never fail to fascinate her.</span><br></pre></td></tr></table></figure><p>母亲出生的那个小城镇这么多年来一直是我向往的地方。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The town where my mother was born has always been an attraction for me over the years.</span><br></pre></td></tr></table></figure><h2 id="定语从句的特殊用法"><a href="#定语从句的特殊用法" class="headerlink" title="定语从句的特殊用法"></a>定语从句的特殊用法</h2><blockquote><p>定语从句关系词做从句宾语时可以省略</p></blockquote><h3 id="如何判断是否省略了关系词"><a href="#如何判断是否省略了关系词" class="headerlink" title="如何判断是否省略了关系词"></a>如何判断是否省略了关系词</h3><blockquote><p>我们可以用 谓语 判断, 如果两个动词都能够做谓语, 一般就有一个谓语是从句的</p><p>因为一个谓语能够描述一件事情</p></blockquote><blockquote><p>我们还可以判断如果两个 名词 连续在一起, 也可能是省略了 关系词</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The potential evolution of today&#x27;s technology, and its social consequences, is dazzlingly complicated, and it&#x27;s perhaps best left to science-fiction writers and futurologists to explore the many possibilities we can envisage.</span><br></pre></td></tr></table></figure><p>看上面的<code>possibilities we</code> 这种两个名词连续在一起的, 一般情况下被认为省略了<code>that</code></p><h2 id="限制和非限制定语从句"><a href="#限制和非限制定语从句" class="headerlink" title="限制和非限制定语从句"></a>限制和非限制定语从句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">He will call his friend who is working in London.</span><br><span class="line">He will call his mother, who is working in London.</span><br></pre></td></tr></table></figure><p>看上面两句话, 区别就在于: </p><ol><li>朋友有很多个, 必须限定为某个, 或者某些, 后面的从句做了<code>限定功能</code></li><li>妈只有一个(正常情况), 所以根本不需要后面的从句限定, 后面的从句顶多做了<code>补充功能</code></li></ol><h3 id="决定因素"><a href="#决定因素" class="headerlink" title="决定因素"></a>决定因素</h3><blockquote><p>名词(先行词)范围明确了, 所以不需要限定, 加上了 逗号 </p></blockquote><ul><li><p>限制性定语从句和先行词关系紧密, 删除从句意思表示不完整, 非限制反之</p></li><li><p>限制性定语从句前面不能有逗号, 非限制反之</p></li><li><p>限制性定语从句可以用 that , 非限制反之</p></li><li><p>限制性定语从句作为宾语可以省略 which&#x2F;that , 非限制反之</p></li><li><p>限制性定语从句不能指前面一句话, 非限制反之, 可以翻译成”它…”</p></li><li><p>限制性定语从句翻译成 “…的”, 非限制定语从句表示两个独立的句子</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jane Eyre, whom I have learned a lot from, is a persistent lady.</span><br></pre></td></tr></table></figure><blockquote><p>如果没这个逗号, 这个 whom 还可以用 that</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">He said he had climbed up the top of the Everest, which I suspect very much.</span><br></pre></td></tr></table></figure><blockquote><p>这里的 which 指的是前面的一整句话 <code>He said he had climbed up the top of the Everest</code></p></blockquote><p>翻译成两个独立的句子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Edison, whose inventions have been over 2,000，is a famous scientist.</span><br></pre></td></tr></table></figure><p>翻译成 “这; 它; 那”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The picture is fairly thought provoking, which intends to convey to us this message.</span><br></pre></td></tr></table></figure><h3 id="非限制关系词修饰一个句子"><a href="#非限制关系词修饰一个句子" class="headerlink" title="非限制关系词修饰一个句子"></a>非限制关系词修饰一个句子</h3><p>只有两个关系词才能启动一个从句 <code>as</code> 和 <code>which</code></p><p>A few generative rules are then sufficient to unfold the entire fundamental structure of a language, which is why children can learn it So quickly. </p><h2 id="介词和关系代词引导的定语从句"><a href="#介词和关系代词引导的定语从句" class="headerlink" title="介词和关系代词引导的定语从句"></a>介词和关系代词引导的定语从句</h2><h3 id="1-两种常见用法"><a href="#1-两种常见用法" class="headerlink" title="1.两种常见用法"></a>1.两种常见用法</h3><p>1)关系副词在定语从句中作状语时,可以用“介词+关系代词”代替关系副词</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is the city where I have lived for 20 years.</span><br><span class="line">= This is the city in which I have lived for 20 years. </span><br></pre></td></tr></table></figure><p>原句 <code>This is the city where I have lived for 20 years.</code> 这句话其实省略了一个介词</p><p><code>This is the city where I have lived in for 20 years.</code> 因为 <code>lived</code> 是不及物动词, <code>lived in</code> 必须要一个介词, 特别是换成 <code>which</code>之后</p><p>2)定语从句中的谓语为”动词+介词”并且先行词在从句中作宾语时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a subject about which we might argue for a long while.</span><br></pre></td></tr></table></figure><blockquote><p>argue about… 是所谓的固定搭配, 而在上面的定语从句中 about 被提前了</p><p>从句应该是这样: we might argue about which for a long while</p></blockquote><h3 id="2-”介词-关系代词”-中代词的选择"><a href="#2-”介词-关系代词”-中代词的选择" class="headerlink" title="2.”介词+关系代词” 中代词的选择"></a>2.”介词+关系代词” 中代词的选择</h3><p>1)修饰人时，只能用whom</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">He is the student with whom my teacher talked.</span><br></pre></td></tr></table></figure><blockquote><p>记住, 有介词的时候 不能使用 <code>that</code> </p><p>上面的 <code>whom</code> 好像也可以用 <code>who</code> (某位考研老师说的), 不过既然做了从句的宾语, 那么最好还是使用 <code>whom</code></p></blockquote><p>2)修饰物时，只能用which</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is the hotel at which Mr. Jason likes to stay.</span><br></pre></td></tr></table></figure><ol start="3"><li>whose可以用of which&#x2F;whom替换</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mr. Liu criticized the students whose/of whom homework hasn&#x27;t been handed in.</span><br><span class="line"></span><br><span class="line">We live in a house whose/of which windows open to the south. </span><br></pre></td></tr></table></figure><blockquote><p>这不是屁话么? whose 本来就翻译 谁的, of whom</p></blockquote><ol start="4"><li>the same… as和the same… that引导的定语从句</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mr. Darcy is the same man as I love.</span><br><span class="line">Mr. Darcy is the same man that I love.</span><br></pre></td></tr></table></figure><blockquote><p>as 像, that 是</p></blockquote><p>the same… as :所引导的从句内容与先行词同类而不同物,翻译成”像……一样的”</p><p>the same… that :所引导的从句内容与先行词同类且同物,翻译成“正是……”</p><h2 id="as和which引导的非限制性定语从句"><a href="#as和which引导的非限制性定语从句" class="headerlink" title="as和which引导的非限制性定语从句"></a>as和which引导的非限制性定语从句</h2><h3 id="1-as引导的从句可位于前、中、后，翻译成“正如”-which只能放在所修饰的句子的后面"><a href="#1-as引导的从句可位于前、中、后，翻译成“正如”-which只能放在所修饰的句子的后面" class="headerlink" title="1)as引导的从句可位于前、中、后，翻译成“正如”; which只能放在所修饰的句子的后面"></a>1)as引导的从句可位于前、中、后，翻译成“正如”; which只能放在所修饰的句子的后面</h3><blockquote><p><strong><code>as 和 which 的用法都是一样的, 而 which 只能放在句末, as 能够放在任何位置</code></strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">As is known to us all, man struggles upwards and water flows downwards.</span><br></pre></td></tr></table></figure><blockquote><p>这里的 as 就是后面的 man struggles upwards and water flows downwards.这句话</p><p>man struggles upwards and water flows downwards, as is known to us all.</p><p>man, as is known to us all struggles upwards and water flows downwards.</p><p>这些变化都是可以的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Man struggles upwards and water flows downwards, which is known to us all.</span><br></pre></td></tr></table></figure><h3 id="2-紧跟as后的往往是be动词-而which后可以跟任一类型的动词"><a href="#2-紧跟as后的往往是be动词-而which后可以跟任一类型的动词" class="headerlink" title="2)紧跟as后的往往是be动词;而which后可以跟任一类型的动词"></a>2)紧跟as后的往往是be动词;而which后可以跟任一类型的动词</h3><ul><li>As is known to the United States, Mark Twain is a great writer.</li><li>He changed his mind, which made me very angry.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## 引导词which和that的区别</span><br><span class="line"></span><br><span class="line">自己做笔记</span><br><span class="line"></span><br><span class="line">## 引导词who和that的区别</span><br><span class="line"></span><br><span class="line">自己做笔记</span><br></pre></td></tr></table></figure><h2 id="区分定语从句和同位语从句"><a href="#区分定语从句和同位语从句" class="headerlink" title="区分定语从句和同位语从句"></a>区分定语从句和同位语从句</h2><ol><li>定语从句是修饰<code>which</code>, 同位语从句是解释<code>what</code></li><li>同位语从句跟在抽象名词之后, 定语从句后面可以跟着抽象和不抽象</li><li>定语从句的关系词做成分, 同位语从句的引导词不做成分</li><li>定语从句有9个先行词, 同位语从句一般只有 that , 偶尔有别的(当你在解释一个名词的时候一般都是陈述句, 所以绝大多数都是 that), 偶尔会见到 whether</li></ol><h2 id="定语从句的至难点-x3D-x3D-gt-找先行词"><a href="#定语从句的至难点-x3D-x3D-gt-找先行词" class="headerlink" title="定语从句的至难点 &#x3D;&#x3D;&gt; 找先行词"></a>定语从句的至难点 &#x3D;&#x3D;&gt; 找先行词</h2><p>The words used by the speacker may stir up unfavorable reactions in the listener which interface with his comprehension; hence, the transmission-reception system breaks down.</p><ol><li><p>先行词和关系词 相连</p><p>When someone abandons you, he is the one who should get loss because for him, he loses someone who loves him but for you, you lose someone who does not love you.</p></li><li><p>定语从句的先行词是他前面的几个名词</p><p>For workers it can mean an end to the security, benefits and sense of importance that came from being a loyal employee.</p></li><li><p>定语从句先行词是前面一个从句(而且是非限制性定语从句才有)</p><p>The Greeks assumed that the structure of language had some connection with the process of thought, which took root in Europe C long before people realized how diverse languages could be.</p></li><li><p>定语从句先行词可能是前面一整个句子</p><p>My husband enjoys talking with other young ladies, which really gets me go mad.</p></li><li><p>先行词被一坨东西隔开了</p><p>As a linguist, he acknowledges that all varieties of human language, including non-<br>standard ones like Black English, can be powerfully expressive – there exists no<br>language or dialect in the world that cannot convey complex ideas.</p></li></ol><h1 id="英汉差异的对比"><a href="#英汉差异的对比" class="headerlink" title="英汉差异的对比"></a>英汉差异的对比</h1><ol><li>汉语意合, 英语形合<ol><li>句子结构, 汉语基本没有, 英语必须要有</li><li>逻辑关系词</li></ol></li><li>汉语多主动, 英语多被动</li><li>汉语多短句, 英语多长句<ol><li>独立主格&#x2F;非谓语动词</li><li>并列句(连词)</li><li>主从复合句</li></ol></li></ol><h1 id="长难句分析"><a href="#长难句分析" class="headerlink" title="长难句分析"></a>长难句分析</h1><p>能够找到定语从句, 然后把他们翻译出来</p><h2 id="如何找定语"><a href="#如何找定语" class="headerlink" title="如何找定语?"></a>如何找定语?</h2><p>找定语的关键就是找名词, 只要名词后有一坨东西. 只要他们不是动词, 就暂定为修饰这个名词的定语成分</p><blockquote><p>很多人会说那宾补呢? 其实 宾补 不也修饰这个名词的成分么? 只不过不是定语 </p></blockquote><p>但名词后面还可以是:</p><ol><li>定语</li><li>同位语</li><li>谓语动词</li><li>插入语(插入语前后有逗号)</li><li>状语</li></ol><h3 id="定语从句从哪开始到哪结束"><a href="#定语从句从哪开始到哪结束" class="headerlink" title="定语从句从哪开始到哪结束"></a>定语从句从哪开始到哪结束</h3><blockquote><p><strong>定语从<code>名词</code>后开始通常到主句的谓语动词之前结束</strong></p><p><strong>如果从句在主句的谓语动词之后, 则定语就从名词后开始通常到(可能有状语或者连词)句末结束</strong></p></blockquote><blockquote><p>注意: 每一个小定语都是到下一个名词结束, 但是需要注意是不是固定搭配</p></blockquote><blockquote><p>注意: 如果定语在主句的谓语动词之后, 定语从名词后开始通常到句末结束, 但是如果定语后有连词的话, 定语不再到句末结束, 而是到连词之前结束</p></blockquote><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ol><li><p>Astrophysicists working with ground-based detectors at the South Pole and balloon-borne instruments are closing in on such structures and may report their findings soon.</p></li><li><p><code>Astrophysicists</code> 天体物理学家</p></li><li><p><code>ground-based detectors</code> 路基探测器</p></li><li><p><code>balloon-borne</code> 气球运载的</p></li><li><p><code>are closing in on</code> 正在逼近的</p></li></ol><p><code>Astrophysicists</code> 是一个名词, 说明后面可能是定语, 根据前面给的定义, 看到后面主干的谓语 <code>are closing in on</code> , 那么这中间都是定语(当然还有可能是状语)</p><p><code>working with ground-based detectors at the South Pole and balloon-borne instruments</code> 这中间都是定语</p><p><code>working</code> 是动名词, 一般做定语</p><p>还有小定语 “<code>at the South Pole</code>“ 在南极的</p><p>翻译下 “天体物理学家以在南极的地基探测器和气球运载器为工作手段”</p><p>后面的 and 决定了两个句子, 后面的 <code>may report their findings soon</code> 缺少了前面的主语, <code>report</code> 是后面一句的谓语, 和 <code>are closing in on</code>对应, 所以<code>are closing in on</code> 的主语就是 <code>report</code> 的主语, <code>Astrophysicists </code></p><p>翻译成 “天体物理学家以在南极的地基探测器和气球运载器为工作手段正在逼近这种结构, 并且他们或许能够马上提交他们的发现”</p><ol start="2"><li>The second half of the 20th century saw a collection of geniuses, warriors, entrepreneurs and visionaries labor to create a fabulous machine that could<br>function as a typewriter and printing press, studio and theatre, paintbrush and gallery, piano and radio, the mail as well as the mail carrier.</li></ol><p>谓语是 saw , 那么前面都认为是主语, 后面都认为是宾语(saw 及物动词, 后面只能是宾语)</p><p>geniuses 天才, warriors 勇士, entrepreneurs 企业家, visionaries labor 有见识的劳工? , fabulous 极好的</p><p>翻译成 “二十世纪下半个中叶看见了一群天才, 有志之士, 企业家和有远见的人创造了一台神器的机器, 这台机器能够作为打字机和印刷机, 演播室和剧院, 画笔和画廊, 感情和收音机, 邮件以及发送邮件”</p><p>After six months of arguing(定语) and final 16 hours of hot parliamentary debates(定语), Australia’s Northern Territory became(谓语) the first legal authority in the world to allow doctors to take the lives of incurably ill patients who wish to die.</p><p>became 谓语</p><p>主干翻译 “澳大利亚北部 成为 第一个合法机构”</p><p>状语: After six months of arguing(定语) and final 16 hours of hot parliamentary debates(定语)</p><p>主语: Australia’s Northern Territory</p><p>谓语: became</p><p>表语: the first legal authority</p><p>定语一: in the world   全世界的 the first legal authority</p><p>定语二: to allow doctors to take the lives 允许医生带走(结束)生命</p><blockquote><p>allow sb to do sth</p></blockquote><p>定语三: of incurably ill patients </p><p>定语从句四:  who wish to die</p><p>翻译成 “经过六个月的讨论和国会16个小时激烈的讨论, 澳大利亚北部成为全世界第一个允许医生带走希望死亡的绝症病人生命的合法机构”</p><p>Whether to use tests, other kinds of information, or both in a particular situation depends, therefore, upon the evidence from experience concerning comparative validity and upon such factors as costs and availability.</p><p>谓语: depends</p><p>主语: Whether to use tests, other kinds of information, or both in a particular situation</p><p>宾语: upon the evidence from experience concerning comparative validity and upon such factors as costs and availability.</p><blockquote><p>就这么简单的认为就好, 等会儿拆开, 一个一个看</p></blockquote><p>插入语: , therefore, 状语做插入语, 可以直接提到句子前面</p><blockquote><p>状语一般修饰的都是动词, 而动词一般是说的一件事, 所以状语也可以当作修饰一件事(一句话), 只要翻译后, 找到恰当的位置插入状语的翻译便可</p></blockquote><p>Whether to use tests, other kinds of information, or both in a particular situation</p><p>看介词, to or(先当作介词) in</p><p>看句子能够明显的看到 to do xxx, yyy, or zzz 这种形式的主语</p><p>所以 or 是 连词 可能有省略部分 <code>Whether to use tests, to use other kinds of information, or to use both</code></p><p>in a particular situation 翻译成: 在特定的情况下 明显是<code>状语</code></p><blockquote><p>不能翻译成什么什么的<code>名词</code>, 或者做了<code>限制</code>某个<code>名词</code>功能的, 都是定语, 一般修饰整个句子</p></blockquote><p>翻译: 在特定的情况下, 是否使用测试, 还是使用其他种类的信息, 又或者是两者都使用 (主语翻译完毕)</p><p>把 动词带上</p><p>depends upon the evidence from experience concerning comparative validity and upon such factors as costs and availability.</p><p>depends upon 依赖于</p><p>找介词和连词:  and  as</p><p>注意 and 是连词, 明显有省略 : <code>(depends) and upon</code></p><blockquote><p>记住, <strong><code>如果一个名词意思比较宽泛, 一般都会有定语, 用于限定名词</code></strong>, 比如上面的 <code>factors n. 因素</code>, 哪种因素? <code>evidence n. 证明;根据</code> 什么样的证明? <code>experience n. 经验;经历</code> 什么样的经验?</p></blockquote><p>宾语整体是 depends upon xxx and depends upon yyy as n1 and n2</p><p>翻译成: “取决于来自关于相对经验的证明和取决于成本和可用性的因素”</p><p>整体翻译: 在特定的情况下, 是否使用测试, 还是使用其他种类的信息, 又或者是两者都使用取决于来自关于相对经验的证明和取决于成本和可用性的因素</p><blockquote><p>找定语的关键在于找名词, 只要找到的这一坨东西不是动词, 就暂定为定语, 定语从名词后开始到主句谓语动词结束, 又或者定语在主句的谓语动词之后, 如果在谓语动词之后, 则定语从名词开始到句末, 但是有连词的时候到连词之前结束</p><p>一个大定语中有很多小定语, 每个小定语都到名词之后结束, 一般翻译都要从后往前翻译, 但是需要注意固定搭配, 那要怎么判断呢? 翻译完看看是还是不是小定语的名词后结束? 如果翻译不通畅, 那就可能有固定搭配</p></blockquote><p>外表看起来非常邋遢的他其实内心很高尚</p><p>He who looks rather slovenly is really noble in nature.</p><p>功夫是中国武术的俗称. 中国武术的起源可以追溯到职位的需要, 狩猎活动以及古代中国的军事训练.</p><p>Kung Fu is the common name of Chinese martial arts which can be traced back to self-defense needs, hunting activities and millitary training in ancient China.</p><p>人们还会在门上粘贴对联(couplets) 对联的主题有健康, 发财和好运.</p><p>Doors will be decorated with couplets whose topics are involved in health, weather and good luck.</p><p>继父经常在假期里带她出国旅游, 这使她感到在同学面前很骄傲.</p><p>Her stepfather often takes her to travel abroad during the vaction, which makes her feel proud in front of her classmates.</p><blockquote><p>注意: 上面的 which 的非限制定语从句, which 指前面一句话</p></blockquote><p>剪纸(paper cutting) 是中国最为流行的传统民间艺术形式之一. 中国剪纸有一千五百多年的历史, 在明朝和清朝期间(the Ming and Qing Dynastices)特别流行.</p><p>Paper cutting is one of the most popular arts in China which has a 1500-year history and was quite famous in the Ming and Qing dynamices.</p><p>那些全力以赴去实现梦想的人, 即使最终没有成功也不会感到遗憾, 这很重要.</p><p>Those sparing no efforts to realize their dreams will never feel regretful even if they fail finally, which is quite significant.</p><p>那些课堂上不集中精力, 又希望通过考试的学生, 常常发现结果并不能令人满意.</p><p>Those who fail to concentrate in class but hope to pass the examination often find that the consequence is unsatisfactory.</p><p>长江流经多种不同的生态系统, 是诸多濒危物种的栖息地, 灌溉了中国五分之一的土地.</p><p>The Yangzi River flowing through different ecological systems is the habitat of plentiful endangered animals, irrigating one fifth of China’s lang.</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 同位语从句 </tag>
            
            <tag> 形容词 </tag>
            
            <tag> 定语 </tag>
            
            <tag> 定语从句 </tag>
            
            <tag> 关系词 </tag>
            
            <tag> 关系代词 </tag>
            
            <tag> 非限制关系词 </tag>
            
            <tag> 限制性定语从句 </tag>
            
            <tag> 非限制性定语从句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03名词性从句(充当主干成分的从句)</title>
      <link href="/2022/11/25/06%E8%8B%B1%E8%AF%AD/03%E5%90%8D%E8%AF%8D%E6%80%A7%E4%BB%8E%E5%8F%A5/"/>
      <url>/2022/11/25/06%E8%8B%B1%E8%AF%AD/03%E5%90%8D%E8%AF%8D%E6%80%A7%E4%BB%8E%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="★名词性从句-主语-宾语-表语-同位语从句"><a href="#★名词性从句-主语-宾语-表语-同位语从句" class="headerlink" title="★名词性从句(主语, 宾语, 表语, 同位语从句):"></a>★名词性从句(<code>主语, 宾语, 表语, 同位语从句</code>):</h1><h2 id="★名词-短语-能做什么成分"><a href="#★名词-短语-能做什么成分" class="headerlink" title="★名词(短语)能做什么成分?"></a>★名词(短语)能做什么成分?</h2><h3 id="★主语"><a href="#★主语" class="headerlink" title="★主语"></a>★主语</h3><p><code>The movie is encouraging.</code></p><h3 id="★宾语"><a href="#★宾语" class="headerlink" title="★宾语"></a>★宾语</h3><p><code>I appreciate his mother.</code></p><h3 id="★表语"><a href="#★表语" class="headerlink" title="★表语"></a>★表语</h3><p><code>Gump is a real man.</code></p><h3 id="★同位语"><a href="#★同位语" class="headerlink" title="★同位语"></a>★同位语</h3><p><code>I enjoy the part,the end.</code></p><h4 id="★同位语就是用来解释一个名词的成分-可以在名词后加上另一个名词作为他的同位语-但前后需要用逗号隔开"><a href="#★同位语就是用来解释一个名词的成分-可以在名词后加上另一个名词作为他的同位语-但前后需要用逗号隔开" class="headerlink" title="★同位语就是用来解释一个名词的成分, 可以在名词后加上另一个名词作为他的同位语, 但前后需要用逗号隔开"></a>★<strong>同位语就是用来解释一个名词的成分, 可以在名词后加上另一个名词作为他的同位语, 但前后需要用逗号隔开</strong></h4><p><code>English, a worldwide language, is playing a key role in out communication with others</code></p><ul><li>污染越来越严重了</li></ul><p><code>Pollution, a universal issue throughout the world, become increasingly serious.</code></p><ul><li>我们应该支持国货</li></ul><p><code>We, Chinese customers, should support our domestic products.</code></p><blockquote><h4 id="★用一个名词解释另一个名词-记住这里是同位语不是同位语从句"><a href="#★用一个名词解释另一个名词-记住这里是同位语不是同位语从句" class="headerlink" title="★用一个名词解释另一个名词, 记住这里是同位语不是同位语从句"></a>★用一个名词解释另一个名词, 记住这里是同位语不是同位语从句</h4></blockquote><h3 id="★什么是从句"><a href="#★什么是从句" class="headerlink" title="★什么是从句?"></a>★什么是从句?</h3><blockquote><h4 id="★连接词-分句-连接词-x2F-关系词-x2F-从属连词-主语-谓语"><a href="#★连接词-分句-连接词-x2F-关系词-x2F-从属连词-主语-谓语" class="headerlink" title="★连接词 + 分句(连接词&#x2F;关系词&#x2F;从属连词 + 主语 + 谓语)"></a>★<code>连接词</code> + 分句(连接词&#x2F;关系词&#x2F;从属连词 + 主语 + 谓语)</h4></blockquote><h2 id="★是什么名词性从句"><a href="#★是什么名词性从句" class="headerlink" title="★是什么名词性从句?"></a>★是什么名词性从句?</h2><p><strong><code>在句子中相当于名词性质的从句叫名词性从句</code></strong></p><ol><li><p><code>What I saw repeatedly is encouraging.</code> 主语从句</p></li><li><p><code>I appreciate what his mother said.</code> 宾语从句</p></li><li><p><code>Gump is who we should learn from.</code> 表语从句</p></li><li><p><del><code>I enjoy the part that a feather is flying in the sky.</code> 定语从句（是形容词性从句）</del></p></li></ol><p>★<code>名词在句子中能够充当什么成分, 从句在句子中就也能充当什么成分, 这就是名词性从句, 名词性从句一共包括4种: 1. 主语从句; 2. 宾语从句; 3. 表语从句; 4. 同位语从句</code></p><p>而 <code>从句 = 连接词 + 句子</code></p><blockquote><p><strong><code>名词性从句可以看成名词, 名词能做什么, 名词性从句也能做什么</code></strong></p></blockquote><h2 id="★名词性从句的连接词"><a href="#★名词性从句的连接词" class="headerlink" title="★名词性从句的连接词"></a>★名词性从句的连接词</h2><p>连接词的功能有三：</p><ol><li><p>连接</p></li><li><p>连接 + 代词</p></li><li><p>连接 + 副词</p></li></ol><p>连接词：that，whether，if，as if，as though （不充当成分）</p><p>连接代词：who，whom，what，which，whose （充当：主宾表定）</p><p>连接副词：when，where，why，how（充当状语）</p><blockquote><p>对比定语从句：</p><p>关系代词：who，whom，which，that，whose，as（充当：主宾表定）</p><p>关系副词：when，where，why（充当状语）</p></blockquote><h3 id="怎么判断要使用哪个连接词？"><a href="#怎么判断要使用哪个连接词？" class="headerlink" title="怎么判断要使用哪个连接词？"></a>怎么判断要使用哪个连接词？</h3><p>根据从句缺少什么去判断使用什么，或者假设从句修改成疑问句，你要用什么连接词？自然就知道需要什么连接词</p><p>比如：我知道你昨天买了什么。</p><p><code>I know you buy yesterday what</code></p><p><code>what</code>提前到从句前面</p><p><code>I know what you buy yesterday.</code></p><h2 id="怎么写个名词性从句？"><a href="#怎么写个名词性从句？" class="headerlink" title="怎么写个名词性从句？"></a>怎么写个名词性从句？</h2><ol><li><p>陈述句</p><p>【主句】+【that(无词义)】+【陈述句的从句】</p></li><li><p>一般疑问句</p><p>【主句】+【whether&#x2F;if】+【变成陈述句的一般疑问句】</p></li><li><p>特殊疑问句</p><p>【主句】+【变成陈述句的特殊疑问句】（连词自带）</p></li></ol><p>名词性的连接词是按照从句的类型分的类, 一共把连接词分为三类</p><ol><li><h4 id="★-当从句是陈述句时-可以使用-that-并且-that-没有任何意思"><a href="#★-当从句是陈述句时-可以使用-that-并且-that-没有任何意思" class="headerlink" title="★**当从句是陈述句时, 可以使用 that , 并且 that 没有任何意思**"></a>★**<code>当从句是陈述句时, 可以使用 that , 并且 that 没有任何意思</code>**</h4></li><li><h4 id="★-whether-当从句是一般疑问句时-补充当任何成分-但意思是-quot-是否-quot"><a href="#★-whether-当从句是一般疑问句时-补充当任何成分-但意思是-quot-是否-quot" class="headerlink" title="★**whether 当从句是一般疑问句时, 补充当任何成分, 但意思是 &quot;是否&quot;**"></a>★**<code>whether 当从句是一般疑问句时, 补充当任何成分, 但意思是 &quot;是否&quot;</code>**</h4></li><li><h4 id="★-所有的特殊疑问句-开头的那个词就是连接词"><a href="#★-所有的特殊疑问句-开头的那个词就是连接词" class="headerlink" title="★**所有的特殊疑问句: 开头的那个词就是连接词**"></a>★**<code>所有的特殊疑问句: 开头的那个词就是连接词</code>**</h4></li><li><h4 id="★-并且英语中所有从句一定都是陈述句-也就是-连接词-主语-谓语-的形式"><a href="#★-并且英语中所有从句一定都是陈述句-也就是-连接词-主语-谓语-的形式" class="headerlink" title="★**并且英语中所有从句一定都是陈述句, 也就是 [连接词 + 主语 + 谓语] 的形式**"></a>★**<code>并且英语中所有从句一定都是陈述句, 也就是 [连接词 + 主语 + 谓语] 的形式</code>**</h4></li></ol><blockquote><p> 如果一般疑问句修饰的是宾语, 则可以用 <code>if</code> , 其他时候不能用, 如果结尾由 <code>or not</code> 也不能用 <code>if</code>，有介词也不能用 <code>if</code></p></blockquote><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul><li>我想知道人为什么生活在地球上</li></ul><p><code>I wonder why human beings live on the earth (宾语从句)</code></p><ul><li>她成功的找到了个朋友, 这使我很开心</li></ul><p><code>That she succeeded in finding a friend makes me happy(主语从句)</code></p><ul><li>有一天你会发现, 事业, 亲情, 友情都比爱情重要</li></ul><p><code>Someday, you will find that careers, kinship and friendship are more important than love itself.(宾语从句)</code></p><ul><li><p>他们离开家乡去西藏的原因是一个谜团.</p><p><code>That they left their hometown for Tibet is a mystery.(主语从句)</code></p></li><li><p>我正在思考我是否和女朋友分手</p></li></ul><p><code>I am reflecting whether I should separate with my girlfriend.(宾语从句)</code></p><ul><li>昨天是一个历史, 明天是一个谜, 但是今天是一个礼物, 这就是为什么它叫做”present”</li></ul><p><code>Yesterday is history. tomorrow is a mystery. but today is gift. That is why it&#39;s called the present. (表语从句)</code></p><blockquote><p>★主语从句经常被改成 <code>It is</code> 形式, <code>It makes me happy that she succeeded in finding a friend.</code></p></blockquote><p>女人总是对的是一个常识。</p><p><code>That ladies tend to be right is common knowledge. </code>(屁, 应该是女人总认为自己是对的)</p><p>读书的目的是涤荡我们的灵魂，这是母庸置疑的。</p><p><code>That reading is to purify our minds is beyond dispute.</code></p><h3 id="★-主语从句常见表达-一一-it方式改造主语从句"><a href="#★-主语从句常见表达-一一-it方式改造主语从句" class="headerlink" title="★ 主语从句常见表达 一一 it方式改造主语从句"></a>★ 主语从句常见表达 一一 <code>it</code>方式改造主语从句</h3><p><code>It is common knowledge that...</code> 显而易见, 众所周知<br><code>It is my belief that...</code>我认为<br><code>It is self-evident that...</code> 显而易见, 众所周知<br><code>It has been found that...</code>  显而易见, 众所周知<br><code>It is beyond dispute that... ...</code>   显而易见, 众所周知<br><code>It is universally acknowledged that...</code> 显而易见, 众所周知<br><code>It has been widely accepted that...</code>显而易见, 众所周知<br><code>It is generally agreed that...</code> 显而易见, 众所周知</p><blockquote><p>本句型可以写在作文中任何一句话的前面</p></blockquote><p>积极的心态对于成功至关重要,这是一个常识。</p><p><code>It is common knowledge that a positive attitude plays a key role in our success.</code></p><blockquote><p><code>plays a key role in + sth</code> 在什么中扮演重要角色</p></blockquote><p>我认为养宠物这个话题现在应该引起人们的关注了。</p><p><code>It is my belief that the issue about raising pets should be brought into the limelight under modern conditions.</code></p><h1 id="怎么判断是名词性从句"><a href="#怎么判断是名词性从句" class="headerlink" title="怎么判断是名词性从句?"></a>怎么判断是名词性从句?</h1><p><strong><code>判断主干是否缺少名词成分，然后再判断从句是否代替了主干的成分，代替了哪个成分就叫什么从句</code></strong></p><h2 id="★如何识别主语从句"><a href="#★如何识别主语从句" class="headerlink" title="★如何识别主语从句?"></a>★如何识别主语从句?</h2><p>★**<code>只要见到有连接词放在句首, 并且从句之后没有被逗号隔开, 就一定是主语从句, 主语从句从句首开始到主句的谓语动词之前结束, 除此以外见到 it ... that 通常也是主语从句, 主语从句从that开始到句末结束, it 做了形式主语</code>**</p><blockquote><h4 id="★-状语从句放在句首一般后面都有逗号"><a href="#★-状语从句放在句首一般后面都有逗号" class="headerlink" title="★**状语从句放在句首一般后面都有逗号**"></a>★**<code>状语从句放在句首一般后面都有逗号</code>**</h4></blockquote><blockquote><h4 id="★强调句型也是-it-that-但是后续会学到识别强调句型的方式"><a href="#★强调句型也是-it-that-但是后续会学到识别强调句型的方式" class="headerlink" title="★强调句型也是 it ... that , 但是后续会学到识别强调句型的方式"></a><strong><code>★强调句型也是 it ... that , 但是后续会学到识别强调句型的方式</code></strong></h4></blockquote><blockquote><p>★**<code>同位语从句是解释名词，定语从句是修饰、限制名词。两者连接词不同，且that引导同位语从句时，不充当句子成分，而引导定语时，要么充当定语从句的主语，要么充当定语从句的宾语</code>**</p></blockquote><p><code>That the plates are moving is now beyond dispute.</code> 板块正在移动是毋庸置疑的</p><blockquote><p>单词怎么翻译, 必须要有语境, 否则上面的 <code>plates</code>单纯按照意思可能被翻译成盘子正在移动</p></blockquote><p><code>Whether the Government should increase the financing of pure science at the expense of technology or vice versa often depends on the issue of which is seen as the driving force.</code></p><p>找谓语<code>depends on</code></p><p>前面的一段全都算是主语(除了 <code>often</code>)</p><p>政府是应该以牺牲技术为代价增加对纯科学的投入或者以牺牲纯科学为代价增加技术投入经常取决于哪一个被视为是驱动力的问题</p><p><code>How well the predications will be validated by later performance depends upon the amount, reliability, and appropriateness of the information used and on the skill and wisdom with which it is interpreted.</code></p><ol><li><strong><code>★找到一句话中的所有成分</code></strong></li><li>★**<code>翻译各个成分</code>**</li><li>★**<code>用中国人的方式组合翻译出来</code>**</li></ol><p>找到谓语<code>depends upon</code>翻译成<code>取决于</code>, 所以前面的句子都看作是主语”<code>How well the predications will be validated by later performance</code>“</p><p>翻译成 &#x3D;&#x3D;&gt; 预言将会被以后的表现多好的验证出来取 &#x3D;&#x3D;&gt; A</p><p>A 这取决于所使用消息的数量, 可靠性和适当性 and 解释它的技巧和智慧</p><blockquote><p>翻译能力还是不够啊, 上面的句子中, 最后的 <code>which it is interpreted</code> 是什么语? 我判断错误了, 以为是状语从句(还是对知识点运用不太熟悉). </p><p>这里具体分析下上面的那句话的成分, 既然前面是个并列句<code>and</code>, 那么至少保证前面的句子是完整的, 说明主干是完整的, 那么只能在同位语从句, 定语从句和状语从句中选择</p><p>同位语从句的话一般是以<code>that</code> 做连接词, 但这里不是, 而且在连接词中同位语的连接词其实不重要, 可以删除掉, 不影响同位语自己(不过这里其实也不影响)</p><p>状语从句, 暂且不谈</p><p>而这里是定语从句, with which it is interpreted整个句子都修饰的前面的on the skill and wisdom, <code>it is interpreted with which</code>, 说得通, 那么他的<strong>先行词</strong>是<code>the skill and wisdom</code>, 就变成了<code>it is interpreted with the skill and wisdom</code>, “使用技巧和指挥解释它的”</p></blockquote><blockquote><p>上面的 <code>it is interpreted</code>还有个坑, 就是 <code>it</code>, 它有个原则就是往前面找, 找到符合他的名词(因为他是代词), 第一个找到的是<code>the skill and wisdom</code>但明显不是, <code>which</code>已经指向它, 做<code>it is interpreted with the skill and wisdom</code>整个语句中的状语了, 所以还得往前找, 最终找到<code>the information</code>, 所以整句的翻译变成”使用技巧和智慧来解释消息”</p></blockquote><p>明显省略了</p><p>找省略了啥? <code>[介词 + 名词 + 定语]</code> 在前面找找</p><p>&#96;&#96;How well the predications will be validated by later performance depends upon the amount, reliability, and appropriateness of the information used&#96;</p><p>找到了 <code>upon the amount, reliability, and appropriateness of the information used</code></p><blockquote><p>这里有三个名词, 明显不对, 变成一个所以是 <code>[介词 + 名词 + 定语]</code></p></blockquote><p>省略了 谓语 <code>depends</code>, 所以翻译自然就出来了</p><p><code>How well the predications will be validated by later performance depends upon the amount, reliability, and appropriateness of the information used and depends on the skill and wisdom with which it is interpreted.</code></p><p>预测将会多大程度上被后面的表现所验证取决于使用这些信息的数量、可靠性和适当性，并且还取决于解释信息的技巧和智慧。</p><p><code>These libraries are optional on most of the systems and if the feature they add is desired, corresponding libraries need to be installed before running configure</code></p><p>找到谓语: <code>are</code> , 主语: <code>These libraries</code>, 表语是<code>optional</code> 的主系表结构 这是主干</p><p><code>on most of the systems</code> 在多数的系统上</p><p><code>and if the feature they add is desired, corresponding libraries need to be installed before running configure</code> </p><p>找所有可能的谓语</p><p>add is need </p><p><code>add</code>的话, 前面的是<code>if 和 they</code> 后面是另一个动词, 说明是从句（if抵消了add动词）, 这里大概率是定语从句, 用于修饰先行词 <code>the feature</code></p><p>翻译成如果他们添加的特性</p><p><code>is</code> 也是个谓语, 看句子分析还是从句的, 前面是另一个从句, 这里我觉得是 定语从句 , 把前面的 <code>that</code> 也放这一句中了, 变成了 <code>that is</code></p><p>从句的谓语是 : <code>need</code> , 主语就是 <code>the feature</code>, 宾语是<code>to be installed</code>这里是动词不定式做宾语(非谓语动词的被动形态)</p><p>整句的翻译是</p><p>if the feature need to be installed before running configure</p><p>如果这些特性需要被安装, 这在这之前需要运行<code>configure</code></p><p><code>that is desired, corresponding libraries</code> 这句话应该是同位语</p><p>用于解释 <code>the feature</code>, 译为: “需要并且符合的库”</p><p><code>They add</code> 做状语</p><p>It is generally agreed that a person of high intelligence is one who can grasp ideas readily, make distinctions, reason logically, and make use of verbal and mathematical symbols in solving problems.</p><ol><li>is 谓语</li><li>这是一个 it 做形式作于的 从 that 开始到结尾的主语从句结构</li><li>从句内部的 谓语 是 is, 主语是 a person , 表语是 one 主系表结构</li><li>从句内部有几个部分 grasp ideas readily, make distinctions, reason logically, and make use of verbal and mathematical symbols in solving problems</li></ol><p>众所周知的, 一个高智商的人是一个能够轻易抓住灵感的, 能够分辨事物, 能够判断逻辑的和能够用语言和数学符号解决问题的人</p><p>For example, it has long been known that total sleep deprivation is 100 percent fatal to rats, yet, upon examination of the dead bodies, the animals look completely normal.</p><ol><li>找谓语</li><li>has long been know , it 引导的主语从句, 表示很长时间已经知道</li><li>is, 从句的系动词, 表示百分百剥夺睡眠, 完全剥夺睡眠对于老鼠来说非常致命</li><li>look, 系动词, 动物看起来完全正常</li></ol><p>整体翻译下: 比如说, 很长时间前我们就知道, 完全剥夺睡眠对于老鼠来说是非常致命的, 然而根据尸体的检查, 这些动物看起来完全正常</p><p>It has long been known that a taxi firm called AAAA cars has a big advantage over Zodiac cars when customers thumb through their phone directories.</p><ol><li>找谓语</li><li>called , 但不是, 因为后面还有个 has, 一个句子中绝对不能有两个动词, 所以 called 应该还有别的翻译, 这里只能是过去分词, 翻译成 称作</li><li>has, 有, has只有一个词性, 就是动词, 而 has 前面除了 that 就没有连接词了, 所以对于从句来说 has 是谓语</li><li>thumb through, 翻阅</li></ol><p>周所周知, 当用户滑动手机通讯录的时候, 一家出租车公司名字叫AAAA的车比名字叫Zodiac的车的拥有巨大的优势.</p><p>Furthermore, it is obvious that the strength of a country’s economy is directly bound up with the efficiency of its agriculture and industry, and that this in turn rests upon the efforts of scientists and technologists of all kinds.</p><ol><li>谓语</li><li>is, 主系表结构, 表示显而易见</li><li>is, 从句的谓语, 从句左边是”一个国家的经济实力”, 右边是”直接绑定他的农业和工业的效率”</li><li>rests upon, 依赖于 谓语, 这反过来 为 主语</li></ol><p>此外, 显而易见的, 一个国家的经济实力直接绑定于农业和工业的效率, 而反过来依赖于全体科学家和技术专家的努力.</p><h2 id="★如果识别宾语从句"><a href="#★如果识别宾语从句" class="headerlink" title="★如果识别宾语从句"></a>★如果识别宾语从句</h2><blockquote><p>只要实义动词的后面有个连接词, 就暂定为宾语从句(还有可能是状语从句哦)</p></blockquote><blockquote><p><code>that</code> 的引导宾语从句中 <code>that</code> 可以省略, 但是你最好不要省略, 因为省略通常在不正式的场合</p></blockquote><blockquote><p><code>if</code> 只能引导宾语从句, 翻译成 “是否”, 但<code>whether</code>可以引导所有的从句, 别的时候都翻译成”如果”</p></blockquote><p>0</p><h3 id="介宾形式"><a href="#介宾形式" class="headerlink" title="介宾形式"></a>介宾形式</h3><p><code>This and other similar cases raise the question of whether there is still a line between the court and politics.</code></p><p>这里的谓语是 <code>raise</code> , 而后面 <code>of</code> 引导是一个介宾结构, 做短语</p><p>介宾结构一般是 <code>介词 + 名词</code> 做介词短语形式,  而上面是 <code>介词 + 宾语从句</code></p><h3 id="另类的介宾结构"><a href="#另类的介宾结构" class="headerlink" title="另类的介宾结构"></a>另类的介宾结构</h3><p>在主系表后面添加宾语结构的形式, 这种有人说是在前面的形容词后面有一个介词, 当时被省略了</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">he felt certain that he never could have succeeded with mathematics</span><br></pre></td></tr></table></figure><h3 id="主谓双宾结构"><a href="#主谓双宾结构" class="headerlink" title="主谓双宾结构"></a>主谓双宾结构</h3><p><code>tell sb sth</code> 明显的主谓双宾结构</p><p>前面一个是人, 后面一个是物</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users could tell advertisers that they did <span class="keyword">not</span> want to be followed.</span><br></pre></td></tr></table></figure><p>而物成为了一个句子</p><h3 id="非谓语动词之后的结构"><a href="#非谓语动词之后的结构" class="headerlink" title="非谓语动词之后的结构"></a>非谓语动词之后的结构</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You might even be tempted to assume that humanity has little future to look forward to.</span><br></pre></td></tr></table></figure><p><code>to assume + 宾语从句</code></p><h3 id="it-形式宾语"><a href="#it-形式宾语" class="headerlink" title="it 形式宾语"></a>it 形式宾语</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">That kind of activity makes it less likely that the court&#x27;s decisions will be accepted as impartial judgments.</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>其实根本没必要举例宾语从句能够做什么, 只要知道宾语能放在那个地方或者充当类似宾语的成分的名词都可以放, 没什么区别的, 宾语从句就是一个句子充当了名词, 作为了宾语</p></blockquote><h4 id="★如果区别动词-ed-是过去式还是过去分词做定语"><a href="#★如果区别动词-ed-是过去式还是过去分词做定语" class="headerlink" title="★如果区别动词+ed 是过去式还是过去分词做定语?"></a>★如果区别动词+ed 是过去式还是过去分词做定语?</h4><blockquote><p> 只需要判断这个疑似动词的词和前面的主语是什么关系? 如果是<strong>被动关系, 则是过去分词</strong>, 如果是<strong>主动关系则是动词</strong></p><p> 当然还有在谓语前面加上 <code>be</code>, <strong>判定主语和谓语之间是不是被动语态, 如果是被动语态, 又有没有<code>be</code> 补充成为完整的 谓语, 那么就是过去分词, 如果不是 被动语态, 则是谓语</strong></p></blockquote><p><code>I bought a dog.</code> 明显是主动买, 所以是谓语动词</p><p><code>a dog bought ...</code> . 明显是被动, 这只狗不可能发出买这个动作, 所以是过去分词</p><p>This alone demonstrates that the television business is not an easy world to survive in. A fact underlined by statistics shows that out of eighty European television networks no less than 50% took a loss in 1989.</p><p>主干: <code>This alone demonstrates that ...</code> 主谓宾</p><p>从句: <code>the television business is ...</code> 主系表</p><p>主干: <code>A fact underlined by statistics shows ...</code> 主谓宾</p><p>从句: <code>out of eighty European television networks no less than 50% took ...</code> 主谓宾</p><p>这单独证明了电视行业不是一个容易生存的世界, 据统计的事实显示, 在1989年, 80个欧洲电视网络不少于百分之50的电视台都在亏损</p><p>He believes that this very difficulty may have had the compensating advantage of forcing him to think long and intently about every sentence, and thus enabling him to detect errors in reasoning and in his own observations.</p><p>他认为，这种困难可能具有补偿性的优势，迫使他对每一句话进行长时间的思考，从而使他能够发现推理和自己观察中的错误</p><blockquote><p>一个从句做了宾语, 如果主干的谓语是实义动词, 而且此刻主干刚好缺少宾语的部分, 那么该从句很可能是宾语从句</p></blockquote><h2 id="★如何识别表语从句"><a href="#★如何识别表语从句" class="headerlink" title="★如何识别表语从句"></a>★如何识别表语从句</h2><blockquote><p>系动词有一个连接词, 通常都是表语从句</p></blockquote><p>A report consistently brought(过去分词做定语) back by visitors to the US is how friendly, courteous, and helpful most Americans were to them.</p><p>Galileo’s greatest glory was that in 1609 he was  the first person to turn the newly invented telescope on the heavens to prove that the planets revolve around the sun rather than around the Earth.</p><p>Women are much too preoccupied by family. Once the marriage begins to disintegrate, they are lost. That is where their unhappiness spring from and that is why most divorced mothers regard themselves as victims.</p><blockquote><p>一个从句做了表语</p></blockquote><h2 id="★如何识别同位语从句"><a href="#★如何识别同位语从句" class="headerlink" title="★如何识别同位语从句"></a>★如何识别同位语从句</h2><blockquote><p>只要名词之后有个连接词就暂定为同位语从句(更可能是定语从句)，但是同位语还是定语都不影响我们翻译</p></blockquote><p><code>(状语, 前面有个主语忽略了 Whorf )Being interested in the relationship of language and thought, Whorf developed the idea (名词之后同位语从句)that the structure of language determines the structure of habitual thought in a society.</code></p><p><code>whorf</code> 对语言和思维的联系感兴趣，他产生了一种语言方式决定了在一个社会惯性思维方式的想法</p><p><code>A century ago, Freud formulated his revolutionary  theory that dreams were the disguised shadows of our unconscious desires and fears. </code></p><p><code>But the idea that the journalist must understand the law more profoundly than an ordinary citizen rests on an understanding of the established conventions and special responsibilities of the news media. </code></p><p><code>Evidence came up that specific speech sounds are recognized by babies as young as 6 months old. </code></p><blockquote><p>同位语从句的连接词好像可以去掉, 不在同位语从句中做任何成分, 但定语从句不行, 定语从句的连接词做从句的成分</p></blockquote><h4 id="如何识别同位语"><a href="#如何识别同位语" class="headerlink" title="如何识别同位语?"></a>如何识别同位语?</h4><blockquote><p>名词 + 连接词 + 句子 &#x3D;&#x3D;&gt; 同位语从句</p></blockquote><h3 id="抽象名词和同位语从句"><a href="#抽象名词和同位语从句" class="headerlink" title="抽象名词和同位语从句"></a>抽象名词和同位语从句</h3><blockquote><p>如果句子中有<code>抽象名词</code>, 应该第一时间想到<code>同位语从句</code>, 比如 <code>idea</code>, <code>fact</code>, <code>belief</code>, problem, <code>information</code>, <code>conclusion</code>, <code>decision</code>, news, <code>though</code>, <code>explaination</code>等 <code>An idea came to her that she could solve the problem in another way.</code></p></blockquote><p>★他已经找到了女朋友这件事情使家人很开心。</p><p><code>The matter makes his families rejoiced.</code></p><blockquote><p>★**<code>同位语从句的话, 就把对某个名词的解释放在名词之后</code>**</p></blockquote><p><code>The matter that he has found a girlfriend makes his families rejoiced.</code></p><blockquote><p>★**<code>但同时同位语可以放在句末, 但不推荐</code>**</p></blockquote><p><code>The matter makes his families rejoiced that he has found a girlfriend.</code></p><p>没有人会无缘无故就变得优秀, 这个事实总是被很多人忽略.</p><p><code>The truth is ignored by a sea of individuals.</code></p><p><code>The truth that nobody can become remarkable without endeavors is ignored by a sea of individuals.</code></p><p><code>The truth is ignored by a sea of individuals that nobody can become remarkable without endeavors.</code></p><p>没有什么能够掩盖她正在变老这个事实</p><p><code>The truth that she is getting old can&#39;t covered up. (被动?)</code></p><p><code>Nothing can hide the fact that she is getting old. </code></p><p>科学家已经得出结论: 地球上的温度将会越来越高</p><p><code>The scientists have come to a conclusion that the temperature on the earth will(has) become higher and higher.</code></p><blockquote><h4 id="这里需要注意-不用-came-因为前面的-have-表示已经完成-一般都是-have-done-使用过去分词-have-后面的动词一般都是过去分词-而-come-的过去式-是-came-过去分词是-come-和原型一样"><a href="#这里需要注意-不用-came-因为前面的-have-表示已经完成-一般都是-have-done-使用过去分词-have-后面的动词一般都是过去分词-而-come-的过去式-是-came-过去分词是-come-和原型一样" class="headerlink" title="这里需要注意, 不用 came , 因为前面的 have 表示已经完成, 一般都是 have done 使用过去分词, have 后面的动词一般都是过去分词, 而 come 的过去式 是 came  过去分词是 come , 和原型一样"></a>这里需要注意, 不用 <code>came</code> , 因为前面的 <code>have</code> 表示已经完成, 一般都是 <code>have done</code> 使用过去分词, <code>have</code> 后面的动词一般都是过去分词, 而 <code>come</code> 的过去式 是 <code>came</code>  过去分词是 <code>come</code> , 和原型一样</h4></blockquote><p>穿自己的鞋不仅方便, 而且确保了一点, 不用去管别人的感受</p><p><code>Wearing my own shoes is not only convenient but also ensures a point that feelings of others can be ignored.</code></p><blockquote><p><strong><code>同位语从句连接词只能是that?</code></strong></p></blockquote><h4 id="如何区分同位语从句和定语从句"><a href="#如何区分同位语从句和定语从句" class="headerlink" title="如何区分同位语从句和定语从句?"></a>如何区分同位语从句和定语从句?</h4><ol><li><p>判断修饰的名词是不是抽象名词</p></li><li><p><strong>判断连接词删除后是否还是完整的句子</strong></p><blockquote><p>一般定语从句使用 that 修饰的话, 他会在从句中充当成分</p></blockquote></li></ol><blockquote><p>同位语从句通常使用 <code>that</code> 做连接词, 此时如果是定语从句的 <code>that</code> 一般都会指向一个人或者物, 做从句的主语或者宾语成分, 删除掉 <code>that</code> 对于同位语来说从句一般不会有任何问题, 但是如果是定语从句的<code>that</code>被删除, 从句就会缺少分成</p></blockquote><h2 id="如何断定一个从句已经结束-（多个谓语找主干）"><a href="#如何断定一个从句已经结束-（多个谓语找主干）" class="headerlink" title="如何断定一个从句已经结束?（多个谓语找主干）"></a>如何断定一个从句已经结束?（多个谓语找主干）</h2><blockquote><p>任何句子, 不论是从句还是主干, 都会有一个属于自己的谓语, 而从句的开始一般是连接词, 但如果是宾语从句连接词 <code>that</code> 可能被省略了, 而一个句子的谓语是句子的核心, 一般情况下, 都是主谓宾结构, 所以我们要判断从句的开头和起始位置其实很简单</p><p>我们可以根据两个谓语之间的位置判断出具体哪些是主干, 哪些是从句</p><ol><li><p>如果从句介于<code>主语</code>和<code>谓语</code>之间</p><p>比如: <code>主 连接词主谓宾 谓宾</code>或者<code>主连接词主系表谓宾</code>  我们都能<strong>找到介于两个谓语之间的部分, 一般都是从句的部分</strong></p></li><li><p>如果从句在主干谓语之后</p><p>比如做宾语的情况 <code>主谓(连接词)主谓宾</code>, 这种情况可能省略了连接词, 但我们还是能够找到两个谓语</p><p>如果是<code>主谓宾 连接词 主谓宾</code>这种情况, 就能找到连接词</p></li><li><p>如果从句作为主语的话</p><p>从句作为主语<code>连接词 主语 + 谓语 + 宾语 + 谓语 + 宾语</code> 这种情况更加好识别了</p></li></ol></blockquote><blockquote><p><strong>总结: 主要看连词，有连词的不是主干。没连词看俩谓语，一般都是前一个谓语是主干，俩谓语之间的部分要么是从句的主语，要么是从句的宾语（表语），反正都不是主干的主谓</strong></p></blockquote><h2 id="名词性从句总结"><a href="#名词性从句总结" class="headerlink" title="名词性从句总结"></a>名词性从句总结</h2><blockquote><p><strong><code>名词性从句就是主干缺少成分需要从句做成分的一系列句子</code></strong></p></blockquote><blockquote><p>名词性从句的连接词通常根据从句的类型做选择</p><ul><li>陈述句 &#x3D;&#x3D;&gt; <code>[that] + [陈述句]</code></li><li>一般疑问句 &#x3D;&#x3D;&gt; <code>[if/whether 如果是 宾语从句可用 if , 结尾右 or not 不能用 if] + [改成陈述句]</code></li><li>特殊疑问句 &#x3D;&#x3D;&gt; <code>[特殊疑问词(疑问句的疑问词)] + [改成陈述句]</code></li></ul></blockquote><h3 id="满分句型"><a href="#满分句型" class="headerlink" title="满分句型"></a>满分句型</h3><ul><li><p>it 做形式主语的主语从句</p></li><li><p>同位语从句</p></li></ul><h3 id="如何识别主语从句"><a href="#如何识别主语从句" class="headerlink" title="如何识别主语从句?"></a>如何识别主语从句?</h3><blockquote><p>连接词 + 从句 + 谓语 + 其他成分 连接词在第一个位置 &#x3D;&#x3D;&gt; 主语从句</p></blockquote><blockquote><p>it … that …  &#x3D;&#x3D;&gt; 主语从句</p></blockquote><h3 id="如何识别宾语从句"><a href="#如何识别宾语从句" class="headerlink" title="如何识别宾语从句?"></a>如何识别宾语从句?</h3><blockquote><p>实义动词 + 连接词 + 句子 &#x3D;&#x3D;&gt; 宾语从句(但也可能是状语从句)</p></blockquote><h3 id="如何识别表语从句"><a href="#如何识别表语从句" class="headerlink" title="如何识别表语从句?"></a>如何识别表语从句?</h3><blockquote><p>系动词 + 连接词 + 句子 &#x3D;&#x3D;&gt; 表语从句</p></blockquote><h3 id="如何识别同位语从句"><a href="#如何识别同位语从句" class="headerlink" title="如何识别同位语从句?"></a>如何识别同位语从句?</h3><ol><li><p>修饰的先行词是不是抽象名词</p><blockquote><p>如果是抽象名词, 一般认为是同位语从句</p></blockquote></li><li><p>判断连接词是否做从句成分</p><blockquote><p>一般定语从句的<code>that</code>连接词做从句的成分, 而同位语的连接词不做成分</p></blockquote></li><li><p>同位语从句一般是解释, 而定语从句一般是修饰</p><blockquote><p>一个是同级, 另一个是限定</p></blockquote></li></ol><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><p>成功属于全力以赴的人已为无数个事实所证明。(主语从句)</p><p>问题的关键是谁应该为道德的沦丧负责。(表语从句)</p><p>经过很多天的思考,我得出一个结论,成功是一件相关的事情,因为它会给你带来很多的亲戚。 (同位语从句)</p><p>因此，根据我的分析,我强烈反对那些认为老师应该为学生的学习负全责的看法。 (同位语从句)</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 名词性从句 </tag>
            
            <tag> 成分 </tag>
            
            <tag> 主语从句 </tag>
            
            <tag> 宾语从句 </tag>
            
            <tag> 介宾结构 </tag>
            
            <tag> 主谓双宾结构 </tag>
            
            <tag> it形式宾语 </tag>
            
            <tag> 表语从句 </tag>
            
            <tag> 同位语从句 </tag>
            
            <tag> 连词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02并列句</title>
      <link href="/2022/11/25/06%E8%8B%B1%E8%AF%AD/02%E5%B9%B6%E5%88%97%E5%8F%A5/"/>
      <url>/2022/11/25/06%E8%8B%B1%E8%AF%AD/02%E5%B9%B6%E5%88%97%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="找出长难句主干的三个步骤"><a href="#找出长难句主干的三个步骤" class="headerlink" title="找出长难句主干的三个步骤"></a>找出长难句主干的三个步骤</h1><ol><li>看标点符号</li><li>看动词</li><li>看引导词</li></ol><h2 id="看标点符号"><a href="#看标点符号" class="headerlink" title="看标点符号"></a>看标点符号</h2><h3 id="看逗号"><a href="#看逗号" class="headerlink" title="看逗号"></a>看逗号</h3><p>判断都在前面和逗号后面的部分, 看看, 介词, 从句和非谓语动词在前面还是后面, 如果在前面主干就在后面, 如果在后面, 主干就在前面</p><p><code>_介词等_, _主干_</code></p><p><code>_主干_, _介词等_</code></p><h3 id="看分号"><a href="#看分号" class="headerlink" title="看分号"></a>看分号</h3><p>分号前后相当于一个并列连词 <code>and but or</code> 这种</p><p><code>_主干_;_并列句_</code> 主干在前面, 分号后面暂时不看</p><blockquote><p>连词之后的部分都是并列句</p></blockquote><h3 id="冒号"><a href="#冒号" class="headerlink" title="冒号"></a>冒号</h3><p>补充说明的作用, 类似于同位语</p><p><code>_主干_:_同位语_</code></p><h3 id="破折号"><a href="#破折号" class="headerlink" title="破折号"></a>破折号</h3><p>类似同位语</p><h3 id="两个逗号之间"><a href="#两个逗号之间" class="headerlink" title="两个逗号之间"></a>两个逗号之间</h3><p>可能是插入语</p><p><code>N,_插入语_,V</code></p><h1 id="主干公式"><a href="#主干公式" class="headerlink" title="主干公式"></a>主干公式</h1><blockquote><p><strong>连词(连词&#x2F;关系词&#x2F;引导词) : 谓语动词 &#x3D; n - 1 : n</strong></p><p>也就是说连词总比动词少一个</p></blockquote><blockquote><p>需要注意省略的情况</p><ul><li>宾语从句 that 省略</li><li>定语从句 that 做宾语的时候, 省略</li></ul></blockquote><blockquote><p>所以有的时候找不到主干的谓语, 可以试着找找连词</p></blockquote><h1 id="汉化过程"><a href="#汉化过程" class="headerlink" title="汉化过程"></a>汉化过程</h1><h2 id="语意和语境"><a href="#语意和语境" class="headerlink" title="语意和语境"></a>语意和语境</h2><ul><li><p>语境比单词的大体意思重要, 如果翻译不顺利, 则可以在汉语中找到同义词或者更宽泛的同义词</p></li><li><p>如果句子翻译出来后, 发现句子不通顺, 我们可以增加词语</p></li><li><p>还有减词, 按照完整性判断增词, 还是减词</p></li></ul><h3 id="语序"><a href="#语序" class="headerlink" title="语序"></a>语序</h3><ol><li><p>主谓宾语序不变, 但修饰成分语序中英文存在差别</p></li><li><p>英语中修饰整个句子的状语可能放在前面也可能放在后面, 但汉语只能放在最前面</p></li><li><p>汉语中的定语只能放在修饰词的前面, 英语中可能放在前面也可能放在后面</p></li><li><p>英语中修饰谓语的状语简单的放在谓语前面, 复杂的放在谓语后面, 汉语中只能放在谓语前面</p></li><li><p>英语中修饰宾语的定语可以放在前面(简单的), 复杂的放在宾语后面, 而汉语只能放在宾语前面</p></li></ol><blockquote><p>注意并列处, 顺序不变</p></blockquote><blockquote><p>英语和汉语的基本语序一致, 英汉的修饰成分放置的位置可能不一样, 如果成分比较简单, 则可能是**<code>倒叙</code>**</p></blockquote><blockquote><p>但修饰成分的倒叙也不是时常都是这么回事的, 还有一部分比较复杂的需要另外翻译, 这种复杂程度一般使用 <code>6 8 原则</code>, 如果修饰成分单词在<code>6个以内</code>, 则一般都是<code>倒叙</code>, 如果修饰成分的单词在<code>8个以上</code>, 一般不需要倒叙, 要另外翻译, 如果修饰成分的单词数量在<code>6-8个</code>之间, 则需要根据语意和语境自行判断是否倒叙</p></blockquote><p><code>We will hew out of the mountain of despair a stone of hope</code></p><ul><li>谓语 <code>will hew</code></li><li><code>out of the mountain</code> 倒序看前面, 修饰 <code>will hew</code> 状语</li><li><code>of despair</code> 倒叙看前面, 修饰的 <code>mountain</code> 名词, 定语</li><li><code>of hope</code> 倒叙看前面, 修饰的 <code>a stone</code>名词, 定语</li></ul><blockquote><p>在汉语中所有修饰成分都放在前面, 主干和英语一致</p></blockquote><p>翻译成: 我们从绝望的山上劈下希望的石头</p><h3 id="并列处顺序不变是怎么回事"><a href="#并列处顺序不变是怎么回事" class="headerlink" title="并列处顺序不变是怎么回事?"></a>并列处顺序不变是怎么回事?</h3><p><code>N of a and b of c</code></p><p>需要注意, <code>N</code> 是主体, <code>a</code> 和 <code>b</code> 修饰着 <code>N</code> , 但 <code>c</code> 同时修饰着 <code>a</code> 和 <code>b</code></p><p>他的修饰是  <code>c</code> 修饰 <code>a</code> 修饰 <code>N</code> , 然后才是 <code>c</code> 修饰 <code>b</code> 修饰 <code>N</code></p><p>按照上面的修饰方法, 我们得出 <code>c a N and c b N</code></p><p>设 <code>a and b</code> 为 <code>y</code>, 设 <code>c</code> 为 <code>x</code></p><p>那么可以得出 <code>N of x of y</code></p><p>拆解开就是 <code>c (a and b) N</code></p><p>分配下, 就变成  <code>(ca and cb) N</code></p><p>再拆开不就是 <code>caN and cbN</code> 了么?</p><p><code>Of all the changes that have taken place in English-language newspapers during the past quarter-century, perhaps the most far-reaching has been the inexorable decline in the scope and seriousness of their arts coverage.</code></p><p>我们来分析上面这段话,</p><p>Of all the changes(介词短语做状语, 没找到修饰的名词只能做状语) that have taken place(定语从句修饰先行词 changes) in English-language newspapers(做状语) during the past quarter-century(做状语, 表示时间), perhaps(副词, 也许) the most far-reaching(主语) has been(谓语) the inexorable decline(表语) in the scope and seriousness(介词修饰名词做定语) of their arts coverage(修饰前面的 a and b, 翻译成 <code>caN</code>和<code>cbN</code>其实如果翻译的通顺也可以是 <code>c a and b N</code>).</p><p>在过去的25年之中, 英语报纸所发生(带来变发生)的所有改变之中也许影响意义最深远的地方是在艺术报道范围上和严肃性上不断的减弱</p><p><code>In his book The Tipping Point, Malcolm Gladwell argues that social epidemics are driven in large part by the acting of a tiny minority of special individuals, often called influentials, who are unusually informed, persuasive, or well-connected.</code></p><ol><li><code>in his book</code> 状语, <code>the T P</code> 对于前面来说是同位语, 整体上看<code>in his book The Tipping Point</code>都是状语</li><li><code>Malcolm Gladwell</code> 主语</li><li><code>argues </code>谓语</li><li><code>that social epidemics are driven ...</code> 宾语从句(名词性从句)</li><li><code>, often called influentials,</code>在两个逗号之间, 可能是<code>插入语</code>, 判断下<code>called</code>, 在前面加上<code>be</code>动词, 表示 被动语态 看看整体意思是否还是一样, “often is called influentials, 经常被认为有影响力”, 意思和没加<code>be</code>动词之前一模一样, 所以这里是<code>过去分词, 表被动</code>, 基本判断是插入语, 遮住不看不影响整句的翻译</li><li><code>who are unusually informed ...</code>定语从句</li></ol><p>在他的书, MG 认为社会流行潮流很大部分取决于小部分特殊个体, 哪些有影响力的人, 他们非常的有学识, 能使人信服, 有很好的出生</p><p>At the end of adolescence, however, the brain shuts down half of that capacity, preserving only those modes of thought that have seemed most valuable during the first decade or so of life.</p><ol><li>at the end of adolescence 状语 翻译成在 青春期末期</li><li>however 状语 翻译成 然而</li><li>shut down 谓语, 那么在谓语前面的就是 主语  the brain 翻译成 大脑, 后面的就是 宾语 half , 再后面的 of that capacity 做后置定语 half of that capacity 翻译成 一半的能力, 整体翻译成 “大脑关闭了一半的能力”</li><li>preserving 是动名词做定语, 翻译成 保存,  only 做状语修饰 保存, 翻译成 仅仅保存</li><li>modes of thought 翻译成 思维模式</li><li>that 做动名词引导定语的后置定语, 先行词是 thought , that 做关系词, 在定语从句中做 主语</li><li>have seemed 是 定语从句的 谓语 现在完成式, 翻译成 “似乎” 主系表结构</li><li>most valuable 做表语, 表示 “最有价值”</li><li>during the first decade or so of life 介词引导的做时间状语从句, 翻译成在 “在生命最初的十年左右”</li><li>整体翻译成”然而, 在青春期末期, 大脑关闭了一半的能力, 仅仅只保留了一种思维模式, 这种思维模式在生命最初的十年左右是最有价值的”</li><li>发现不通顺, 中国人未必看的懂, 所以整理整理 “然而, 在青春期末期, 大脑关闭了一半的能力, 仅仅只保留了一种大约在生命最初的十年非常有价值的思维模式”</li></ol><p>Progress in both area is undoubtedly(无疑) necessary for the social(社会), political(政治) and intellectual(智慧, 但 文化 更符合, 只不过没有这个意思罢了) development of these and all other societies(社会); however, the conventional(常规的) view that education should be one of the very highest priorities for promoting rapid economic development in poor countries is wrong.</p><ol><li>找到连词 <code>;</code>, 句子分为两个部分</li><li>前一句的谓语是, <code>is</code>, 整句是一个 主系表 结构, 表语是 necessary</li><li>所以主语是 Progress , 主语的定语是 in both area , 表示 “在这两个领域的进度”</li><li>主干翻译成 “进度是必须的”</li><li><code>for the social, political and intellectual development</code> 对于社会, 政治和文化的发展</li><li><code>of these and all other societies</code> 这些和其他所有社会的, 简称 全社会的</li><li>前面一句整体翻译成 “对于社会, 政治和文化在全社会的发展在两个领域的进展无疑是必须的”</li><li>后面一句的谓语是 <code>is</code> , 所以整句是 主系表 结构, 主语是 <code>the conventional(常规的 adj) view</code> 翻译成常规的观点, 表语是 <code>wrong</code> 错误的, 整句 “观点是错误的”</li><li>现在翻译修饰成分, <code>that education should be one of the very highest priorities for promoting rapid economic development in poor countries</code>是从句</li><li>但是我们 需要判断是 主语从句(但主语已经是<code>view</code>了)还是定语从句(但定语从句的 <code>that</code> 一般修饰主语或者宾语这种成分, 但是在从句中并不缺少), 还是同位语从句( <code>that</code> 不做任何成分, 明显是同位语从句)</li><li>同位语从句的 谓语是 <code>should be</code> 所以前面的主语是 <code>education</code> 教育, 表语是 <code>one</code></li><li><code>of the very highest priorities</code> 定语, 翻译成”最高优先级的”</li><li><code>for promoting rapid economic development</code> 做状语, 翻译成”对于促进快速的经济发展”</li><li><code>in poor countries</code> 可以是 定语 翻译成 “对于困难国家促进快速经济发展”, 可以做成状语 “对于在困难国家促进快速的经济发展”</li><li>后面一整句可以翻译成 “然而, 教育”</li></ol><p>翻译：对于这些国家和所有其他的社会、政治以及知识发展，这两方面的进步毫无疑问是必要的;但是，教育应该是促进贫穷国家经济迅速发展的最优先考虑的事情之一，这样的传统观点是错误的。</p><p>however, the conventional view that education should be one of the very highest priorities for promoting rapid economic development in poor countries is wrong.</p><p>然而，认为教育应该是促进贫穷国家经济快速发展的最优先事项之一的传统观点是错误的。</p><blockquote><p>that education should be one of the very highest priorities for promoting rapid economic development in poor countries</p><p>是同位语</p><p>从</p><ul><li>that 不做从句的成分</li><li>view 是抽象名词</li></ul><p>判断出来是同位语从句</p></blockquote><p>It is difficult to the point of impossibility for the average reader under the age of forty to imagine a time when high-quality arts criticism could be found in most big-city newspapers. </p><p><code>criticism [&#39;kritisizam] n.批评，评论</code><br><code>critic [&#39;kritik] n.评论家， 批评家</code></p><h4 id="it-引导的主语从句"><a href="#it-引导的主语从句" class="headerlink" title="it 引导的主语从句"></a>it 引导的主语从句</h4><p><code>to do sth</code> 或者 <code>主语从句</code></p><h4 id="当关系副词引导定语从句与状语从句的区别"><a href="#当关系副词引导定语从句与状语从句的区别" class="headerlink" title="当关系副词引导定语从句与状语从句的区别"></a>当关系副词引导定语从句与状语从句的区别</h4><p>关系副词往前看, 如果匹配的名词与关系副词匹配(近义词), 一般都是定语从句</p><blockquote><p>when &#x3D;&gt; time&#x2F;age …</p><p>where &#x3D;&gt; place&#x2F;city …</p><p>why &#x3D;&gt; reason&#x2F;cause …</p></blockquote><p>It is difficult(困难的) to the point(观点) of impossibility(不可能的) for the average reader under the age of forty to imagine a time when high-quality arts criticism could be found in most big-city newspapers. </p><p>翻译: </p><p>主语是 <code>is</code> , 主系表结构 <code>it</code> 做形式主语, <code>difficult</code> 做表语</p><p><code>it</code> 后面有两种可能</p><ul><li><code>to do sth</code></li><li>主语从句</li></ul><blockquote><p>可以确定的是后面一定有一个动词</p></blockquote><p>找到形式主语实际指向的部分是<code>to imagine a time</code> 想象一个时代是很难的</p><p>It is difficult to the point of impossibility for the average reader under the age of forty to imagine a time when high-quality arts criticism could be found in most big-city newspapers. </p><p><code>to the point of</code> 到…地步</p><p>It(形式主语) is(谓语) difficult(表语, 困难的) to the point of impossibility(到不可能的地步) for the average reader(状语) under the age(定语) of forty(定语) to imagine a time(时期) when high-quality(高质量) arts(艺术) criticism(意见) could be found in most big-city newspapers. </p><p>it既然是形式主语, 直接把真正的主语拿出来</p><p>所以变成 imagine a time is diffcult, 想象一个时代非常困难</p><p>对于40岁以下的普通读者来说, 很难想象一个时代, 这个时代你可以在大城市的报纸里找到各种高质量的评论</p><p>The growth of specialization in the nineteenth century, with its consequent requirement of a longer, more complex training, implied greater problem for amateur participation in science.</p><p>19世纪专业的发展, 随之带来长时间的和更复杂的培训需求, 这暗示了给进入科学界的业余爱好者很大的困难</p><h1 id="★并列句"><a href="#★并列句" class="headerlink" title="★并列句"></a>★并列句</h1><h2 id="★什么是并列句"><a href="#★什么是并列句" class="headerlink" title="★什么是并列句?"></a>★什么是并列句?</h2><h3 id="★用连词连接两个或两个以上的句子"><a href="#★用连词连接两个或两个以上的句子" class="headerlink" title="★用连词连接两个或两个以上的句子"></a>★<code>用连词连接两个或两个以上的句子</code></h3><h2 id="★常见的并列连词"><a href="#★常见的并列连词" class="headerlink" title="★常见的并列连词"></a>★常见的并列连词</h2><ul><li>★平行关系</li></ul><p><code>and, not only...but also, both...and..., either ... or ... , neither ... nor ...</code></p><ul><li>★转折</li></ul><p><code>but, while, yet, whereas</code></p><ul><li>★选择</li></ul><p><code>or, whether ... or ...</code></p><ul><li>★因果关系</li></ul><p><code>for, so</code></p><ul><li>递进</li></ul><p>递进没有连词, 只有副词或者介词短语, 比如: <code>then</code>, 他是一个副词</p><p>as well as… 以及…</p><p>rather than… 而非…</p><p>We as well as John like it. 我和John一样喜欢它</p><p>He is happy rather than sad. 他很开心, 而不是伤心</p><p>He is interested in music rather than in paining. 他对音乐有兴趣, 而不是画画</p><p>He as well as I is interested in music.</p><p>He no less than I is interested in music.</p><p>He together with me is interested in music.</p><p>He along with me is interested in music.</p><p>他和我都对音乐有兴趣.</p><p>其中 as well as 和 no less than 这些都是 连词 而 together with 和 along with 则为介词, 介词一般和名词在一起被称之为 介宾 , 所以代词 I 变成 me.</p><p>He rather than I is interested in music.</p><p>He, instead of me, is interested in music.</p><p>He, not I, is interested in music.</p><h3 id="逻辑关系词还可以是副词"><a href="#逻辑关系词还可以是副词" class="headerlink" title="逻辑关系词还可以是副词"></a>逻辑关系词还可以是副词</h3><ul><li>★平行</li></ul><p>副词(<code>adv</code>): <code>similarly, equally, likewise, simultaneously</code></p><p>介词短语(<code>prep</code>): <code>at the same time, in the meanwhile</code></p><ul><li>★转折</li></ul><p>副词(<code>adv</code>): <code>however, nevertheless, nonetheless, conversely, contrarily, unfortunately, unexpectedly</code></p><p>介词短语(<code>prep</code>): <code>on the contrary, in/by contrast</code></p><ul><li>★选择</li></ul><p><code>alternatively</code></p><ul><li>★因果</li></ul><p>副词: <code>therefore, thus, consequently</code></p><p>介词短语: <code>as a result, as a consequence</code></p><ul><li>★递进</li></ul><p>副词: <code>besides, additionally, subsequently</code></p><p>介词短语: <code>in addition</code></p><blockquote><p>★ <strong><code>连词前面有无逗号都可以, 而其他的逻辑关系词前面要么用句号 断成两个句子, 要么加 连词 and, 并且 and 没有意思</code></strong></p></blockquote><p>例子:</p><p>有朋自远方来, 不亦乐乎</p><p><code>The friends come from afar so it is a joy for me.</code></p><p><code>▲The friends coming form afar it is a joy for me.</code></p><blockquote><p>连词连接的是两个句子, 但独立主格的句子只能有一句话, 所以标记▲的那句话不能有连词</p></blockquote><p>都说我如水百变, 可知我清澈不变.</p><p><code>I am said like water changeable, but my clarify remains the same.</code></p><p><code>I am said like water changeable, and on the contrary, my clarify remains the same.</code></p><p>很多人都想不劳而获, 也许他们忽略了没有牺牲就没有好的结果</p><p><code>a sea of people desire to achieve what they want without any work, whereas they may just ignore that nothing good comes without sacrifice.</code></p><h2 id="并列句的引用"><a href="#并列句的引用" class="headerlink" title="并列句的引用"></a>并列句的引用</h2><h3 id="★写作"><a href="#★写作" class="headerlink" title="★写作"></a>★写作</h3><p>写作的时候只要上下文之间有逻辑关系, 就一定要用逻辑关系词, 因为什么逻辑关系词, 就没有逻辑</p><p>枯藤老树昏鸦, 小桥流水人家, 古道西风瘦马, 夕阳西下, 断肠人在天涯</p><p><code>★There, in the distance(状语做插入语), are withered vines around an old tree, and a crowd of crows are sitting on it at dusk.</code></p><p><code>not far from it, there exists a small bridge with running water under it near a cottage.</code></p><p><code>Besides, A lean horse is walking on an ancient path in the west wind.</code></p><p><code>At the moment when the sun is setting, a heartbroken man is far from home.</code></p><p>养宠物的缺点是什么?</p><ul><li><code>Pets can be injurious to their neighbors or strangers.</code></li><li><code>Pets usually make our home environment rather nasty.</code></li></ul><p>连接在一起</p><p><code>★Pets can not only be injurious to their neighbors or strangers but also usually make our home environment rather nasty.</code></p><p>★既然正版光盘对于大学生很容易得到, 那为什么我们还要支持正版呢?</p><p><code>★Pirated discs are easy to be available for university students, and therefore why do we support the genuine ones?</code></p><h2 id="★并列省略"><a href="#★并列省略" class="headerlink" title="★并列省略"></a>★并列省略</h2><h3 id="★并列句的省略原则"><a href="#★并列句的省略原则" class="headerlink" title="★并列句的省略原则"></a>★并列句的省略原则</h3><ul><li><p>★词性对称: 并列连词前后的词性, 单复数, 时态和语态要一致</p><p><code>the little boy found a thief and he called the police at once.</code></p></li><li><p>★可以省略的成分</p><ul><li>★省略主谓 <code>he is not only a nice teacher in class but also (he is) nice friends to his students in private</code></li><li>★省略be动词 <code>Failing hips can be replaced, clinical depression controlled, and cataracts removed in a 30-minute surgical procedure</code></li><li>★省略主语 <code>He is rice, but (He) leads a modest life</code></li><li>★省略重复的成分: <code>Do you still remember all those years when scientists argued that smoking would kill us but the doubters insisted that we did not know (smoking would kill us) for sure.</code></li></ul></li></ul><h3 id="★如何查找省略的内容"><a href="#★如何查找省略的内容" class="headerlink" title="★如何查找省略的内容?"></a>★如何查找省略的内容?</h3><ol><li><h4 id="★一句话只要有省略-就一定会省略在连词后-而不是在连词前-所以连词后面有的成分-连词前面可能会有-也可能不全-所以连词前面有-连词后面没有的部分便是省略的内容"><a href="#★一句话只要有省略-就一定会省略在连词后-而不是在连词前-所以连词后面有的成分-连词前面可能会有-也可能不全-所以连词前面有-连词后面没有的部分便是省略的内容" class="headerlink" title="★一句话只要有省略, 就一定会省略在连词后, 而不是在连词前, 所以连词后面有的成分, 连词前面可能会有(也可能不全), 所以连词前面有, 连词后面没有的部分便是省略的内容"></a>★一句话只要有省略, 就一定会省略在连词后, 而不是在连词前, 所以连词后面有的成分, 连词前面可能会有(也可能不全), 所以连词前面有, 连词后面没有的部分便是省略的内容</h4></li></ol><p><code>I was beaten and you (was beaten) too</code> </p><h4 id="★判断是否省略的方法"><a href="#★判断是否省略的方法" class="headerlink" title="★判断是否省略的方法:"></a>★判断是否省略的方法:</h4><blockquote><p>★<strong>直接翻译, 如果翻译出来存在问题则表示可能省略了某些成分, 需要拿着连词后面的成分去连词前面找对应顺序的成分, 就能知道少了什么成分</strong></p></blockquote><blockquote><h3 id="★-注意-连词后面句子的部分成分-连词前面可能没有-但至少会有一个能够在前句找到-但连词前面比连词后面多的成分绝对是连词后面句子缺少的成分"><a href="#★-注意-连词后面句子的部分成分-连词前面可能没有-但至少会有一个能够在前句找到-但连词前面比连词后面多的成分绝对是连词后面句子缺少的成分" class="headerlink" title="★**注意: 连词后面句子的部分成分, 连词前面可能没有(但至少会有一个能够在前句找到), 但连词前面比连词后面多的成分绝对是连词后面句子缺少的成分**"></a>★**<code>注意: 连词后面句子的部分成分, 连词前面可能没有(但至少会有一个能够在前句找到), 但连词前面比连词后面多的成分绝对是连词后面句子缺少的成分</code>**</h3></blockquote><h4 id="★Until-these-issue-are-resolved-a-technology-of-behavior-will-continue-to-be-rejected-and-with-it-possibly-the-only-way-to-solve-our-problem"><a href="#★Until-these-issue-are-resolved-a-technology-of-behavior-will-continue-to-be-rejected-and-with-it-possibly-the-only-way-to-solve-our-problem" class="headerlink" title="★Until these issue are resolved, a technology of behavior will continue to be rejected, and with it possibly the only way to solve our problem."></a>★<code>Until these issue are resolved, a technology of behavior will continue to be rejected, and with it possibly the only way to solve our problem.</code></h4><ol><li><p>找到谓语</p><p><code>are</code> 不是, 因为有 <code>until</code> , <code>will continue</code> 是<code>谓语</code>, 这是一个以<code>a technology of behavior</code>为<code>主语</code>, 以 <code>will continue</code>为<code>谓语</code>的, <code>to be rejected</code>为<code>宾语</code>的<code>主谓宾结构</code></p></li><li><p>找连词</p><p>and </p></li><li><p>翻译下句子是否通顺</p><p>“直到这个问题被解决之前, 行为技术将会继续被拒绝, 并且和它一起可能是唯一能够解决我们问题的方式”</p><p>明显句子好像少了什么, 翻译不通顺</p></li><li><p>找到连词后面的成分</p><p>with it 介词, possibly 状语, the only way 名词, to solve our problem 定语</p><p><code>[介词 + 状语 + 名词 + 定语]</code></p></li><li><p>在连接前面的句子中一定能找到相同的</p><p><code>a technology</code> 名词, <code>of behavior</code>定语, <code>will continue</code>谓语, <code>to be rejected</code>宾语</p><p><code>[名词 + 定语 + 谓语 + 宾语]</code></p></li><li><p>★两相比较</p><p><code>[名词 + 定语 + 谓语 + 宾语]</code></p><p><code>[介词 + 状语 + 名词 + 定语]</code></p><p>明显能够找到的是 <code>[名词 + 定语]</code> 部分, 所以前面多出来的部分是  <code>[谓语 + 定语]</code> 对应的句子是<code>will continue to be rejected</code></p><p>把它加到连词之后句子的相应位置 <code>[介词 + 状语 + 名词 + 定语]</code> + <code>will continue to be rejected</code></p><p>前面该句子是在<code>定语</code>之后, 后面连词也是要放在<code>定语</code>之后</p></li><li><p>翻译</p><p>“直到这个问题被解决之前, 行为技术将会继续被拒绝, 并且和它一起可能是唯一能够解决我们问题的方式也将会继续被拒绝”</p></li></ol><h1 id="★代词指代什么"><a href="#★代词指代什么" class="headerlink" title="★代词指代什么?"></a>★代词指代什么?</h1><blockquote><h3 id="★代词指代的判断方法-就近原则和一致原则"><a href="#★代词指代的判断方法-就近原则和一致原则" class="headerlink" title="★代词指代的判断方法: 就近原则和一致原则"></a>★<code>代词指代的判断方法: 就近原则和一致原则</code></h3><p><code>就近原则就是跟谁近就是谁</code></p><p><code>一致原则就是语法上的一致和意思上的一致(比如: it 是物, 不能指代人)</code></p><p><strong><code>主要用于长难句判断代词指向的是前面的那个成分</code></strong></p></blockquote><h2 id="★长难句分析"><a href="#★长难句分析" class="headerlink" title="★长难句分析"></a>★长难句分析</h2><h3 id="★分析长难句的方法"><a href="#★分析长难句的方法" class="headerlink" title="★分析长难句的方法"></a>★分析长难句的方法</h3><ol><li>★找谓语</li><li>★找连词</li><li>★找定语</li><li>★找状语</li></ol><blockquote><p>★当连词在连接两个单词的时候, 这个连词就当作没看到</p></blockquote><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>The <code>atoi()</code> function converts the initial portion of the string pointed to by <code>nptr</code> to int. The behavior is the same as <code>strtol(nptr, NULL, 10);</code> except(介词) that <code>atoi()</code> does not detect errors</p><blockquote><p>随便找到句子分析分析</p></blockquote><ol><li>找谓语 converts, 主干翻译是 “atoi 函数转化头部”</li><li><code>of the string pointed</code>定语, 当时发现一个问题 <code>pointed</code> 加了 <code>ed</code> 变成动词的用法, 过去分词表示过去或者完成, 这里有个短语是<code>point to</code> </li><li>所以上面的分段不算应该是<code>of the string pointed to by nptr</code> 这里显而易见 <code>pointed to</code> 是谓语表示被动, 主语是 <code>the string</code> <code>by nptr</code> 翻译成被谁, 一般被动语句都有用到 <code>by</code></li><li>这里翻译成 “被nptr指向的字符串的开始的部位”, 翻译成非被动形式 “nptr所指向的字符串前面部分”</li><li>前面一句话的翻译是”atoi函数转换了 nptr 所指向的字符串前面部分”</li><li>后面部分 “The behavior is the same as <code>strtol(nptr, NULL, 10);</code> except that <code>atoi()</code> does not detect errors”</li><li>有一个连词 that , 所以有两个动词, 其中一个谓语</li><li>前面的动词 is 是谓语, 表示 行为和strtol一致, 只是atoi不会报错</li></ol><p>★Under modern conditions, this requires varying measures of centralized control and hence the help of specialized scientists such as economists and operational research experts.</p><ol><li>找谓语 找到是 <code>requires</code> 需要的意思, 是谓语, <code>varying</code> 不是动词, <code>the help</code>前面有个 <code>the</code> 不是动词, <code>specialized </code>前面有个 <code>of</code> 所以也不是动词, 初步判断这句话没有从句</li><li>找连词, 发现有两个<code>and</code>, 但是后面一个连接的是两个名词, 直接忽略, 所以只有前面的那个<code>and</code></li><li>判断<code>and</code> 连词连接的并列句是否有成分缺失?</li></ol><p>回到原文中看看, <code>and hence the help of specialized scientists</code></p><p><code>the help</code> 名词, <code>of specialized scientists</code>定语, 这句话明显少了<code>主语</code>和<code>谓语</code></p><p>大体格式估计是<code>主语 + 谓语 + 名词(宾语) + 定语</code>往前面找找, 有没有类似的结构</p><p>明显是 <code>this requires varying measures of centralized control</code> 所以连词后面的句子少了 <code>this requires</code></p><p>主动给他加上去看看</p><p><code>and hence this requres the help of specialized scientists</code> 翻译成 “因此, 这需要专家的帮助”</p><p>带入到整句中翻译看看</p><p>在现代条件下, 这需要多种集中控制的措施, <code>因此, 这需要专家的帮助</code>, 比如经济学家和运筹专家</p><p>这里的 <code>这</code>省略掉句子更加顺畅, 那就省略掉吧</p><p><strong>在现代条件下, 这需要多种集中控制的措施, <code>因此, 需要专家的帮助</code>, 比如经济学家和运筹专家</strong></p><blockquote><p><strong><code>★判断连词后面的句子缺少什么成分, 去连词前面找, 正常找谓语就行了, 找到之后再翻译</code></strong></p><p><strong><code>★当然如果上面这种方法不适用了, 还可以直接把意思翻译出来, 看看意思是否通畅, 再来找缺少了什么</code></strong></p></blockquote><p>★<code>The data suggest, for example, that physically attractive individuals are more likely to be treated well by their parents, sought out as friends, and pursued romantically.</code></p><ol><li><p>找谓语</p><p><code>suggest</code>是谓语, 后面的 <code>are</code> 前面有 <code>that</code>, <code>to be treated</code>是不定式, <code>sought out</code> 和 <code>pursued</code> 是<strong>过去分词</strong></p></li></ol><blockquote><p>★**<code>看到动词的过去形式, 需要注意, 1. 它可能是谓语; 2. 它是过去分词, 不是谓语</code>**</p><p><strong><code>还记得动词变成不是动词的方法么? 1. to do 不定式, 表目的; 2. do + ing 动名词, 表主动; 3. done(or + ed) 过去分词, 表被动</code></strong></p><p>比如: <code>I bought a dog.</code> 我买了一条狗</p><p><code>I have a dog bought by you.</code> 我有一条狗, 是你买的</p></blockquote><p>分析出来, 主语是 <code>the data</code>, 谓语是 <code>suggest</code>, 宾语是 <code>that physically attractive individuals are...</code> 而<code>for example</code>是状语做插入语句</p><p>主谓宾, 主谓+宾语从句的结构</p><blockquote><h3 id="副词这一辈子只能做状语"><a href="#副词这一辈子只能做状语" class="headerlink" title="副词这一辈子只能做状语"></a><code>副词这一辈子只能做状语</code></h3></blockquote><ol start="2"><li>找到连词</li></ol><p><code>and pursued romantically</code> 看的出来它不完整, 可能翻译出来有问题</p><p>先大体翻译看看, </p><p>根据数据显示, 体态漂亮的人(颜值高的人)更有可能被父母更好的对待, 找到朋友和受到他人的追求</p><p>虽然我看得懂, 但明显有省略的部分</p><p>分析成分: <code>pursued romantically</code> 是 <code>[过去分词 + 状语]</code>, 缺少<code>主语和谓语</code>往前面找找</p><p>找到了 <code>sought out as friend</code> 但是他也不完整, 说明还在前面</p><p>再找 <code>treated well by their parents</code> 也符合</p><p>这次能找到了 <code>physically attractive individuals are more likely to be</code> </p><p>后面的两个句子缺少了这个, 不过可以省略掉<code>physically attractive individuals</code></p><p>多出来的部分是 <code>are more likely to be</code></p><p>把他添加到后面两个并列句中: <code>are more likely to be sought out as friends, and are more likely to be pursued romantically.</code></p><p>现在翻译就能够完整了</p><p>根据数据显示, 体态漂亮的人(颜值高的人)更有可能被父母更好的对待, 更有可能找到朋友和更有可能受到他人的追求</p><p><code>There is no agreement whether methodology refers to the concepts peculiar to historical work in general or to the research technique appropriate to the various branches of historical inquiry.</code></p><ol><li><p>找到谓语, 确定核心</p><p><code>is</code>, 后面不用看了(<code>There be</code>句型其实是倒装句式)</p></li><li><p>★找连词</p><p>★<code>or</code>, 发现是<code>whether ... or ...</code> 组成的同位语从句</p><blockquote><p>★为什么说是同位语呢? 因为没有先行词, 而且定义从句没有<code>whether</code>作为关系词的情况</p><p>★复习下<code>定语从句</code>的<code>关系词</code>: 人 <code>who whom whose</code> 物 <code>that  which  as</code> 还有状语 <code>when where why</code></p><p>我觉得在翻译的过程中, 区分是定语从句还是同位语从句其实没什么意义</p></blockquote></li></ol><p>方法论指的是一般历史工作所特有的观念还是指的是合适于历史调查不同分支的研究技术, 目前没有达成一致</p><p>★<code>As families move away from their stable community, their friends of many years, and their extended family relationships, the informal flow of information is cut off, and with it the confidence that information will be available when needed and will be trustworthy and reliable.</code></p><ol><li><p>找谓语</p><p><code>is cut off</code></p></li><li><p>找连词</p><ul><li><p><code>and their extended family relationships</code>: 明显这里是三个用 <code>and</code> 连接在一起的名词, <code>their stable community</code>, <code>their friends of many years</code>, <code>their extended family relationships</code></p><p>所以翻译非常简单, 就是 家庭成员离开了他们多年稳定的社区, 离开了他们多年的朋友和他们的远方亲戚</p></li><li><p><code>and with it the confidence + 定语</code>: 分析的出来也是被省略了, <code>[介词 + 名词 + 定语]</code>, 在前面肯定也能找到相应的部分, <code>the informal flow of information is cut off</code> <code>[名词 + 定语 + 谓语]</code>, 明显前面句子有后面句子没有的部分是 <code>谓语</code>, 这里应该是这样<code>be trustworthy and reliable</code> + <code> is cut off</code></p></li><li><p><code>and will be trustworthy</code>: 在这句话中, 通过翻译也能直到有成分被省略了, <code>[动词 + 名词]</code>, 那么在前面也能找得到, <code>information will be available</code>, 所以是&#96;&#96;information and will be trustworthy&#96;</p></li><li><p>最后一个 <code>and</code>其实没用, 因为两边都是<code>名词</code></p></li><li><p>综合下 <code>As families move away from their stable community, move away from their friends of many years, and their extended family relationships, the informal flow of information is cut off, and with it the confidence that information will be available when needed and information  will be trustworthy and reliable is cut off.</code></p><p>翻译下: “由于家庭搬离他们稳定的社区, 离开多年的朋友和他们的远亲近邻, 失去了获得小道消息的渠道, 导致在需要小道消息时对消息的可靠性产生质疑”</p></li></ul></li></ol><p><code>In the American economy, the concept of private property embraces not only the ownership of productive resources but also certain rights, including the right to determine the price of a product or to make a free contract with another private individual.</code></p><p>在美国的经济中, 私有财产的概念不仅包括了生产资料的所有权, 还包括了一些权利, 包含一些适当的决定商品价格的权利还有和个人自由签订契约的权利</p><p>在过去一千年里, 乌镇的水系和生活方式并未经历多少变化，是一座展现古文明的博物馆。</p><p><code>In the past thousand years, the water system and the lifestyle in WuZhen have not undergone many changes. Therefore, it is the museum to show ancient civilization now.</code></p><p><code>As a result of this tradition, many young people continue to live with their parents after marriage. By  contrast, today, the tradition is changing. </code></p><p>两句话</p><ol><li>第一句, 谓语是 continue</li><li>第二句, 谓语是 is changing</li><li>整体翻译: “由于传统观念, 许多年轻人婚后继续和他们的父母居住在一起, 相比较下, 今天这种传统观念正在改变”</li></ol><p><code>The fund is also used for purchasing music and painting facilities. As a consequence, nowadays the children in rural areas can have music and painting classes as well as children in coastal cities.</code></p><ol><li>总共两句话</li><li>is used 谓语 </li><li>这些资金也被用于购买音乐和绘画材料…</li><li>第二句谓语是 can have</li><li>因此, 现在在农村的孩子有和沿海城市孩子一样的音乐和绘画课程</li><li>整体翻译: “资金同时被同于购买音乐和绘画材料, 因此, 现今农村的孩子可以有和沿海城市孩子一样的音乐和绘画课程”</li></ol><p><code>More English books could be added because university students might improve themselves a lot in their future work if they can study English well.</code></p><ol><li><code>could be added</code> 是谓语</li><li>更多的书应该被加入(少一个主语, 主动变被动的问题)</li><li><code>because</code> 引导的原因状语从句</li><li><code>if they can study English well</code>是状语从句</li><li>整体的翻译是: “你们可以增加更多的英文书籍, 因为如果大学生能把英语学的很好的话, 他们就可能在今后的工作中更好的提升自己”</li></ol><p><code>Chinese families attach great importance to their children&#39;s education. As a result, many parents argue that they should work hard to make sure that their kids get a better education. </code></p><p>看标点符号, 两句话,</p><p><code>attach</code> 是谓语, <code>attach importance to</code> 认为什么很重要</p><p>翻译下就是 中国的家庭认为对他们孩子的教育很重要, 因此…</p><p>第二句 谓语是<code>argue</code>, 翻译为 认为, 后面是 从句, 明显是宾语从句, 所以是 主谓宾 结构</p><p>许多家长认为…</p><p> 从句引导词 <code>that</code>做宾语从句可以省略哦</p><p>从句谓语是<code>should work hard to</code> 需要努力工作</p><p>他们需要努力工作以确保…</p><p>从句的从句 that 做宾语从句引导词</p><p>他们的孩子获得最好的教育</p><p>整体翻译:</p><p>中国家庭认为孩子的教育很重要(中国家庭十分重视孩子的教育), 因此, 许多家长认为他们需要努力工作以确保他们的孩子得到更好的教育</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并列句 </tag>
            
            <tag> 看标点符号 </tag>
            
            <tag> 看分号 </tag>
            
            <tag> 冒号 </tag>
            
            <tag> 破折号 </tag>
            
            <tag> 两个逗号之间 </tag>
            
            <tag> 主干公式 </tag>
            
            <tag> 汉化过程 </tag>
            
            <tag> 语序 </tag>
            
            <tag> 语意 </tag>
            
            <tag> 语境 </tag>
            
            <tag> 并列 </tag>
            
            <tag> 并列省略 </tag>
            
            <tag> 省略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01英语基础</title>
      <link href="/2022/11/25/06%E8%8B%B1%E8%AF%AD/01%E8%8B%B1%E8%AF%AD%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/11/25/06%E8%8B%B1%E8%AF%AD/01%E8%8B%B1%E8%AF%AD%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="★谓语"><a href="#★谓语" class="headerlink" title="★谓语"></a>★谓语</h1><h2 id="★是什么"><a href="#★是什么" class="headerlink" title="★是什么?"></a>★是什么?</h2><h3 id="★动词只能做谓语-谓语只能是动词"><a href="#★动词只能做谓语-谓语只能是动词" class="headerlink" title="★动词只能做谓语, 谓语只能是动词"></a>★<strong>动词只能做谓语, 谓语只能是动词</strong></h3><blockquote><p>★但我觉得 <strong>谓语是一个具有时态语态(时间信息和状态信息)的动词</strong>, 而不能简简单单的认为动词就是谓语</p></blockquote><h2 id="★需要注意什么"><a href="#★需要注意什么" class="headerlink" title="★需要注意什么?"></a>★需要注意什么?</h2><ol><li><h3 id="★一句话中-只能存在一个谓语-其他动词只能变成非谓语的动词"><a href="#★一句话中-只能存在一个谓语-其他动词只能变成非谓语的动词" class="headerlink" title="★一句话中, 只能存在一个谓语, 其他动词只能变成非谓语的动词"></a>★<strong>一句话中, 只能存在一个谓语</strong>, 其他动词只能变成<code>非谓语的动词</code></h3></li><li><p>★<strong>一句话中, 动词绝对不能少</strong></p></li><li><p>★<strong>一句话当中有且只能有一个有时态的实义动词或者系动词的存在, 并且充当谓语</strong></p></li></ol><h2 id="动词分为五大类型"><a href="#动词分为五大类型" class="headerlink" title="动词分为五大类型"></a>动词分为五大类型</h2><ol><li>完全不及物动词</li><li>不完全不及物动词</li><li>完全及物动词</li><li>不完全及物动词</li><li>授予动词</li></ol><h2 id="如何判断完全不及物动词"><a href="#如何判断完全不及物动词" class="headerlink" title="如何判断完全不及物动词?"></a>如何判断完全不及物动词?</h2><p>我 ___ 他(主动)</p><p>他被我 ___ (被动)</p><p>把动词带入到上面的两句话中, 如果意思符合, 则是及物, 意思不符合则是不及物</p><p>比如: </p><ol><li><p>kill</p><p>我 kill 他;</p><p>他被我 kill;</p><p>及物</p></li><li><p>dance</p><p>我 dance 他;</p><p>他被我 dance;</p><p>不符合, 不及物</p></li><li><p>do</p><p>我 do 事情;</p><p>事情被我 do;</p><p>及物动词</p></li></ol><p>还有些动词, 既是及物动词, 又是不及物动词, 因为他有多个意思, 我们可以把他的每个意思带入上面的方法</p><p>比如: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sing vt. 唱(一首歌)  vi. 唱歌</span><br><span class="line">run vt. 经营(工厂)   vi. 跑步</span><br><span class="line">study vt. 研究(问题) vi. 读书</span><br><span class="line">kill vt.杀(某人)     vi. 杀戮</span><br></pre></td></tr></table></figure><blockquote><p>不及物动词单独使用没有被动语态, 需要加上介词才可以</p></blockquote><h2 id="如何判断不完全不及物动词"><a href="#如何判断不完全不及物动词" class="headerlink" title="如何判断不完全不及物动词?"></a>如何判断不完全不及物动词?</h2><blockquote><p>系动词?</p></blockquote><p>我 ___ 他 </p><p>他被我 ___ </p><p>比如: </p><p>become</p><p>我 成为 他</p><p>他被我 成为</p><p>第一句合乎情理, 第二句就不行了, 所以他是不及物动词</p><p>所以我们可以</p><p>He become</p><p>He was become</p><p>但是在中文中, “他变成”和 “他正在变成”, 明显意思不全, 所以不能直接使用, 需要加上补语</p><blockquote><p>这就是系动词的原因</p></blockquote><blockquote><p>名词做表语时 系动词 翻译成 “是”, 形容词做表语是 不翻译, 地方副词做表语时翻译成 “在”</p></blockquote><h3 id="什么是不完全不及物动词"><a href="#什么是不完全不及物动词" class="headerlink" title="什么是不完全不及物动词?"></a>什么是不完全不及物动词?</h3><p>动词意思不全, 需要添加 形容词, 副词或者名词(和名词相似的词, 代词, 动名词, 不定式, 名词性从句, 名词短语等), 以补充其意思的不全</p><h2 id="什么是不完全及物动词"><a href="#什么是不完全及物动词" class="headerlink" title="什么是不完全及物动词?"></a>什么是不完全及物动词?</h2><p>有点意思, 但意思不全, 需要补充</p><h2 id="注意动词之后的介词可能是固定搭配"><a href="#注意动词之后的介词可能是固定搭配" class="headerlink" title="注意动词之后的介词可能是固定搭配"></a>注意动词之后的介词可能是固定搭配</h2><blockquote><p>动词 + 介词 这种形式可能是固定搭配</p><p>当然还是 动词 + 短语 + 介词 + 短语 这种情况也可能是固定搭配</p></blockquote><h3 id="这种情况要怎么判断它到底是不是固定搭配呢"><a href="#这种情况要怎么判断它到底是不是固定搭配呢" class="headerlink" title="这种情况要怎么判断它到底是不是固定搭配呢?"></a>这种情况要怎么判断它到底是不是固定搭配呢?</h3><p>很简单，<strong>首先判断介词前面的短语是否偏向抽象，然后再判断介词前面的短语和介词后面的短语是否有关系，如果没关系一般该介词和后面的短语修饰的动词，否则修饰的介词前面的非动词部分</strong></p><h3 id="那什么是偏向抽象呢？"><a href="#那什么是偏向抽象呢？" class="headerlink" title="那什么是偏向抽象呢？"></a>那什么是偏向抽象呢？</h3><p>很简单，“就是那个女人 介词 穿红色衣服”，这里的那个女人和介词后面的内容存在关系，并且女人比较抽象，还不太具体，可以是穿高跟鞋的女人，可以是站在车子旁边的女人或者跑的很快的女人等等</p><h1 id="非谓语动词"><a href="#非谓语动词" class="headerlink" title="非谓语动词"></a>非谓语动词</h1><blockquote><p><strong><code>非谓语动词刘晓艳老师说他不是动词，但我觉得不能这么认为，我认为是不能作谓语的动词</code></strong></p></blockquote><h2 id="★动词如何变成非谓语动词的方法"><a href="#★动词如何变成非谓语动词的方法" class="headerlink" title="★动词如何变成非谓语动词的方法?"></a>★动词如何变成非谓语动词的方法?</h2><p>​<strong>(1)★ <code>to + V</code> 不定式 表示目的或者将来<br>​(2)★ <code>V + ed</code> 表被动或完成<br>​(3)★ <code>V + ing</code> 主动或者进行</strong></p><p><strong><code>★当动词不定式(非谓语动词)充当主语的时候, 一般可以将动词不定式放到句末. 在前面加 it 做形式主语</code></strong></p><p>★<strong>非谓语动词除了不能做谓语, 其他成分都能做, <code>主语, 宾语 表语 状语 定语</code> 皆可</strong></p><p><strong><code>★非谓语动词是一种只有态没有时的成分, 而谓语是时态和状态都有的成分</code></strong></p><p><strong><code>★非谓语动词中的 doing 和 to do 才能做名词, done 不能是用作名词</code></strong></p><p>★**<code>看到动词的过去形式, 需要注意, 非谓语动词单独出现才是非谓语动词, 否则可能是谓语</code>**</p><h2 id="动词过去式如何判断到底是谓语还是非谓语？"><a href="#动词过去式如何判断到底是谓语还是非谓语？" class="headerlink" title="动词过去式如何判断到底是谓语还是非谓语？"></a><strong><code>动词过去式如何判断到底是谓语还是非谓语？</code></strong></h2><blockquote><p><strong><code>很简单，加上 be，判断判断整个句子的主语是被动的还是主动的？</code></strong></p><p><strong><code>比如：news papers 它只能被登报，如果加上 be 动词变成被动形式，刚刚好表示被动，所以他是非谓语</code></strong></p><p><strong><code>比如：I loved you. 我爱过你，我是主动爱你的，如果加上 be 动词则变成被动语态，明显不符合，所以它只能是谓语</code></strong></p></blockquote><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>比如：Last year the new established company participated in testing flying cars.</p><p>前面的 established 就不是谓语，participated 才是。</p><h4 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h4><p>很简单，用上面的方式判断</p><p>首先有两个动词：established participated </p><p>established 是成立的意思</p><p><code>participated</code> 是参与的意思</p><p><code>established</code> 表示被动的话，就意味着 company 公司被成立，可以 √</p><p><code>participated</code> 表示被参与，<code>testing flying cars 测试飞行汽车</code>，能被参与么？不能 ×</p><p>所以 <code>participated</code> 这个动词不能做被动语态，<code>established</code> 可以做被动语态</p><p>明显 <code>established</code> 是被动非谓语，<code>participated</code> 只能做主动，谓语</p><h2 id="非谓语动词的作用"><a href="#非谓语动词的作用" class="headerlink" title="非谓语动词的作用"></a>非谓语动词的作用</h2><ol><li><strong>相当于名词(注意 <code>done</code> 不能做名词), 做主&#x2F;宾&#x2F;表语</strong></li><li><strong>修饰名词&#x2F;句子, 做定语&#x2F;状语(修饰一个句子是状语, 修饰一个名词是定语)</strong></li></ol><h2 id="找参照物"><a href="#找参照物" class="headerlink" title="找参照物"></a>找参照物</h2><p>一个动作到底是主动还是被动还是将来, 需要找到对应的参照物才行, 找到参照物才会知道到底是主动还是被动又或者是将来</p><p>田静老师给的方法是:</p><ol><li>非谓语动词的位置(前面有就近的词挨着比如: the done N, 肯定修饰 N 了)</li><li>与句子之间是否由逗号隔开, 一般情况下都是修饰另一个句子的主语, 但需要满足符合逻辑, 可能不准确</li><li>代入法, 非谓语动词, 要么修饰就近的名词, 要么修饰逗号另一个句子中的主语, 两个都带入试试, 看看符不符合逻辑就好(这种最准确)</li></ol><h2 id="独立主格"><a href="#独立主格" class="headerlink" title="独立主格"></a>独立主格</h2><ol><li>有两个不同的主语</li><li>有两个谓语</li><li>选一个不重要的作非谓语, 另一个作谓语</li><li>让非谓语那句变成主句的状语</li></ol><p>这就是<strong>独立主格</strong></p><p>比如知乎上有争议的例子:</p><p><code>I love you, you love me</code></p><p>这句话是错误的</p><p>所以, 我们需要挑选一个动词做谓语</p><p><code>I loving you, you love me</code></p><p>看到了么? 两个动词的发出者是不同的, 一个是 <code>I</code> 另一个是 <code>you</code></p><p>这就是独立主格?</p><p>额, 算是吧</p><p>主要问题是 独立主格的部分<code>I loving you</code>, 并没有尽到修饰主语的作用, 知乎上存在争议的一部分原因也在这里</p><p>我爱你和你爱我能有什么关系? </p><p>还有另一部分的原因是 外国人 基本不会这么用</p><p>但这句话通俗易懂, 合适像我这样的新手吧</p><blockquote><p>独立主格做状语修饰另一个动词</p></blockquote><p>相较而言, 我更喜欢这位小姐姐(大姐姐?)举的例子:</p><p><code>I holding her hands，her face turned red. </code></p><p>因为我抓起了她的手, 导致她的脸红了</p><p>至少有逻辑关系</p><p>当然如果不使用独立主格的方式我们还可以用连词连接两个句子</p><p>比如<code>Her face turned red, as I holding her hands</code></p><p>但这句话是错误的, 如果作为从句, 那么从句的基本成分也要满足五大基本句型</p><p><code>I holding her hands</code> 这句话的动词是现在动名词形式，没办法做谓语，且 as 引导的状语从句也不符合</p><p><code>Her face turned red, as I am holding her hands.</code> 这样才对</p><p>当我抓住她的手时，她脸红了。</p><blockquote><p>前面说过, 一个谓语需要同时满足时态和语态, 通俗点讲就是同时满足时间和任务的进度</p><p>时间是:</p><ul><li><code>过去</code></li><li><code>现在</code></li><li><code>将来</code></li><li><code>过去的将来</code></li></ul><p>任务进度是:</p><ul><li><code>一般</code></li><li><code>进行</code></li><li><code>完成</code></li><li><code>完成进行</code></li></ul></blockquote><blockquote><p>非谓语动词不能同时满足, 他只能表示动词的 被动, 主动和目的, 或者任务的完成度, to do: 不清楚什么时候完成,将来; doing: 任务正在进行; done: 任务已经完成</p><p>不能够表达式时间这个概念</p><p>也就是说非谓语动词是残缺的</p></blockquote><h3 id="伴随状语"><a href="#伴随状语" class="headerlink" title="伴随状语"></a>伴随状语</h3><p>如果两个动词的发出者都是主语, 那么我们定义这种情况叫<code>伴随状语</code></p><p>比如: <code>I entered the room， followed by the little dog. </code></p><p>翻译成: “我进入了房间, 后面跟着小狗”</p><p>这里后面的 <code>followed</code> 动词的主语被忽略了, 因为主语出现了重复, 所以删除掉, 所以 <code>I</code> 是后面一句的主语</p><p>完整的句子是: </p><p><code>I entryed the room, I followed by the little dog</code></p><p>我进入了房间. 我被狗跟着, 这里的 <code>followed</code> 是被动</p><p>这里头 <code>entry</code> 和 <code>follow</code> 动词的发出者是我</p><p>参考: <a href="https://www.jianshu.com/p/279c80e0dc46">英语共学社Tiara: 独立主格，其实一点都不难 - 简书 (jianshu.com)</a></p><h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><p><code>I bought a dog.</code> 我买了一条狗, 这是谓语</p><p><code>I have a dog bought by you.</code> 我有一条狗, 是你买的 这个不是谓语, have 才是谓语, bought 是过去分词</p><p>需要注意:</p><blockquote><p><code>I came into the woods, seeing many brids.</code></p><p>这句话的翻译是”我走进树林, 看见了很多鸟” 这里用<code>seeing</code> 表示一边走进树林, 一边看见很多鸟</p><p>如果是走进树林之后, 看见了一群鸟的话, 需要用 <code>to see</code> 表示将来</p></blockquote><blockquote><p>非谓语动词的时候看的是主干谓语的时态, 如果发生在主干谓语时间之前已经完成, 则用 <code>done</code> , 如果是主干谓语同时, 则用 <code>doing</code> , 如果是主干谓语动词时间之后, 用 <code>to be</code> 表示将来</p></blockquote><h2 id="★句子中没有动词时怎么办"><a href="#★句子中没有动词时怎么办" class="headerlink" title="★句子中没有动词时怎么办?"></a>★句子中没有动词时怎么办?</h2><h3 id="★当一句话中没有动词-却需要动词的时候-永远都加上-be-动词-并且-be-动词没有任何意思-它仅仅是充当谓语部分"><a href="#★当一句话中没有动词-却需要动词的时候-永远都加上-be-动词-并且-be-动词没有任何意思-它仅仅是充当谓语部分" class="headerlink" title="★当一句话中没有动词, 却需要动词的时候, 永远都加上 be 动词, 并且 be 动词没有任何意思, 它仅仅是充当谓语部分"></a>★<strong>当一句话中没有动词, 却需要动词的时候, 永远都加上 <code>be</code> 动词, 并且 <code>be</code> 动词没有任何意思, 它仅仅是充当谓语部分</strong></h3><h2 id="怎么翻译一个句子"><a href="#怎么翻译一个句子" class="headerlink" title="怎么翻译一个句子?"></a>怎么翻译一个句子?</h2><p><strong>翻译最好先找谓语, 然后就能确定前面的不管多少个单词都可以认为是主语</strong>, 后面的看情况判断</p><p>判断是 <code>宾语</code> 还是 <code>宾语 + 宾语</code> 还是 <code>宾语 + 宾补</code> 的简单情况, 如果不是则可能是</p><ul><li>宾语从句: <strong>一个句子代替宾语</strong></li><li>形容词性从句(定语从句): <strong>一个句子做了形容词, 修饰另一个句子</strong></li><li>副词性从句(状语从句): <strong>一个句子做了状语, 修饰另一个句子</strong></li></ul><p>翻译还可以分为两种顺序</p><ul><li>主干是从前到后翻译</li><li>修饰名词部分，一般是从后往前看</li><li>修饰动词，一般需要放在<ul><li>句首</li><li>动词前一个位置</li><li>句末</li><li>动词后面的固定搭配</li></ul></li></ul><blockquote><p><strong>合适新手</strong></p></blockquote><h2 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h2><p><strong>What he does is important</strong>.   </p><ul><li>找谓语</li></ul><p>根据前面的定义看, 我们知道一个谓语需要时态和语态</p><p>那么能找到符合的只有 : <code>does</code> 和 <code>is</code></p><p>但 很明显, <code>does</code> 前面有一个 引导词 <code>What</code>, 不是<code>谓语</code> , 说明是<strong>名词性从句</strong></p><blockquote><p>★ 这里<strong>判断主干是否完整来判断是不是名词性从句</strong>的, 明显上面两个动词都没有完整的句子缺少成分, 只能说明是名词性从句, 一个句子做了另一个句子的成分</p></blockquote><p>所以上面只有 <code>is</code> 是谓语</p><p>那么 <code>is</code> 前面的句子就是 主语 <code>What he does</code></p><blockquote><p>可以把<code>What he does</code>看成一个单词 <code>A</code>, 那么句子就变成 <code>A is important.</code> </p></blockquote><p>翻译成 他做什么很重要</p><h2 id="动词的分类"><a href="#动词的分类" class="headerlink" title="动词的分类"></a>动词的分类</h2><ol><li>★<code>实义动词</code>: 有实际意义的动词, 分及物动词和不及物动词</li><li>★<code>及物动词</code>: 后面必须要宾语, 并且是直接跟上宾语</li><li>★<code>不及物动词:</code> 后面可以不接宾语, 如果要加上东西, 必须加上 介词 </li><li>★<strong>表达说话人主观态度的词, 叫情态动词, 不能单独作为谓语</strong></li><li>★情态动词做现在和将来</li><li>★<code>must</code> 的反义词是 <code>can&#39;t</code></li><li>★<code>must have done</code> 一定做过某事( <code>have done</code> 完成了, 加上 <code>must</code> , 一定 完成了)<br><code>needn&#39;t have done</code> (<code>have done</code> 完成了, <code>needn&#39;t</code> 不需要 , 不需要做成某事但已经完成了)<br><code>could have done</code>(本能做某事但没做, 遗憾)<br><code>should have done</code> 本应该做某事</li><li>★助动词<br>(1)★ <strong>帮助谓语构成时态, 被动语态, 疑问, 否定的词就是助动词</strong></li></ol><h1 id="★主语"><a href="#★主语" class="headerlink" title="★主语"></a>★主语</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h2><p><strong><code>动作的发出者或者描述的主体</code></strong></p><h2 id="★什么词性可以作为主语"><a href="#★什么词性可以作为主语" class="headerlink" title="★什么词性可以作为主语?"></a>★什么词性可以作为主语?</h2><h3 id="★-名词-代词-非谓语动词-从句-引导词-句子-表距离的地方副词短语作主语-可以充当主语"><a href="#★-名词-代词-非谓语动词-从句-引导词-句子-表距离的地方副词短语作主语-可以充当主语" class="headerlink" title="★**名词, 代词, 非谓语动词, 从句(引导词 + 句子), 表距离的地方副词短语作主语 可以充当主语**"></a>★**<code>名词</code>, <code>代词</code>, <code>非谓语动词</code>, <code>从句(引导词 + 句子)</code>, <code>表距离的地方副词短语作主语</code> 可以充当主语**</h3><p><code>From Shanghai to Beijing is about 1000 kilometers.</code></p><p>还可以写成</p><p><code>It is about 1000 kilometers from Shanghai to Beijing.</code></p><h2 id="翻译例子"><a href="#翻译例子" class="headerlink" title="翻译例子"></a>翻译例子</h2><p><strong>★Strong and handsome is his character.</strong></p><p>★句子错误(<code>Strong</code>和<code>handsome</code>都是形容词, 不能直接作为主语), 需要改写成名词</p><p><code>Strength(n.) and handsomeness(n.) are his charcter. </code>  </p><p>但是我们可以更改成更简单的方式  </p><blockquote><p>★<strong>当一个句子中需要动词, 却没用动词的时候需要加上 <code>be</code> 动词</strong> </p></blockquote><p><code>Be strong and be handsome is his charcter.</code> 但是这里已经有 谓语 <code>is</code> 了, 需要把两个 <code>be</code> 动词改成不是动词, 而 这里是主动的, 所以可以改成</p><p>★<code>Being strong and being handsome is his charcter.</code></p><blockquote><h4 id="★如果是非谓语动词做主语时-一般都是单数形式-所以使用-is-而不是-are"><a href="#★如果是非谓语动词做主语时-一般都是单数形式-所以使用-is-而不是-are" class="headerlink" title="★如果是非谓语动词做主语时, 一般都是单数形式, 所以使用 is 而不是 are"></a>★<strong>如果是非谓语动词做主语时, 一般都是单数形式, 所以使用 <code>is</code> 而不是 <code>are</code></strong></h4></blockquote><blockquote><p>主语不能缺失, 但是可以省略, 但还是存在主语</p></blockquote><h2 id="★如果中文转换成英文时没有主语我们可以这么处理-四种方式"><a href="#★如果中文转换成英文时没有主语我们可以这么处理-四种方式" class="headerlink" title="★如果中文转换成英文时没有主语我们可以这么处理(四种方式)"></a>★如果中文转换成英文时没有主语我们可以这么处理(四种方式)</h2><h3 id="★加-it-作为主语-必须和空气-温度-时间有关系"><a href="#★加-it-作为主语-必须和空气-温度-时间有关系" class="headerlink" title="★加 it 作为主语, 必须和空气 温度 时间有关系"></a>★加 <code>it</code> 作为<code>主语, 必须和空气 温度 时间</code>有关系</h3><p>eg: 重庆的气温很低</p><p><code>It is humid in ChongQing.</code></p><p>eg: 雨一直下: </p><p><code>It keeps raining.</code></p><blockquote><p>一般情况下 <code>it</code> 作形式主语是有</p><ul><li><code>to do sth</code></li><li>主语从句</li></ul></blockquote><h3 id="★There-be-句型-但一句话没有主语并且听到了-“有”-的时候就可以用-There-be-句型"><a href="#★There-be-句型-但一句话没有主语并且听到了-“有”-的时候就可以用-There-be-句型" class="headerlink" title="★There be 句型, 但一句话没有主语并且听到了 “有” 的时候就可以用 There be 句型"></a><code>★There be</code> 句型, 但一句话没有主语并且听到了 “有” 的时候就可以用 <code>There be</code> 句型</h3><p>eg: 有很多人喜欢我</p><p><code>There are(exist) a crowd of people adoring me.</code></p><p>eg: 有很多原因解释我的观点</p><p><code>There are numberous factors accounting for my perspective.</code></p><h3 id="★主动变被动"><a href="#★主动变被动" class="headerlink" title="★主动变被动"></a>★主动变被动</h3><ul><li><strong>当一句话没有主语, 或者人称代词做主语的时候, 都可以考虑写成被动</strong></li></ul><p>eg: 必须指出坚持时成功的必备因素</p><p><code>Perseverance must be pointed out to be an indispensable factor in out success.</code></p><p>eg: 越来越多的人认为环境污染很严重</p><p><code>pollution is realized severe by an increasing number of people.</code></p><h4 id="被动翻译问题"><a href="#被动翻译问题" class="headerlink" title="被动翻译问题"></a>被动翻译问题</h4><ul><li>主宾颠倒, 也就是将被动语句的主语变成宾语, 把宾语变成主语(如果出现无主语的情况, 增加一些泛指主语)</li><li>由一些其他词代替: 由…所&#x2F;为…所&#x2F;由…来</li></ul><p>我的方式：</p><ul><li><strong>动词 + 主语 + “是” + 后续</strong></li><li><strong>by部分 + 动词 + 后续</strong></li><li><strong>主语和宾语颠倒过来</strong></li></ul><h3 id="★加人称代词"><a href="#★加人称代词" class="headerlink" title="★加人称代词"></a>★加人称代词</h3><p>eg: 上学</p><p><code>We/You/I go to school.</code></p><h4 id="★以下几种情况没有被动只能用人称代词"><a href="#★以下几种情况没有被动只能用人称代词" class="headerlink" title="★以下几种情况没有被动只能用人称代词"></a>★以下几种情况没有被动只能用人称代词</h4><p><strong>1) 系动词没有被动</strong></p><p><strong>2) 不及物动词没有被动(如果动词后面跟着介词, 该动词一般没有被动形态)</strong></p><p><strong>3) have 翻译成有的意思时, 没有被动</strong></p><h1 id="★宾语"><a href="#★宾语" class="headerlink" title="★宾语"></a>★宾语</h1><h2 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么?"></a>是什么?</h2><blockquote><p> 被动过作用或者被介绍的主体</p></blockquote><h2 id="★什么词性可以作为宾语"><a href="#★什么词性可以作为宾语" class="headerlink" title="★什么词性可以作为宾语?"></a>★什么词性可以作为宾语?</h2><h3 id="★-名词-代词-非谓语动词-从句-这里主语的成分和宾语一致-因为主语和宾语可以互换"><a href="#★-名词-代词-非谓语动词-从句-这里主语的成分和宾语一致-因为主语和宾语可以互换" class="headerlink" title="★**名词, 代词, 非谓语动词, 从句  这里主语的成分和宾语一致, 因为主语和宾语可以互换**"></a>★**<code>名词</code>, <code>代词</code>, <code>非谓语动词</code>, <code>从句</code>  这里主语的成分和宾语一致, 因为主语和宾语可以互换**</h3><blockquote><p>可数名词不能单独使用, 要么变成 <code>The</code>  要么变成 <code>a</code> 要么变成 复苏形式<code>Women tend to love.</code></p></blockquote><h1 id="补语"><a href="#补语" class="headerlink" title="补语"></a>补语</h1><blockquote><p>补充说明主语和宾语的内容</p></blockquote><p>表语是 补充说明主语</p><p>宾补: 补充说明宾语</p><h2 id="什么是补充说明"><a href="#什么是补充说明" class="headerlink" title="什么是补充说明?"></a>什么是补充说明?</h2><p><code>The soup is too hot.</code><br><code>The dress looks pretty.</code><br><code>He become a teacher.</code><br><code>I find the dress pretty.</code><br><code>His college training made him a teacher.</code></p><p>要么做修饰(add), 要么做赋值</p><p>主体.add(漂亮) <code>She looks beautiful.</code></p><p>主体 &#x3D; 老师 <code>he become a teacher</code></p><h2 id="修饰成分"><a href="#修饰成分" class="headerlink" title="修饰成分"></a>修饰成分</h2><h3 id="定语"><a href="#定语" class="headerlink" title="定语"></a>定语</h3><p>判断是不是定语, 需要注意</p><p>定语可能在前面 前置定语, 还可能在后面, 叫后置定语</p><h3 id="状语"><a href="#状语" class="headerlink" title="状语"></a>状语</h3><p><code>We will hew out of the mountain of despair a stone of hope.</code></p><p><code>out of the mountain</code> 修饰前面的<code>will hew</code>动词, 做状语</p><p><code>of despair</code> 修饰前面的<code>mountain</code>名词, 做定语</p><p><code>of hope </code>修饰前面的<code>a stone</code>名词, 做定语</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><code>I ate an apple in the kitchen.</code> (按照语义上判断应该是做状语), 但也可能做定语?</p><p><code>I ate the apple in the kitchen.</code> 按照语义上是 定语, 但也可能是 状语?</p><p>翻译成：我吃了个在厨房的苹果（定语） or 我在厨房吃了个苹果（状语）</p><blockquote><p>都认为是状语吧，如果需要认定是定语的话，可以这么写 <code>I ate an apple that was in the kitchen</code></p></blockquote><h3 id="如果需要判断是定语还是状语"><a href="#如果需要判断是定语还是状语" class="headerlink" title="如果需要判断是定语还是状语?"></a>如果需要判断是定语还是状语?</h3><blockquote><p>只需要判断是修饰什么的</p><p>定语一般都是 <code>xxx的</code>, 一般前面是一个名词或者名词性质的句子之类</p><p>而状语, 比较灵活, 所以判断不是 <code>什么什么的</code> 这种<code>定语</code>, 那么<code>都认为是状语</code> 修饰的动词</p><p><strong>如果实在不知道是定语还是状语，那么都认为是状语吧，不行再认为是定语</strong></p></blockquote><h2 id="复杂的修饰成分"><a href="#复杂的修饰成分" class="headerlink" title="复杂的修饰成分"></a>复杂的修饰成分</h2><h3 id="介词短语"><a href="#介词短语" class="headerlink" title="介词短语"></a>介词短语</h3><p>介词有三个要点:</p><ol><li>不能单独使用</li><li>后面可以接上<ol><li>名词</li><li>代词</li><li>doing</li></ol></li><li><code>介词 + 名词/代词/短语</code> 介词短语, 介宾结构, 通常都是补充说明的作用</li></ol><blockquote><p>他是句子的非核心结构</p></blockquote><blockquote><p>介词到离他最远的那个名词才是<code>介词短语</code></p></blockquote><h4 id="表示时间的介词"><a href="#表示时间的介词" class="headerlink" title="表示时间的介词"></a>表示时间的介词</h4><table><thead><tr><th align="center">介词</th><th align="center">表达含义</th></tr></thead><tbody><tr><td align="center">at&#x2F;on&#x2F;in</td><td align="center">在…时间点&#x2F;时间上&#x2F;时间内</td></tr><tr><td align="center">before&#x2F;after</td><td align="center">在…时间之前&#x2F;之后</td></tr><tr><td align="center">from&#x2F;since</td><td align="center">自从…时间</td></tr><tr><td align="center">by, until</td><td align="center">截止到(直到) … 时间</td></tr><tr><td align="center">for</td><td align="center">持续…时间</td></tr><tr><td align="center">during</td><td align="center">在…期间</td></tr></tbody></table><h4 id="表示地点或者范围的介词"><a href="#表示地点或者范围的介词" class="headerlink" title="表示地点或者范围的介词"></a>表示地点或者范围的介词</h4><table><thead><tr><th align="center">介词</th><th align="center">表达含义</th></tr></thead><tbody><tr><td align="center">at&#x2F;in</td><td align="center">在…地点&#x2F;在…里面</td></tr><tr><td align="center">on, above, over&#x2F;under, below</td><td align="center">在…上面&#x2F;下面</td></tr><tr><td align="center">in front of &#x2F; behind</td><td align="center">在…之前&#x2F;之后</td></tr><tr><td align="center">near, by, beside</td><td align="center">在…旁边</td></tr><tr><td align="center">between, among</td><td align="center">在…之间</td></tr><tr><td align="center">around</td><td align="center">在…周围</td></tr><tr><td align="center">into&#x2F;out of</td><td align="center">进入…里面&#x2F;从…出去</td></tr><tr><td align="center">onto&#x2F;off</td><td align="center">到…上面&#x2F;脱离…</td></tr><tr><td align="center">across, though&#x2F;past</td><td align="center">穿过…&#x2F;经过…</td></tr><tr><td align="center">along</td><td align="center">沿着</td></tr><tr><td align="center">from&#x2F;to</td><td align="center">来自…&#x2F;朝着…</td></tr></tbody></table><h4 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h4><table><thead><tr><th align="center">介词</th><th align="center">表达含义</th></tr></thead><tbody><tr><td align="center">of</td><td align="center">A of B (B 的 A)</td></tr><tr><td align="center">about</td><td align="center">关于…</td></tr><tr><td align="center">with&#x2F;without</td><td align="center">伴随着有…&#x2F;没有…</td></tr><tr><td align="center">for</td><td align="center">为了…(表示目的)&#x2F;因为…(表示原因)&#x2F;对于…(表示对象)</td></tr><tr><td align="center">by</td><td align="center">通过…方式或者方法&#x2F;被…做(被动语态 + by + 动作发出者)&#x2F;相差了…(表示变化的差额)</td></tr><tr><td align="center">as</td><td align="center">作为&#x2F;像…一样&#x2F;如同…</td></tr><tr><td align="center">like</td><td align="center">像…一样</td></tr><tr><td align="center">despite</td><td align="center">尽管…</td></tr></tbody></table><h3 id="从句"><a href="#从句" class="headerlink" title="从句"></a>从句</h3><p>有<code>引导词/关系词 + 句子</code> 后面必须有个完整的句子, <code>引导词/关系词</code>有时候会做从句的成分</p><h3 id="不定式"><a href="#不定式" class="headerlink" title="不定式"></a>不定式</h3><p><code>to do sth</code></p><h3 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h3><p><code>doing sth</code></p><p><code>done sth</code></p><blockquote><p>定语一般跟着名词性质的词或者句子附近, 如果发现一个短语找不到名词修饰, 则大概率是状语</p></blockquote><h3 id="介词短语如果不是在修饰一个名词-那么就是状语"><a href="#介词短语如果不是在修饰一个名词-那么就是状语" class="headerlink" title="介词短语如果不是在修饰一个名词, 那么就是状语"></a><code>介词短语如果不是在修饰一个名词, 那么就是状语</code></h3><h1 id="★表语"><a href="#★表语" class="headerlink" title="★表语"></a><code>★</code>表语</h1><h2 id="★是什么-1"><a href="#★是什么-1" class="headerlink" title="★是什么?"></a>★是什么?</h2><blockquote><p>一句话: 补充说明主语</p></blockquote><p>★<strong>系动词: 系动词就是赋予主语功能的动词, 所有的系动词都能用 be 来代替, 所以很好区分</strong></p><p>★<strong>所以表语就是在系动词之后的成分, 把表语的功能赋值给主语</strong></p><blockquote><h3 id="★类似于-int-a-10-这里的-a-就是主语-10就是表语-就是系动词-表示赋值"><a href="#★类似于-int-a-10-这里的-a-就是主语-10就是表语-就是系动词-表示赋值" class="headerlink" title="★类似于 int a = 10 这里的 a 就是主语, 10就是表语, =就是系动词, 表示赋值"></a>★类似于 <code>int a = 10</code> 这里的 <code>a</code> 就是<code>主语</code>, <code>10</code>就是<code>表语</code>, <code>=</code>就是<code>系动词</code>, 表示<code>赋值</code></h3></blockquote><p>★<strong>系动词引导的是 <code>主语补足语</code>, 前面我们的 主谓宾 宾补, 这里是<code>宾语补足语</code>, 而主系表的表语其实是主语补足语</strong></p><blockquote><p>★<strong>我们区分主谓宾宾和主谓宾宾补的时候可以在 宾语和后面的成分中间加上 <code>be</code> 动词, 如果成立则是主谓宾宾补</strong></p></blockquote><h2 id="★什么词可以做表语"><a href="#★什么词可以做表语" class="headerlink" title="★什么词可以做表语?"></a>★什么词可以做表语?</h2><h3 id="★-名词-代词-非谓语动词-从句-形容词-介词短语-状语"><a href="#★-名词-代词-非谓语动词-从句-形容词-介词短语-状语" class="headerlink" title="★**名词, 代词, 非谓语动词, 从句, 形容词, 介词短语(状语)**"></a>★**<code>名词</code>, <code>代词</code>, <code>非谓语动词</code>, <code>从句</code>, <code>形容词</code>, <code>介词短语(状语)</code>**</h3><blockquote><p>主系表可以变成 表系主, 倒装, 表示强调</p></blockquote><h3 id="is"><a href="#is" class="headerlink" title="is"></a>is</h3><blockquote><p>名词做表语时 系动词 翻译成 “是”, 形容词做表语是 不翻译, 地方副词做表语时翻译成 “在”</p></blockquote><ol><li><p>名词</p><p>He is a great hero. (是)</p><p>The trouble with me is that I lack money. (是)</p></li><li><p>形容词</p><p>She is beautiful. (不翻译)</p><p>The book is of great value. (做形容词性质的介词短语 不翻译)</p></li><li><p>地方副词</p><p>She is there. (在)</p><p>They are upstairs. (在)</p><p>She is in town. (副词短语 在)</p></li></ol><h4 id="be-动词之后的现在分词有两种意思"><a href="#be-动词之后的现在分词有两种意思" class="headerlink" title="be 动词之后的现在分词有两种意思"></a>be 动词之后的现在分词有两种意思</h4><ul><li>作<strong>形容词的现在分词</strong>: 表示 “…的”</li><li>作<strong>“进行状态”的现在分词</strong>: 表示 “正在…”</li></ul><p>The girl is charming. 这女孩很迷人. &#x3D;&#x3D;&gt; 可以翻译成 “charming” 迷人的, 形容词</p><p>The girl is singing. 女孩正在唱歌 &#x3D;&#x3D;&gt; 翻译成”正在…”, singing做完全不及物动词, 翻译成 “正在做”</p><p><strong><code>总结: 翻译成 什么的, 主系表, 翻译成 正在... 进行时分词形式</code></strong></p><p>The girl is bathing. 女孩正在洗澡 (进行时分词形式)</p><h4 id="be动词之后的过去分词也有两种词性"><a href="#be动词之后的过去分词也有两种词性" class="headerlink" title="be动词之后的过去分词也有两种词性"></a>be动词之后的过去分词也有两种词性</h4><ul><li>做<strong>形容词方式</strong> “感到…的”</li><li><strong>及物动词被动语态</strong>: “被…”</li></ul><p>The man is tried. 这人很累 (翻译: 感到累)</p><p>The man was killed. 这男人被杀了(翻译: 被)</p><blockquote><p>判断下是否有被动的意思, 如果不是那么就翻译成 “感到…”</p></blockquote><h4 id="现在分词和动名词"><a href="#现在分词和动名词" class="headerlink" title="现在分词和动名词"></a>现在分词和动名词</h4><p>He is washing the car. (现在分词)</p><blockquote><p>谓语是 is washing , 主谓宾结构, 翻译: “他正在洗车”</p></blockquote><p>His job is washing cars. (动名词)</p><blockquote><p>谓语是 is ,  翻译: “他的工作是洗车”</p></blockquote><p>很多时候这种很难被区分出来, 到底是动名词还是现在分词, 其实非常简单</p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>方法就在前面的翻译</p><blockquote><p>作<strong>“进行状态”的现在分词</strong>: 表示 “正在…”</p></blockquote><p><strong><code>比如上面的翻译: He is washing the car. 只要翻译中有正在的意思, 那么就是现在分词</code></strong></p><p>His job is washing cars. 这里明显就不能翻译成 “正在…”</p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><blockquote><p>将 be 动词之后的宾语和主语互换, 意思不变, 那么就是动名词, 不能互换就是现在分词</p></blockquote><p>His job is washing cars.</p><p>将其反过来</p><p>Washing cars is his jobs.</p><blockquote><p>因为如果是动名词的话, 谓语只有 is , 动名词在句子中做定语, 修饰宾语</p></blockquote><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><blockquote><p>两种方法都行, 哪个合适用哪个</p></blockquote><h3 id="become-变成"><a href="#become-变成" class="headerlink" title="become(变成)"></a>become(变成)</h3><p>可以用: </p><ol><li>任何名词</li><li>形容词</li><li>可作形容词用的<code>现在分词</code>和<code>过去分词</code>(翻译成 …的)</li></ol><p>做表语</p><p>After failing, he became depressed. 在失败之后, 他变得低沉了</p><p>She is becoming more and more charming. 她正在变得越来越令人着迷</p><p>You’ll become a good student if you study hard.  如果你努力学习, 你将变成一个好学生</p><h3 id="turn-变成"><a href="#turn-变成" class="headerlink" title="turn(变成)"></a>turn(变成)</h3><ol><li>与颜色和情绪有关</li><li>表示转业, 通常与名词连用, 做形容词的作用</li></ol><p>用形容词做表语, 而且一般与颜色和情绪有关, 还可以用过表示转业, 通常与名词连用, 做形容词的作用</p><p>His face turned pale when he heard the news. (turned 系动词; heard 过去分词)</p><p>当他听到那个信息时, 他的脸变的苍白.</p><p>The leaves turned yellow. 叶子变黄了</p><p>The leaves is turning yellow. 叶子正在变黄</p><p>The leaves had been turned yellow. 叶子已经变黄了</p><p>His face turned red with anger when he saw Mary. 当他看到Mary, 他的脸生气的都红了</p><p>She turned beautiful. (错的)</p><p>She became beautiful. (对的)</p><blockquote><p>turned beautiful 这其实是错的, turned 只能用于修饰颜色或者情绪</p></blockquote><p>turn 还能做转业的意思, 一般与名词连用, 做形容词作用</p><p>Mr. Johnson is a soldier-turned farmer. 约翰先生是军人专业的农夫</p><p>soldier-turned 军人转业的, 作形容词</p><h3 id="get-变成"><a href="#get-变成" class="headerlink" title="get(变成)"></a>get(变成)</h3><p>get通常用:</p><ol><li>生气</li><li>激动</li></ol><p>的形容词作表语, 若用其他形容词, 一般使用 become</p><p>He got mad. 他生气了</p><p>She got beautiful. (错)</p><p>She became beautiful. (对)</p><p>她变漂亮了</p><p>Things have got good. (错)</p><p>Things have become good. (对)</p><p>事情变好了</p><blockquote><p>若 get 用于进行时的结构中, 之后可接上任何形容词比较级形态作表语</p></blockquote><p>be getting more and more + 任何形容词</p><p>She is getting more and more beautiful. 她愈来愈美丽</p><blockquote><p>get + 被动语态: 翻译成 “被”</p></blockquote><p>He got killed in the accident. &#x3D; He was killed in the accident. (他在车祸中丧生)</p><h3 id="seem-似乎-x3D-x3D-appear"><a href="#seem-似乎-x3D-x3D-appear" class="headerlink" title="seem(似乎) &#x3D;&#x3D; appear"></a>seem(似乎) &#x3D;&#x3D; appear</h3><ul><li>seem 之后用 <strong>不定式短语</strong> 作表语</li></ul><p>He seems to know it. (对)</p><p>He seems knowing it. (错)</p><blockquote><p>在 seem to be adj&#x2F;n 时. to be 是可以省略的</p></blockquote><p>He seems to be happy. &#x3D;&#x3D; He seems happy. 他似乎很快乐</p><p>He seems to be a nice man. &#x3D;&#x3D; He seems a nice man. 他似乎是好人</p><h3 id="感官动词"><a href="#感官动词" class="headerlink" title="感官动词"></a>感官动词</h3><blockquote><p>翻译成: …起来</p></blockquote><table><thead><tr><th>系动词</th><th>意思</th><th>表语</th></tr></thead><tbody><tr><td>look</td><td>看起来</td><td>形容词</td></tr><tr><td>sound</td><td>听起来</td><td>~</td></tr><tr><td>smell</td><td>闻起来</td><td>~</td></tr><tr><td>taste</td><td>尝起来</td><td>~</td></tr><tr><td>feel</td><td>感觉起来; 感到</td><td>~</td></tr></tbody></table><p>His idea sounds good. </p><p>The food smells good.</p><p>I feel tried now.</p><p>It looks interesting.</p><blockquote><p>感官动词不能直接跟名词, 需要加上 <code>介词</code>: <code>look + like + 名词</code></p><p>翻译成 <strong><code>&quot;...起来像...&quot;</code></strong></p></blockquote><p>It sounds a good idea. (错)</p><p>It sounds like a good idea. (对)</p><p>The food tastes like fish. 这食物尝起来像鱼肉</p><blockquote><p><code>feel like + 名词</code> 感觉像…</p><p><code>feel like 动词</code> 想要…</p></blockquote><p>When Jane said to marry me, I felt like a newborn baby. 当简说要嫁给我, 我感觉就像一个新生的孩子</p><blockquote><p>feel, taste, smell 可作完全及物动词</p><p><code>feel/taste/smell + 名词</code></p></blockquote><p>The doctor felt my forehead and said I had a fever.</p><p>He smelled something burning. 他闻到有东西烧焦了</p><blockquote><p>look 与 介词 连用, 及物</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">look into = investigate vt. 调查</span><br><span class="line">look over = examine vt. 检查</span><br><span class="line">look at = watch vt.看</span><br></pre></td></tr></table></figure><p>He looked at me happily.</p><p>He look into the case carefully.</p><blockquote><p>如果 look + 介词 中间可以添加 副词 , 但是不能够添加 形容词</p></blockquote><p>He looked happy at me. (错)</p><p>He looked careful into the case. (错)</p><h2 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h2><ul><li>★<code>Do you love in Beijing?</code></li></ul><p>★这句话是错误的, <code>love</code> 是<code>实义动词, 及物的</code>, 后面跟着的是<code>宾语</code>, 而<code>介词短语(状语)</code>不能做<code>宾语</code>, 所以这句话是错误的</p><p>宾语只能是 名词, 代词, 从句和非谓语动词</p><p>所以介词短语需要变化成上面句型或者成分, 但是介词短语无法变成名词</p><blockquote><p>如果要变成名词, 只要将介词去掉就行, 因为<strong>介词短语通常是<code>介词 + 名词</code>, 在句子中充当状语的成分</strong>, 所以只要去掉介词, 剩下的就是名词了</p></blockquote><p>更不能变成代词(<strong>代词只能指代名词</strong>), 从句的话, 需要<strong>引导词</strong>, 变得更加复杂, 直接变成 <strong>非谓语动词</strong> 便可</p><p>★要变成非谓语动词的方法有三种,  这里可以考虑 <code>ing</code> 和 <code>to</code> , 而 <code>ed</code> 是不行的, 不符合意思, <code>ed 是被动的</code>, 然而没有动词给我们变成非谓语动词, <code>只能加上万能的 be 动词</code>, 所以上面的句子变成: </p><p><code>Do you love being in Beijing.</code></p><ul><li>这两天心里很不爽</li></ul><p><code>I feel unhappy these day</code></p><ul><li>全球在变暖</li></ul><p><code>It is becoming warm over the world</code></p><ul><li>如果有毅力, 迟早会成功</li></ul><p><code>If there exist perseverance in your mind, success will be achieved sooner or later.</code></p><ul><li>有意义就是好好活, 好好活就是做有意义的事情</li></ul><p><code>Being meaningful is to live happily and living happily is to do meaningful things.</code></p><ul><li>笑并不意味着快乐</li></ul><p><code>Smiling doesn&#39;t mean real happiness.</code></p><ul><li>嫉妒本身就是一种仰望</li></ul><p><code>Jealousy itself is a kind of worship.</code></p><h1 id="五大简单基本句型"><a href="#五大简单基本句型" class="headerlink" title="五大简单基本句型"></a>五大简单基本句型</h1><ol><li><p>主谓</p><p>谓语一般就能够满足句子的意思了, 所以主谓结构, 英语需要语境和语意符合要求</p></li><li><p>主谓宾</p></li><li><p>主系表(主谓主补)</p><ol><li>一般表语做主语的修饰, 或者做主语的等价效果, 类似于编程里面的 <code>add函数</code>和赋值符号(<code>=</code>)</li><li>主系表可以变成 表系主, 倒装, 表示强调</li></ol></li><li><p>主谓宾宾补</p><blockquote><p>在 宾语 和 宾补之间加上 be 动词然后翻译出来, 如果还符合原先句子的意思那么就是 “主谓宾宾补”, 如果不符合原先句子的意思, 那么就是 “主谓宾宾”</p></blockquote></li><li><p>主谓宾宾</p><blockquote><p>大多数情况下都是 主谓 人宾 + 物宾</p><p>类似于: V sb sth, 比如 give sb sth, 或者 make sb sth. 等等</p><p>前面一个宾语是人, 后面一个宾语是物</p></blockquote></li></ol><h1 id="如果区分主谓双宾和谓语宾宾补"><a href="#如果区分主谓双宾和谓语宾宾补" class="headerlink" title="如果区分主谓双宾和谓语宾宾补?"></a>如果区分主谓双宾和谓语宾宾补?</h1><blockquote><p>在前一个宾语后面加上 be 动词</p><ul><li>如果句子的意思和前面一致, 则是宾补</li><li>如果不一致, 则是双宾</li></ul><p><code>I gave him a dog.</code>  &#x3D;&gt; <code>he is a dog</code> 加入到语句中, 是”我给他一条狗”, 变成了”他是一条狗”明显不符合语义 &#x3D;&gt; 双宾</p><p><code>I called him a dog.</code> &#x3D;&gt; <code>he is a dog</code> “我说他是一条狗” “他是一条狗” 符合前面句子的语义, 所以是 &#x3D;&gt; 宾补</p></blockquote><h1 id="如何区分是谓语还是过去分词-done和did"><a href="#如何区分是谓语还是过去分词-done和did" class="headerlink" title="如何区分是谓语还是过去分词?(done和did)"></a>如何区分是谓语还是过去分词?(done和did)</h1><blockquote><p>在疑似谓语动词前面加上 be, 变成被动, 如果意思</p><ul><li>符合; 语态 语义都不变, 一定是个过去分词短语做后置定语</li><li>不符合; 如果语态变了或者意思扭曲了, 那一定是 谓语</li></ul><p><code>a paper published in Englang.</code></p><p>变成: <code>a paper is publisted in Englang.</code></p><p>“论文被发布”, 论文本身就是被人发布的, 符合意思, 一定是做过去分词, 不是谓语</p></blockquote><blockquote><p>说白了,  done 本身就有被动的意思, 而 did 本身就是主动的意思</p><p>如果加上 be done 被动语态完整, 所以意思不变</p><p>如果是 did 加上 be , 主动变被动, 至少语态变了, 意思也变了</p></blockquote><blockquote><p>这点在前面已经说过了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谓语 </tag>
            
            <tag> 动词 </tag>
            
            <tag> 五大句型 </tag>
            
            <tag> 及物和不及物动词 </tag>
            
            <tag> 非谓语动词 </tag>
            
            <tag> 独立主格 </tag>
            
            <tag> 伴随状语 </tag>
            
            <tag> 没有动词怎么办 </tag>
            
            <tag> 动词的分类 </tag>
            
            <tag> 主语 </tag>
            
            <tag> it形式 </tag>
            
            <tag> there be形式 </tag>
            
            <tag> 宾语 </tag>
            
            <tag> 补语 </tag>
            
            <tag> 修饰成分 </tag>
            
            <tag> 介词短语 </tag>
            
            <tag> 从句 </tag>
            
            <tag> 不定式 </tag>
            
            <tag> 分词 </tag>
            
            <tag> 表语 </tag>
            
            <tag> be动词 </tag>
            
            <tag> 感官动词 </tag>
            
            <tag> 主谓宾 </tag>
            
            <tag> 主谓双宾 </tag>
            
            <tag> 主谓宾宾补 </tag>
            
            <tag> 主系表 </tag>
            
            <tag> 主谓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17SpringSecurity-记住我</title>
      <link href="/2022/11/25/02springcloud/17SpringSecurity-%E8%AE%B0%E4%BD%8F%E6%88%91/"/>
      <url>/2022/11/25/02springcloud/17SpringSecurity-%E8%AE%B0%E4%BD%8F%E6%88%91/</url>
      
        <content type="html"><![CDATA[<h1 id="RememberMe"><a href="#RememberMe" class="headerlink" title="RememberMe"></a>RememberMe</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="是什么-为什么"><a href="#是什么-为什么" class="headerlink" title="是什么?(为什么?)"></a>是什么?(为什么?)</h3><p><strong>Remember Me</strong> 即记住我，常用于 Web 应用的登录页目的是让用户选择是否记住用户的登录状态。当用户选择了 Remember Me 选项，则在有效期内若用户重新访问同一个 Web 应用，那么用户可以直接登录到系统中，而无需重新执行登录操作。</p><blockquote><p>Remember Me是一种服务器行为, 由服务器记录信息</p></blockquote><h3 id="怎么做-quick-start"><a href="#怎么做-quick-start" class="headerlink" title="怎么做?(quick start)"></a>怎么做?(quick start)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RememberApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(RememberApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.factory.PasswordEncoderFactories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.SecurityFilterChain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">return</span> httpSecurity</span><br><span class="line">.authorizeRequests()</span><br><span class="line">.anyRequest()</span><br><span class="line">.authenticated()</span><br><span class="line">.and()</span><br><span class="line">.formLogin()</span><br><span class="line">.permitAll()</span><br><span class="line">.and()</span><br><span class="line">.rememberMe()</span><br><span class="line">.key(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line">.and()</span><br><span class="line">.csrf()</span><br><span class="line">.disable()</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211261001817.png" alt="image-20221126100118915"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211261043010.png" alt="image-20221126104309912"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211261117133.png" alt="image-20221126111717047"></p><p>以后用户拿着如上图所示的<code>remember-me</code>的值跟服务器进行用户身份校验</p><blockquote><p>存在安全隐患</p></blockquote><h4 id="底层都做了什么"><a href="#底层都做了什么" class="headerlink" title="底层都做了什么?"></a>底层都做了什么?</h4><p>我分为两个部分:</p><ol><li>rememberme服务创建和保存cookie的过程</li><li>触发cookie rememberme机制</li></ol><h5 id="创建和保存的过程"><a href="#创建和保存的过程" class="headerlink" title="创建和保存的过程"></a>创建和保存的过程</h5><ul><li>流程</li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211271130581.png" alt="记住我在自动登录时的源码分析"></p><p>仔细分析过程, 可以发现, <code>rememberme</code> 的属性应该会在<code>SpringSecurity</code>的登录的账户和密码验证通过之后才会配置的功能</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211261712755.png" alt="image-20221126171218557"></p><p>但是在这里没有关键的代码</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211261714060.png" alt="image-20221126171415965"></p><p>那么关键代码可能在</p><ul><li>这个函数内部</li><li>这个函数返回之后</li></ul><p>为了确定这个问题, 我们回到前面总结的流程</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211262004522.png" alt="image-20221126200406409"></p><p>那张流程图的左下角部分, 就能看到该功能</p><p>可以看到持有该属性的类:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211261956167.png" alt="image-20221126195649073"></p><p>在这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter#successfulAuthentication</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211262005060.png" alt="image-20221126200517948"></p><p>进入函数之后, 可以看到我们配置的Bean:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211262012179.png" alt="image-20221126201228065"></p><p>也就是这个类:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211262012035.png" alt="image-20221126201253840"></p><p><code>createNewToken</code>这个函数将前面我们配置好的数据</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211262018241.png" alt="image-20221126201802150"></p><p>插入到数据库中</p><p><code>insert into persistent_logins (username, series, token, last_used) values(?,?,?,?)</code></p><p>接着将内容存储到Cookie中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addCookie(persistentToken, request, response);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setCookie</span><span class="params">(String[] tokens, <span class="type">int</span> maxAge, HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">   <span class="comment">// (1)</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">cookieValue</span> <span class="operator">=</span> encodeCookie(tokens);</span><br><span class="line">   <span class="comment">// 创建 cookie</span></span><br><span class="line">   <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="built_in">this</span>.cookieName, cookieValue);</span><br><span class="line">   <span class="comment">// 设置cookie生命周期, 按秒计算, 默认设置1209600秒也就是 15 天</span></span><br><span class="line">   cookie.setMaxAge(maxAge);</span><br><span class="line">   <span class="comment">// 设置 cookie有效的路径, 这里默认设置为 &quot;/&quot; 表示 cookie对所有路径有效</span></span><br><span class="line">   cookie.setPath(getCookiePath(request));</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.cookieDomain != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 设置 cookie 的域名, 在特定域名下才能够设置 cookie</span></span><br><span class="line">      <span class="comment">// 默认情况为当前域名, 而域名的设置智能设置当前域名或者当前域名的父级域名</span></span><br><span class="line">      cookie.setDomain(<span class="built_in">this</span>.cookieDomain);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (maxAge &lt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 设置不同的规范</span></span><br><span class="line">      cookie.setVersion(<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   cookie.setSecure((<span class="built_in">this</span>.useSecureCookie != <span class="literal">null</span>) ? <span class="built_in">this</span>.useSecureCookie : request.isSecure());</span><br><span class="line">   <span class="comment">// 保证 cookie 在 client 端是隐藏的, JavaScript无法获取 cookie信息, 防止xss攻击</span></span><br><span class="line">   cookie.setHttpOnly(<span class="literal">true</span>);</span><br><span class="line">   <span class="comment">// cookie 添加到响应</span></span><br><span class="line">   response.addCookie(cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1)在这里将两个字符串整合在一起</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211262037887.png" alt="image-20221126203745786"></p><p>整合成: <code>dsXPNHvfIOuOG%2FiwlnSaCg%3D%3D:4oZ%2Bf0ExQi1lPwmkSW6N5A%3D%3D</code></p><p>接着借助<code>Base64.getEncoder().encode</code>函数编码成: <code>ZHNYUE5IdmZJT3VPRyUyRml3bG5TYUNnJTNEJTNEOjRvWiUyQmYwRXhRaTFsUHdta1NXNk41QSUzRCUzRA</code></p><h5 id="触发过程"><a href="#触发过程" class="headerlink" title="触发过程"></a>触发过程</h5><ul><li>流程</li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211271003798.png" alt="SpringSecurity自动登录触发源码分析"></p><ul><li>找到关键的过滤器</li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211261610625.png" alt="image-20221126161049552"></p><p>配置了新的类<code>RememberMeConfigurer</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Configures Remember Me authentication. This typically involves the user checking a box when they enter their username and password that states to <span class="string">&quot;Remember Me&quot;</span>.</span><br></pre></td></tr></table></figure><p>这个类添加了一个Filter到 spring security chain</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211261641816.png" alt="image-20221126164157737"></p><p>所以核心代码在这里<code>RememberMeAuthenticationFilter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RememberMeAuthenticationFilter</span> <span class="variable">rememberMeFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RememberMeAuthenticationFilter</span>(</span><br><span class="line">      http.getSharedObject(AuthenticationManager.class), <span class="built_in">this</span>.rememberMeServices);</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211261647075.png" alt="image-20221126164713009"></p><p>这两个对象必须被指定, 否则会报错</p><h2 id="持久化令牌"><a href="#持久化令牌" class="headerlink" title="持久化令牌"></a>持久化令牌</h2><p>持久化令牌跟数据库相关, 与传统方式相比较, 多出了两个<code>key</code>: <code>series</code>和<code>token</code>.</p><p><strong><code>series</code>仅在用户使用密码重新登录时更新，而 <code>token</code> 会在每一个新的<code>session</code>会话中都重新生成</strong></p><p>持久化令牌方案 <strong>避免了散列加密方案中，一个令牌可以同时在多端登录的问题</strong>，这是因为<strong>每个<code>session</code>会话都会引发<code>token</code>的更新，即每个<code>token</code>仅支持单实例登录。</strong></p><p><strong>自动登录不会导致<code>series</code>变更，但每次自动登录都需要同时验证 <code>series</code>和 <code>token</code>两个值，所以这样的设计会更安全</strong></p><blockquote><p>因为当该令牌还未使用过自动登录就被盗取时，系统会在非法用户验证通过后刷新 <code>token</code> 值，此时在合法用户的浏览器中，该<code>token</code>值已经失效。当合法用户使用自动登录时，由于该<code>series</code>对应的 <code>token</code> 不同，系统可以推断该令牌可能已被盗用，从而做一些处理。例如，清理该用户的所有自动登录令牌，并通知该用户可能已被盗号等。</p></blockquote><p>下图是这两个值的由来:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211262009540.png" alt="image-20221126200952464"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211262009510.png" alt="image-20221126200905354"></p><h4 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做?"></a>怎么做?</h4><p>创建表结构<code>create table persistent_logins (username varchar(64) not null, series varchar(64) primary key, token varchar(64) not null, last_used timestamp not null)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> JdbcTokenRepositoryImpl <span class="title function_">tokenRepository</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">JdbcTokenRepositoryImpl</span> <span class="variable">tokenRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTokenRepositoryImpl</span>();</span><br><span class="line">    tokenRepository.setCreateTableOnStartup(<span class="literal">true</span>);</span><br><span class="line">    tokenRepository.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> tokenRepository;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> httpSecurity</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        .anyRequest()</span><br><span class="line">        .authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .formLogin()</span><br><span class="line">        .permitAll()</span><br><span class="line">        .and()</span><br><span class="line">        .rememberMe()</span><br><span class="line">        .tokenRepository(tokenRepository())</span><br><span class="line">        .and()</span><br><span class="line">        .csrf()</span><br><span class="line">        .disable()</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就会把 <code>rememberMe</code>的数据保存到数据库了</p><h4 id="底层都做了什么-1"><a href="#底层都做了什么-1" class="headerlink" title="底层都做了什么?"></a>底层都做了什么?</h4><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211261557418.png" alt="image-20221126155756328"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211261558302.png" alt="image-20221126155811220"></p><p>对<code>token</code>的 <code>curd</code></p><p>创建了一张表, <img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211261602423.png" alt="image-20221126160246340"></p><p>只要在登录的时候, 点击了 rememberme 就会在数据库创建</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211261603578.png" alt="image-20221126160339474"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211261606812.png" alt="image-20221126160652681"></p><h2 id="二次校验功能的实现"><a href="#二次校验功能的实现" class="headerlink" title="二次校验功能的实现"></a>二次校验功能的实现</h2><p>先给出规则:</p><ul><li><code>authenticated</code>方法: 不论是账号密码方式登录还是<code>rememberMe</code>方式登录都可以访问url</li><li><code>.antMatchers(&quot;remember&quot;).rememberMe()</code>方法: 只有<code>rememberMe</code>方式认证完毕后才能访问<code>url</code>, 其他方式都不可以</li><li><code>.antMatchers(&quot;again&quot;).fullyAuthenticated()</code>方法: 只能使用账户密码方式登录才能访问<code>url</code>, <code>rememberMe</code>方式访问不行</li></ul><blockquote><p>只要记住:</p><p><strong>通用</strong></p><p><strong>只能rememberMe</strong></p><p><strong>只能账户密码</strong></p></blockquote><p>现在我们以密码登录和记住我登录两种方式登录我们的网页</p><p>密码登录比记住我登录安全, 所以我们的 url 也分为两种类型, 敏感型和非敏感型</p><p>敏感型需要输入密码登录, 非敏感型 两种方式都能够登录</p><p>现在就能够有这种情况, 我们配置一个只能够通过<code>rememberMe</code>访问的<code>url</code>: <code>/remember</code></p><p>另外再配置一个只能够使用账号密码方式访问的<code>url</code>: <code>/auth</code></p><p>还有一个两种方式都能访问的<code>url</code>: <code>/both</code></p><blockquote><p>这里注意, 登录页面输入账号密码登录就是<code>fullyAuthenticated</code>模式登录, 即便你选择了<code>rememberMe</code>按钮记住我登录也算<code>fullyAuthenticated</code>方式登录</p></blockquote><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;remember&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">remember</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;remember&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;auth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">auth</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;auth&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;both&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">both</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;both&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> JdbcTokenRepositoryImpl <span class="title function_">tokenRepository</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">JdbcTokenRepositoryImpl</span> <span class="variable">tokenRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTokenRepositoryImpl</span>();</span><br><span class="line"><span class="comment">// 是否让 JdbcTokenRepositoryImpl 类创建表结构</span></span><br><span class="line">tokenRepository.setCreateTableOnStartup(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 设置数据源</span></span><br><span class="line">tokenRepository.setDataSource(dataSource);</span><br><span class="line"><span class="keyword">return</span> tokenRepository;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">return</span> httpSecurity</span><br><span class="line">.authorizeRequests()</span><br><span class="line">.antMatchers(<span class="string">&quot;/remember&quot;</span>).rememberMe() <span class="comment">// 通过remember方式才能访问</span></span><br><span class="line">.antMatchers(<span class="string">&quot;/auth&quot;</span>).fullyAuthenticated() <span class="comment">// 账户密码方式认证但没有rememberme方式的用户, 则可以访问</span></span><br><span class="line">.anyRequest().authenticated() <span class="comment">// 任何账户密码认证的用户都可以访问</span></span><br><span class="line">.and()</span><br><span class="line">.formLogin()</span><br><span class="line">.and()</span><br><span class="line">.rememberMe() <span class="comment">// // 启动rememberMe功能</span></span><br><span class="line"><span class="comment">//.key(&quot;zhazha&quot;)</span></span><br><span class="line">.tokenRepository(tokenRepository()) <span class="comment">// 添加到 rememberMe 中</span></span><br><span class="line">.and().csrf().disable()</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211280659395.png" alt="image-20221128065932231"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211280700588.png" alt="image-20221128070020497"></p><blockquote><p>配置完成之后, 你会发现不管你在登录的时候是否点击了 <code>rememberMe</code> 按钮, <code>/remember</code> url 都无法访问, 都是没有权限, 因为他们都是账号密码方式登录, 而非<code>rememberMe</code> 方式登录, <strong>直到你关闭浏览器, 再打开浏览器, 此时访问我们的<code>remember</code> url你会发现它可以直接登录, 而<code>auth</code> url 不能访问了</strong>, 大意是<strong>关闭浏览器再打开就创建了一个新的会话, 此时就会执行一次自动登录, 也就是<code>rememberMe</code>方式登录, 此时被配置为<code>fullyAuthenticated</code>的<code>/auth</code>就无法访问了</strong></p></blockquote><p>根据上面的提示, 我们在<strong>实战中应该保护的是<code>/auth</code> url, 所以<code>/remember</code> url 就不要配置 <code>rememberMe</code>了</strong>, 直接删除掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="keyword">return</span> httpSecurity</span><br><span class="line">            .authorizeRequests()</span><br><span class="line"><span class="comment">//          .antMatchers(&quot;/remember&quot;).rememberMe() // 通过remember方式才能访问</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/auth&quot;</span>).fullyAuthenticated() <span class="comment">// 账户密码方式认证但没有rememberme方式的用户, 则可以访问</span></span><br><span class="line">            .anyRequest().authenticated() <span class="comment">// 任何账户密码认证的用户都可以访问</span></span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .and()</span><br><span class="line">            .rememberMe() <span class="comment">// // 启动rememberMe功能</span></span><br><span class="line"><span class="comment">//          .key(&quot;zhazha&quot;)</span></span><br><span class="line">            .tokenRepository(tokenRepository()) <span class="comment">// 添加到 rememberMe 中</span></span><br><span class="line">            .and().csrf().disable()</span><br><span class="line">            .build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>意思是说, 只要是需要保护的 <code>url</code> 全部挂上<code>fullyAuthenticated</code>, 只有使用密码登录才能访问</p><p>现在三个 url 都可以访问</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211280702636.png" alt="image-20221128070236558"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211280702781.png" alt="image-20221128070257678"></p><p><strong>此时关闭浏览器, 再打开浏览器, 此时再访问<code>/auth</code> 将自动跳转到 登录页面</strong></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211280707201.gif" alt="动画"></p><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤器 </tag>
            
            <tag> 认证 </tag>
            
            <tag> 登录 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 记住我 </tag>
            
            <tag> 持久化令牌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16SpringSecurity-JSON格式登录</title>
      <link href="/2022/11/25/02springcloud/16SpringSecurity-JSON%E6%A0%BC%E5%BC%8F%E7%99%BB%E5%BD%95/"/>
      <url>/2022/11/25/02springcloud/16SpringSecurity-JSON%E6%A0%BC%E5%BC%8F%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringSecurity系列"><a href="#SpringSecurity系列" class="headerlink" title="SpringSecurity系列"></a><code>SpringSecurity</code>系列</h1><h2 id="使用JSON格式登录"><a href="#使用JSON格式登录" class="headerlink" title="使用JSON格式登录"></a>使用<code>JSON</code>格式登录</h2><p>两种方式: </p><ol><li>重写<code>UsernamePasswordAuthenticationFilter</code>过滤器</li><li>自定义登录<code>controller rest</code></li></ol><h3 id="重写UsernamePasswordAuthenticationFilter过滤器"><a href="#重写UsernamePasswordAuthenticationFilter过滤器" class="headerlink" title="重写UsernamePasswordAuthenticationFilter过滤器"></a>重写<code>UsernamePasswordAuthenticationFilter</code>过滤器</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p><code>JSON</code>格式登录, 前端认证的信息转发到后端后一定是一个<code>JSON</code>格式字符串, 存储在<code>request</code>请求内, 我们只要在<code>Spring Security</code>的过滤器链中找到抓取<code>request</code>请求的过滤器类的方法重写掉就好, 接着添加到<code>Spring Security</code>中</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211241851680.png" alt="image-20221124175929306"></p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>继承<code>UsernamePasswordAuthenticationFilter</code></li><li>添加到Spring Security</li></ol><ul><li>继承</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFilter</span> <span class="keyword">extends</span> <span class="title class_">UsernamePasswordAuthenticationFilter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="string">&quot;POST&quot;</span>.equals(request.getMethod())) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 拿到 session 验证码</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="type">String</span> <span class="variable">verifyCode</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;verify_code&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (MediaType.APPLICATION_JSON_VALUE.equalsIgnoreCase(request.getContentType()) || MediaType.APPLICATION_JSON_UTF8_VALUE.equalsIgnoreCase(request.getContentType())) &#123;</span><br><span class="line"><span class="comment">// 判断是否为JSON类型请求</span></span><br><span class="line">Map&lt;String, Object&gt; loginMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 获取request中的JSON</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">loginMap = objectMapper.readValue(request.getInputStream(), Map.class);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证码验证</span></span><br><span class="line"><span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> (String) loginMap.get(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">validCode(code, verifyCode);</span><br><span class="line"><span class="comment">// 拿到用户和密码</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) loginMap.get(getUsernameParameter());</span><br><span class="line">username = (username != <span class="literal">null</span>) ? username.trim() : <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> (String) loginMap.get(getPasswordParameter());</span><br><span class="line">password = (password != <span class="literal">null</span>) ? password : <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authRequest</span> <span class="operator">=</span> UsernamePasswordAuthenticationToken.unauthenticated(username,</span><br><span class="line">password);</span><br><span class="line">setDetails(request, authRequest);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 验证码验证</span></span><br><span class="line"><span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> (String) request.getAttribute(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">validCode(code, verifyCode);</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> obtainUsername(request);</span><br><span class="line">username = (username != <span class="literal">null</span>) ? username.trim() : <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> obtainPassword(request);</span><br><span class="line">password = (password != <span class="literal">null</span>) ? password : <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authRequest</span> <span class="operator">=</span> UsernamePasswordAuthenticationToken.unauthenticated(username,</span><br><span class="line">password);</span><br><span class="line">setDetails(request, authRequest);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validCode</span><span class="params">(String code, String verifyCode)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(verifyCode)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;请重新申请验证码!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 拿到 request 验证码</span></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(code)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;验证码不能为空!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对比</span></span><br><span class="line"><span class="keyword">if</span> (!StringUtils.equalsIgnoreCase(verifyCode, code)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;验证码不对!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> ObjectMapper <span class="title function_">objectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MybatisUserDetailsService</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">DaoAuthenticationProvider</span> <span class="variable">daoAuthenticationProvider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaoAuthenticationProvider</span>();</span><br><span class="line">      daoAuthenticationProvider.setUserDetailsService(userDetailsService());</span><br><span class="line">      <span class="comment">// 这里表示另一个数据源</span></span><br><span class="line"><span class="comment">//    daoAuthenticationProvider.setUserDetailsService(userDetailsService02());</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProviderManager</span>(daoAuthenticationProvider);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   LoginFilter <span class="title function_">loginFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="type">LoginFilter</span> <span class="variable">loginFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginFilter</span>();</span><br><span class="line">      loginFilter.setFilterProcessesUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">      loginFilter.setUsernameParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">      loginFilter.setPasswordParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">      loginFilter.setAuthenticationManager(authenticationManager());</span><br><span class="line">      loginFilter.setAuthenticationSuccessHandler(<span class="keyword">new</span> <span class="title class_">MyAuthenticationSuccessHandler</span>());</span><br><span class="line">      loginFilter.setAuthenticationFailureHandler(<span class="keyword">new</span> <span class="title class_">MyAuthenticationFailureHandler</span>());</span><br><span class="line">      <span class="keyword">return</span> loginFilter;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="keyword">return</span> httpSecurity</span><br><span class="line">            .addFilterAt(loginFilter(), UsernamePasswordAuthenticationFilter.class)</span><br><span class="line">            .authorizeHttpRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/verify-code&quot;</span>).permitAll()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/hello&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">            .permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .logout()</span><br><span class="line">            .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">            .logoutSuccessUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">            .clearAuthentication(<span class="literal">true</span>)</span><br><span class="line">            .invalidateHttpSession(<span class="literal">true</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .exceptionHandling().authenticationEntryPoint(<span class="keyword">new</span> <span class="title class_">MyAuthenticationEntryPoint</span>())</span><br><span class="line">            .and()</span><br><span class="line">            .build();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 未登录但访问需要登录的接口异常回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.write(<span class="string">&quot;您未登录，请先登录！&quot;</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.BadCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.LockedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录失败回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAuthenticationFailureHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationFailureHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> LockedException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;账户被锁定，请联系管理员!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;用户名或者密码输入错误，请重新输入!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(e.getMessage());</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录成功回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAuthenticationSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">principal</span> <span class="operator">=</span> authentication.getPrincipal();</span><br><span class="line">        response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(principal));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做了之后, 首页打不开, 原因在这里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> httpSecurity</span><br><span class="line">            .addFilterAt(loginFilter(), UsernamePasswordAuthenticationFilter.class)</span><br><span class="line">            .authorizeHttpRequests()</span><br></pre></td></tr></table></figure><p><code>addFilterAt</code>函数不能放置在前面, 在认证请求后才有登录功能, 代码改下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="keyword">return</span> httpSecurity</span><br><span class="line">         .authorizeHttpRequests()</span><br><span class="line">         .antMatchers(<span class="string">&quot;/verify-code&quot;</span>).permitAll()</span><br><span class="line">         .anyRequest()</span><br><span class="line">         .authenticated()</span><br><span class="line">         .and()</span><br><span class="line">         .formLogin()</span><br><span class="line">         .defaultSuccessUrl(<span class="string">&quot;/hello&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">         .permitAll()</span><br><span class="line">         .and()</span><br><span class="line">         .logout()</span><br><span class="line">         .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">         .logoutSuccessUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">         .clearAuthentication(<span class="literal">true</span>)</span><br><span class="line">         .invalidateHttpSession(<span class="literal">true</span>)</span><br><span class="line">         .and()</span><br><span class="line">         .csrf()</span><br><span class="line">         .disable()</span><br><span class="line">         .addFilterAt(loginFilter(), UsernamePasswordAuthenticationFilter.class) <span class="comment">// 这个必须在后面, 不能放在前面, 否则会出错</span></span><br><span class="line">         .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> 过滤器 </tag>
            
            <tag> JSON </tag>
            
            <tag> 认证 </tag>
            
            <tag> 登录 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 图片验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15SpringSecurity-架构图</title>
      <link href="/2022/11/21/02springcloud/15SpringSecurity-%E6%9E%B6%E6%9E%84%E5%9B%BE/"/>
      <url>/2022/11/21/02springcloud/15SpringSecurity-%E6%9E%B6%E6%9E%84%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringSecurity架构"><a href="#SpringSecurity架构" class="headerlink" title="SpringSecurity架构"></a><code>SpringSecurity</code>架构</h1><p>官方用几张图片就较为简单的显示了<code>SpringSecurity</code>的架构</p><h2 id="第一张图"><a href="#第一张图" class="headerlink" title="第一张图"></a>第一张图</h2><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211210644201.png" alt="image-20221121064439555"></p><p>开篇第一句话 “<code>SpringSecurity</code>支持基于<code>Servlet Filters</code>“</p><p>第二句话解释了上图图示</p><p>The client sends a request to the application, and the container creates a <code>FilterChain</code> which contains the <code>Filter</code>s and <code>Servlet</code> that should process the <code>HttpServletRequest</code> based on the path of the request URI.</p><p>需要关注的是 <code>based on the path of the request URI</code> <strong>过滤器根据 request URI路径 拦截</strong></p><p>除此之外他也说了除<code>DispatcherServlet</code>外的其他过滤器的功能:</p><ul><li>要么切断<code>Filter Chain</code>(过滤器链), 通常这样的<code>Filter</code>会把执行的结果写入<code>HttpServletResponse</code></li><li>要么修改准备传递给下游<code>Filter</code>的<code>HttpServletRequest</code>或者<code>HttpServletResponse</code></li></ul><p>然后给出了一个<code>FilterChain</code>工作的源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> &#123;</span><br><span class="line"><span class="comment">// do something before the rest of the application</span></span><br><span class="line">    chain.doFilter(request, response); <span class="comment">// invoke the rest of the application</span></span><br><span class="line">    <span class="comment">// do something after the rest of the application</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对的, 就是 <code>doFilter</code>, 相当于 <code>nextFilter</code></p><p>最后强调了 <strong>Filter 之间的 顺序很重要</strong> 这点记住了, 要考</p><h2 id="第二张图"><a href="#第二张图" class="headerlink" title="第二张图"></a>第二张图</h2><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211210704550.png" alt="image-20221121070407474"></p><p>可以看出来<code>DelegatingFilterProxy</code> 包装了一个 <code>Bean Filter</code>, 这个 <code>Bean Filter</code>是 <code>Spring Bean</code>获取出来的过滤器</p><p>这张图片主要强调 <code>DelegatingFilterProxy</code> , 一个在 <code>servlet</code> 和 <code>Spring</code> 之间牵线搭桥的家伙, 他的本质还是一个<code>Filter</code>过滤器</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211211336508.png" alt="image-20221121133613411"></p><p>脱离官方文档, 我们来仔细看看这个过滤器</p><h3 id="初始化过程"><a href="#初始化过程" class="headerlink" title="初始化过程"></a>初始化过程</h3><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211211322819.png" alt="image-20221121131225282"></p><p>从上面那张图中可以瞄准如下图所示的函数</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211211332455.png" alt="image-20221121133202331"></p><p>从<code>SpringMVC</code>上下文中获取 <code>Filter</code> </p><blockquote><p>这不就刚好诠释了<code>DelegatingFilterProxy</code>的作用么?</p></blockquote><p>再跟</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211211335272.png" alt="image-20221121133511163"></p><p>不是刚好配合上了么?</p><p>我们查找过滤器接口函数<code>init</code></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211211325430.png" alt="image-20221121132551324"></p><p>可以看到这个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">   <span class="comment">// 这个函数调用的是</span></span><br><span class="line">   initFilterBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211211329227.png" alt="image-20221121132908140"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initFilterBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="built_in">this</span>.delegateMonitor) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.delegate == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.targetBeanName == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.targetBeanName = getFilterName();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 直接获取 SpringMVC 的上下文</span></span><br><span class="line">         <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> findWebApplicationContext();</span><br><span class="line">         <span class="keyword">if</span> (wac != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将获取到的 Filter 存储在delegate</span></span><br><span class="line">            <span class="built_in">this</span>.delegate = initDelegate(wac);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据targetBeanName从上下文中获取 Filter 过滤器</span></span><br><span class="line"><span class="keyword">protected</span> Filter <span class="title function_">initDelegate</span><span class="params">(WebApplicationContext wac)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">   <span class="comment">// 获取 spring 容器中的 targetBeanName</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">targetBeanName</span> <span class="operator">=</span> getTargetBeanName();</span><br><span class="line">   <span class="comment">// 从SpringMVC中获取Filter</span></span><br><span class="line">   <span class="type">Filter</span> <span class="variable">delegate</span> <span class="operator">=</span> wac.getBean(targetBeanName, Filter.class);</span><br><span class="line">   <span class="keyword">if</span> (isTargetFilterLifecycle()) &#123;</span><br><span class="line">      delegate.init(getFilterConfig());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 返回 Filter</span></span><br><span class="line">   <span class="keyword">return</span> delegate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>targetBeanName</code>属性的值哪来的? 看下图</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211211320589.png" alt="image-20221121132040517"></p><p>他有4个构造函数, 其中第三个构造类我找到了 Example 代码</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211211322214.png" alt="image-20221121132201135"></p><p>一看就知道是 <code>Shiro</code> 框架配置的<code>filter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">DelegatingFilterProxy</span><span class="params">(String targetBeanName)</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>(targetBeanName, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211211345602.png" alt="image-20221121134528522"></p><h3 id="调用Filter的过程"><a href="#调用Filter的过程" class="headerlink" title="调用Filter的过程"></a>调用Filter的过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain filterChain)</span></span><br><span class="line">      <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果需要, 可以懒加载初始化 delegate</span></span><br><span class="line">   <span class="type">Filter</span> <span class="variable">delegateToUse</span> <span class="operator">=</span> <span class="built_in">this</span>.delegate;</span><br><span class="line">   <span class="keyword">if</span> (delegateToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="built_in">this</span>.delegateMonitor) &#123;</span><br><span class="line">         delegateToUse = <span class="built_in">this</span>.delegate;</span><br><span class="line">         <span class="keyword">if</span> (delegateToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> findWebApplicationContext();</span><br><span class="line">            <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No WebApplicationContext found: &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;no ContextLoaderListener or DispatcherServlet registered?&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            delegateToUse = initDelegate(wac);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">this</span>.delegate = delegateToUse;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 走我们获得的 DelegatingFilterProxy 的 doFilter</span></span><br><span class="line">   invokeDelegate(delegateToUse, request, response, filterChain);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">invokeDelegate</span><span class="params">(</span></span><br><span class="line"><span class="params">      Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain)</span></span><br><span class="line">      <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">   delegate.doFilter(request, response, filterChain);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><code>DelegatingFilterProxy</code>的另一个好处就是允许延迟查找<code>Filter Bean</code>实例</p><p>这是非常重要的, 因为在容器启动之前, 容器需要注册<code>Filter</code>实例. 然而, <code>Spring</code>通常使用<code>ContextLoaderListener</code>去加载没有完成的<code>Spring Beans</code>, 直到注册了需要的<code>Filter</code>实例之后.</p><h2 id="第三张图"><a href="#第三张图" class="headerlink" title="第三张图"></a>第三张图</h2><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211211427142.png" alt="image-20221121142744068"></p><p>在<code>FilterChainProxy</code>中包含<code>Spring Security</code>的<code>servlet</code>支持.</p><p><code>FilterChainProxy</code>是一个<code>SpringSecurity</code>提供的特殊<code>Filter</code>, <code>FilterChainProxy</code>允许通过<code>SecurityFilterChain</code>委托给多个<code>Filter</code>实例. 因为<code>FilterChainProxy</code>是一个Bean对象, 它通常被包装在<code>DelegatingFilterProxy</code>中</p><h2 id="第四张图"><a href="#第四张图" class="headerlink" title="第四张图"></a>第四张图</h2><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211211442719.png" alt="image-20221121144257631"></p><p>通过<code>FilterChainProxy</code> 使用<code>SecurityFilterChain</code> 以明确为此<code>request</code>调用哪些<code>Spring Security Filters</code></p><blockquote><p>意思就是<code>SecurityFilterChain</code>相当于<code>Filter</code>数组咯?</p></blockquote><p>在 <code>SecurityFilterChain</code>中的<code>Security Filters</code>通常是一个<code>Beans</code>, 但他们被注册在<code>FilterChainProxy</code>而不是<code>DelegatingFilterProxy.</code></p><p><code>FilterChainProxy</code>提供了一堆比较好的方式以直接注册到<code>Servlet</code>容器或者<code>DelegatingFilterProxy</code></p><p>首先, <code>FilterChainProxy</code>为所有 <code>Spring Security</code> 的 <code>Servlet</code> 支持提供了一个起点, 因为这个原因, 如果你正在尝试检修<code>Spring Security’s Servlet</code>支持, 在<code>FilterChainProxy</code>中添加一个调试点是非常好的开启方式.</p><p>此外, 当调用<code>SecurityFilterChain</code> 时, <code>FilterChainProxy</code>明确的提供了更多灵活的操作.</p><p>在<code>servlet</code>容器中, 只根据<code>URL</code>调用过滤器, 然而<code>FilterChainProxy</code>可以通过利用<code>RequestMatcher</code>接口在<code>HttpServletRequest</code>中根据任何方式确定调用关系</p><p>事实上, <code>FilterChainProxy</code> 可以被用于确定使用哪一个<code>SecurityFilterChain</code>. 这允许为你的引用的不同片段提供完全隔离的配置.</p><h2 id="第五张图"><a href="#第五张图" class="headerlink" title="第五张图"></a>第五张图</h2><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211211652993.png" alt="image-20221121165232890"></p><p>在多个<code>SecurityFilterChain</code>块中, <code>FilterChainProxy</code>决定使用哪一个<code>SecurityFilterChain</code>.</p><p>只有第一次匹配的<code>SecurityFilterChain</code>将比调用. 如果请求了<code>/api/messages/</code>的URL, 那么它将会匹配<code>SecurityFilterChain0</code>的<code>/api/**</code>, 所以即便它匹配了<code>SecurityFilterChainn</code>, 也只会调用<code>SecurityFilterChain0</code></p><p>如果<code>/message/</code>的URL被请求, 他将不会匹配<code>SecurityFilterChain0</code>的<code>/api/**</code>, 所以<code>FilterChainProxy</code>将会继续查找每一个<code>SecurityFilterChain</code>.</p><p>假设匹配的过程中没有符合的<code>SecurityFilterChain</code>, 将会匹配<code>/**</code>也就是<code>SecurityFilterChainn</code></p><p>注意, <code>SecurityFilterChain0</code>只有三个<code>security</code>过滤器对象被配置, 然而<code>SecurityFilterChainn</code>有四个<code>security</code>过滤器被配置.</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211211713843.png" alt="image-20221121171324744"></p><p>重要的是要注意，每个 <code>SecurityFilterChain</code> 都可以是唯一的并且是隔离配置的。事实上，如果应用程序希望 <code>Spring Security</code> 忽略某些请求，则 <code>SecurityFilterChain</code> 可能具有零个安全过滤器</p><h2 id="SpringSecurity异常处理"><a href="#SpringSecurity异常处理" class="headerlink" title="SpringSecurity异常处理"></a><code>SpringSecurity</code>异常处理</h2><p><code>ExceptionTranslationFilter</code>允许将<code>AccessDeniedException</code>和<code>AuthenticationException</code>写入到HTTP 响应</p><p><code>ExceptionTranslationFilter</code>被插入到<code>FilterChainProxy</code>作为<code>Security Filters</code>的一部分</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211211746679.png" alt="image-20221121174603578"></p><ul><li><p>首先, <code>ExceptionTranslationFilter</code>调用了<code>FilterChain.doFilter(request, response)</code>去调用应用的<code>restful</code></p></li><li><p>如果没有认证用户, 或者它抛出了<code>AuthenticationException</code>则开始认证</p><ul><li>如果<code>SecurityContextHolder</code>被清空</li><li>在<code>RequestCache</code>保存了<code>HttpServletRequest</code>, 当用户认证成功, <code>RequestCache</code>被用于去回复源请求</li><li><code>AuthenticationEntryPoint</code>被用于从客户端请求凭据, 例如它可能重定向到登录页面, 或者发送<code>WWW-Authenticate header</code></li></ul></li><li><p>另外, 如果它有<code>AccessDeniedException</code>, 则访问拒绝. 调用<code>AccessDeniedHandler</code>去处理访问拒绝</p></li></ul><blockquote><p>如果应用程序未抛出<code>AccessDeniedException</code> 或者 <code>AuthenticationException</code>, 则<code>ExceptionTranslationFilter</code>不会做任何事情</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤器 </tag>
            
            <tag> 认证 </tag>
            
            <tag> 登录 </tag>
            
            <tag> 角色 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 图片验证码 </tag>
            
            <tag> 多数据源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14SpringSecurity-图片认证</title>
      <link href="/2022/11/20/02springcloud/14SpringSecurity-%E5%9B%BE%E7%89%87%E8%AE%A4%E8%AF%81/"/>
      <url>/2022/11/20/02springcloud/14SpringSecurity-%E5%9B%BE%E7%89%87%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>源码地址: <a href="https://gitee.com/bangiao_admin/springcloud_study_parent">springcloud_study_parent: 微服务学习 (gitee.com)</a></p><h1 id="SpringSecurity认证过程"><a href="#SpringSecurity认证过程" class="headerlink" title="SpringSecurity认证过程"></a>SpringSecurity认证过程</h1><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211191324979.png" alt="SpringSecurity认证流程"></p><h2 id="ProviderManager"><a href="#ProviderManager" class="headerlink" title="ProviderManager"></a>ProviderManager</h2><p><code>ProviderManager</code>是 <code>AuthenticationManager</code> 的一个重要实现类。在开始学习之前，我们先通过一幅图来了解一下<code>ProviderManager</code>和 <code>AuthenticationProvider</code>之间的关系，如图所示。</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211182146884.png" alt="image-20221118214618721"></p><p>在<code>Spring Security</code> 中，由于系统可能同时支持多种不同的认证方式，例如同时支持<strong>用户名&#x2F;密码认证</strong>、<strong>RememberMe认证</strong>、<strong>手机号码动态认证等</strong>，而不同的认证方式对应了不同的<code>AuthenticationProvider</code>，所以一个完整的认证流程可能由多个<code>AuthenticationProvider</code> 来提供。</p><p>多个<code>AuthenticationProvider</code>将组成一个列表，这个列表将由<code>ProviderManager</code> 代理。换句话说，在 <code>ProviderManager</code>中存在一个<code>AuthenticationProvider</code>列表，在<code>ProviderManager</code>中遍历列表中的每一个<code>AuthenticationProvider</code>去执行身份认证，最终得到认证结果。</p><p><code>ProviderManager</code>本身也可以再配置一个<code>AuthenticationManager</code>作为 <code>parent</code>，这样当<code>ProviderManager</code> 认证失败之后，就可以进入到 <code>parent</code> 中再次进行认证。理论上来说，<code>ProviderManager</code> 的 <code>parent</code>可以是任意类型的 <code>AuthenticationManager</code>，但是通常都是由<code>ProviderManager</code>来扮演<code>parent</code>的角色，也就是<code>ProviderManager</code>是<code>ProviderManager</code> 的 <code>parent</code>。</p><p><code>ProviderManager</code>本身也可以有多个，多个<code>ProviderManager</code>共用同一个<code>parent</code>，当存在多个过滤器链的时候非常有用。当存在多个过滤器链时，不同的路径可能对应不同的认证方式，但是不同路径可能又会同时存在一些共有的认证方式,这些共有的认证方式可以在<code>parent</code>中统一处理。</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211182151449.png" alt="image-20221118215136380"></p><h2 id="AbstractAuthenticationProcessingFilter"><a href="#AbstractAuthenticationProcessingFilter" class="headerlink" title="AbstractAuthenticationProcessingFilter"></a>AbstractAuthenticationProcessingFilter</h2><p>作为<code>Spring Security</code>过滤器链中的一环，<code>AbstractAuthenticationProcessingFilter</code>可以用来处理任何提交给它的身份认证，下图描述了<code>AbstractAuthenticationProcessingFilter</code> 的工作流程。</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211182159366.png" alt="image-20221118215904270"></p><p><code>AbstractAuthenticationProcessingFilter</code>作为一个抽象类,如果使用用户名&#x2F;密码的方式登录，那么它对应的实现类是<code>UsernamePasswordAuthenticationFilter</code>，构造出来的<code>Authentication</code>对象</p><p>则是<code>UseramePasswordAuthenticationToken</code>。至于<code>AuthenticationManager</code>，前面已经说过，一般情况下它的实现类就是<code>ProviderManager</code>，这里在 <code>ProviderManager</code> 中进行认证，认证成功就会进入认证成功的回调，否则进入认证失败的回调。因此，我们可以对上面的流程图再做进一步细化，如图下所示。</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211182200692.png" alt="image-20221118220020604"></p><ul><li>当用户提交登录请求时，<code>UsernamePasswordAuthenticationFilter</code>会从当前请求<code>HttpServletRequest</code>中提取出登录用户名&#x2F;密码，然后创建出一个<code>UsernamePasswordAuthenticationToken</code>对象。</li><li><code>UsernamePasswordAuthenticationToken</code>对象将被传入<code>ProviderManager</code>中进行具体的认证操作。</li><li>如果认证失败，则<code>SecurityContextHolder</code>中相关信息将被清除，登录失败回调也会被调用。</li><li>如果认证成功，则会进行登录信息存储、<code>Session</code>并发处理、登录成功事件发布以及登录成功方法回调等操作。</li></ul><blockquote><p>过程大多都在图片流程中, 所以就不详细分析了</p></blockquote><blockquote><p>至此登录流程大致分析完毕</p></blockquote><h1 id="配置多数据源"><a href="#配置多数据源" class="headerlink" title="配置多数据源"></a>配置多数据源</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h2><p>一个系统的数据来自多个数据源</p><blockquote><p>通俗点讲就是, 查找用户数据时, 如果一个库中的user表没有找到, 那么就到另一个库中查找user表</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>多数据源思路就是往下图的那个集合里挤更多的<code>AuthenticationProvider</code>对象</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211182231660.png" alt="image-20221118223143588"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211182234540.png" alt="image-20221118223428453"></p><blockquote><p>意味着我们可以通过 <code>new ProviderManager</code>的方式将我们的多数据源对象通过可变参数构造函数传递进去</p></blockquote><p>而我们的<code>UserDetailsService</code>变量存储在这里:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211182243679.png" alt="image-20221118224348581"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211182244579.png" alt="image-20221118224405531"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211182244076.png" alt="image-20221118224435027"></p><blockquote><p>这意味着, 我们传递给 <code>ProviderManager</code> 构造函数的参数对象时 <code>DaoAuthenticationProvider</code> 对象, 该对象需要调用 <code>setUserDetailsService</code> 方法将我们自定义实现的多数据源 <code>UserDetailsService</code>传递进去</p></blockquote><p>大概代码:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211190911588.png" alt="image-20221119091131149"></p><p>这样在执行的时候, <code>ProviderManager</code> 在<code>getProviders()</code>的时候就会拿到我们自定义的两个<code>UserDetailsService</code>, 都会去调用<code>loadUserByUsername</code>函数</p><p>而mybatis 多数据源思路也非常简单</p><p>借助 <code>MapperScan</code> 注解的<code>sqlSessionFactoryRef</code>属性就可以了</p><p>我们知道 <code>mybatis</code> 的源码和<code>hibernate</code>很像, 都是借助 <code>sessionFactory</code> 定义拿取 <code>session</code>, 而<code>Mybatis</code>拿取 <code>session</code>的类就叫做 <code>SqlSessionFactory</code>, 而这个类需要配置 <code>DataSource</code>, 不同的<code>DataSource</code>就有不同的数据源</p><p>所以思路就很简单了</p><ol><li>在 <code>application.properties</code> 中配置两个 <code>DataSource</code></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">########################## 主数据源 ##################################</span></span><br><span class="line"><span class="attr">spring.datasource.primary.jdbc-url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/demo1?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">spring.datasource.primary.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.primary.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.primary.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">########################## 第二个数据源 ###############################</span></span><br><span class="line"><span class="attr">spring.datasource.datasource2.jdbc-url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/demo2?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">spring.datasource.datasource2.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.datasource2.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.datasource2.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><ol start="2"><li>接着<code>MapperScan</code>扫描两个包</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.wdbyte.mapper.primary&quot;&#125;, sqlSessionFactoryRef = &quot;sqlSessionFactory&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.wdbyte.mapper.datasource2&quot;&#125;, sqlSessionFactoryRef = &quot;sqlSessionFactory2&quot;)</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置两个<code>sqlSessionFactory</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(name = &quot;dataSource&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.primary&quot;)</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(name = &quot;sqlSessionFactory&quot;)</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">(<span class="meta">@Qualifier(&quot;dataSource&quot;)</span> DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">SqlSessionFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">    bean.setDataSource(dataSource);</span><br><span class="line">    bean.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(<span class="string">&quot;classpath:mapper/*.xml&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> bean.getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(name = &quot;dataSource2&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.datasource2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(name = &quot;sqlSessionFactory2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">(<span class="meta">@Qualifier(&quot;dataSource2&quot;)</span> DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">SqlSessionFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">    bean.setDataSource(dataSource);</span><br><span class="line">    bean.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(<span class="string">&quot;classpath:mapper/*.xml&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> bean.getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样, 我们调用不同包的<code>Mapper</code>接口, 就意味着不同的<code>sqlSessionFactory</code>和数据源</p><h1 id="添加登录验证码"><a href="#添加登录验证码" class="headerlink" title="添加登录验证码"></a>添加登录验证码</h1><h2 id="添加图片验证码的目的是什么"><a href="#添加图片验证码的目的是什么" class="headerlink" title="添加图片验证码的目的是什么?"></a>添加图片验证码的目的是什么?</h2><p><strong>1、为了防止机器冒充人类做暴力破解：</strong>暴力破解想想就恐怖，这关系每个用户的网络安全，现在很多网站、APP都绑定用户的银行账户，有很多内容还涉及到个人隐私，如果被不法分子暴力破解，那损失可就大了。</p><p><strong>2、防止大规模在线注册滥用服务：</strong>很多机友肯定都很讨厌那些恶意注册灌水的，满满一屏全是恶意评论和广告，瞬间没有好心情；</p><p><strong>3、防止滥用在线批量化操作：</strong>比如在投票的时候，有些恶意刷票软件就可以实现批量化投票功能，想想自己辛苦拉票，人家一键就搞定？</p><p><strong>4、防止自动发布：</strong>比如早些年黑客们写一串代码就肆无忌惮地朝网络上倾倒大量的、无意义的僵尸信息，垃圾邮件、垃圾广告、垃圾评论到处乱飞。污染了网络环境的同时，更有甚者被广告诈骗。</p><p><strong>5、防止信息被大量采集聚合：</strong>互联网时代，最有价值的就是内容生产，精心创作的原创文章，一秒被爬取？肝颤啊。</p><h2 id="有什么方案"><a href="#有什么方案" class="headerlink" title="有什么方案?"></a>有什么方案?</h2><p>SpringSecurity下存在两种方案:</p><ul><li>基于过滤器</li><li>基于认证Provider</li></ul><h2 id="添加图片验证码思路"><a href="#添加图片验证码思路" class="headerlink" title="添加图片验证码思路"></a>添加图片验证码思路</h2><p>思路大体上很简单</p><ol><li>我们需要随机生成一个字符串</li><li>将字符串保存在某个介质(session)用于后续和客户输入的验证码进行匹配</li><li>随机的字符串转化成特定的图片</li><li>SpringMVC响应图片类型给前端</li></ol><p>使用google的图片验证码生成工具:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置图片格式样式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KaptchaConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultKaptcha <span class="title function_">captchaProducer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.border&quot;</span>, <span class="string">&quot;no&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.textproducer.char.length&quot;</span>,<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.image.height&quot;</span>,<span class="string">&quot;50&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.image.width&quot;</span>,<span class="string">&quot;150&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.obscurificator.impl&quot;</span>,<span class="string">&quot;com.google.code.kaptcha.impl.ShadowGimpy&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.textproducer.font.color&quot;</span>,<span class="string">&quot;black&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.textproducer.font.size&quot;</span>,<span class="string">&quot;40&quot;</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.noise.impl&quot;</span>,<span class="string">&quot;com.google.code.kaptcha.impl.NoNoise&quot;</span>);</span><br><span class="line">        <span class="comment">//properties.put(&quot;kaptcha.noise.impl&quot;,&quot;com.google.code.kaptcha.impl.DefaultNoise&quot;);</span></span><br><span class="line">        properties.put(<span class="string">&quot;kaptcha.textproducer.char.string&quot;</span>,<span class="string">&quot;acdefhkmnprtwxy2345678&quot;</span>);</span><br><span class="line">        <span class="type">DefaultKaptcha</span> <span class="variable">kaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultKaptcha</span>();</span><br><span class="line">        kaptcha.setConfig(<span class="keyword">new</span> <span class="title class_">Config</span>(properties));</span><br><span class="line">        <span class="keyword">return</span> kaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片路径:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyCodeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DefaultKaptcha producer;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/verify-code&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getVerifyCode</span><span class="params">(HttpServletResponse response, HttpSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">// 响应类型</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">       <span class="comment">// 生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> producer.createText();</span><br><span class="line">       <span class="comment">// 存储验证码</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;verify_code&quot;</span>, text);</span><br><span class="line">       <span class="comment">// 验证码生成为图片</span></span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> producer.createImage(text);</span><br><span class="line">       <span class="comment">// 响应给前端</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream()) &#123;</span><br><span class="line">            ImageIO.write(image, <span class="string">&quot;jpeg&quot;</span>, outputStream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端图片元素:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;code&quot;</span> <span class="attr">id</span>=<span class="string">&quot;code&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/verify-code&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;验证码&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基于过滤器"><a href="#基于过滤器" class="headerlink" title="基于过滤器"></a>基于过滤器</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>要如何整合到 SpringSecurity 上面进行验证呢?</p><p>非常简单, 根据上面我们分析的流程图</p><p>可以发现如图所示的流程比较合适添加我们的验证逻辑</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211191309926.png" alt="image-20221119130907349"></p><p>我们要继承这个<code>UsernamePasswordAuthenticationFilter</code>类, 给继承的类实现验证图片验证码的功能, 然后再去调用父类的<code>UsernamePasswordAuthenticationFilter</code>就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyCodeFilter</span> <span class="keyword">extends</span> <span class="title class_">UsernamePasswordAuthenticationFilter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        <span class="comment">// 需要是 POST 请求</span></span><br><span class="line">        <span class="keyword">if</span> (!request.getMethod().equals(<span class="string">&quot;POST&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationServiceException</span>(</span><br><span class="line">                    <span class="string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获得请求验证码值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">// 获得 session 中的 验证码值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sessionVerifyCode</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;verify_code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(code))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationServiceException</span>(<span class="string">&quot;验证码不能为空!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(sessionVerifyCode))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationServiceException</span>(<span class="string">&quot;请重新申请验证码!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!sessionVerifyCode.equalsIgnoreCase(code)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationServiceException</span>(<span class="string">&quot;验证码错误!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证码验证成功，清除 session 中的验证码</span></span><br><span class="line">        session.removeAttribute(<span class="string">&quot;verify_code&quot;</span>);</span><br><span class="line">        <span class="comment">// 验证码验证成功，走原本父类认证逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.attemptAuthentication(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种实现<code>UsernamePasswordAuthenticationFilter</code>的方法比较麻烦, 需要很多额外步骤</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211191532273.png" alt="image-20221119153232201"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211191532058.png" alt="image-20221119153257976"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211191533090.png" alt="image-20221119153314033"></p><p>特别麻烦</p><p>但是<code>UsernamePasswordAuthenticationFilter</code>是唯一选择么?</p><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>其实不是, 我们<strong>只要保证我们自定义的过滤器在<code>UsernamePasswordAuthenticationFilter</code>过滤器之前执行</strong>就行了</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>导入依赖</li><li>自定义过滤器</li><li>把过滤器加入到Spring容器</li><li>把过滤器放在<code>UsernamePasswordAuthenticationFilter</code>之前执行</li></ol><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--验证码生成器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>记得这里需要导入<code>thymeleaf</code>, 如果你没有使用JSON作为Controller响应结果的话</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mybatis-spring-security</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/spring_security?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">html</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 OncePerRequestFilter 的方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidateCodeFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 注意这里有定死的代码, 不合理, 生产环境需要优化</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.startsWithIgnoreCase(<span class="string">&quot;/login&quot;</span>, request.getRequestURI()) &amp;&amp; StringUtils.startsWithIgnoreCase(request.getMethod(), <span class="string">&quot;post&quot;</span>)) &#123;</span><br><span class="line">            validateCode(request);</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validateCode</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">// 获取保存在session中的code</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">verifyCode</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;verify_code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(verifyCode)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;请重新申请验证码!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拿到前端的 code</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(code)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;验证码不能为空!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对比</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.equalsIgnoreCase(code, verifyCode)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AuthenticationServiceException</span>(<span class="string">&quot;验证码错误!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除掉 session 中的 verify_code</span></span><br><span class="line">        session.removeAttribute(<span class="string">&quot;verify_code&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="把过滤器加入到Spring容器"><a href="#把过滤器加入到Spring容器" class="headerlink" title="把过滤器加入到Spring容器"></a>把过滤器加入到Spring容器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ValidateCodeFilter <span class="title function_">validateCodeFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeFilter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="把过滤器放在UsernamePasswordAuthenticationFilter之前执行"><a href="#把过滤器放在UsernamePasswordAuthenticationFilter之前执行" class="headerlink" title="把过滤器放在UsernamePasswordAuthenticationFilter之前执行"></a>把过滤器放在<code>UsernamePasswordAuthenticationFilter</code>之前执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> httpSecurity</span><br><span class="line">            .addFilterBefore(validateCodeFilter(), UsernamePasswordAuthenticationFilter.class)</span><br><span class="line">            .authorizeHttpRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/verify-code&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;/css/**&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;/images/**&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;/js/**&quot;</span>)</span><br><span class="line">            .permitAll()</span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/index&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">            .permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf()</span><br><span class="line">            .disable()</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>核心代码: <code>httpSecurity.addFilterBefore</code></p></blockquote><h2 id="基于认证器"><a href="#基于认证器" class="headerlink" title="基于认证器"></a>基于认证器</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><ol><li>查找目标类</li><li>继承目标类重写调用数据库之前的方法</li><li>将自定义的类加入到 SpringSecurity 调用流程</li></ol><p>还是回到开头的那张图片</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211201249447.png" alt="image-20221120124955970"></p><p>核心验证代码的过程在这里</p><p>也就是</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211201250658.png" alt="image-20221120125023550"></p><p>这个抽象类的一个方法, 但实际上是旁边继承了该抽象方法的类在执行的过程中调用了<code>additionalAuthenticationChecks</code>函数</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211201253387.png" alt="image-20221120125300264"></p><blockquote><p>为什么要找<code>retrieveUser</code>函数之前的函数呢? 因为<code>retrieveUser</code>这个函数查询了数据库, 数据库的资源是有限的, 验证码的一个作用是防止机器, 外挂等直接访问我们的数据库</p></blockquote><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211201254955.png" alt="image-20221120125400797"></p><p>最终我们找到了上面的方法</p><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol><li>重写目标类和方法</li><li>添加到Spring Security调用流程中</li></ol><h4 id="重写目标类和方法"><a href="#重写目标类和方法" class="headerlink" title="重写目标类和方法"></a>重写目标类和方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyCodeAuthenticationProvider</span> <span class="keyword">extends</span> <span class="title class_">DaoAuthenticationProvider</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> ((ServletRequestAttributes) Objects.requireNonNull(RequestContextHolder.getRequestAttributes())).getRequest();</span><br><span class="line"><span class="comment">// 获得请求验证码值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(code)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;验证码不能为空!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获得 session 中的 验证码值</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"><span class="type">String</span> <span class="variable">verifyCode</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;verify_code&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isBlank(verifyCode))&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;请重新申请验证码!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.equalsIgnoreCase(code, verifyCode)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ValidateCodeException</span>(<span class="string">&quot;验证码错误!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证码验证成功，清除 session 中的验证码</span></span><br><span class="line">session.removeAttribute(<span class="string">&quot;verify_code&quot;</span>);</span><br><span class="line"><span class="comment">// 验证码验证成功，走原本父类认证逻辑</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.authenticate(authentication);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加到Spring-Security调用流程中"><a href="#添加到Spring-Security调用流程中" class="headerlink" title="添加到Spring Security调用流程中"></a>添加到Spring Security调用流程中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// 由于我数据库中有很多种加密算法, 所以使用了PasswordEncoderFactories</span></span><br><span class="line">      <span class="comment">// 正常情况只需要 return new BCryptPasswordEncoder() 密码验证器</span></span><br><span class="line">      <span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">protected</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// 这里从数据库中获取 user 账户和密码等</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MybatisUserDetailsService</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   AuthenticationProvider <span class="title function_">verifyCodeAuthenticationProvider</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">VerifyCodeAuthenticationProvider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VerifyCodeAuthenticationProvider</span>();</span><br><span class="line">      <span class="comment">// provider 需要密码验证</span></span><br><span class="line">      provider.setPasswordEncoder(passwordEncoder());</span><br><span class="line">      <span class="comment">// provider 需要从数据库获取用户信息的类</span></span><br><span class="line">      provider.setUserDetailsService(userDetailsService());</span><br><span class="line">      <span class="keyword">return</span> provider;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="comment">// 将 provider 添加到 Manager</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProviderManager</span>(verifyCodeAuthenticationProvider());</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="keyword">return</span> httpSecurity</span><br><span class="line">            .authorizeHttpRequests()</span><br><span class="line">            .antMatchers(<span class="string">&quot;/verify-code&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/images/**&quot;</span>, <span class="string">&quot;/js/**&quot;</span>)</span><br><span class="line">            .permitAll()</span><br><span class="line">            .anyRequest()</span><br><span class="line">            .authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">            .defaultSuccessUrl(<span class="string">&quot;/index&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">            .permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf()</span><br><span class="line">            .disable()</span><br><span class="line">            .build();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加图片验证码章节参考自: <a href="https://juejin.cn/post/7165499171556818981">https://juejin.cn/post/7165499171556818981</a></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211201551358.png" alt="image-20221120155137244"></p><p>源码看这两个部分: <img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211201552248.png" alt="image-20221120155259071"></p></blockquote><p>至此认证流程的分析和相关功能基本完成</p><h2 id="基于认证器和WebAuthenticationDetails"><a href="#基于认证器和WebAuthenticationDetails" class="headerlink" title="基于认证器和WebAuthenticationDetails"></a>基于认证器和<code>WebAuthenticationDetails</code></h2><p>在认证器思路中, 我们发现这样一段代码很是突兀</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211271715934.png" alt="image-20221127171537751"></p><p>跟中途插入似的</p><h3 id="主要思路"><a href="#主要思路" class="headerlink" title="主要思路"></a>主要思路</h3><p>在基于认证器的基础上, 我们将操控的元素修改下.</p><p><code>WebAuthenticationDetails</code>表示额外的用户信息.</p><p>请求用户的<code>remoteAddress</code>和<code>sessionId</code>等信息，这两个信息都是在另一个<code>WebAuthenticationDetails</code>类中定义的，所以我们可以利用<code>WebAuthenticationDetails</code>来封装用户的额外信息。</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211271555483.png" alt="image-20221127155544274"></p><p>我们现在的主体思路继承上面的那个类, 添加我们图片的认证码</p><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h3><ol><li>我们需要controller用于获取图片</li></ol>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> 过滤器 </tag>
            
            <tag> JPA </tag>
            
            <tag> 认证 </tag>
            
            <tag> 登录 </tag>
            
            <tag> 角色 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 图片验证码 </tag>
            
            <tag> 多数据源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13SpringSecurity-将密码保存数据库</title>
      <link href="/2022/11/18/02springcloud/13SpringSecurity-%E5%B0%86%E5%AF%86%E7%A0%81%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/11/18/02springcloud/13SpringSecurity-%E5%B0%86%E5%AF%86%E7%A0%81%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringSecurity认证"><a href="#SpringSecurity认证" class="headerlink" title="SpringSecurity认证"></a>SpringSecurity认证</h1><h2 id="用户数据保存到数据库"><a href="#用户数据保存到数据库" class="headerlink" title="用户数据保存到数据库"></a>用户数据保存到数据库</h2><p>在实际开发中, 我们对用户的crud必须跟数据库挂钩, 而不是内存, 本章将罗列怎么做的过程</p><h3 id="基于内存"><a href="#基于内存" class="headerlink" title="基于内存"></a>基于内存</h3><p>前面案例中用户的定义本质上还是基于内存，只是我们没有将<code>InMemoryUserDetailsManager</code>类明确抽出来自定义，现在我们通过自定义<code>InMemoryUserDetailsManager</code>来看一下基于内存的用户是如何自定义的。<br>重写<code>WebSecurityConfigurerAdapter</code>类的<code>configure(AuthenticationManagerBuilder)</code>方法，内容如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">InMemoryUserDetailsManager</span> <span class="variable">detailsManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line">detailsManager.createUser(User.withUsername(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line">.password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>)</span><br><span class="line">.roles(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">.build());</span><br><span class="line">detailsManager.createUser(User.withUsername(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">.password(<span class="string">&quot;&#123;noop&#125;666666&quot;</span>)</span><br><span class="line">.roles(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">.build());</span><br><span class="line">auth.userDetailsService(detailsManager);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是<code>WebSecurityConfigurerAdapter</code>早就不推荐使用了</p><p>现在都是这么用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserDetailsService <span class="title function_">inMemoryUserDetailsManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">InMemoryUserDetailsManager</span> <span class="variable">userDetailsManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line">    userDetailsManager.createUser(User.withUsername(<span class="string">&quot;zhazha&quot;</span>)</span><br><span class="line">                                  .password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>)</span><br><span class="line">                                  .roles(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                                  .build());</span><br><span class="line">    userDetailsManager.createUser(User.withUsername(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">                                  .password(<span class="string">&quot;&#123;noop&#125;666666&quot;</span>)</span><br><span class="line">                                  .roles(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                                  .build());</span><br><span class="line">    <span class="keyword">return</span> userDetailsManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户账户都被 put 到这个对象中(也就是内存中)</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151112897.png" alt="image-20221115111214823"></p><p>这些代码都相当的简单, 就不深入研究了</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151113967.png" alt="image-20221115111310877"></p><p>需要仔细研究的是这个:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151214564.png" alt="image-20221115121426489"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151216526.png" alt="image-20221115121605411"></p><p>只要Spring容器中不存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AuthenticationManager.class, AuthenticationProvider.class, UserDetailsService.class, AuthenticationManagerResolver.class</span><br></pre></td></tr></table></figure><p>这几个类的Bean, 那么这个自动配置类就开启, 下面的<code>InMemoryUserDetailsManager</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">public</span> InMemoryUserDetailsManager <span class="title function_">inMemoryUserDetailsManager</span><span class="params">(SecurityProperties properties, ObjectProvider&lt;PasswordEncoder&gt; passwordEncoder)</span> &#123;</span><br><span class="line">   SecurityProperties.<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> properties.getUser();</span><br><span class="line">   List&lt;String&gt; roles = user.getRoles();</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>(</span><br><span class="line">         User.withUsername(user.getName()).password(getOrDeducePassword(user, passwordEncoder.getIfAvailable())).roles(StringUtils.toStringArray(roles)).build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就会生效, 否则不生效</p><blockquote><p>意味着我们自己实现一个Spring Bean 为 <code>AuthenticationManager.class, AuthenticationProvider.class, UserDetailsService.class, AuthenticationManagerResolver.class</code>这些对象的时候, 就需要给他一种<code>User</code>数据存储的对象</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151221020.png" alt="image-20221115122146949"></p><p>自定义实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">   </span><br><span class="line">   UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部使用<code>mybatis/JPA</code>根据<code>username</code>用户, 并将其加入到<code>Spring</code>容器内, <code>SpringSecurity</code>就会使用我们的<code>UserDetailsService</code></p></blockquote><h3 id="基于JDBCUserDetailsManager"><a href="#基于JDBCUserDetailsManager" class="headerlink" title="基于JDBCUserDetailsManager"></a>基于JDBCUserDetailsManager</h3><p><code>JdbcUserDetailsManager</code>支持将用户数据持久化到数据库，同时它封装了一系列操作用户的方法，例如用户的添加、更新、查找等。</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151114602.png" alt="image-20221115111448510"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151115284.png" alt="image-20221115111521209"></p><p>而表结构在这里<img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151123500.png" alt="image-20221115112325406"></p><p>另一方面，由于要将数据存入数据库中，所以我们的项目也要提供数据库支持，<code>JdbcUserDetailsManager</code>底层实际上是使用<code>JdbcTemplate</code> 来完成的</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151125870.png" alt="image-20221115112551796"></p><p>需要引入这两个依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在application.yml中填入:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/spring_security?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br></pre></td></tr></table></figure><p>执行刚刚的<code>user.ddl</code> sql语句, 创建表结构</p><p>这种方式虽然可以对数据库进行curd, 但是不太灵活</p><h3 id="基于mybatis"><a href="#基于mybatis" class="headerlink" title="基于mybatis"></a>基于mybatis</h3><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211172104935.png" alt="image-20221117210444814"></p><p>代码可以在这里抄:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NOOP_PASSWORD_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;&#123;noop&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PASSWORD_ALGORITHM_PATTERN</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^\\&#123;.+&#125;.*$&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(UserDetailsServiceAutoConfiguration.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">public</span> InMemoryUserDetailsManager <span class="title function_">inMemoryUserDetailsManager</span><span class="params">(SecurityProperties properties,</span></span><br><span class="line"><span class="params">ObjectProvider&lt;PasswordEncoder&gt; passwordEncoder)</span> &#123;</span><br><span class="line">SecurityProperties.<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> properties.getUser();</span><br><span class="line">List&lt;String&gt; roles = user.getRoles();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>(</span><br><span class="line">User.withUsername(user.getName()).password(getOrDeducePassword(user, passwordEncoder.getIfAvailable()))</span><br><span class="line">.roles(StringUtils.toStringArray(roles)).build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mybatis-spring-security</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/spring_security?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.zhazha.springcloud.entity</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Roles</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserRole</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long roleId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, UserDetails &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean enabled;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean accountnonexpired;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean accountnonlocked;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean credentialsnonexpired;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Roles&gt; rolesList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        ArrayList&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Roles roles : getRolesList()) &#123;</span><br><span class="line">            authorities.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(roles.getRole()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountnonexpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountnonlocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> credentialsnonexpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enabled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysUserRoleMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * insert record to table</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record the record</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> insert count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(SysUserRole record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * insert record to table selective</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record the record</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> insert count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertSelective</span><span class="params">(SysUserRole record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertBatch</span><span class="params">(<span class="meta">@Param(&quot;sysUserRoleList&quot;)</span> List&lt;SysUserRole&gt; sysUserRoleList)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UsersMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * delete by primary key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id primaryKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> deleteCount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByPrimaryKey</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * insert record to table</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record the record</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> insert count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(Users record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * insert record to table selective</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record the record</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> insert count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertSelective</span><span class="params">(Users record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * select by primary key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id primary key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> object by primary key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Users <span class="title function_">selectByPrimaryKey</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * update record selective</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record the updated record</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> update count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKeySelective</span><span class="params">(Users record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * update record</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record the updated record</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> update count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKey</span><span class="params">(Users record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from users&quot;)</span></span><br><span class="line">    List&lt;Users&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select *, r.id rid from spring_security.users u &quot; +</span></span><br><span class="line"><span class="meta">            &quot;join sys_user_role sur on u.id = sur.user_id &quot; +</span></span><br><span class="line"><span class="meta">            &quot;join roles r on r.id = sur.role_id &quot; +</span></span><br><span class="line"><span class="meta">            &quot;where u.username = #&#123;username&#125; and u.enabled = true &quot;)</span></span><br><span class="line">    <span class="meta">@ResultMap(&quot;UserJoinRole&quot;)</span></span><br><span class="line">    Users <span class="title function_">loadUserByUsername</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RolesMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * delete by primary key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id primaryKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> deleteCount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByPrimaryKey</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * insert record to table</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record the record</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> insert count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(Roles record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * insert record to table selective</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record the record</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> insert count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertSelective</span><span class="params">(Roles record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * select by primary key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id primary key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> object by primary key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Roles <span class="title function_">selectByPrimaryKey</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * update record selective</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record the updated record</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> update count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKeySelective</span><span class="params">(Roles record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * update record</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record the updated record</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> update count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKey</span><span class="params">(Roles record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from roles&quot;)</span></span><br><span class="line">    List&lt;Roles&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.zhazha.springcloud.entity.Users&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--@mbg.generated--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--@Table users--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;enabled&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;enabled&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;accountNonExpired&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;accountnonexpired&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;accountNonLocked&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;accountnonlocked&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;credentialsNonExpired&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIT&quot;</span> <span class="attr">property</span>=<span class="string">&quot;credentialsnonexpired&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserJoinRole&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Users&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;rolesList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.zhazha.springcloud.entity.Roles&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他Mapper xml 就不贴了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUserDetailsService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UsersMapper usersMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> usersMapper.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == users) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(username);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MybatisUserDetailsService</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">return</span> httpSecurity.authorizeHttpRequests()</span><br><span class="line">.anyRequest().authenticated()</span><br><span class="line">.and()</span><br><span class="line">.formLogin()</span><br><span class="line">.defaultSuccessUrl(<span class="string">&quot;/hello&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">.permitAll()</span><br><span class="line">.and()</span><br><span class="line">.logout()</span><br><span class="line">.logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">.logoutSuccessUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">.clearAuthentication(<span class="literal">true</span>)</span><br><span class="line">.invalidateHttpSession(<span class="literal">true</span>)</span><br><span class="line">.and()</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> HashMap&lt;String, Object&gt; <span class="title function_">hello</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">Object</span> <span class="variable">credentials</span> <span class="operator">=</span> authentication.getCredentials();</span><br><span class="line">Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities = authentication.getAuthorities();</span><br><span class="line"><span class="type">Object</span> <span class="variable">details</span> <span class="operator">=</span> authentication.getDetails();</span><br><span class="line"><span class="type">Object</span> <span class="variable">principal</span> <span class="operator">=</span> authentication.getPrincipal();</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> authentication.getName();</span><br><span class="line">map.put(<span class="string">&quot;credentials&quot;</span>, credentials);</span><br><span class="line">map.put(<span class="string">&quot;authorities&quot;</span>, authorities);</span><br><span class="line">map.put(<span class="string">&quot;details&quot;</span>, details);</span><br><span class="line">map.put(<span class="string">&quot;principal&quot;</span>, principal);</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211171135949.png" alt="image-20221117113023354"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211171135684.png" alt="image-20221117113545608"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(value = &quot;com.zhazha.springcloud.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisSpringSecurityApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(MybatisSpringSecurityApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于JPA"><a href="#基于JPA" class="headerlink" title="基于JPA"></a>基于JPA</h3><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211172104307.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.querydsl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>querydsl-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.querydsl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>querydsl-apt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysema.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>apt-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>process<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>target/generated-sources/java<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">processor</span>&gt;</span>com.querydsl.apt.jpa.JPAAnnotationProcessor<span class="tag">&lt;/<span class="name">processor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jpa-spring-security</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/spring_security?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">database-platform:</span> <span class="string">org.hibernate.dialect.MySQL8Dialect</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">none</span></span><br><span class="line">      <span class="attr">naming:</span></span><br><span class="line">        <span class="attr">physical-strategy:</span> <span class="string">org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span></span><br><span class="line">        <span class="attr">implicit-strategy:</span> <span class="string">org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">format_sql:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">show_sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">open-in-view:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ObjectMapper <span class="title function_">objectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.registerModule(<span class="keyword">new</span> <span class="title class_">Hibernate5Module</span>());</span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityUserDetails <span class="title function_">securityUserDetails</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SecurityUserDetails</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> httpSecurity</span><br><span class="line">                .authorizeHttpRequests()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/index&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutSuccessUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .clearAuthentication(<span class="literal">true</span>)</span><br><span class="line">                .invalidateHttpSession(<span class="literal">true</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;roles&quot;, schema = &quot;spring_security&quot;, indexes = &#123;</span></span><br><span class="line"><span class="meta">        @Index(name = &quot;unique_role&quot;, columnList = &quot;role&quot;, unique = true)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;role&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ToString</span>.Exclude</span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;role&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;SysUserRole&gt; sysUserRoles = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;users&quot;, schema = &quot;spring_security&quot;)</span></span><br><span class="line"><span class="meta">@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = &quot;id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(generator = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@GenericGenerator(name = &quot;id&quot;, strategy = &quot;com.zhazha.springcloud.utils.SnowIdGenerator&quot;)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;username&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;password&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;enabled&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean enabled;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;accountNonExpired&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean accountNonExpired;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;accountNonLocked&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean accountNonLocked;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;credentialsNonExpired&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean credentialsNonExpired;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ToString</span>.Exclude</span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = &quot;user&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;SysUserRole&gt; sysUserRoles = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        ArrayList&lt;SimpleGrantedAuthority&gt; authorities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SysUserRole sysUserRole : getSysUserRoles()) &#123;</span><br><span class="line">            <span class="type">Role</span> <span class="variable">role</span> <span class="operator">=</span> sysUserRole.getRole();</span><br><span class="line">            authorities.add(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(role.getRole()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountNonLocked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> credentialsNonExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enabled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;sys_user_role&quot;, schema = &quot;spring_security&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserRole</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ToString</span>.Exclude</span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY, optional = false)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;user_id&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ToString</span>.Exclude</span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY, optional = false)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;role_id&quot;, nullable = false)</span></span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || Hibernate.getClass(<span class="built_in">this</span>) != Hibernate.getClass(o)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">SysUserRole</span> <span class="variable">that</span> <span class="operator">=</span> (SysUserRole) o;</span><br><span class="line">        <span class="keyword">return</span> id != <span class="literal">null</span> &amp;&amp; Objects.equals(id, that.id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Role, Long&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysUserRoleRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;SysUserRole, Long&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    <span class="meta">@Query(&quot;select u from User u where u.username = :username and u.enabled = true &quot;)</span></span><br><span class="line">    User <span class="title function_">findByUsernameAndEnabled</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityUserDetails</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PersistenceContext</span></span><br><span class="line">    <span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line"><span class="comment">//        User user = queryDSLGetUser(username);</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findByUsernameAndEnabled(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 加载懒加载的集合, 防止 session 在关闭之后无法读取到懒加载的集合</span></span><br><span class="line">        Hibernate.initialize(user.getSysUserRoles());</span><br><span class="line">        Set&lt;SysUserRole&gt; sysUserRoles = user.getSysUserRoles();</span><br><span class="line">        <span class="keyword">for</span> (SysUserRole sysUserRole : sysUserRoles) &#123;</span><br><span class="line">            <span class="comment">// 加载懒加载的对象, 防止 session 在关闭之后无法读取到懒加载的对象</span></span><br><span class="line">            <span class="comment">// 但是会导致新的问题, 就是 controller 返回给前端对象时, 会倒是回调 json 序列化的情况</span></span><br><span class="line">            <span class="comment">// 需要添加新的注解 @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = &quot;id&quot;)</span></span><br><span class="line">            Hibernate.initialize(sysUserRole.getRole());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">index</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; objects = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; roleList = authentication.getAuthorities();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">credentials</span> <span class="operator">=</span> authentication.getCredentials();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">principal</span> <span class="operator">=</span> authentication.getPrincipal();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">details</span> <span class="operator">=</span> authentication.getDetails();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> authentication.getName();</span><br><span class="line">        objects.put(<span class="string">&quot;roleList&quot;</span>, roleList);</span><br><span class="line">        objects.put(<span class="string">&quot;credentials&quot;</span>, credentials);</span><br><span class="line">        objects.put(<span class="string">&quot;principal&quot;</span>, principal);</span><br><span class="line">        objects.put(<span class="string">&quot;details&quot;</span>, details);</span><br><span class="line">        objects.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> objects;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JpaStartApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(JpaStartApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211172045974.png" alt="image-20221117204541746"></p><h2 id="SpringSecurity认证流程"><a href="#SpringSecurity认证流程" class="headerlink" title="SpringSecurity认证流程"></a>SpringSecurity认证流程</h2><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211180820279.png" alt="spring-security认证流程图"></p><h3 id="AuthenticationManager认证管理器"><a href="#AuthenticationManager认证管理器" class="headerlink" title="AuthenticationManager认证管理器"></a>AuthenticationManager认证管理器</h3><p>定义了SpringSecurity要如何执行认证操作.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Processes an &#123;<span class="doctag">@link</span> Authentication&#125; request.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ben Alex</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthenticationManager</span> &#123;</span><br><span class="line">Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看注释, 是一个处理<code>Authentication</code>请求的接口</p><p>看接口函数, 传入<code>authentication</code>对象, 然后执行某些操作, 最后返回, 看异常好像是认证填充<code>authentication</code>对象的过程</p><p>看函数上面的注释:</p><p>尝试认证Authentication对象, 如果认证成功, 则返回填充了个Authentication对象(包含授予的角色)</p><p>AuthenticationManager必须遵守下列异常情况:</p><ul><li>DisabledException: 账户不可用必定抛出DisabledException, AuthenticationManager将会检测这个状态</li><li>LockedException: 如果账户被锁定, 必定抛出LockedException 异常, 并且AuthenticationManager 可以测试账户锁定情况</li><li>BadCredentialsException: 如果呈现的凭证错误, 抛出BadCredentialsException异常, 同时上面的异常也是可选的, AuthenticationManager 总是检测认证信息</li></ul><p>看类族:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211180843457.png" alt="image-20221118084351327"></p><p>用的最多的是上面的实现类</p><h3 id="AuthenticationProvider"><a href="#AuthenticationProvider" class="headerlink" title="AuthenticationProvider"></a>AuthenticationProvider</h3><p>针对不同的身份类型执行具体的身份认证.</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211180850606.png" alt="image-20221118085027482"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指明AuthenticationProvider可以处理指定的Authentication实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthenticationProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 执行具体的身份认证</span></span><br><span class="line">   Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 判断AuthenticationProvider是否支持传入的authentication</span></span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; authentication)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们挑选这个<code>DaoAuthenticationProvider</code>实现类研究, SpringSecurity默认使用<code>DaoAuthenticationProvider</code></p><p>但是这个类没有<code>authenticate</code>函数, 该函数在<code>AbstractUserDetailsAuthenticationProvider</code>抽象类中存在</p><h5 id="先研究AbstractUserDetailsAuthenticationProvider"><a href="#先研究AbstractUserDetailsAuthenticationProvider" class="headerlink" title="先研究AbstractUserDetailsAuthenticationProvider"></a>先研究<code>AbstractUserDetailsAuthenticationProvider</code></h5><ul><li><p><code>userCache</code>是一个用户缓存属性</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211181532270.png" alt="image-20221118153208119"><br><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211181531224.png" alt="image-20221118153146096"></p></li><li><p><code>hideUserNotFoundExceptions</code>: 是否隐藏用户未找到异常. 如果用户未找到一般情况下会告诉客户说”用户未找到”, 但正常情况下为了安全应该告诉客户”用户名或密码未找到”, 这样不会暴露更多的信息, 而该属性就是这个过程的开关, 从直接抛出<code>UsernameNotFoundException</code>异常改造成使用<code>BadCredentialsException</code>异常</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211181530071.png" alt="image-20221118153022770"></p></li><li><p><code>forcePrincipalAsString</code>: 是否强制将 <code>Principal</code> 转化成 <code>String</code>, 默认是 <code>false</code>, 如果设置成 <code>true</code></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211181536274.png" alt="image-20221118153621128"></p><ul><li>将会从<code>User</code>对象变成 <code>User</code>对象的 <code>Username</code>字符串</li></ul></li><li><p><code>preAuthenticationChecks</code>: 这个是一个用户账户检测, 检测账户是否被锁定, 是否过期等</p></li><li><p><code>postAuthenticationChecks</code>: 用户密码是否过期校验</p></li><li><p><code>additionalAuthenticationChecks</code>: 校验密码使用, 是一个抽象方法</p><ul><li><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211181548223.png" alt="image-20221118154810066"></li><li>密码校验核心代码就在上面</li></ul></li><li><p><code>authenticate</code>这个方法掌握了整个账户密码校验的过程</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211181550108.png" alt="image-20221118155010972"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">    <span class="comment">// 明确用户名, 说白了拿到用户名 authentication.getName()</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> determineUsername(authentication);</span><br><span class="line">    <span class="comment">// 默认缓存已经使用, 所以不需要缓存了</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">cacheWasUsed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 从缓存中拿 user 对象</span></span><br><span class="line">    <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.userCache.getUserFromCache(username);</span><br><span class="line">    <span class="comment">// 缓存中没有数据的处理方式</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 结果缓存中没有数据, 说明需要缓存, 所以改为 false</span></span><br><span class="line">        cacheWasUsed = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 拿 user 对象, 还记得前面基于 mybatis 章节的重写的 loadUserByUsername函数么? 就在这里头调用了</span></span><br><span class="line">            user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找不到用户</span></span><br><span class="line">        <span class="keyword">catch</span> (UsernameNotFoundException ex) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Failed to find user &#x27;&quot;</span> + username + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            <span class="comment">// hideUserNotFoundExceptions默认为 true</span></span><br><span class="line">            <span class="comment">// 这里不执行下面抛出的 异常, 这里的异常是 UsernameNotFoundException</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.hideUserNotFoundExceptions) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 包装异常类型</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(<span class="built_in">this</span>.messages</span><br><span class="line">                                              .getMessage(<span class="string">&quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;</span>, <span class="string">&quot;Bad credentials&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        Assert.notNull(user, <span class="string">&quot;retrieveUser returned null - a violation of the interface contract&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 缓存中有 user的处理方式</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 缓存中拿到的 user 或者 从 retrieveUser 函数拿出来的 user  再次验证 是否过期, 是否锁定等</span></span><br><span class="line">        <span class="built_in">this</span>.preAuthenticationChecks.check(user);</span><br><span class="line">        <span class="comment">// 使用 passwordEncoder 进行 match 匹配</span></span><br><span class="line">        additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 认证异常</span></span><br><span class="line">    <span class="keyword">catch</span> (AuthenticationException ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!cacheWasUsed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果能走到这里的话</span></span><br><span class="line">        <span class="comment">// 那么就没有从缓存中拿到 user</span></span><br><span class="line">        cacheWasUsed = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 拿到用户</span></span><br><span class="line">        user = retrieveUser(username, (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">        <span class="built_in">this</span>.preAuthenticationChecks.check(user);</span><br><span class="line">        additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检测密码是否过期</span></span><br><span class="line">    <span class="built_in">this</span>.postAuthenticationChecks.check(user);</span><br><span class="line">    <span class="keyword">if</span> (!cacheWasUsed) &#123;</span><br><span class="line">        <span class="comment">// 缓存</span></span><br><span class="line">        <span class="built_in">this</span>.userCache.putUserInCache(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">principalToReturn</span> <span class="operator">=</span> user;</span><br><span class="line">    <span class="comment">// 强制将Principal转换成String</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.forcePrincipalAsString) &#123;</span><br><span class="line">        principalToReturn = user.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 密码校验成功, 将值什么的传递出去, 后续肯定是存储到SecurityHolder了</span></span><br><span class="line">    <span class="keyword">return</span> createSuccessAuthentication(principalToReturn, authentication, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211182105633.png" alt="image-20221118210500416"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">prepareTimingAttackProtection</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.userNotFoundEncodedPassword == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.userNotFoundEncodedPassword = <span class="built_in">this</span>.passwordEncoder.encode(USER_NOT_FOUND_PASSWORD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mitigateAgainstTimingAttack</span><span class="params">(UsernamePasswordAuthenticationToken authentication)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (authentication.getCredentials() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">presentedPassword</span> <span class="operator">=</span> authentication.getCredentials().toString();</span><br><span class="line">        <span class="built_in">this</span>.passwordEncoder.matches(presentedPassword, <span class="built_in">this</span>.userNotFoundEncodedPassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这两段代码如果没有研究透看起来就没啥用, 它的表面功能是在找到不到用户名的时候, 再次对password密码进行验证</p></li><li><p>真正的目的是防止<code>Side-Channel Attack</code>(侧信道攻击), 大意是hacker通过验证和响应的时间来确定用户账户是否存在于数据库中, 因为验证用户和验证用户+密码的时间是不同的, 明显验证用户然后失败的时间较短, 验证用户名和密码的时间较长, 如果验证时间较长说明用户名正确, 数据库中有用户名</p></li></ul></li></ul><blockquote><p>侧信道攻击: 不是暴力破解或是研究加密算法的弱点, 它是基于从密码系统的物理实现中获取信息, 比如时间, 功率消耗, 电磁泄漏等, 这些信息可被利用于对系统的进一步破解.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> 过滤器 </tag>
            
            <tag> JPA </tag>
            
            <tag> 认证 </tag>
            
            <tag> 登录 </tag>
            
            <tag> 角色 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12SpringSecurity-基础入门和源码分析</title>
      <link href="/2022/11/15/02springcloud/12SpringSecurity-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E5%92%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2022/11/15/02springcloud/12SpringSecurity-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E5%92%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Security简介"><a href="#Spring-Security简介" class="headerlink" title="Spring Security简介"></a>Spring Security简介</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h2><p>是一个安全管理框架</p><h3 id="核心功能是什么"><a href="#核心功能是什么" class="headerlink" title="核心功能是什么?"></a>核心功能是什么?</h3><ul><li><p>认证</p></li><li><p>授权</p></li></ul><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211130347536.png" alt="image-20221113034753386"></p><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>spring security提供了: </p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211130349711.png" alt="image-20221113034919624"></p><p>还可以依靠第三方依赖来自定义</p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>无论采用了上面哪种认证方式，都不影响在Spring Security中使用授权功能。<code>SpringSecurity</code>支持<strong>基于URL的请求授权、支持方法访问授权、支持SpEL访问控制、支持域对象安全(ACL)，同时也支持动态权限配置、支持RBAC权限模型等</strong>，总之，我们常见的权限管理需求，Spring Security基本上都是支持的。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><code>SpringSecurity</code>还提供了HTTP防火墙功能, 拦截大量非法请求, 防止网络攻击.</p><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><h3 id="认证和授权"><a href="#认证和授权" class="headerlink" title="认证和授权"></a>认证和授权</h3><h4 id="认证-1"><a href="#认证-1" class="headerlink" title="认证"></a>认证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Authentication</span> <span class="keyword">extends</span> <span class="title class_">Principal</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">   Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class="line">   <span class="comment">// 获取用户密码</span></span><br><span class="line">   Object <span class="title function_">getCredentials</span><span class="params">()</span>;</span><br><span class="line">   <span class="comment">// 获取用户携带的详细信息, 可能是当前请求之类等</span></span><br><span class="line">   Object <span class="title function_">getDetails</span><span class="params">()</span>;</span><br><span class="line">   <span class="comment">// 用来获取当前用户，例如是一个用户名或者一个用户对象。</span></span><br><span class="line">   Object <span class="title function_">getPrincipal</span><span class="params">()</span>;</span><br><span class="line">   <span class="comment">// 当前用户是否认证成功。</span></span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">isAuthenticated</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">setAuthenticated</span><span class="params">(<span class="type">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当用户使用用户名&#x2F;密码登录或使用 <code>Remember-me</code>登录时，都会对应一个不同的<code>Authentication</code>实例。</p><p>Spring Security中的认证工作主要由<code>AuthenticationManager</code>接口来负责，下面来看一下该接口的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthenticationManager</span> &#123;</span><br><span class="line">Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AuthenticationManager</code> 只有一个<code>authenticate</code>方法可以用来做认证，该方法有三个不同的返回值:</p><ul><li>返回<code>Authentication</code>，表示认证成功。</li><li>抛出<code>AuthenticationException</code>异常，表示用户输入了无效的凭证。</li><li>返回null，表示不能断定。</li></ul><p><code>AuthenticationManager</code>最主要的实现类是<code>ProviderManager</code>，<code>ProviderManager</code>管理了众多的<code>AuthenticationProvider</code>实例，<code>AuthenticationProvider</code>有点类似于<code>AuthenticationManager</code>，但是<code>AuthenticationProvider</code>多了一个 <code>supports</code>方法用来判断是否支持给定的<code>Authentication</code>类型。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211130413003.png" alt="image-20221113041314895"></p><p>由于<code>Authentication</code>拥有众多不同的实现类，这些不同的实现类又由不同的<code>AuthenticationProvider</code> 来处理，所以<code>AuthenticationProvider</code> 会有一个<code>supports</code>方法，用来判断当前的<code>Authentication Provider</code>是否支持对应的<code>Authentication</code>。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211130423552.png" alt="image-20221113042305473"></p><p>在一次完整的认证流程中，可能会同时存在多个<code>AuthenticationProvider</code>（例如，项目同时支持<code>form</code>表单登录和短信验证码登录)，多个<code>AuthenticationProvider</code>统一由<code>ProviderManager</code>来管理。同时，<code>ProviderManager</code>具有一个可选的<code>parent</code>，如果所有的 <code>AuthenticationProvider</code>都认证失败，那么就会调用<code>parent</code>进行认证。<code>parent</code>相当于一个备用认证方式，即各个<code>AuthenticationProvider</code>都无法处理认证问题的时候，就由<code>parent</code>出场收拾残局。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211130440410.png" alt="spring-security认证流程图"></p><h4 id="授权-1"><a href="#授权-1" class="headerlink" title="授权"></a>授权</h4><p>当完成认证后，接下来就是授权了。在Spring Security的授权体系中，有两个关键接口:</p><ul><li><code>AccessDecisionManager</code></li><li><code>AccessDecisionVoter</code></li></ul><p><code>AccessDecisionVoter</code>是一个投票器，投票器会检查用户是否具备应有的角色，进而投出赞成、反对或者弃权票: <code>AccessDecisionManager</code>则是一个决策器，来决定此次访问是否被允许。<code>AccessDecisionVoter</code>和 <code>AccessDecisionManager</code>都有众多的实现类，在.<code>AccessDecisionManager</code>中会挨个遍历<code>AccessDecisionVoter</code>，进而决定是否允许用户访问，因而<code>AccessDecisionVoter</code>和<code>AccessDecisionManager</code> 两者的关系类似于<code>AuthenticationProvider</code> 和<code>ProvidenManager</code>的关系。</p><p>在Spring Security 中，用户请求一个资源（通常是一个网络接口或者一个Java方法）所需要的角色会被封装成一个<code>ConfigAttribute</code>对象，在<code>ConfigAttribute</code>中只有一个<code>getAttribute</code>方法,该方法返回一个String字符串,就是角色的名称。一般来说,角色名称都带有一个<code>ROLE_</code>前缀，投票器<code>AccessDecisionVoter</code> 所做的事情，其实就是比较用户所具备的角色和请求某个资源所需的 <code>ConfigAttribute</code>之间的关系。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211130447408.png" alt="授权过程"></p><h4 id="web"><a href="#web" class="headerlink" title="web"></a>web</h4><p><code>SpringSecurity</code>的过滤器列表:</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211130451077.png" alt="image-20221113045141957"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211130452065.png" alt="image-20221113045206974"></p><p>开发者所见到的Spring Security提供的功能，都是通过这些过滤器来实现的，这些过滤器按照既定的优先级排列，最终形成一个过滤器链。开发者也可以自定义过滤器，并通过<code>@Order</code>注解去调整自定义过滤器在过滤器链中的位置。</p><p>需要注意的是，默认过滤器并不是直接放在 Web 项目的原生过滤器链中，而是通过一个<code>FilterChainProxy</code>来统一管理。Spring Security 中的过滤器链通过<code>FilterChainProxy</code>嵌入到Web项目的原生过滤器链中，如下图所示。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211130455255.png" alt="image-20221113045512172"></p><p>在Spring Security 中，这样的过滤器链不仅仅只有一个，可能会有多个，如下图所示。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211130456252.png" alt="image-20221113045607173"></p><p>当存在多个过滤器链时，多个过滤器链之间要指定优先级，当请求到达后，会从<code>FilterChainProxy</code>进行分发，先和哪个过滤器链匹配上，就用哪个过滤器链进行处理。当系统中存在多个不同的认证体系时，那么使用多个过滤器链就非常有效。</p><p><code>FilterChainProxy</code>作为一个顶层管理者，将统一管理Security Filter。<code>FilterChainProxy</code>本身将通过Spring框架提供的<code>DelegatingFilterProxy</code>整合到原生过滤器链中，所以上图所示的框架还可以做进一步的优化，如下图所示。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211130459245.png" alt="image-20221113045944165"></p><h4 id="登录数据保存"><a href="#登录数据保存" class="headerlink" title="登录数据保存"></a>登录数据保存</h4><p>如果不使用 <code>Spring Security</code>这一类的安全管理框架，大部分的开发者可能会将登录用户数据保存在<code>Session</code>中, </p><p>事实上,Spring Security也是这么做的.</p><p>但是,为了使用方便, Spring Security在此基础上还做了一些改进，其中最主要的一个变化就是<strong>线程绑定</strong>。</p><p>当用户登录成功后,Spring Security会<strong>将登录成功的用户信息保存到<code>SecurityContextHolder</code>中</strong>。<code>SecurityContextHolder</code> 中的<strong>数据保存默认是通过<code>ThreadLocal</code><strong>来实现的，使用<code>ThreadLocal</code>创建的变量只能被当前线程访问，不能被其他线程访问和修改，</strong>也就是用户数据和请求线程绑定在一起</strong>。</p><p>当登录请求处理完毕后，Spring Security 会将<code>SecurityContextHolder</code>中的数据拿出来保存到<code>Session</code>中，同时将<code>SecurityContextHolder</code> 中的数据清空。</p><p>以后每当有请求到来时，Spring Security就会先从<code>Session</code>中取出用户登录数据，保存到<code>SecurityContextHolder</code>中，方便在该请求的后续处理过程中使用</p><p>同时在请求结束时将<code>SecurityContextHolder</code> 中的数据拿出来保存到<code>Session</code>中，然后将<code>SecurityContextHolder</code>中的数据清空。</p><p>这一策略非常方便用户在 <code>Controller</code> 或者<code>Service</code>层获取当前登录用户数据</p><p>但是带来的另外一个问题就是，在子线程中想要获取用户登录数据就比较麻烦。</p><p>Spring Security对此也提供了相应的解决方案，如果开发者使用<code>@Async</code>注解来开启异步任务的话，那么只需要添加如下配置，使用Spring Security提供的异步任务代理，就可以在异步任务中从 <code>SecurityContextHolder</code>里边获取当前登录用户的信息:</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211130509741.png" alt="image-20221113050955659"></p><h1 id="认证-2"><a href="#认证-2" class="headerlink" title="认证"></a>认证</h1><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ol><li>添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建controller</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello spring security&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来访问 &#x2F;hello 等 任意 url 都会跳转到 &#x2F;login , 对包括 &#x2F;login, 他会重定向一次, 可以考虑将 login 也给加入到白名单</p><p>而由于密码没有配置, 默认 是 user 密码默认为 UUID , 输出在启动控制台中, 需要你去查找</p><h3 id="源码流程简要分析"><a href="#源码流程简要分析" class="headerlink" title="源码流程简要分析"></a>源码流程简要分析</h3><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113085111296.png" alt="image-20221113085111296"></p><p>客户端向服务端发送了两次请求, 第一次访问 &#x2F;hello , 被 spring security 的过滤器 FilterSecurityIntercepotor 拦截, 抛出异常给 ExceptionTranslationFilter 重定向客户端url为 &#x2F;login(get请求)</p><p>客户端写入账号和密码之后, 发出 &#x2F;login(post请求) 进行账号密码认证</p><blockquote><p>这里不要搞乱了:</p><ul><li><p>get形式的 &#x2F;login 地址是登录页面</p></li><li><p>post形式的 &#x2F;login 地址为登陆页面的form表单请求地址, 是真正的认证账户密码地址</p></li></ul></blockquote><h3 id="背后做了什么"><a href="#背后做了什么" class="headerlink" title="背后做了什么?"></a>背后做了什么?</h3><p>虽然上面做了最简单的配置, 但是 SpringSecurity 在背后做了很多的事情</p><ul><li>开启 SpringSecurity 自动配置, 然后创建一个 <code>springSecurityFilterChain</code> 的过滤器, 并注入Spring容器中, 这个过滤器负责几乎所有的安全管理, 包括 认证, 授权等(<code>springSecurityFilterChain</code>代理了SpringSecurity的过滤器链)</li><li>创建一个UserDetailsService实例，UserDetailsService负责提供用户数据，默认的用户数据是基于内存的用户，用户名为user，密码则是随机生成的UUID字符串。</li><li>给用户生成一个默认的登录页面。</li><li>开启CSRF攻击防御。</li><li>开启会话固定攻击防御。集成X-XSS-Protection。</li><li>集成X-Frame-Options 以防止单击劫持。</li></ul><h4 id="默认用户账号密码的生成"><a href="#默认用户账号密码的生成" class="headerlink" title="默认用户账号密码的生成"></a>默认用户账号密码的生成</h4><p>Spring Security中定义了<code>UserDetails</code> 接口来<strong>规范开发者自定义的用户对象</strong>，<strong>这样方便一些旧系统、用户表已经固定的系统集成到Spring Security 认证体系中。</strong><br>UserDetails接口定义如下:</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113093539557.png" alt="image-20221113093539557"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113093558047.png" alt="image-20221113093558047"></p><p>这是用户对象的定义，而负责提供用户数据源的接口是<code>UserDetailsService</code> ,<code>UserDetailsService</code>中只有一个查询用户的方法，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loadUserByUsername</code>有一个参数是<code>username</code>，这是用户在认证时传入的用户名，最常见的就是用户在登录表单中输入的用户名（实际开发时还可能存在其他情况，例如使用<code>CAS单点登录</code>时, <code>username</code>并非表单输入的用户名,而是<code>CAS Server</code>认证成功后回调的用户名参数)，开发者在这里拿到用户名之后，再去数据库中查询用户，最终返回一个<code>UserDetails</code>实例。<br>在实际项目中，一般需要开发者自定义<code>UserDetailsService</code> 的实现。如果开发者没有自定义<code>UserDetailsService</code> 的实现，<code>Spring Security</code>也为 <code>UserDetailsService</code> 提供了很多默认实现</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113094645604.png" alt="image-20221113094645604"></p><ul><li><code>UserDetailsManager</code> 在 <code>UserDetailsService</code> 的基础上，继续定义了添加用户、更新用户、删除用户、修改密码以及判断用户是否存在共5种方法。</li><li><code>JdbcDaolmpl</code>在 <code>UserDetailsService</code> 的基础上，通过<code>spring-jdbc</code>实现了从数据库中查询用户的方法。</li><li><code>InMemoryUserDetailsManager</code>实现了<code>UserDetailsManager</code>中关于用户的增删改查方法,不过都是基于内存的操作，数据并没有持久化。</li><li><code>JdbcUserDetailsManager</code>继承自<code>JdbcDaolmpl</code>同时又实现了<code>UserDetailsManager</code>接口，因此可以通过<code>JdbcUserDetailsManager</code>实现对用户的增删改查操作，这些操作都会持久化到数据库中。不过<code>JdbcUserDetailsManager</code>有一个局限性,就是操作数据库中用户的SQL都是提前写好的，不够灵活，因此在实际开发中<code>JdbcUserDetailsManager</code>使用并不多。</li><li><code>CachingUserDetailsService</code> 的特点是会将<code>UserDetailsService</code>缓存起来。</li><li><code>UserDetailsServiceDelegator</code> 则是提供了<code>UserDetailsService</code> 的懒加载功能。</li><li><code>ReactiveUserDetailsServiceAdapter</code>是<code>webflux-web-security</code>模块定义的<code>UserDetailsService</code>实现。</li></ul><p>在上面快速入门的情况下, SpringSecurity 默认使用的是 <code>InMemoryUserDetailsManager</code>, 将账号密码保存在内存中, 在这里可以看到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(AuthenticationManager.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(ObjectPostProcessor.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(</span></span><br><span class="line"><span class="meta">value = &#123; AuthenticationManager.class, AuthenticationProvider.class, UserDetailsService.class,</span></span><br><span class="line"><span class="meta">AuthenticationManagerResolver.class &#125;,</span></span><br><span class="line"><span class="meta">type = &#123; &quot;org.springframework.security.oauth2.jwt.JwtDecoder&quot;,</span></span><br><span class="line"><span class="meta">&quot;org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenIntrospector&quot;,</span></span><br><span class="line"><span class="meta">&quot;org.springframework.security.oauth2.client.registration.ClientRegistrationRepository&quot;,</span></span><br><span class="line"><span class="meta">&quot;org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NOOP_PASSWORD_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;&#123;noop&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">PASSWORD_ALGORITHM_PATTERN</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^\\&#123;.+&#125;.*$&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(UserDetailsServiceAutoConfiguration.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">public</span> InMemoryUserDetailsManager <span class="title function_">inMemoryUserDetailsManager</span><span class="params">(SecurityProperties properties,</span></span><br><span class="line"><span class="params">ObjectProvider&lt;PasswordEncoder&gt; passwordEncoder)</span> &#123;</span><br><span class="line">        <span class="comment">// private String name = &quot;user&quot;;</span></span><br><span class="line">        <span class="comment">// private String password = UUID.randomUUID().toString();</span></span><br><span class="line">SecurityProperties.<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> properties.getUser();</span><br><span class="line">        <span class="comment">// 获得角色列表</span></span><br><span class="line">List&lt;String&gt; roles = user.getRoles();</span><br><span class="line">        <span class="comment">// 创建内存中保存的 用户名和密码</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>(</span><br><span class="line">User.withUsername(user.getName()).password(getOrDeducePassword(user, passwordEncoder.getIfAvailable()))</span><br><span class="line">.roles(StringUtils.toStringArray(roles)).build());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在密码前面加上 &#123;noop&#125;</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getOrDeducePassword</span><span class="params">(SecurityProperties.User user, PasswordEncoder encoder)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line">        <span class="comment">// 看看有没有在密码前面添加了密码类型字符串前缀 &#123;xxxx&#125;</span></span><br><span class="line"><span class="keyword">if</span> (encoder != <span class="literal">null</span> || PASSWORD_ALGORITHM_PATTERN.matcher(password).matches()) &#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 为密码添加 &#123;noop&#125; 密文前缀</span></span><br><span class="line"><span class="keyword">return</span> NOOP_PASSWORD_PREFIX + password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113095506501.png" alt="image-20221113095506501"></p><p>可以看出这些条件下才会启动该自动配置类, 配置用户名和密码</p><ul><li><p>需要在<code>classpath</code>中有<code>AuthenticationManager.class</code>, 还需要<code>org.springframework.security.config.annotation.ObjectPostProcessor</code>在SpringBean容器中</p></li><li><p>在Spring容器中没有配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AuthenticationManager.class, AuthenticationProvider.class, UserDetailsService.class, AuthenticationManagerResolver.class</span><br></pre></td></tr></table></figure><p>和一些其他类的情况下, 则加载<code>UserDetailsServiceAutoConfiguration</code></p></li></ul><p>看上面的源码可以发现</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113102414123.png" alt="image-20221113102414123"></p><p>password就是UUID, 用户名为 user</p><p>在这里可以发现</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113102532200.png" alt="image-20221113102532200"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113102617171.png" alt="image-20221113102617171"></p><p>在 <code>application.yml</code> 中可以配置 用户名和密码</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113102909110.png" alt="image-20221113102909110"></p><h4 id="默认页面生成"><a href="#默认页面生成" class="headerlink" title="默认页面生成"></a>默认页面生成</h4><h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><p>在上面的案例中，一共存在两个默认页面，一个就是<code>/login</code>的登录页面，另外一个则是注销登录页面。当用户登录成功之后，在浏览器中输入<code>http://localhost:8080/logout</code>就可以看到注销登录页面，如图所示。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113103209198.png" alt="image-20221113103209198"></p><p>现在的目的就是找找, 这两个网页在哪生成的</p><p>在前面的过滤器链可以发现这两个过滤器</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113103500301.png" alt="image-20221113103500301"></p><p>通过过滤器的名字就可以分辨出<code>DefaultLoginPageGeneratingFilter</code>过滤器用来生成默认的登录页面，<code>DefaultLogoutPageGeneratingFilter</code>过滤器则用来生成默认的注销页面。</p><p>先来看<code>DefaultLoginPageGeneratingFilter</code>。作为<code>Spring Security</code>过滤器链中的一员，在第一次请求<code>hello</code>接口的时候，就会经过<code>DefaultLoginPageGeneratingFilter</code>过滤器，但是由于<code>/hello</code>接口和登录无关，因此 <code>DefaultLoginPageGeneratingFilter</code>过滤器并未干涉<code>hello</code>接口。等到第二次重定向到<code>/login</code>页面的时候，这个时候就和 <code>DefaultLoginPageGeneratingFilter</code>有关系了，此时请求就会在<code>DefaultLoginPageGeneratingFilter</code> 中进行处理，生成登录页面返回给客户端。</p><p>我们来看一下<code>DefaultLoginPageGeneratingFilter</code> 的源码，源码比较长，这里仅列出核心部分:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="comment">// 过滤器将会被 chain 自动调用</span></span><br><span class="line">    doFilter((HttpServletRequest) request, (HttpServletResponse) response, chain);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">loginError</span> <span class="operator">=</span> isErrorPage(request);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">logoutSuccess</span> <span class="operator">=</span> isLogoutSuccess(request);</span><br><span class="line">    <span class="keyword">if</span> (isLoginUrlRequest(request) || loginError || logoutSuccess) &#123;</span><br><span class="line">        <span class="comment">// 核心代码, 这里生成了SpringSecurity的默认 /login 网页</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">loginPageHtml</span> <span class="operator">=</span> generateLoginPageHtml(request, loginError, logoutSuccess);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.setContentLength(loginPageHtml.getBytes(StandardCharsets.UTF_8).length);</span><br><span class="line">        <span class="comment">// 将网页源码写入</span></span><br><span class="line">        response.getWriter().write(loginPageHtml);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下一个 Filter</span></span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113110544532.png" alt="image-20221113110544532"></p><blockquote><p> 对了 _csrf 在这里被设置了</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113111029887.png" alt="image-20221113111029887"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">renderHiddenInputs</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; input : <span class="built_in">this</span>.resolveHiddenInputs.apply(request).entrySet()) &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;&lt;input name=\&quot;&quot;</span>);</span><br><span class="line">        sb.append(input.getKey());</span><br><span class="line">        sb.append(<span class="string">&quot;\&quot; type=\&quot;hidden\&quot; value=\&quot;&quot;</span>);</span><br><span class="line">        sb.append(input.getValue());</span><br><span class="line">        sb.append(<span class="string">&quot;\&quot; /&gt;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要分析这段代码, 才能发现 csrf 被设置了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">DefaultLoginPageConfigurer</span>&lt;H <span class="keyword">extends</span> <span class="title class_">HttpSecurityBuilder</span>&lt;H&gt;&gt;</span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">AbstractHttpConfigurer</span>&lt;DefaultLoginPageConfigurer&lt;H&gt;, H&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里将 csrf 的值设置, 或者说提供了一个Function接口, 提供了 csrf</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">DefaultLoginPageGeneratingFilter</span> <span class="variable">loginPageGeneratingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultLoginPageGeneratingFilter</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(H http)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.loginPageGeneratingFilter.setResolveHiddenInputs(DefaultLoginPageConfigurer.<span class="built_in">this</span>::hiddenInputs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title function_">hiddenInputs</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 这里就是获取 csrf 的 value</span></span><br><span class="line"><span class="type">CsrfToken</span> <span class="variable">token</span> <span class="operator">=</span> (CsrfToken) request.getAttribute(CsrfToken.class.getName());</span><br><span class="line"><span class="keyword">return</span> (token != <span class="literal">null</span>) ? Collections.singletonMap(token.getParameterName(), token.getToken())</span><br><span class="line">: Collections.emptyMap();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(H http)</span> &#123;</span><br><span class="line"><span class="type">AuthenticationEntryPoint</span> <span class="variable">authenticationEntryPoint</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">ExceptionHandlingConfigurer&lt;?&gt; exceptionConf = http.getConfigurer(ExceptionHandlingConfigurer.class);</span><br><span class="line"><span class="keyword">if</span> (exceptionConf != <span class="literal">null</span>) &#123;</span><br><span class="line">authenticationEntryPoint = exceptionConf.getAuthenticationEntryPoint();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.loginPageGeneratingFilter.isEnabled() &amp;&amp; authenticationEntryPoint == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.loginPageGeneratingFilter = postProcess(<span class="built_in">this</span>.loginPageGeneratingFilter);</span><br><span class="line">http.addFilter(<span class="built_in">this</span>.loginPageGeneratingFilter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个类省略了很多代码</p></blockquote><p>在上面设置好的 Function 函数之后, 然后在</p><p><code>DefaultLoginPageGeneratingFilter#renderHiddenInputs</code>这个函数中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">renderHiddenInputs</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">   <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">   <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; input : <span class="built_in">this</span>.resolveHiddenInputs.apply(request).entrySet()) &#123;</span><br><span class="line">      sb.append(<span class="string">&quot;&lt;input name=\&quot;&quot;</span>);</span><br><span class="line">      sb.append(input.getKey());</span><br><span class="line">      sb.append(<span class="string">&quot;\&quot; type=\&quot;hidden\&quot; value=\&quot;&quot;</span>);</span><br><span class="line">      sb.append(input.getValue());</span><br><span class="line">      sb.append(<span class="string">&quot;\&quot; /&gt;\n&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后促成了前端页面的</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113111827392.png" alt="image-20221113111827392"></p><p>另外这里配置了登录地址和登出地址</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/image-20221113110822317.png" alt="image-20221113110822317"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(UsernamePasswordAuthenticationFilter authFilter,</span></span><br><span class="line"><span class="params">      AbstractAuthenticationProcessingFilter openIDFilter)</span> &#123;</span><br><span class="line">   <span class="comment">// 这里初始化了 /login 地址</span></span><br><span class="line">   <span class="built_in">this</span>.loginPageUrl = DEFAULT_LOGIN_PAGE_URL;</span><br><span class="line">    <span class="comment">// 这里设置了 登出 的地址</span></span><br><span class="line">   <span class="built_in">this</span>.logoutSuccessUrl = DEFAULT_LOGIN_PAGE_URL + <span class="string">&quot;?logout&quot;</span>;</span><br><span class="line">   <span class="comment">// 这里设置了登录错误的地址</span></span><br><span class="line">   <span class="built_in">this</span>.failureUrl = DEFAULT_LOGIN_PAGE_URL + <span class="string">&quot;?&quot;</span> + ERROR_PARAMETER_NAME;</span><br><span class="line">   <span class="keyword">if</span> (authFilter != <span class="literal">null</span>) &#123;</span><br><span class="line">      initAuthFilter(authFilter);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (openIDFilter != <span class="literal">null</span>) &#123;</span><br><span class="line">      initOpenIdFilter(openIDFilter);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h5><p>如果你仔细看<code>DefaultLoginPageConfigurer</code>类的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">DefaultLoginPageConfigurer</span>&lt;H <span class="keyword">extends</span> <span class="title class_">HttpSecurityBuilder</span>&lt;H&gt;&gt;</span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">AbstractHttpConfigurer</span>&lt;DefaultLoginPageConfigurer&lt;H&gt;, H&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">DefaultLoginPageGeneratingFilter</span> <span class="variable">loginPageGeneratingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultLoginPageGeneratingFilter</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">DefaultLogoutPageGeneratingFilter</span> <span class="variable">logoutPageGeneratingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultLogoutPageGeneratingFilter</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(H http)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.loginPageGeneratingFilter.setResolveHiddenInputs(DefaultLoginPageConfigurer.<span class="built_in">this</span>::hiddenInputs);</span><br><span class="line"><span class="built_in">this</span>.logoutPageGeneratingFilter.setResolveHiddenInputs(DefaultLoginPageConfigurer.<span class="built_in">this</span>::hiddenInputs);</span><br><span class="line">http.setSharedObject(DefaultLoginPageGeneratingFilter.class, <span class="built_in">this</span>.loginPageGeneratingFilter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title function_">hiddenInputs</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="type">CsrfToken</span> <span class="variable">token</span> <span class="operator">=</span> (CsrfToken) request.getAttribute(CsrfToken.class.getName());</span><br><span class="line"><span class="keyword">return</span> (token != <span class="literal">null</span>) ? Collections.singletonMap(token.getParameterName(), token.getToken())</span><br><span class="line">: Collections.emptyMap();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(H http)</span> &#123;</span><br><span class="line"><span class="type">AuthenticationEntryPoint</span> <span class="variable">authenticationEntryPoint</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">ExceptionHandlingConfigurer&lt;?&gt; exceptionConf = http.getConfigurer(ExceptionHandlingConfigurer.class);</span><br><span class="line"><span class="keyword">if</span> (exceptionConf != <span class="literal">null</span>) &#123;</span><br><span class="line">authenticationEntryPoint = exceptionConf.getAuthenticationEntryPoint();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.loginPageGeneratingFilter.isEnabled() &amp;&amp; authenticationEntryPoint == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.loginPageGeneratingFilter = postProcess(<span class="built_in">this</span>.loginPageGeneratingFilter);</span><br><span class="line">http.addFilter(<span class="built_in">this</span>.loginPageGeneratingFilter);</span><br><span class="line">LogoutConfigurer&lt;H&gt; logoutConfigurer = http.getConfigurer(LogoutConfigurer.class);</span><br><span class="line"><span class="keyword">if</span> (logoutConfigurer != <span class="literal">null</span>) &#123;</span><br><span class="line">http.addFilter(<span class="built_in">this</span>.logoutPageGeneratingFilter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将会看到 登出 过滤器源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultLogoutPageGeneratingFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">RequestMatcher</span> <span class="variable">matcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;/logout&quot;</span>, <span class="string">&quot;GET&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Function&lt;HttpServletRequest, Map&lt;String, String&gt;&gt; resolveHiddenInputs = (request) -&gt; Collections.emptyMap();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.matcher.matches(request)) &#123;</span><br><span class="line">renderLogout(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">renderLogout</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(<span class="string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;&lt;html lang=\&quot;en\&quot;&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;  &lt;head&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;    &lt;meta charset=\&quot;utf-8\&quot;&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;    &lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1, shrink-to-fit=no\&quot;&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;    &lt;meta name=\&quot;description\&quot; content=\&quot;\&quot;&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;    &lt;meta name=\&quot;author\&quot; content=\&quot;\&quot;&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;    &lt;title&gt;Confirm Log Out?&lt;/title&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;    &lt;link href=\&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css\&quot; &quot;</span></span><br><span class="line">+ <span class="string">&quot;rel=\&quot;stylesheet\&quot; integrity=\&quot;sha384-/Y6pD6FV/Vv2HJnA6t+vslU6fwYXjCFtcEpHbNJ0lyAFsXTsjBbfaDjzALeQsN6M\&quot; &quot;</span></span><br><span class="line">+ <span class="string">&quot;crossorigin=\&quot;anonymous\&quot;&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;    &lt;link href=\&quot;https://getbootstrap.com/docs/4.0/examples/signin/signin.css\&quot; &quot;</span></span><br><span class="line">+ <span class="string">&quot;rel=\&quot;stylesheet\&quot; crossorigin=\&quot;anonymous\&quot;/&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;  &lt;/head&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;  &lt;body&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;     &lt;div class=\&quot;container\&quot;&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;      &lt;form class=\&quot;form-signin\&quot; method=\&quot;post\&quot; action=\&quot;&quot;</span> + request.getContextPath()</span><br><span class="line">+ <span class="string">&quot;/logout\&quot;&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;        &lt;h2 class=\&quot;form-signin-heading\&quot;&gt;Are you sure you want to log out?&lt;/h2&gt;\n&quot;</span>);</span><br><span class="line">sb.append(renderHiddenInputs(request)</span><br><span class="line">+ <span class="string">&quot;        &lt;button class=\&quot;btn btn-lg btn-primary btn-block\&quot; type=\&quot;submit\&quot;&gt;Log Out&lt;/button&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;      &lt;/form&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;    &lt;/div&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;  &lt;/body&gt;\n&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">response.getWriter().write(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResolveHiddenInputs</span><span class="params">(Function&lt;HttpServletRequest, Map&lt;String, String&gt;&gt; resolveHiddenInputs)</span> &#123;</span><br><span class="line">Assert.notNull(resolveHiddenInputs, <span class="string">&quot;resolveHiddenInputs cannot be null&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.resolveHiddenInputs = resolveHiddenInputs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">renderHiddenInputs</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; input : <span class="built_in">this</span>.resolveHiddenInputs.apply(request).entrySet()) &#123;</span><br><span class="line">sb.append(<span class="string">&quot;&lt;input name=\&quot;&quot;</span>);</span><br><span class="line">sb.append(input.getKey());</span><br><span class="line">sb.append(<span class="string">&quot;\&quot; type=\&quot;hidden\&quot; value=\&quot;&quot;</span>);</span><br><span class="line">sb.append(input.getValue());</span><br><span class="line">sb.append(<span class="string">&quot;\&quot; /&gt;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从上述源码中可以看出，请求到来之后，会先判断是否是注销请求<code>/logout</code>，如果是<code>/logout</code>请求，则渲染一个注销请求的页面返回给客户端，渲染过程和前面登录页面的渲染过程类似,也是字符串拼接（这里省略了字符串拼接，读者可以参考<code>DefaultLogoutPageGeneratingFilter</code>的源码)﹔否则请求继续往下走，执行下一个过滤器。</p><h2 id="自定义登录表单"><a href="#自定义登录表单" class="headerlink" title="自定义登录表单"></a>自定义登录表单</h2><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><p>在<code>resources/templates</code>创建<code>login.html</code>页面, 自定义我们自己的网页</p><blockquote><p>由于我们在 <code>templates</code> 创建<code>html</code>, 所以需要在<code>controller</code>下创建 <code>mapping</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>form-login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/font-awesome-4.7.0/css/font-awesome.min.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;materialContainer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>form-登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/doLogin&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;name&quot;&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pass&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;pass&quot;&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pass&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button login&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-check&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.SPRING_SECURITY_LAST_EXCEPTION&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pass-forgot&quot;</span>&gt;</span>忘记密码？<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;overbox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;material-button alt-2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;shape&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>form-注册<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;regname&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;regname&quot;</span> <span class="attr">id</span>=<span class="string">&quot;regname&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;regpass&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;regpass&quot;</span> <span class="attr">id</span>=<span class="string">&quot;regpass&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;reregpass&quot;</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;reregpass&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reregpass&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>值得注意的是, 我们将表单登录的<code>action</code>地址修改为 <code>doLogin</code>, 将原先的 <code>username</code>和<code>password</code>修改为<code>name</code>和<code>pwd</code></p></blockquote><p>我们对 <code>login.html</code> 的修改, 需要告知 spring security </p><p>配置SpringSecurity配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityWebFilterChain</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> httpSecurity.authorizeHttpRequests()</span><br><span class="line">        .anyRequest()</span><br><span class="line">        .authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .formLogin()</span><br><span class="line">        .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">        .loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>)</span><br><span class="line">        .defaultSuccessUrl(<span class="string">&quot;/index&quot;</span>)</span><br><span class="line">        .failureUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">        .usernameParameter(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">        .passwordParameter(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">        .permitAll()</span><br><span class="line">        .and()</span><br><span class="line">        .csrf()</span><br><span class="line">        .disable()</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>authorizeRequests()</code>方法表示开启权限配置（该方法的含义其实比较复杂，我们在后面还会再次介绍该方法)，<code>.anyRequest().authenticated()</code>表示所有的请求都要认证之后才能访问。</li><li>有的读者会对<code>and()</code>方法表示疑惑，<code>and()</code>方法会返回<code>HttpSecurityBuilder</code>对象的一个子类(实际上就是<code>HttpSecurity</code>)，所以 <code>and()</code>方法相当于又回到<code>HttpSecurity</code>实例，重新开启新一轮的配置。如果觉得<code>and</code>(方法很难理解，也可以不用<code>and()</code>方法，在<code>.anyRequest().authenticated()</code>配置完成后直接用分号(;）结束，然后通过 <code>http.formLogin()</code>继续配置表单登录。</li><li><code>formLogin()</code>表示开启表单登录配置，<code>loginPage</code>用来配置登录页面地址<code>loginProcessingUrl</code>用来配置登录接口地址; <code>defaultSuccessUrl</code>表示登录成功后的跳转地址; <code>failureUrl</code>表示登录失败后的跳转地址; <code>usernameParameter</code>表示登录用户名的参数名称; <code>passwordParameter</code>表示登录密码的参数名称;  <code>permitAll</code> 表示跟登录相关的页面和接口不做拦截，直接通过。需要注意的是，<code>loginProcessingUrl</code>、<code>usernameParameter</code>、<code>passwordParameter</code>需要和<code>login.html</code>中登录表单的配置一致。</li><li>最后的<code>csrf().disable()</code>表示禁用<code>CSRF防御功能</code>，<code>Spring Security</code>自带了<code>CSRF</code>防御机制,但是我们这里为了测试方便,先将<code>CSRF</code>防御机制关闭,后续将会详细介绍<code>CSRF</code>攻击与防御问题。</li></ul><h4 id="配置细节"><a href="#配置细节" class="headerlink" title="配置细节"></a>配置细节</h4><p>当然，前面的配置比较粗糙，这里还有一些配置的细节需要和读者分享一下。<br>在前面的配置中，我们用<code>defaultSuccessUrl</code>表示用户登录成功后的跳转地址，用<code>failureUrl</code>表示用户登录失败后的跳转地址。关于登录成功和登录失败，除了这两个方法可以配置之外，还有另外两个方法也可以配置。</p><h5 id="登陆成功"><a href="#登陆成功" class="headerlink" title="登陆成功"></a>登陆成功</h5><p>当用户登录成功之后，除了<code>defaultSuccessUnl</code> 方法可以实现登录成功后的跳转之外，<code>successForwardUrl</code>也可以实现登录成功后的跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .successForwardUrl(&quot;/&quot;)</span></span><br><span class="line">.defaultSuccessUrl(<span class="string">&quot;/&quot;</span>, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><h6 id="defaultSuccessUrl-和-successForwardUrl的区别"><a href="#defaultSuccessUrl-和-successForwardUrl的区别" class="headerlink" title="defaultSuccessUrl 和 successForwardUrl的区别"></a><code>defaultSuccessUrl</code> 和 <code>successForwardUrl</code>的区别</h6><ul><li><code>defaultSuccessUrl</code>表示当用户登录成功之后，会自动重定向到登录之前的地址上，如果用户本身就是直接访问的登录页面，则登录成功后就会重定向到<code>defaultSuccessUrl</code>指定的页面中。例如，用户在未认证的情况下，访问了<code>hello</code>页面，此时会自动重定向到登录页面，当用户登录成功后，就会自动重定向到<code>/hello</code>页面; 而用户如果一开始就访问登录页面，则登录成功后就会自动重定向到<code>defaulItSuccessUrl</code>所指定的页面中。</li><li><code>successForwardUrl</code>则不会考虑用户之前的访问地址，只要用户登录成功，就会通过服务器端跳转到<code>successForwardUrl</code>所指定的页面。</li><li><code>defaultSuccessUrl</code>有一个重载方法，如果重载方法的第二个参数传入<code>true</code>，则<code>defaultSuccessUrl</code>的效果与<code>successForwardUrl</code>类似，即不考虑用户之前的访问地址，只要登录成功，就重定向到<code>defaultSuccessUrl</code>所指定的页面。不同之处在于，<code>defaultSuccessUrl</code>是通过重定向实现的跳转（客户端跳转)，而<code>successForwardUrl</code>则是通过服务器端跳转实现的。</li></ul><h6 id="相关源码简单分析"><a href="#相关源码简单分析" class="headerlink" title="相关源码简单分析"></a>相关源码简单分析</h6><p>无论是<code>defaultSuccessUrl</code>还是<code>successForwardUrl</code>,最终所配置的都是<code>AuthenticationSuccessHandler</code>接口的实例。<br><code>Spring Security</code>中专门提供了<code>AuthenticationSuccessHandler</code>接口用来处理登录成功事项:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain,</span></span><br><span class="line"><span class="params">Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">onAuthenticationSuccess(request, response, authentication);</span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由上述代码可以看到，<code>AuthenticationSuccessHandler</code>接口中一共定义了两个方法，其中一个是 <code>default</code>方法，此方法是<code>Spring Security 5.2</code>开始加入进来的，在处理特定的认证请求<code>Authentication Filter</code>中会用到; 另外一个非 <code>default</code>方法，则用来处理登录成功的具体事项，其中<code>request</code>和<code>response</code>参数好理解，<code>authentication</code>参数保存了登录成功的用户信息。我们将在后面的章节中详细介绍 <code>authentication</code>参数。</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211140307647.png" alt="image-20221114030734539"></p><p>这个接口的函数超级简单</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211140309293.png" alt="image-20221114030913206"></p><p>你在用户认证成功之后, 就会调用上面的那个函数, 紧接着上面的默认函数会调用下面的函数, 该函数是个接口, 将会有实现类</p><p><code>AuthenticationSuccessHandler</code>接口共有三个实现类, 如图所示</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blogimage-20221113191332026.png" alt="image-20221113191332026"></p><ul><li><code>ForwardAuthenticationSuccessHandler</code></li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211140311357.png" alt="image-20221114031131230"></p><p>成功就转发</p><ul><li><code>SavedRequestAwareAuthenticationSuccessHandler</code></li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211140312669.png" alt="image-20221114031233549"></p><p><code>SavedRequestAwareAuthenticationSuccessHandler</code> 在 <code>SimpleUrlAuthenticationSuccessHandler</code> 的基础上增加了请求缓存的功能，可以记录之前请求的地址，进而在登录成功后重定向到一开始访问的地址。</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211140320251.png" alt="image-20221114032000138"></p><ul><li><code>SimpleUrlAuthenticationSuccessHandler</code></li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211140318471.png" alt="image-20221114031804364"></p><p>这个是默认的, 如果你没有配置任何相关配置时, 将会使用它</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211140318977.png" alt="image-20221114031852842"></p><p>我们来重点分析<code>SavedRequestAwareAuthenticationSuccessHandler</code>和 <code>ForwardAuthenticationSuccessHandler</code>的实现。</p><p>当通过<code>defaultSuccessUrl</code>来设置登录成功后重定向的地址时，实际上对应的实现类就是<code>SavedRequestAwareAuthenticationSuccessHandler</code>，由于该类的源码比较长，这里列出来一部分核心代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SavedRequestAwareAuthenticationSuccessHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleUrlAuthenticationSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(<span class="built_in">this</span>.getClass());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">RequestCache</span> <span class="variable">requestCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpSessionRequestCache</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">Authentication authentication)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 从缓存中拿请求, 但是没有, 说明用户在登录之前没有访问的地址</span></span><br><span class="line"><span class="type">SavedRequest</span> <span class="variable">savedRequest</span> <span class="operator">=</span> <span class="built_in">this</span>.requestCache.getRequest(request, response);</span><br><span class="line"><span class="keyword">if</span> (savedRequest == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 走SimpleUrlAuthenticationSuccessHandler默认重定向地址 </span></span><br><span class="line"><span class="built_in">super</span>.onAuthenticationSuccess(request, response, authentication);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 拿到请求 ?target=/hello 参数的 /hello </span></span><br><span class="line"><span class="type">String</span> <span class="variable">targetUrlParameter</span> <span class="operator">=</span> getTargetUrlParameter();</span><br><span class="line">        <span class="comment">// 如果使用默认的targetUrl, 则targetUrlParameter设置无意义</span></span><br><span class="line">        <span class="comment">// 还是和前面一样, 直接走SimpleUrlAuthenticationSuccessHandler默认重定向地址</span></span><br><span class="line"><span class="keyword">if</span> (isAlwaysUseDefaultTargetUrl()</span><br><span class="line">|| (targetUrlParameter != <span class="literal">null</span> &amp;&amp; StringUtils.hasText(request.getParameter(targetUrlParameter)))) &#123;</span><br><span class="line"><span class="built_in">this</span>.requestCache.removeRequest(request, response);</span><br><span class="line"><span class="built_in">super</span>.onAuthenticationSuccess(request, response, authentication);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">clearAuthenticationAttributes(request);</span><br><span class="line"><span class="comment">// Use the DefaultSavedRequest URL</span></span><br><span class="line"><span class="type">String</span> <span class="variable">targetUrl</span> <span class="operator">=</span> savedRequest.getRedirectUrl();</span><br><span class="line">getRedirectStrategy().sendRedirect(request, response, targetUrl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRequestCache</span><span class="params">(RequestCache requestCache)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.requestCache = requestCache;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>String targetUrlParameter = getTargetUrlParameter();</code><ul><li>接下来会获取一个<code>targetUrlParameter</code>，这个是用户显式指定的、希望登录成功后重定向的地址，例如用户发送的登录请求是<code>http:/localhost:8080/doLogin?target=/hello</code>，这就表示当用户登录成功之后，希望自动重定向到<code>/hello</code>这个接口。<code>getTargetUrlParameter</code>就是要获取重定向地址参数的<code>key</code>，也就是上面的<code>target</code>，拿到<code>target</code>之后，就可以获取到重定向地址了。完整逻辑看下图</li><li><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211140334498.png" alt="image-20221114033424360"></li></ul></li></ul><p>如果前面的条件都不满足，那么最终会从缓存请求<code>savedRequest</code> 中获取重定向地址，然后进行重定向操作。如下图:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211140336993.png" alt="image-20221114033632889"></p><p>整体逻辑非常简单</p><p>看这段代码我们可以自定义一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> T <span class="title function_">defaultSuccessUrl</span><span class="params">(String defaultSuccessUrl, <span class="type">boolean</span> alwaysUse)</span> &#123;</span><br><span class="line">   <span class="type">SavedRequestAwareAuthenticationSuccessHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SavedRequestAwareAuthenticationSuccessHandler</span>();</span><br><span class="line">   handler.setDefaultTargetUrl(defaultSuccessUrl);</span><br><span class="line">   handler.setAlwaysUseDefaultTargetUrl(alwaysUse);</span><br><span class="line">   <span class="built_in">this</span>.defaultSuccessHandler = handler;</span><br><span class="line">   <span class="keyword">return</span> successHandler(handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当然实际开发中不会这么用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SavedRequestAwareAuthenticationSuccessHandler <span class="title function_">successHandler</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">SavedRequestAwareAuthenticationSuccessHandler</span> <span class="variable">savedRequestAwareAuthenticationSuccessHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SavedRequestAwareAuthenticationSuccessHandler</span>();</span><br><span class="line">   savedRequestAwareAuthenticationSuccessHandler.setDefaultTargetUrl(<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">   savedRequestAwareAuthenticationSuccessHandler.setTargetUrlParameter(<span class="string">&quot;target&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> savedRequestAwareAuthenticationSuccessHandler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者效仿这个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    <span class="type">SavedRequest</span> <span class="variable">savedRequest</span> <span class="operator">=</span> <span class="built_in">this</span>.requestCache.getRequest(request, response);</span><br><span class="line">    <span class="keyword">if</span> (savedRequest == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">super</span>.onAuthenticationSuccess(request, response, authentication);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">targetUrlParameter</span> <span class="operator">=</span> <span class="built_in">this</span>.getTargetUrlParameter();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.isAlwaysUseDefaultTargetUrl() &amp;&amp; (targetUrlParameter == <span class="literal">null</span> || !StringUtils.hasText(request.getParameter(targetUrlParameter)))) &#123;</span><br><span class="line">            <span class="built_in">this</span>.clearAuthenticationAttributes(request);</span><br><span class="line">            <span class="type">String</span> <span class="variable">targetUrl</span> <span class="operator">=</span> savedRequest.getRedirectUrl();</span><br><span class="line">            <span class="built_in">this</span>.getRedirectStrategy().sendRedirect(request, response, targetUrl);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.requestCache.removeRequest(request, response);</span><br><span class="line">            <span class="built_in">super</span>.onAuthenticationSuccess(request, response, authentication);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现一个自定义的前后端分离的项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.successHandler((request, response, authentication) -&gt; &#123;</span><br><span class="line">   HashMap&lt;String, Object&gt; retHashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">   retHashMap.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">   retHashMap.put(<span class="string">&quot;status&quot;</span>, HttpStatus.OK.value());</span><br><span class="line">   retHashMap.put(<span class="string">&quot;authentication&quot;</span>, authentication);</span><br><span class="line">   response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);</span><br><span class="line">   <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> objectMapper.writeValueAsString(retHashMap);</span><br><span class="line">   response.getWriter().write(s);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="登录失败"><a href="#登录失败" class="headerlink" title="登录失败"></a>登录失败</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityFilterChain <span class="title function_">securityWebFilterChain</span><span class="params">(HttpSecurity httpSecurity, ObjectMapper objectMapper)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> httpSecurity.authorizeHttpRequests()</span><br><span class="line">        .anyRequest()</span><br><span class="line">        .authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .formLogin()</span><br><span class="line">        .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">        .省略 ...</span><br><span class="line">        .failureUrl(<span class="string">&quot;/login&quot;</span>) <span class="comment">// 登录失败</span></span><br><span class="line">        .permitAll()</span><br><span class="line">        .and()</span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>.failureUrl(&quot;/login&quot;)</code> 这种是重定向, 无法携带错误信息</p><p>可以改成转发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.failureForwardUrl(<span class="string">&quot;/login&quot;</span>) <span class="comment">// 转发, 可以携带错误信息</span></span><br></pre></td></tr></table></figure><h6 id="源码简单分析"><a href="#源码简单分析" class="headerlink" title="源码简单分析"></a>源码简单分析</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForwardAuthenticationFailureHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationFailureHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String forwardUrl;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ForwardAuthenticationFailureHandler</span><span class="params">(String forwardUrl)</span> &#123;</span><br><span class="line">Assert.isTrue(UrlUtils.isValidRedirectUrl(forwardUrl), () -&gt; <span class="string">&quot;&#x27;&quot;</span> + forwardUrl + <span class="string">&quot;&#x27; is not a valid forward URL&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置转发地址</span></span><br><span class="line"><span class="built_in">this</span>.forwardUrl = forwardUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 设置错误信息 key = &quot;SPRING_SECURITY_LAST_EXCEPTION&quot; value = 异常</span></span><br><span class="line">request.setAttribute(WebAttributes.AUTHENTICATION_EXCEPTION, exception);</span><br><span class="line">        <span class="comment">// 转发地址</span></span><br><span class="line">request.getRequestDispatcher(<span class="built_in">this</span>.forwardUrl).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意看, 他的接口<code>AuthenticationFailureHandler</code></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211140409564.png" alt="image-20221114040945454"></p><ul><li><code>SimpleUrlAuthenticationFailureHandler</code> 默认的处理逻辑就是通过重定向跳转到登录页面，当然也可以通过配置<code>forwardToDestination</code>属性将重定向改为服务器端跳转，<code>failureUrl</code>方法的底层实现逻辑就是<code>SimpleUrlAuthenticationFailureHandler</code>。</li><li><code>ExceptionMappingAuthenticationFailureHandler</code>可以实现根据不同的异常类型，映射到不同的路径。</li><li><code>ForwardAuthenticationFailureHandler</code>表示通过服务器端跳转来重新回到登录页面，<code>failureForwardUrl</code>方法的底层实现逻辑就是<code>ForwardAuthenticationFailureHandler</code>。</li><li><code>AuthenticationEntryPointFailureHandler</code>是<code>Spring Security 5.2</code>新引进的处理类，可以通过<code>AuthenticationEntryPoint</code>来处理登录异常。</li><li><code>DelegatingAuthenticationFailureHandler</code> 可以实现为不同的异常类型配置不同的登录失败处理回调。</li></ul><blockquote><p>源码就不分析了, 记得转发也可以设置前后端分析, 基本代码和重定向那边一致</p></blockquote><h5 id="注销登录"><a href="#注销登录" class="headerlink" title="注销登录"></a>注销登录</h5><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211140424284.png" alt="image-20221114042414165"></p><ul><li>通过.logout(方法开启注销登录配置。</li><li>logoutUrl指定了注销登录请求地址，默认是GET请求，路径为&#x2F;logout。</li><li>invalidateHttpSession表示是否使session失效，默认为true。</li><li>clearAuthentication表示是否清除认证信息，默认为true。(5)logoutSuccessUrl表示注销登录后的跳转地址。</li></ul><p>设置多个注销登录地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.logoutRequestMatcher(<span class="keyword">new</span> <span class="title class_">OrRequestMatcher</span>(<span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;/logout1&quot;</span>, <span class="string">&quot;GET&quot;</span>), <span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;logout2&quot;</span>, <span class="string">&quot;GET&quot;</span>))) <span class="comment">// 设置多个推出登录地址</span></span><br></pre></td></tr></table></figure><h2 id="登录用户数据获取"><a href="#登录用户数据获取" class="headerlink" title="登录用户数据获取"></a>登录用户数据获取</h2><p>登录成功之后，在后续的业务逻辑中，开发者可能还需要获取登录成功的用户对象，如果不使用任何安全管理框架，那么可以将用户信息保存在<code>HtpSession</code> 中，以后需要的时候直接从 <code>HttpSession</code>中获取数据。在 Spring Security中，用户登录信息本质上还是保存在<code>HttpSession</code>中，但是为了方便使用，Spring Security对<code>HtpSession</code>中的用户信息进行了封装，封装之后，开发者若再想获取用户登录数据就会有两种不同的思路:<br>(1）从 <code>SecurityContextHolder</code>中获取。<br>(2）从当前请求对象中获取。</p><p>这里列出来的两种方式是主流的做法，开发者也可以使用一些非主流的方式获取登录成功后的用户信息，例如直接从<code>HttpSession</code> 中获取用户登录数据。<br>无论是哪种获取方式，都离不开一个重要的对象: <code>Authentication</code>。在Spring Security 中，<code>Authentication</code>对象主要有两方面的功能:</p><p>(1）作为<code>AuthenticationManager</code> 的输入参数，提供用户身份认证的凭证，当它作为一个输入参数时，它的<code>isAuthenticated</code>方法返回<code>false</code>，表示用户还未认证。<br>(2)代表已经经过身份认证的用户,此时的<code>Authentication</code>可以从<code>SecurityContext</code>中获取。</p><p>一个<code>Authentication</code>对象主要包含三个方面的信息:</p><p>(1) <code>principal</code>:定义认证的用户。如果用户使用用户名&#x2F;密码的方式登录，<code>principal</code> 通常就是一个<code>UserDetails</code>对象。<br>(2) <code>credentials</code>:登录凭证，一般就是指密码。当用户登录成功之后，登录凭证会被自动擦除，以防止泄漏。<br>(3）<code>authorities</code>:用户被授予的权限信息。</p><p>Java中本身提供了<code>Principal</code> 接口用来描述认证主体，<code>Principal</code>可以代表一个公司、个人或者<code>登录ID</code>。Spring Security中定义了<code>Authentication</code>接口用来规范登录用户信息，<code>Authentication</code>继承自<code>Principal</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Authentication</span> <span class="keyword">extends</span> <span class="title class_">Principal</span>, Serializable &#123;</span><br><span class="line">    </span><br><span class="line">Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class="line"></span><br><span class="line">Object <span class="title function_">getCredentials</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">Object <span class="title function_">getDetails</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">Object <span class="title function_">getPrincipal</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isAuthenticated</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setAuthenticated</span><span class="params">(<span class="type">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>getAuthorities</code>方法:用来获取用户权限。</li><li><code>getCredentials</code> 方法:用来获取用户凭证，一般来说就是密码。</li><li><code>getDetails</code>方法:用来获取用户的详细信息，可能是当前的请求之类。</li><li><code>getPrincipal</code>方法:用来获取当前用户信息，可能是一个用户名，也可能是一个用户对象。</li><li><code>isAuthenticated</code>方法:当前用户是否认证成功。</li></ul><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211140456000.png" alt="image-20221114045647861"></p><p>不同的认证方式有不同的<code>Authentication</code>对象</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211140501798.png" alt="image-20221114050140666"></p><ul><li><code>AbstractAuthenticationToken</code>:该类实现了<code>Authentication</code>和 <code>CredentialsContainer</code>两个接口,在<code>AbstractAuthenticationToken</code> 中对<code>Authentication</code> 接口定义的各个数据获取方法进行了实现，<code>CredentialsContainer</code>则提供了登录凭证擦除方法。一般在登录成功后，为了防止用户信息泄漏，可以将登录凭证（例如密码）擦除。</li><li><code>RememberMeAuthenticationToken</code>:如果用户使用<code>RememberMe</code>的方式登录，登录信息将封装在<code>RememberMeAuthenticationToken</code> 中。</li><li><code>TestingAuthenticationToken</code>:单元测试时封装的用户对象。</li><li><code>AnonymousAuthenticationToken</code>:匿名登录时封装的用户对象。</li><li><code>RunAsUserToken</code>:替换验证身份时封装的用户对象。</li><li><code>UsernamePasswordAuthenticationToken</code>:表单登录时封装的用户对象。</li><li><code>JaasAuthenticationToken</code>:<code>JAAS</code>认证时封装的用户对象。</li><li><code>PreAuthenticatedAuthenticationToken</code>: <code>Pre-Authentication</code>场景下封装的用户对象。</li></ul><p>在这些<code>Authentication</code>的实例中，最常用的有两个:<code>UsernamePasswordAuthenticationToken</code>和<code>RememberMeAuthenticationToken</code>。在前面中的案例对应的用户认证对象就是<code>UsernamePasswordAuthenticationToken</code>。<br>了解了<code>Authentication</code>对象之后，接下来我们来看一下如何在登录成功后获取用户登录信息，即 <code>Authentication</code>对象。</p><h3 id="修改SecurityContextHolder存储的位置"><a href="#修改SecurityContextHolder存储的位置" class="headerlink" title="修改SecurityContextHolder存储的位置"></a>修改SecurityContextHolder存储的位置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 这个对象绑定在 ThreadLocal</span></span><br><span class="line"><span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> authentication.getName();</span><br><span class="line">Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities = authentication.getAuthorities();</span><br><span class="line">System.err.println(<span class="string">&quot;username: &quot;</span> + name);</span><br><span class="line">System.err.println(<span class="string">&quot;authorities: &quot;</span> + authorities);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在 <code>SecurityContextHolder</code>中存放的是<code>SecurityContext</code>，<code>SecurityContextHolder</code> 中定义了三种不同的数据存储策略，这实际上是一种典型的策略模式:<br>(1）<code>MODE_THREADLOCAL</code>:这种存放策略是将<code>SecurityContext</code>存放在<code>ThreadLocal</code>中，大家知道<code>ThreadLocal</code>的特点是在哪个线程中存储就要在哪个线程中读取，这其实非常适合Web 应用，因为在默认情况下，一个请求无论经过多少<code>Filter</code>到达 <code>Servlet</code>，都是由一个线程来处理的。这也是<code>SecurityContextHolder</code> 的默认存储策略，这种存储策略意味着如果在具体的业务处理代码中，开启了子线程，在子线程中去获取登录用户数据，就会获取不到。<br>(2)<code>MODE_INHERITABLETHREADLOCAL</code>:这种存储模式适用于多线程环境，如果希望在子线程中也能够获取到登录用户数据，那么可以使用这种存储模式。<br>(3）<code>MODE_GLOBAL</code>:这种存储模式实际上是将数据保存在一个静态变量中，在 <code>JavaWeb</code>开发中，这种模式很少使用到。</p><p><code>Spring Security</code> 中定义了<code>SecurityContextHolderStrategy</code>接口用来规范存储策略中的方法，我们来看一下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SecurityContextHolderStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除当前上下文</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">clearContext</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前上下文</span></span><br><span class="line">SecurityContext <span class="title function_">getContext</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置当前上下文</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setContext</span><span class="params">(SecurityContext context)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个新的, 空的上下文实现, 供SecurityContextRepository实现在首次创建新上下文时使用。</span></span><br><span class="line">SecurityContext <span class="title function_">createEmptyContext</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有4个实现类</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211141500812.png" alt="image-20221114150030634"></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211141503475.png" alt="image-20221114150301372"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalSecurityContextHolderStrategy</span> <span class="keyword">implements</span> <span class="title class_">SecurityContextHolderStrategy</span> &#123;</span><br><span class="line"><span class="comment">// 存储状态, 更线程绑定</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SecurityContext&gt; contextHolder = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearContext</span><span class="params">()</span> &#123;</span><br><span class="line">contextHolder.remove();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SecurityContext <span class="title function_">getContext</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">SecurityContext</span> <span class="variable">ctx</span> <span class="operator">=</span> contextHolder.get();</span><br><span class="line"><span class="keyword">if</span> (ctx == <span class="literal">null</span>) &#123;</span><br><span class="line">ctx = createEmptyContext();</span><br><span class="line">contextHolder.set(ctx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ctx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContext</span><span class="params">(SecurityContext context)</span> &#123;</span><br><span class="line">Assert.notNull(context, <span class="string">&quot;Only non-null SecurityContext instances are permitted&quot;</span>);</span><br><span class="line">contextHolder.set(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> SecurityContext <span class="title function_">createEmptyContext</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SecurityContextImpl</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些都是非常简单的代码, 就不介绍了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">InheritableThreadLocalSecurityContextHolderStrategy</span> <span class="keyword">implements</span> <span class="title class_">SecurityContextHolderStrategy</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SecurityContext&gt; contextHolder = <span class="keyword">new</span> <span class="title class_">InheritableThreadLocal</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟上面唯一的区别在于 <code>ThreadLocal</code>和<code>InheritableThreadLocal</code></p><p><code>InheritableThreadLocal</code>非常简单</p><p>该对象扩展了 <code>ThreadLocal</code>, 提供了从父线程到子线程的值继承</p><p>当子线程被创建, 此时子线程将会获得所有并初始化继承的父线程有的ThreadLocal变量的值</p><p>通常, 子线程的值将会和父线程相同, 然而, 子线程的值可以通过重写在类中的childValue函数变成父类的任意方法</p><p>当变量中维护的每线程属性（例如，用户ID，事务ID）必须自动传输到创建的任何子线程时，可继承的线程局部变量优先于普通线程局部变量。<br>注意：在创建新线程期间，可以选择不接收可继承线程局部变量的初始值。</p><p>最后</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211150114152.png" alt="image-20221115011402986"></p><p>就更简单了, 直接使用一个静态变量让多线程共享使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityContextHolder</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MODE_THREADLOCAL</span> <span class="operator">=</span> <span class="string">&quot;MODE_THREADLOCAL&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MODE_INHERITABLETHREADLOCAL</span> <span class="operator">=</span> <span class="string">&quot;MODE_INHERITABLETHREADLOCAL&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MODE_GLOBAL</span> <span class="operator">=</span> <span class="string">&quot;MODE_GLOBAL&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MODE_PRE_INITIALIZED</span> <span class="operator">=</span> <span class="string">&quot;MODE_PRE_INITIALIZED&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SYSTEM_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.security.strategy&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">strategyName</span> <span class="operator">=</span> System.getProperty(SYSTEM_PROPERTY);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SecurityContextHolderStrategy strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">initializeCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">initialize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">()</span> &#123;</span><br><span class="line">initializeStrategy();</span><br><span class="line">initializeCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initializeStrategy</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (MODE_PRE_INITIALIZED.equals(strategyName)) &#123;</span><br><span class="line">Assert.state(strategy != <span class="literal">null</span>, <span class="string">&quot;When using &quot;</span> + MODE_PRE_INITIALIZED</span><br><span class="line">+ <span class="string">&quot;, setContextHolderStrategy must be called with the fully constructed strategy&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasText(strategyName)) &#123;</span><br><span class="line"><span class="comment">// Set default</span></span><br><span class="line">strategyName = MODE_THREADLOCAL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strategyName.equals(MODE_THREADLOCAL)) &#123;</span><br><span class="line">strategy = <span class="keyword">new</span> <span class="title class_">ThreadLocalSecurityContextHolderStrategy</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strategyName.equals(MODE_INHERITABLETHREADLOCAL)) &#123;</span><br><span class="line">strategy = <span class="keyword">new</span> <span class="title class_">InheritableThreadLocalSecurityContextHolderStrategy</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strategyName.equals(MODE_GLOBAL)) &#123;</span><br><span class="line">strategy = <span class="keyword">new</span> <span class="title class_">GlobalSecurityContextHolderStrategy</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Try to load a custom strategy</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(strategyName);</span><br><span class="line">Constructor&lt;?&gt; customStrategy = clazz.getConstructor();</span><br><span class="line">strategy = (SecurityContextHolderStrategy) customStrategy.newInstance();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">ReflectionUtils.handleReflectionException(ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clearContext</span><span class="params">()</span> &#123;</span><br><span class="line">strategy.clearContext();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SecurityContext <span class="title function_">getContext</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> strategy.getContext();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getInitializeCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> initializeCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setContext</span><span class="params">(SecurityContext context)</span> &#123;</span><br><span class="line">strategy.setContext(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setStrategyName</span><span class="params">(String strategyName)</span> &#123;</span><br><span class="line">SecurityContextHolder.strategyName = strategyName;</span><br><span class="line">initialize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setContextHolderStrategy</span><span class="params">(SecurityContextHolderStrategy strategy)</span> &#123;</span><br><span class="line">Assert.notNull(strategy, <span class="string">&quot;securityContextHolderStrategy cannot be null&quot;</span>);</span><br><span class="line">SecurityContextHolder.strategyName = MODE_PRE_INITIALIZED;</span><br><span class="line">SecurityContextHolder.strategy = strategy;</span><br><span class="line">initialize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SecurityContextHolderStrategy <span class="title function_">getContextHolderStrategy</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> strategy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SecurityContext <span class="title function_">createEmptyContext</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> strategy.createEmptyContext();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;SecurityContextHolder[strategy=&#x27;&quot;</span> + strategy.getClass().getSimpleName() + <span class="string">&quot;&#x27;; initializeCount=&quot;</span></span><br><span class="line">+ initializeCount + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这段源码中可以看到，<code>SecurityContextHolder</code>定义了三个静态常量用来描述三种不同的存储策略;存储策略<code>strategy</code> 会在静态代码块中进行初始化，根据不同的<code>strategyName</code>初始化不同的存储策略; <code>strategyName</code>变量表示目前正在使用的存储策略，<strong>开发者可以通过配置系统变量或者调用<code>setStrategyName</code>来修改<code>SecurityContextHolder</code> 中的存储策略</strong>，调用<code>setStrategyName</code>后会重新初始化 <code>strategy</code>。<br>默认情况下，如果开发者试图从子线程中获取当前登录用户数据，就会获取失败，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 这个对象绑定在 ThreadLocal</span></span><br><span class="line"><span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> authentication.getName();</span><br><span class="line">Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities = authentication.getAuthorities();</span><br><span class="line">System.err.println(<span class="string">&quot;主线程: username = &quot;</span> + name);</span><br><span class="line">System.err.println(<span class="string">&quot;主线程: authorities = &quot;</span> + authorities);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line"><span class="type">Authentication</span> <span class="variable">authentication1</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line"><span class="keyword">if</span> (authentication1 == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: 获得用户信息失败&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">name1</span> <span class="operator">=</span> authentication1.getName();</span><br><span class="line">Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities1 = authentication.getAuthorities();</span><br><span class="line">System.err.println(Thread.currentThread().getName() + <span class="string">&quot;: username: &quot;</span> + name1);</span><br><span class="line">System.err.println(Thread.currentThread().getName() + <span class="string">&quot;: authorities: &quot;</span> + authorities1);</span><br><span class="line">&#125;, <span class="string">&quot;子线程&quot;</span>).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主线程: username = user</span><br><span class="line">主线程: authorities = []</span><br><span class="line">子线程: 获得用户信息失败</span><br></pre></td></tr></table></figure><p>设置多线程ThreadLocal继承策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FormLoginApplication</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      System.setProperty(SecurityContextHolder.SYSTEM_PROPERTY, SecurityContextHolder.MODE_INHERITABLETHREADLOCAL); <span class="comment">// 设置 SecurityContextHolder 模式</span></span><br><span class="line">      SpringApplication.run(FormLoginApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211150126252.png" alt="image-20221115012656176"></p><h3 id="SecurityContextPersistenceFilter-已弃用"><a href="#SecurityContextPersistenceFilter-已弃用" class="headerlink" title="SecurityContextPersistenceFilter(已弃用)"></a>SecurityContextPersistenceFilter(已弃用)</h3><p>使用在请求之前所配置的<code>SecurityContextRepository</code>获取的信息去填充<code>SecurityContextHolder</code></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211150210196.png" alt="image-20221115021029092"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SecurityContextRepository</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 已被弃用, 使用下面的那个default Supplier&lt;SecurityContext&gt; loadContext(HttpServletRequest request)</span></span><br><span class="line">   <span class="meta">@Deprecated</span></span><br><span class="line">   SecurityContext <span class="title function_">loadContext</span><span class="params">(HttpRequestResponseHolder requestResponseHolder)</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">default</span> Supplier&lt;SecurityContext&gt; <span class="title function_">loadContext</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> SingletonSupplier.of(() -&gt; loadContext(<span class="keyword">new</span> <span class="title class_">HttpRequestResponseHolder</span>(request, <span class="literal">null</span>)));</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">saveContext</span><span class="params">(SecurityContext context, HttpServletRequest request, HttpServletResponse response)</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="type">boolean</span> <span class="title function_">containsContext</span><span class="params">(HttpServletRequest request)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认它使用<code>HttpSessionSecurityContextRepository </code>, 有关 <code>HttpSession</code> 相关配置选项的信息，请参阅此类。</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211150204707.png" alt="image-20221115020400589"></p><p>该过滤器只会在每一个<code>request</code>请求执行一次, 以解析<code>servlet</code>容器（特别是 <code>Weblogic</code>）的兼容问题</p><p>过滤器必须在任何认证处理机制前执行</p><p>认证处理机制(例如: Basic, cas 处理过滤器等)期望<code>SecurityContextHolder</code>在他们执行时包含有效的<code>SecurityContext</code></p><p>这本质上是就<code>HttpSessionContextIntegrationFilter</code> 的重构过程, 以委托存储问题给单独的策略, 从而允许在请求之间维护安全上下文方式进行更多的自定义</p><p><code>forceEagerSessionCreation</code> 属性将被用于确保<code>session</code>总是在过滤器链执行之前可用(默认是<code>false</code>, 他是不推荐 且密集的资源)</p><p>该类已弃用, 现在使用<code>SecurityContextHolderFilter</code></p><p>整体上来说，<code>SecurityContextPersistenceFilter</code>主要做两件事情: </p><ul><li><p>当一个请求到来时，从<code>HttpSession</code>中获取<code>SecurityContext</code>并存入<code>SecurityContextHolder</code>中，这样在同一个请求的后续处理过程中，开发者始终可以通过<code>SecurityContextHolder</code>获取到当前登录用户信息。</p></li><li><p>当一个请求处理完毕时，从 <code>SecurityContextHolder</code> 中获取 <code>SecurityContext</code>并存入<code>HttpSession</code>中（主要针对异步<code>Servlet</code>），方便下一个请求到来时，再从<code>HttpSession</code>中拿出来使用，同时擦除<code>SecurityContextHolder</code> 中的登录用户信息。</p><blockquote><p>在<code>SecurityContextPersistenceFilter</code>过滤器中，当一个请求处理完毕时，从<code>SecurityContextHolder</code>中获取<code>SecurityContext</code> 存入<code>HtpSession</code>中,这一步的操作主要是针对异步<code>Servlet</code>。如果不是异步<code>Servlet</code>,在响应提交时,就会将<code>SecurityContext</code>保存到<code>HtpSession</code>中了，而不会等到在<code>SecurityContextPersistenceFilter</code>过滤器中再去存储。</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityContextPersistenceFilter</span> <span class="keyword">extends</span> <span class="title class_">GenericFilterBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILTER_APPLIED</span> <span class="operator">=</span> <span class="string">&quot;__spring_security_scpf_applied&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SecurityContextRepository repo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">forceEagerSessionCreation</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SecurityContextPersistenceFilter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">HttpSessionSecurityContextRepository</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SecurityContextPersistenceFilter</span><span class="params">(SecurityContextRepository repo)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.repo = repo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">doFilter((HttpServletRequest) request, (HttpServletResponse) response, chain);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span><br><span class="line"><span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"><span class="comment">// ensure that filter is only applied once per request</span></span><br><span class="line"><span class="keyword">if</span> (request.getAttribute(FILTER_APPLIED) != <span class="literal">null</span>) &#123;</span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">request.setAttribute(FILTER_APPLIED, Boolean.TRUE);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.forceEagerSessionCreation) &#123;</span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled() &amp;&amp; session.isNew()) &#123;</span><br><span class="line"><span class="built_in">this</span>.logger.debug(LogMessage.format(<span class="string">&quot;Created session %s eagerly&quot;</span>, session.getId()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">HttpRequestResponseHolder</span> <span class="variable">holder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpRequestResponseHolder</span>(request, response);</span><br><span class="line"><span class="type">SecurityContext</span> <span class="variable">contextBeforeChainExecution</span> <span class="operator">=</span> <span class="built_in">this</span>.repo.loadContext(holder);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SecurityContextHolder.setContext(contextBeforeChainExecution);</span><br><span class="line"><span class="keyword">if</span> (contextBeforeChainExecution.getAuthentication() == <span class="literal">null</span>) &#123;</span><br><span class="line">logger.debug(<span class="string">&quot;Set SecurityContextHolder to empty SecurityContext&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="built_in">this</span>.logger</span><br><span class="line">.debug(LogMessage.format(<span class="string">&quot;Set SecurityContextHolder to %s&quot;</span>, contextBeforeChainExecution));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">chain.doFilter(holder.getRequest(), holder.getResponse());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="type">SecurityContext</span> <span class="variable">contextAfterChainExecution</span> <span class="operator">=</span> SecurityContextHolder.getContext();</span><br><span class="line"><span class="comment">// Crucial removal of SecurityContextHolder contents before anything else.</span></span><br><span class="line">SecurityContextHolder.clearContext();</span><br><span class="line"><span class="built_in">this</span>.repo.saveContext(contextAfterChainExecution, holder.getRequest(), holder.getResponse());</span><br><span class="line">request.removeAttribute(FILTER_APPLIED);</span><br><span class="line"><span class="built_in">this</span>.logger.debug(<span class="string">&quot;Cleared SecurityContextHolder to complete request&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setForceEagerSessionCreation</span><span class="params">(<span class="type">boolean</span> forceEagerSessionCreation)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.forceEagerSessionCreation = forceEagerSessionCreation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但该类已被弃用, 现在使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityContextHolderFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SecurityContextRepository securityContextRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> shouldNotFilterErrorDispatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new instance.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> securityContextRepository the repository to use. Cannot be null.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SecurityContextHolderFilter</span><span class="params">(SecurityContextRepository securityContextRepository)</span> &#123;</span><br><span class="line">Assert.notNull(securityContextRepository, <span class="string">&quot;securityContextRepository cannot be null&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.securityContextRepository = securityContextRepository;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 读取SecurityContext</span></span><br><span class="line"><span class="type">SecurityContext</span> <span class="variable">securityContext</span> <span class="operator">=</span> <span class="built_in">this</span>.securityContextRepository.loadContext(request).get();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 存储到 SecurityContextHolder</span></span><br><span class="line">SecurityContextHolder.setContext(securityContext);</span><br><span class="line">filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">SecurityContextHolder.clearContext();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">shouldNotFilterErrorDispatch</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.shouldNotFilterErrorDispatch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setShouldNotFilterErrorDispatch</span><span class="params">(<span class="type">boolean</span> shouldNotFilterErrorDispatch)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.shouldNotFilterErrorDispatch = shouldNotFilterErrorDispatch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他们有个通用的属性: <code>SecurityContextRepository</code> </p><p>该属性前面也看过了, 主要使用 <code>HttpSessionSecurityContextRepository </code>作为实现类实体用于增删改查<code>SecurityContext</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveContext</span><span class="params">(SecurityContext context, HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">SaveContextOnUpdateOrErrorResponseWrapper</span> <span class="variable">responseWrapper</span> <span class="operator">=</span> WebUtils.getNativeResponse(response,</span><br><span class="line">                                                                                           SaveContextOnUpdateOrErrorResponseWrapper.class);</span><br><span class="line">    <span class="keyword">if</span> (responseWrapper == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 获得session</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">httpSessionExists</span> <span class="operator">=</span> request.getSession(<span class="literal">false</span>) != <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 创建SecurityContext</span></span><br><span class="line">        <span class="type">SecurityContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> SecurityContextHolder.createEmptyContext();</span><br><span class="line">        <span class="comment">// 创建存储容器 其本质是一个HttpServletResponse</span></span><br><span class="line">        responseWrapper = <span class="keyword">new</span> <span class="title class_">SaveToSessionResponseWrapper</span>(response, request, httpSessionExists, initialContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存储 SecurityContext 下面有代码截图</span></span><br><span class="line">    responseWrapper.saveContext(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211150953686.png" alt="image-20221115095326549"></p><p>如果拿不到<code>authentication</code> 则删除掉httpsession中的<code>authentication</code></p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211150952064.png" alt="image-20221115095204890"></p><p>如果<code>authentication</code>和<code>httpSession</code>都不是空的, 就保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpSession.setAttribute(springSecurityContextKey, context);</span><br></pre></td></tr></table></figure><p>保存到 key &#x3D; <img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211150955845.png" alt="image-20221115095542749"></p><p>的session中</p><blockquote><p>其他源码就不看了, 基本上都是对<code>httpSession</code>的操作</p></blockquote><h2 id="从当前请求对象中获取"><a href="#从当前请求对象中获取" class="headerlink" title="从当前请求对象中获取"></a>从当前请求对象中获取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;authentication&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Authentication <span class="title function_">authentication</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> authentication;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;principal&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Principal <span class="title function_">principal</span><span class="params">(Principal principal)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> principal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两都是一个的JSON:<br><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151011543.png" alt="image-20221115101135403"></p><p>学过springMVC都应该知道, <code>Controller</code>方法的参数都是由<code>HttpServletRequest</code>请求拿出来的</p><p>那他是什么时候存储到<code>HttpServletRequest</code>的?</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151020042.png" alt="image-20221115102021918"></p><p>看上面这三个函数 找到这三个函数的 spring security实现:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151022808.png" alt="image-20221115102248679"></p><p>再看这三个函数:</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151026078.png" alt="image-20221115102646943"></p><p>找 SpringSecurity的实现类<code>HttpServlet3RequestFactory</code>的内部类<code>Servlet3SecurityContextHolderAwareRequestWrapper</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">   <span class="keyword">if</span> (isAuthenticated()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;Cannot perform login for &#x27;&quot;</span> + username + <span class="string">&quot;&#x27; already authenticated as &#x27;&quot;</span></span><br><span class="line">            + getRemoteUser() + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">AuthenticationManager</span> <span class="variable">authManager</span> <span class="operator">=</span> HttpServlet3RequestFactory.<span class="built_in">this</span>.authenticationManager;</span><br><span class="line">   <span class="keyword">if</span> (authManager == <span class="literal">null</span>) &#123;</span><br><span class="line">      HttpServlet3RequestFactory.<span class="built_in">this</span>.logger.debug(</span><br><span class="line">            <span class="string">&quot;authenticationManager is null, so allowing original HttpServletRequest to handle login&quot;</span>);</span><br><span class="line">      <span class="built_in">super</span>.login(username, password);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> getAuthentication(authManager, username, password);</span><br><span class="line">   <span class="type">SecurityContext</span> <span class="variable">context</span> <span class="operator">=</span> SecurityContextHolder.createEmptyContext();</span><br><span class="line">   context.setAuthentication(authentication);</span><br><span class="line">   SecurityContextHolder.setContext(context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Authentication <span class="title function_">getAuthentication</span><span class="params">(AuthenticationManager authManager, String username, String password)</span></span><br><span class="line">      <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span> UsernamePasswordAuthenticationToken</span><br><span class="line">            .unauthenticated(username, password);</span><br><span class="line">      <span class="type">Object</span> <span class="variable">details</span> <span class="operator">=</span> HttpServlet3RequestFactory.<span class="built_in">this</span>.authenticationDetailsSource.buildDetails(<span class="built_in">this</span>);</span><br><span class="line">      authentication.setDetails(details);</span><br><span class="line">      <span class="keyword">return</span> authManager.authenticate(authentication);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (AuthenticationException ex) &#123;</span><br><span class="line">      SecurityContextHolder.clearContext();</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(ex.getMessage(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里我们就知道怎么使用 HttpServletRequest 了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;information&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">information</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">   <span class="type">Principal</span> <span class="variable">userPrincipal</span> <span class="operator">=</span> request.getUserPrincipal();</span><br><span class="line">   <span class="type">String</span> <span class="variable">remoteUser</span> <span class="operator">=</span> request.getRemoteUser();</span><br><span class="line">   <span class="type">boolean</span> <span class="variable">admin</span> <span class="operator">=</span> request.isUserInRole(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">   List&lt;Object&gt; objectList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">   objectList.add(userPrincipal);</span><br><span class="line">   objectList.add(remoteUser);</span><br><span class="line">   objectList.add(admin);</span><br><span class="line">   <span class="keyword">return</span> objectMapper.writeValueAsString(objectList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151040399.png" alt="image-20221115104022282"></p><p>前面我们直接将<code>Authentication</code>或者<code>Principal</code> 写到<code>Controller</code>参数中，实际上就是<code>SpringMVC</code>框架从<code>Servlet3SecurityContextHolderAwareRequestWrapper</code> 中提取的用户信息。<br>那么<code>Spring Security</code>是如何将默认的请求对象转化为<code>Servlet3SecurityContextHolderAwareRequestWrapper</code> 的呢?这就涉及<code>Spring Security</code>过滤器链中另外一个重要的过滤器——<code>SecurityContextHolderAwareRequestFilter</code>。<br>前面我们提到<code>Spring Security</code>过滤器中，有一个<code>SecurityContextHolderAwareRequestFilter</code>过滤器，该过滤器的主要作用就是对<code>HttpServletRequest</code>请求进行再包装，重写<code>HtpServletRequest</code> 中和安全管理相关的方法。<code>HtpServletRequest</code> 在整个请求过程中会被包装多次，每一次的包装都会给它增添新的功能，例如在经过 <code>SecurityContextPersistenceFilter</code>请求时就会对它进行包装。</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151044214.png" alt="image-20221115104459115"></p><p>本质上还是一个过滤器</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151047995.png" alt="image-20221115104708878"></p><p><code>requestFactory</code>这个对象在这里被被创建</p><p><img src="https://jsd.cdn.zzko.cn/gh/bangiao/blog_images@main/blog/202211151048208.png" alt="image-20221115104857077"></p><p>跟进<code>HttpServlet3RequestFactory</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> HttpServletRequest <span class="title function_">create</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Servlet3SecurityContextHolderAwareRequestWrapper</span>(request, <span class="built_in">this</span>.rolePrefix, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>Servlet3SecurityContextHolderAwareRequestWrapper</code>类再次见到了</p><p>最终在<code>Spring MVC</code> 的<code>ServletRequestMethodArgumentResolver#resolveArgument(Class&lt;?&gt;,HttpServletRequest)</code>方法中进行默认参数解析，自动解析出 <code>Principal</code>对象。开发者在<code>Controller</code>中既可以通过 <code>Principal</code>来接收参数，也可以通过<code>Authentication</code>对象来接收。</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 过滤器 </tag>
            
            <tag> 认证 </tag>
            
            <tag> 登录 </tag>
            
            <tag> 角色 </tag>
            
            <tag> SpringSecurity </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04XML特殊字符处理方式</title>
      <link href="/2022/11/11/03ORM/04XML%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/11/11/03ORM/04XML%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="1-问题说明"><a href="#1-问题说明" class="headerlink" title="1. 问题说明"></a>1. 问题说明</h3><p>平时我们在项目文件的配置或者用xml进行数据的存储或传输时，会遇到不能用一些特殊符号的问题，比如我在之前学习c3p0的时候，编辑<code>c3p0-config.xml</code>中的<code>jdbcUrl</code>属性：<code>jdbc:mysql://localhost:3306/mydb?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true&amp;allowPublicKeyRetrieval=true</code></p><p>严格地讲，在 XML 中仅有字符 “&lt;”和”&amp;” 是非法的。省略号、引号和大于号是合法的。这时，xml有两种解决方案来处理这种问题。</p><p>①CDATA</p><p>②转义字符</p><h3 id="2-方法详解"><a href="#2-方法详解" class="headerlink" title="2. 方法详解"></a>2. 方法详解</h3><h4 id="1-CDATA"><a href="#1-CDATA" class="headerlink" title="1. CDATA"></a>1. CDATA</h4><p>CDATA 指的是不应由 XML 解析器进行解析的文本数据，在 XML 元素中，”&lt;” 和 “&amp;” 是非法的。”&lt;” 会产生错误，因为解析器会把该字符解释为新元素的开始。”&amp;” 也会产生错误，因为解析器会把该字符解释为字符实体的开始。某些文本，比如 JavaScript 代码，包含大量 “&lt;” 或 “&amp;” 字符。为了避免错误，可以将脚本代码定义为 CDATA。</p><ul><li>CDATA 部分中的所有内容都会被解析器忽略。</li><li>CDATA 部分由 “<![CDATA[" 开始，由 "]]>“ 结束。<code>&lt;property&gt;&lt;![CDATA[&quot;&amp;&amp;&amp;&amp;&amp;&amp;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;]]&gt;&lt;/property&gt;</code></li></ul><p>这样就会被解析器忽略<code>&amp;&amp;&amp;&amp;&amp;&amp;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，不会发生报错。但很明显，这种方法很麻烦。</p><h4 id="2-转义字符"><a href="#2-转义字符" class="headerlink" title="2. 转义字符"></a>2. 转义字符</h4><p>在 XML 中有 5 个预定义的实体引用：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211111003247.png" alt="image-20221111100330168"></p><p>虽然有些符号合法，但是把它们替换为实体引用不失为一个好的习惯。</p><p><a href="https://www.cnblogs.com/zlshtml/p/15209109.html">xml文件中的特殊符号（&amp;，&lt;）的使用方法 - Mrzxs999 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XML </tag>
            
            <tag> 踩坑 </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03解决JPA的N+1问题</title>
      <link href="/2022/11/11/03ORM/03%E8%A7%A3%E5%86%B3JPA%E7%9A%84N+1%E9%97%AE%E9%A2%98/"/>
      <url>/2022/11/11/03ORM/03%E8%A7%A3%E5%86%B3JPA%E7%9A%84N+1%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是N-1问题？"><a href="#什么是N-1问题？" class="headerlink" title="什么是N+1问题？"></a>什么是N+1问题？</h2><p>当使用<code>@ManyToMany、@ManyToOne、@OneToMany、@OneToOne，@Element</code>关联关系的时候，查询一的一方，结果<code>hibernate</code>会根据<code>@OneToMany</code>（等） 查询出多个关联表的数据</p><p>比如：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211110038265.png" alt="image-20221111003803164"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211110038117.png" alt="image-20221111003820990"></p><p>现在我们使用：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211110038182.png" alt="image-20221111003843117"></p><p>查询出来的数据是这样：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211110040293.png" alt="image-20221111004014188"></p><p>我们现在只需要 User 的对象，但Hibernate给了我们 accounts 列表的数据</p><p>假设account表对应的数据有 1000_000 条数据，难道也要查出来么？</p><p>给了我们 accounts 的数据还不提，最耗费性能的是：</p><blockquote><p>示例 sql 查询出来的row太少，换了个条件查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Page&lt;User&gt; userPage = userRepository.findAllByGender(<span class="string">&#x27;女&#x27;</span>, Pageable.ofSize(<span class="number">10</span>));</span><br></pre></td></tr></table></figure></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211110203105.gif" alt="动画"></p><p>如果是关联查询还好说，可这是多次查询。。。</p><h2 id="怎么解决N-1问题？"><a href="#怎么解决N-1问题？" class="headerlink" title="怎么解决N+1问题？"></a>怎么解决N+1问题？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NamedEntityGraph</span>：在类上，定义 + 指定属性</span><br><span class="line"><span class="meta">@EntityGraph</span>：在方法上，指定使用声明的位置</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211110055085.png" alt="image-20221111005525995"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NamedEntityGraph(name = &quot;User_Account&quot;, attributeNodes = &#123;@NamedAttributeNode(&quot;accounts&quot;)&#125;)</span></span><br></pre></td></tr></table></figure><blockquote><p>或者你也可以认为：</p><ul><li><code>@NamedEntityGraph</code> 是 治感冒的药（还有很多治别的病的药）</li><li><code>name = &quot;User_Account&quot;</code>：这是该药的名称（该功能的 ID）</li><li><code>attributeNodes = &#123;@NamedAttributeNode(&quot;accounts&quot;)&#125;</code>：这是该感冒药功效作用于身体的位置，比如：咽喉</li></ul></blockquote><p>现在我们需要给特定患者服药</p><p>这是我们的感冒患者：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211110100366.png" alt="image-20221111010039276"></p><p>给他服药：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211110104546.png" alt="image-20221111010401365"></p><p>可以发现：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211110206675.png" alt="image-20221111020643607"></p><p>代码被改成关联查询了，虽然还不是最优性能</p><h2 id="jackson序列化导致的N-1问题"><a href="#jackson序列化导致的N-1问题" class="headerlink" title="jackson序列化导致的N+1问题"></a>jackson序列化导致的N+1问题</h2><p>在 controller 层，我们返回给前端的数据通常为 json， 这也需要调用到 jackson 进行转换，所以还会出现N + 1 问题</p><p>需要解决</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-hibernate5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MappingJackson2HttpMessageConverter <span class="title function_">mappingJackson2HttpMessageConverter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> converter.getObjectMapper();</span><br><span class="line">        <span class="type">Hibernate5Module</span> <span class="variable">hibernate5Module</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hibernate5Module</span>();</span><br><span class="line">        mapper.registerModule(hibernate5Module);</span><br><span class="line">        mapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> converter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ORM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> JPA </tag>
            
            <tag> ORM </tag>
            
            <tag> 踩坑 </tag>
            
            <tag> 查询不到数据 </tag>
            
            <tag> 编码 </tag>
            
            <tag> 字符集编码 </tag>
            
            <tag> N+1问题 </tag>
            
            <tag> jackson序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02JPA自动建表有坑</title>
      <link href="/2022/11/11/03ORM/02JPA%E8%87%AA%E5%8A%A8%E5%BB%BA%E8%A1%A8%E6%9C%89%E5%9D%91/"/>
      <url>/2022/11/11/03ORM/02JPA%E8%87%AA%E5%8A%A8%E5%BB%BA%E8%A1%A8%E6%9C%89%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="JPA查询不到数据的坑"><a href="#JPA查询不到数据的坑" class="headerlink" title="JPA查询不到数据的坑"></a>JPA查询不到数据的坑</h1><h2 id="编码格式坑"><a href="#编码格式坑" class="headerlink" title="编码格式坑"></a>编码格式坑</h2><p>有时候<code>JPA</code>自动建表的字符集编码不对，导致中文条件明明放到<code>navicat</code>查询可以查到数据，在项目中却又无法查询</p><p>查看<code>DDL</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account` (</span><br><span class="line">  `ID` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `UID` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">  `MONEY` <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;金额&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`ID`),</span><br><span class="line">  KEY `FK_Reference_8` (`UID`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `FKtjvpeqb8ep4ymri3fi58hmaqa` <span class="keyword">FOREIGN</span> KEY (`UID`) <span class="keyword">REFERENCES</span> `<span class="keyword">user</span>` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3;</span><br></pre></td></tr></table></figure><p>发现是 <code>utf8mb3</code></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>修改<code>mysql</code>的 <code>my.ini</code>配置</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="attr">basedir</span>=D:\programs\env\mysql-<span class="number">8.0</span>.<span class="number">28</span>-winx64</span><br><span class="line"><span class="attr">datadir</span>=D:\programs\env\mysql-<span class="number">8.0</span>.<span class="number">28</span>-winx64\data</span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="attr">character-set-client-handshake</span> = <span class="literal">FALSE</span> </span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4 </span><br><span class="line"><span class="attr">collation-server</span>=utf8mb4_unicode_ci </span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">&#x27;SET NAMES utf8mb4&#x27;</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="attr">default-time_zone</span>=<span class="string">&#x27;+8:00&#x27;</span></span><br><span class="line"><span class="attr">sql_mode</span>=<span class="string">&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br></pre></td></tr></table></figure><p>重启<code>mysql</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">WHERE</span> Variable_name <span class="keyword">LIKE</span> <span class="string">&#x27;character_set_%&#x27;</span> <span class="keyword">OR</span> Variable_name <span class="keyword">LIKE</span> <span class="string">&#x27;collation%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211110008795.png" alt="image-20221111000859640"></p><ol start="2"><li>将已经建好的数据库、表和列转换成<code>utf8mb4,utf8mb4_unicode_ci</code></li></ol><p>更改数据库编码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE database_name <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>更改表编码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><p>更改列编码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name CHANGE column_name column_name <span class="type">VARCHAR</span>( <span class="number">36</span> ) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>在<code>JPA</code>建表时设置表的编码和排序规则</p></li><li><p>重写<code>MySQL8InnoDBDialect#getTableTypeString()</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySQL8InnoDBDialectUtf8mb4</span> <span class="keyword">extends</span> <span class="title class_">MySQL8InnoDBDialect</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTableTypeString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_unicode_ci&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>配置<code>hibernate.dialect</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">hibernate:</span></span><br><span class="line">        <span class="attr">dialect:</span> <span class="string">com.你的包名.MySQL8InnoDBDialectUtf8mb4</span></span><br></pre></td></tr></table></figure><ol start="6"><li>设置连接初始化<code>SQL</code></li></ol><blockquote><p>配置<code>Druid</code>连接池,如果为其他连接池,设置对应的<code>connectionInitSqls</code>即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.connection-init-sqls&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; connectionInitSqls;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setConnectionInitSqls(connectionInitSqls);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">connection-init-sqls:</span> [<span class="string">&quot;SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci&quot;</span>]</span><br></pre></td></tr></table></figure><blockquote><p><code>mysql.url</code>还是需要设置<code>characterEncoding=utf8</code>不然会出现中文乱码</p></blockquote><h2 id="测试用例需要事务注解的坑"><a href="#测试用例需要事务注解的坑" class="headerlink" title="测试用例需要事务注解的坑"></a>测试用例需要事务注解的坑</h2><p>如果你的测试用例没有加上<code>@Transactional</code>注解，则会导致你搜索不到数据的问题</p><blockquote><p>在执行<code>springDataJpa</code>中使用<code>sql</code>完成更新，删除操作时，需要手动添加事务的支持 必须的；因为默认会执行结束后，回滚事务。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userRepository.findUserByTelephone(<span class="string">&quot;21-9022-9458&quot;</span>);</span><br><span class="line">System.err.println(JSONUtil.toJsonStr(user));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">List&lt;User&gt; userList = userRepository.findAllByGender(<span class="string">&#x27;F&#x27;</span>);</span><br><span class="line">System.err.println(JSONUtil.toJsonStr(userList));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">List&lt;User&gt; userList = userRepository.findAll();</span><br><span class="line">System.err.println(JSONUtil.toJsonStr(userList));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上去就能搜索到了</p>]]></content>
      
      
      <categories>
          
          <category> ORM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> JPA </tag>
            
            <tag> ORM </tag>
            
            <tag> 踩坑 </tag>
            
            <tag> 查询不到数据 </tag>
            
            <tag> 编码 </tag>
            
            <tag> 字符集编码 </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01JSON方面的工具</title>
      <link href="/2022/11/08/05tools%E5%B7%A5%E5%85%B7%E7%B1%BB/01JSON%E6%96%B9%E9%9D%A2%E7%9A%84%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/11/08/05tools%E5%B7%A5%E5%85%B7%E7%B1%BB/01JSON%E6%96%B9%E9%9D%A2%E7%9A%84%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="用于JSON-时间-方面的序列化和反序列化"><a href="#用于JSON-时间-方面的序列化和反序列化" class="headerlink" title="用于JSON 时间 方面的序列化和反序列化"></a>用于JSON 时间 方面的序列化和反序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JSON工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JSONUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STANDARD_PATTERN</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATE_PATTERN</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TIME_PATTERN</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOG</span> <span class="operator">=</span> LoggerFactory.getLogger(JSONUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置java.util.Date时间类的序列化以及反序列化的格式</span></span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(STANDARD_PATTERN));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化JavaTimeModule</span></span><br><span class="line">        <span class="type">JavaTimeModule</span> <span class="variable">javaTimeModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理LocalDateTime</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dateTimeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(STANDARD_PATTERN);</span><br><span class="line">        javaTimeModule.addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(dateTimeFormatter));</span><br><span class="line">        javaTimeModule.addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(dateTimeFormatter));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理LocalDate</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">dateFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(DATE_PATTERN);</span><br><span class="line">        javaTimeModule.addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(dateFormatter));</span><br><span class="line">        javaTimeModule.addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(dateFormatter));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理LocalTime</span></span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">timeFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(TIME_PATTERN);</span><br><span class="line">        javaTimeModule.addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(timeFormatter));</span><br><span class="line">        javaTimeModule.addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(timeFormatter));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册时间模块, 支持支持jsr310, 即新的时间类(java.time包下的时间类)</span></span><br><span class="line">        objectMapper.registerModule(javaTimeModule);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包含所有字段</span></span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在序列化一个空对象时时不抛出异常</span></span><br><span class="line">        objectMapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 忽略反序列化时在json字符串中存在, 但在java对象中不存在的属性</span></span><br><span class="line">        objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">JSONUtils</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将Java对象序列化成一个JSON对象或者JSON数组.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object Java对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个JSON格式的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">objToJson</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (object != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> objectMapper.writeValueAsString(object);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">&quot;parse &#123;&#125; to json error!&quot;</span>, object, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将JSON对象反序列化成一个Java原生对象, 不支持泛型.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json JSON对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls  Java对象原始类型的class对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  Java对象的原始类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个T类型的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">jsonToObj</span><span class="params">(String json, Class&lt;T&gt; cls)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (json != <span class="literal">null</span> &amp;&amp; json.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> objectMapper.readValue(json, cls);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">&quot;parse &#123;&#125; to object error!&quot;</span>, json, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将JSON反序列化成一个Java对象, 支持泛型.</span></span><br><span class="line"><span class="comment">     * TypeReference是一个抽象类, 用来构造类型</span></span><br><span class="line"><span class="comment">     * 调用方式: 传入一个TypeReference的匿名实现类即可</span></span><br><span class="line"><span class="comment">     * User user = jsonToObj(json, new TypeReference&lt;User&gt;()&#123;&#125;)</span></span><br><span class="line"><span class="comment">     * List&lt;User&gt; users = jsonToObj(json, new TypeReference&lt;List&lt;User&gt;&gt;()&#123;&#125;)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json          JSON对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> typeReference 类型引用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;           返回值类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个Java对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">jsonToObj</span><span class="params">(String json, TypeReference&lt;?&gt; typeReference)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (json != <span class="literal">null</span> &amp;&amp; json.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> (T) objectMapper.readValue(json, typeReference);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.error(<span class="string">&quot;parse &#123;&#125; to object error!&quot;</span>, json, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将一个JSON数组反序列化成一个List对象.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json JSON数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls  Java对象原始类型的class对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  Java对象的原始类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回一个List列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">jsonToList</span><span class="params">(String json, Class&lt;T&gt; cls)</span> &#123;</span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (json != <span class="literal">null</span> &amp;&amp; json.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">JavaType</span> <span class="variable">javaType</span> <span class="operator">=</span> objectMapper.getTypeFactory().constructCollectionType(List.class, cls);</span><br><span class="line">                list = objectMapper.readValue(json, javaType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">&quot;parse &#123;&#125; to object error!&quot;</span>, json, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jackson </tag>
            
            <tag> JSON </tag>
            
            <tag> 序列化 </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> 时间转化 </tag>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-Springboot自定义配置类</title>
      <link href="/2022/11/07/04springboot/01Springboot%E8%87%AA%E5%AE%9A%E4%B9%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%B1%BB/"/>
      <url>/2022/11/07/04springboot/01Springboot%E8%87%AA%E5%AE%9A%E4%B9%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.yuque.com/attachments/yuque/0/2022/mmap/22744322/1665395912889-b60fb6ee-288d-4269-8fd6-6f8a92a6a5f2.mmap">Springboot自定义配置类.mmap</a></p><p><a href="https://www.yuque.com/attachments/yuque/0/2022/docx/22744322/1665396003640-0ef35eda-8083-4864-84ef-b532c184abc7.docx">Springboot自定义配置类.docx</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于笔记是由MindManager转过来的，所以可能会有点乱，可以直接看上面的 mmap 脑图</p><h1 id="Springboot自定义配置类"><a href="#Springboot自定义配置类" class="headerlink" title="Springboot自定义配置类"></a>Springboot自定义配置类</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>本文参考官方文档: </p><p><a href="https://docs.spring.io/spring-boot/docs/2.6.x/reference/html/configuration-metadata.html">https://docs.spring.io/spring-boot/docs/2.6.x/reference/html/configuration-metadata.html</a></p><h1 id="2-7-x以前的版本"><a href="#2-7-x以前的版本" class="headerlink" title="2.7.x以前的版本"></a>2.7.x以前的版本</h1><h2 id="引出相关知识"><a href="#引出相关知识" class="headerlink" title="引出相关知识"></a>引出相关知识</h2><p>我们可以通过反射子类得到父类的接口</p><p>但我们无法通过任何机制通过父类获得子类</p><h3 id="什么是SPI？"><a href="#什么是SPI？" class="headerlink" title="什么是SPI？"></a>什么是<code>SPI</code>？</h3><ul><li><p>简单点：根据接口找到实现类</p></li><li><p>全名叫<code>Service Provider Interface</code></p><p>是JDK内置的一种服务提供发现机制，可以用来启用框架扩展和替换组件，主要是被框架的开发人员使用，比如java.sql.Driver接口，其他不同厂商可以针对同一接口做出不同的实现，MySQL和PostgreSQL都有不同的实现提供给用户，而<strong>Java的SPI机制可以为某个接口寻找服务实现</strong>。<strong>Java中SPI机制主要思想是将装配的控制权移到程序之外</strong>，在模块化设计中这个机制尤其重要，其核心思想就是解耦。</p></li></ul><h3 id="SPI怎么玩"><a href="#SPI怎么玩" class="headerlink" title="SPI怎么玩?"></a><code>SPI</code>怎么玩?</h3><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211050150742.png" alt="image-20221105015035572"></p><h3 id="总结下SPI做了什么？"><a href="#总结下SPI做了什么？" class="headerlink" title="总结下SPI做了什么？"></a>总结下SPI做了什么？</h3><ol><li>功能: 根据接口找实现类</li><li>有接口和实现类的 key value 键值对</li><li>根据条件选实现类</li></ol><p>那么 springboot 自动配置类呢?</p><ul><li><p>肯定有个接口, 实现类</p></li><li><p>肯定有记录机制, 记录着接口和实现类</p><ul><li><p><code>META-INF/spring.factories</code></p></li><li><p>&#96;&#96;&#96;properties<br>org.springframework.boot.autoconfigure.EnableAutoConfiguration&#x3D;<br>com.mycorp.libx.autoconfigure.LibXAutoConfiguration,<br>com.mycorp.libx.autoconfigure.LibXWebAutoConfiguration</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 可以从众多实现类中挑选出符合要求的实现类</span><br><span class="line">  </span><br><span class="line">  - `Conditional`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; 记住这并不意味着springboot使用的SPI机制加载类</span><br><span class="line"></span><br><span class="line">## 回到springboot自动配置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![](https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070029822.png)</span><br><span class="line"></span><br><span class="line">&gt; 注意：**自动配置类只能以这种方式加载**。确保他们被定义在特定的包空间，并且**确保他们永远不是组件扫描的目标**。除此之外，**自动配置类不需要开启主键扫描以找到额外的组件。应该改用特定的`@Import`注解。** </span><br><span class="line"></span><br><span class="line">   - 如果你提供特定的web配置，你的类可能需要在`WebMvcAutoConfiguration`之后加载。 </span><br><span class="line"></span><br><span class="line">   - 如果你的配置需要以特定的顺序加载，你可以使用`@AutoConfigureAfter` or `@AutoConfigureBefore`注解。  </span><br><span class="line"></span><br><span class="line">   - &gt; **记住这种方式保证的顺序不能被SpringBoot的组件扫描注解扫描，而是使用`spring.factories`或者`@import`注解导入 否则你会发现顺序不生效**</span><br><span class="line"></span><br><span class="line">   - 就像标准的`@Configuration`类一样，自动配置类被加载的循序只影响他们Bean被定义的顺序。随后创建这些 bean 的顺序不受影响，由每个 bean 的依赖关系和任何 `@DependsOn`  关系决定。  </span><br><span class="line"></span><br><span class="line">   - 如果你想要序排序特定的彼此不应该有任何直接了解的的自动配置。你也可以使用 `@AutoConfigureOrder`注解。该注解就像`@Order`注解一样有相同的语义，为自动配置类提供特定的顺序。 </span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">     ### 条件注解</span><br><span class="line"></span><br><span class="line">     你总是想要去包含一个或多个`@Conditional`注解在你的自动配置类上。`@ConditionalOnMissingBean`注解是一个常见例子，被用于在他们不满足于默认配置时，开发人员重写自动配置&lt;br /&gt;spring boot 包含多个`@Conditional`注解，你可以在你的代码中，通过`@Configuration`类或者个人的`@Bean` 方法重用这些注解。这些注解包括:</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">     | Class Conditions               | 类条件         |</span><br><span class="line">     | ------------------------------ | -------------- |</span><br><span class="line">     | Bean Conditions                | Bean条件       |</span><br><span class="line">     | Property Conditions            | 属性条件       |</span><br><span class="line">     | Resource Conditions            | 资源条件       |</span><br><span class="line">     | Web Application Conditions     | web应用条件    |</span><br><span class="line">     | SpEL Expression ConditionsSpEL | SpEL表达式条件 |</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">     - #### Class Conditions </span><br><span class="line"></span><br><span class="line">        -  使用场景 </span><br><span class="line">           </span><br><span class="line">           - 一般用来表示你是否导入了某个模块</span><br><span class="line">        - `@ConditionalOnClass`  and `@ConditionalOnMissingClass`注解类根据指定类的存在或者不存在而包含。 &lt;br /&gt;由于注解元由ASM解析的事实，你可以使用value属性去引用真实的类，即使该类可能不存在于application的classpath上。&lt;br /&gt;如果你比较喜欢使用字符串去指定类名，你也可以使用 name 属性。 </span><br><span class="line"></span><br><span class="line">           ![image.png](https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042224947.png)</span><br><span class="line"></span><br><span class="line">           - `@ConditionalOnClass(ConnectionFactory.class)` 和 `@ConditionalOnClass(name)`</span><br><span class="line">        -  `@ConditionalOnClass`的这种机制不适用于`@Bean`方法 </span><br><span class="line">           </span><br><span class="line">           -  为了处理这种情况，可以使用单独的`Configuration` 类来隔离条件，间接的使函数可以使用`@ConditionalOnClass`，如下例所示： </span><br><span class="line">```java</span><br><span class="line">@Configuration(proxyBeanMethods = false)</span><br><span class="line">// Some conditions ...</span><br><span class="line">public class MyAutoConfiguration &#123;</span><br><span class="line">    // Auto-configured beans ...</span><br><span class="line">    @Configuration(proxyBeanMethods = false)</span><br><span class="line">    @ConditionalOnClass(SomeService.class)</span><br><span class="line">    public static class SomeServiceConfiguration &#123;</span><br><span class="line">        @Bean</span><br><span class="line">        @ConditionalOnMissingBean</span><br><span class="line">        public SomeService someService() &#123;</span><br><span class="line">            return new SomeService();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>注意：在函数上使用<code>@ConditionalOnBean</code> and <code>@ConditionalOnMissingBean</code>注解不会阻止创建配置类。但是 在类上使用<code>Conditional</code>和标记每个包含使用注解的<code>@Bean</code>函数的唯一不同之处在于, 如果<code>Conditional</code>不匹配，会防止配置类注册为<code>bean</code>。  </p></blockquote><ul><li><h3 id="Bean-Conditions"><a href="#Bean-Conditions" class="headerlink" title="Bean Conditions"></a>Bean Conditions</h3><ul><li>使用场景 <ul><li><p>主要用来判断Bean是否已经存在 </p><p> <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042225183.png" alt="image.png"></p></li></ul></li><li><code>@ConditionalOnBean</code> 和 <code>@ConditionalOnMissingBean</code>注解让bean根据指定的bean的存在与否而包含。你可以使用 value 属性借助类型指定beans 或者 使用name安装名称去指定beans。search属性可以让你限制搜索Bean时应考虑的ApplicationContext层次结构。  </li><li>当注解在@Bean标注的方法上时，目标类型默认返回方法的类型，</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods  = false)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> SomeService <span class="title function_">someService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SomeService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><pre><code>  - 在上面的例子中，如果在ApplicationContext中没有包含SomeService类型的Bean时，SomeService将被创建。  -  Tip：你需要非常小心的添加Bean定义的顺序，因为这些条件是根据到目前为止已经处理过的内容进行评估的。出于这个原因，我们建议在自动配置类上只使用@ConditionalOnBean和@ConditionalOnMissingBean注解（因为这些注解可以保证在任何用户定义的Bean定义被添加后加载）。   -  如果你的Bean的具体类实现了一个接口，那么Bean方法的返回类型应该是具体类而不是接口。 </code></pre><ul><li><h3 id="Property-Conditions"><a href="#Property-Conditions" class="headerlink" title="Property Conditions"></a>Property Conditions</h3><ul><li><code>@ConditionalOnProperty</code>注解让配置基于Spring环境属性而被包含。使用前缀和名称属性来指定应该被检查的属性。默认情况下，任何存在且不等于false的属性都被匹配。你也可以通过使用havingValue和matchIfMissing属性创建更高级的检查。 </li><li>prefix+name or prefix+value属性 <ul><li>用于查到，定位application.yml中的key</li></ul></li><li>havingValue属性 <ul><li>用来比较<code>application,yml</code>中的value值</li></ul></li><li>matchIfMissing属性 <ul><li>用来表示如果<code>application.yml</code>中没有写配置的情况下，是否加载我们的自动配置类 <ul><li><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042224924.png" alt="image.png"></li><li>这种情况是否自动加载该模块？</li><li>true：加载</li><li>false：不加载</li></ul></li></ul></li></ul></li><li><h3 id="Resource-Conditions"><a href="#Resource-Conditions" class="headerlink" title="Resource Conditions"></a>Resource Conditions</h3><ul><li><code>@ConditionalOnResource</code>注解让配置仅在特定资源存在时才被包含。资源可以通过使用通常的Spring约定来指定，如下面的例子所示：<code>file:/home/user/test.dat</code>。</li></ul></li><li><h3 id="Web-Application-Conditions"><a href="#Web-Application-Conditions" class="headerlink" title="Web Application Conditions"></a>Web Application Conditions</h3><ul><li><code>@ConditionalOnWebApplication</code>和<code>@ConditionalOnNotWebApplication</code>注解允许根据应用是否是 “Web应用 “来包含配置。基于Servlet的Web应用是指任何使用Spring <code>WebApplicationContext</code>、定义会话范围或具有可配置<code>WebEnvironment</code>的应用。反应式Web应用是指任何使用<code>ReactiveWebApplicationContext</code>或具有<code>ConfigurableReactiveWebEnvironment</code>的应用。</li><li><code>@ConditionalOnWarDeployment</code>注解允许根据应用程序是否是被部署到容器中的传统WAR应用程序而包含配置。这个条件将不符合使用嵌入式服务器运行的应用程序。</li></ul></li><li><h3 id="SpEL-Expression-Conditions"><a href="#SpEL-Expression-Conditions" class="headerlink" title="SpEL Expression Conditions"></a>SpEL Expression Conditions</h3><ul><li><code>@ConditionalOnExpression</code>注解允许根据SpEL表达式的结果来包含配置。</li><li>在表达式中引用Bean将导致该Bean在上下文刷新处理中很早就被初始化。因此，该Bean将没有资格进行后处理（比如配置属性绑定），其状态可能是不完整的。</li></ul></li><li><p>模块命名 </p><ul><li>你应该确保为你的starter提供一个合适的命名空间。不要以“spring-boot”作为你模块开头的名字，即便你使用不同的Maven groupId。在未来，我们可能为您的项目提供官方的支持</li><li>根据经验，你需要在starter模块之后命名一个组合模块。例如，假设你为“acme”创建一个starter，你命名自动配置模块 “acme-spring-boot”，和starter模块为 “acme-spring-boot-starter”，如果你只有一个结合了两者的模块，命名它为“acme-spring-boot-starter”</li></ul></li><li><p>配置Key </p><ul><li>创建Properties</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(value  = &quot;example&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleProperties</span> &#123;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>使用Annotation Processor生成你的元数据 </li><li>使用注解处理器生成您自己的元数据<br />你可以很简单的从<code>@ConfigurationProperties</code>注释的项目中使用“spring-boot-configuration-processor” jar包生成你的配置元数据文件。该jar包含一个你的项目编译时调用的java注解处理器 <ul><li>配置注解处理器 <ul><li>添加依赖</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>如果你在你的项目中使用AspectJ，你需要确保注解处理器只运行一次。有几种方法可以做到这一点。在Maven中，你可以明确配置maven-apt-plugin，只在那里添加对注释处理器的依赖。你也可以让AspectJ插件运行所有处理，并在<code>maven-compiler-plugin</code>配置中禁用注释处理，如下所示 </p></li><li><p>如果你在项目中使用Lombok，你需要确保其注释处理器在<code>spring-boot-configuration-processor</code>之前运行。要用Maven做到这一点，你可以使用Maven编译器插件的<code>annotationProcessors</code>属性按正确顺序列出注释处理器。如果不使用该属性，注释处理器由classpath上的可用依赖项拾取，请确保lombok依赖项定义在<code>spring-boot-configuration-processor</code>依赖项之前。 </p></li><li><p>自动元数据生成 </p><ul><li><code>@ConfigurationProperties</code> 注释的类和方法。如果该类也被<code>@ConstructorBinding</code>注解，那么预计会有一个构造函数，并且每个构造函数参数会创建一个属性。否则，属性是通过标准的getter和setter的存在来发现的，并对集合和map类型进行特殊处理（即使只有一个getter存在，也会被发现）。注解处理器也支持使用<code>@Data、@Value、@Getter和@Setter</code> lombok注释。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my.server&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServerProperties</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Name of the server.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IP address to listen to.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Port to listener to.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9797</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.ip;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIp</span><span class="params">(String ip)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ip = ip;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPort</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.port;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPort</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// fold:off</span></span><br></pre></td></tr></table></figure><ul><li>注释处理器应用一些启发式方法来从源模型中提取默认值。默认值必须以静态方式提供。特别是，不要引用另一个类中定义的常量。另外，注释处理器不能自动检测 <code>Enums</code> 和 <code>Collectionss</code> 的默认值。对于无法检测到默认值的情况，应提供手动元数据。考虑以下示例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my.messaging&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMessagingProperties</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; addresses = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="type">ContainerType</span> <span class="variable">containerType</span> <span class="operator">=</span> ContainerType.SIMPLE;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getAddresses</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.addresses;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddresses</span><span class="params">(List&lt;String&gt; addresses)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.addresses = addresses;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ContainerType <span class="title function_">getContainerType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.containerType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContainerType</span><span class="params">(ContainerType containerType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.containerType = containerType;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ContainerType</span> &#123;</span><br><span class="line">        SIMPLE, DIRECT</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>为了记录上述类中属性的默认值，您可以将以下内容添加到模块的手动元数据中：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my.messaging.addresses&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;a&quot;</span><span class="punctuation">,</span> <span class="string">&quot;b&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my.messaging.container-type&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;defaultValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;simple&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure><ul><li>嵌套属性 <ul><li>注释处理器自动将内部类视为嵌套属性。我们可以为它创建一个子命名空间，而不是在命名空间的根目录记录 ip 和端口。考虑更新的示例：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my.server&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServerProperties</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Host <span class="title function_">getHost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.host;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHost</span><span class="params">(Host host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Host</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> String ip;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getIp</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.ip;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIp</span><span class="params">(String ip)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.ip = ip;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPort</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.port;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPort</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.port = port;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>前面的例子为<code>my.server.name</code>、<code>my.server.host.ip</code>和<code>my.server.host.port</code>属性产生元数据信息。你可以在一个字段上使用<code>@NestedConfigurationProperty</code>注解来表示一个普通的（非内部）类应该被当作是嵌套的。</p></li><li><p>这对集合和map没有影响，因为这些类型被自动识别，并且为它们中的每一个生成一个元数据属性。</p><ul><li>添加额外的元数据 <ul><li>Spring Boot的配置文件处理是相当灵活的，通常情况下，可能存在未与<code>@ConfigurationProperties</code> Bean绑定的属性。你也可能需要调整现有键的一些属性。为了支持这种情况并让你提供自定义的 “提示”，注解处理器自动将<code>META-INF/additional-spring-configuration-metadata.json</code>中的项目合并到主元数据文件中。</li><li>如果你引用了一个已经被自动检测到的属性，那么描述、默认值和废弃信息将被覆盖，如果指定的话。如果手动属性声明在当前模块中没有被识别，它将被作为一个新的属性添加。</li><li><code>additional-spring-configuration-metadata.json</code>文件的格式与常规的<code>spring-configuration-metadata.json</code>完全相同。附加属性文件是可选的。如果你没有任何附加属性，请不要添加该文件。</li></ul></li></ul></li><li><p>“autoconfigure”模块 </p><ul><li>autoconfigure模块包含了开始使用该库所需的一切。它还可能包含配置键的定义（如<code>@ConfigurationProperties</code>）和任何可用于进一步定制组件初始化方式的回调接口。 <ul><li>你应该把对库的依赖标记为可选的，这样你就可以更容易地把自动配置模块纳入你的项目中。如果你这样做，该库就不会被提供，而且在默认情况下，Spring Boot会退缩。</li></ul></li><li>Spring Boot使用注释处理器来收集元数据文件（<code>META-INF/spring-autoconfigure-metadata.properties</code>）中的自动配置条件。如果该文件存在，它被用来急切地过滤不匹配的自动配置，这将改善启动时间。建议在包含自动配置的模块中添加以下依赖关系。</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果你在应用程序中直接定义了自动配置，请确保配置spring-boot-maven-plugin，以防止repackage目标将依赖关系加入fat jar中。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="相关包的作用"><a href="#相关包的作用" class="headerlink" title="相关包的作用"></a>相关包的作用</h2><h3 id="spring-boot-autoconfigure包"><a href="#spring-boot-autoconfigure包" class="headerlink" title="spring-boot-autoconfigure包"></a>spring-boot-autoconfigure包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过灵活的Auto-configuration注解使SpringBoot中的功能实现模块化和可被替换扩展。</li><li>spring-boot-autoconfigure思路类似SPI(Service Provider Interface)，都是不同的实现类实现了定义的接口，加载时候去查找classpath下的实现类，不同在于前者使用autoconfigure实现后者使用的是ServiceLoader。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070020091.png"></p><h3 id="spring-boot-configuration-processor包"><a href="#spring-boot-configuration-processor包" class="headerlink" title="spring-boot-configuration-processor包"></a>spring-boot-configuration-processor包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>spring-boot-configuration-processor的作用是生成配置的元数据信息，即META-INF目录下的spring-configuration-metadata.json文件，从而告诉spring这个jar包中有哪些自定义的配置</li><li>其中spring-configuration-metadata.json文件是在编译的时候自动生成的</li></ul><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070019590.png"></p><h3 id="spring-boot-autoconfigure-processor包"><a href="#spring-boot-autoconfigure-processor包" class="headerlink" title="spring-boot-autoconfigure-processor包"></a>spring-boot-autoconfigure-processor包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070026766.png"></p><ul><li>这个文件需要手动创建</li><li>在启动时会读取这个文件，先根据条件情况加载，这样不会出现任何配置类都加载一边的情况，加快spring启动的速度</li><li>spring-boot会通过spring-boot的SPI机制，获得所有自动装配配置主类信息</li></ul><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211051956312.png" alt="image-20221105195559287"></p><h2 id="怎么玩"><a href="#怎么玩" class="headerlink" title="怎么玩?"></a>怎么玩?</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ul><li><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042225778.png" alt="image.png"></li><li>上面这种结构是我故意的，其实最好的结构是直接使用“example-spring-boot-starter”作为项目，而非内部的子模块”example-spring-boot-autoconfiguation”</li><li>我这样的做的目的是看到过一个开源项目，使用的就是Spring的AutoConfiguration这种形式，组合整个项目</li></ul><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ul><li>基础依赖包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>还可以添加lombok依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>  -  不过这个依赖需要首先被项目加载，然后才是annotation processor</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>可以spring-boot-autoconfigure-processor包，在启动是根据条件判断是否加载部分配置类 <ul><li>加快springboot启动速度</li></ul></li><li>完整依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>总共有四个必须的角色 <ul><li>properties对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;com.zhazha.example&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">enable</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8777</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Host</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8080</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>自动配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.service.ExampleTools;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Configuration 这个注解最好别加，加了可能被 spring 注解扫描器扫描到</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = ExampleProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(value = SpringApplication.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;com.zhazha.example&quot;, name = &quot;enable&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> ExampleTools <span class="title function_">exampleTools</span><span class="params">(ExampleProperties properties)</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;加载 Example&quot;</span>);</span><br><span class="line">        <span class="type">ExampleTools</span> <span class="variable">exampleTools</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExampleTools</span>();</span><br><span class="line">        exampleTools.setUsername(properties.getUsername());</span><br><span class="line">        exampleTools.setPassword(properties.getPassword());</span><br><span class="line">        exampleTools.setHost(properties.getHost());</span><br><span class="line">        <span class="keyword">return</span> exampleTools;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>  - 注意：@Configuration 这个注解最好别加，加了可能被 spring 注解扫描器扫描到 </code></pre><ul><li>需要自动配置，在外部项目使用的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.autoconfiguration.ExampleProperties;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleTools</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> ExampleProperties.Host host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户名为：&quot;</span> + username + <span class="string">&quot;&gt;&gt;&gt;&quot;</span> + <span class="string">&quot;密码为：&quot;</span> + password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">host</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;host: &quot;</span> + host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>spring.factories</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.zhazha.autoconfiguration.ExampleAutoConfiguration</span><br></pre></td></tr></table></figure><ul><li>创建spring-autoconfigure-metadata.properties（可选）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.zhazha.autoconfiguration.ExampleAutoConfiguration=</span><br><span class="line">com.zhazha.autoconfiguration.ExampleAutoConfiguration.ConditionalOnClass=org.springframework.boot.SpringApplication</span><br></pre></td></tr></table></figure><ul><li>maven安装自动配置项目到maven仓库 <ul><li><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042225550.png" alt="image.png"></li><li>也可以使用mvn clean install -Dmaven.test.skip&#x3D;true </li><li>install之后会发现 <ul><li><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042224215.png" alt="image.png"></li></ul></li><li>多创建了一个文件，该文件就是spring-boot-configuration-processor这个包自动创建的 </li><li>主要功能：application,yml的提示</li></ul></li></ul><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ul><li>使用方式就非常简单了 </li><li><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042225731.png" alt="image.png"></li><li>application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">com:</span></span><br><span class="line">  <span class="attr">zhazha:</span></span><br><span class="line">    <span class="attr">example:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">zhazha</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">host:</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8088</span></span><br></pre></td></tr></table></figure><ul><li>启动类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhazha.service.ExampleTools;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">    <span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            SpringApplication.run(Application.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Resource</span></span><br><span class="line">        <span class="keyword">private</span> ExampleTools exampleTools;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> exampleTools.hello();</span><br><span class="line">            <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> exampleTools.host();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;example: &quot;</span> + <span class="string">&quot;\t hello: &quot;</span> + hello + <span class="string">&quot; \t host: &quot;</span> + host + <span class="string">&quot;\t random: &quot;</span> + <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><ul><li>项目根据Spring AutoConfiguration形式进行组合 <ul><li>项目结构 <ul><li><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211042226908.png" alt="image.png"></li><li>example-spring-boot <ul><li>这是主项目</li></ul></li><li>example-spring-boot-autoconfiguation <ul><li>这个项目带着自动配置功能</li><li>该项目可以自己启动，因为有启动类，也可以在example-spring-boot项目中启动，然后使用</li></ul></li></ul></li><li>example-spring-boot-autoconfiguation自动配置项目 <ul><li>依赖</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>properties类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;com.zhazha.example&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean enable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>加载类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration.<span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.autoconfiguration.ModuleApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ClassPathBeanDefinitionScanner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportBeanDefinitionRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleModuleLoader</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(registry);</span><br><span class="line">        <span class="type">int</span> <span class="variable">scan</span> <span class="operator">=</span> scanner.scan(ModuleApplication.class.getPackageName());</span><br><span class="line">        System.err.println(<span class="string">&quot;example-autoconfiguration 模块加载了 &quot;</span> + scan + <span class="string">&quot;个类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>核心代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(registry);</span><br><span class="line"><span class="type">int</span> <span class="variable">scan</span> <span class="operator">=</span> scanner.scan(ModuleApplication.class.getPackageName());</span><br><span class="line">System.err.println(<span class="string">&quot;example-autoconfiguration 模块加载了 &quot;</span> + scan + <span class="string">&quot;个类&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p>就是不知道这种方式加载的类是否存在问题 </p></li><li><p>是否还有更优解 </p></li><li><p>自动配置类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.autoconfiguration.<span class="keyword">module</span>.ExampleModuleLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = ExampleProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;com.zhazha.example&quot;, name = &quot;enable&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="meta">@Import(ExampleModuleLoader.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleAutoConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建META-INF文件 <ul><li>spring.factories</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.zhazha.autoconfiguration.config.ExampleAutoConfiguration</span><br></pre></td></tr></table></figure><ul><li>spring-autoconfigure-metadata.properties</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.zhazha.autoconfiguration.config.ExampleAutoConfiguration=</span><br><span class="line">com.zhazha.autoconfiguration.config.ExampleAutoConfiguration.ConditionalOnClass=org.springframework.boot.SpringApplication</span><br></pre></td></tr></table></figure><ul><li>service</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModuleService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">module</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;zhazha ModuleService&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.autoconfiguration.service.ModuleService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Module01Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ModuleService moduleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;module01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">module01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;module-1 \t &quot;</span> + moduleService.<span class="keyword">module</span>() + <span class="string">&quot;\t&quot;</span> + <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>启动类（可选）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModuleApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    SpringApplication.run(ModuleApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>example-spring-boot <ul><li>依赖</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha.starter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>example-spring-boot-autoconfiguation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line">com:</span><br><span class="line">  zhazha:</span><br><span class="line">    example:</span><br><span class="line">      enable: true</span><br></pre></td></tr></table></figure><ul><li><p>我们的自动配置项目在这里被启动</p></li><li><p>启动类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            SpringApplication.run(ExampleApplication.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.example.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.autoconfiguration.service.ModuleService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> ModuleService moduleService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping(&quot;index&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index Controller\t&quot;</span> + moduleService.<span class="keyword">module</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义一个Jasync的spring-boot-starter <ul><li>背景 <ul><li>jasync如果按照官方自动配置，会报错</li></ul></li><li>步骤 <ul><li>依赖</li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha.jasync<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasync-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-r2dbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jasync-sql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasync-r2dbc-mysql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><ul><li>需要添加，防止maven报错</li><li>主要原因是：子模块的父项目不是原本的父项目，而是其他父项目</li><li>在这个例子中，我们子项目的父项目是spring-boot-parent，所以需要添加</li></ul></li><li>true <ul><li>这个也是需要添加的 </li><li>maven的scope的编译模式会传递依赖，所以需要使用这项功能阻止依赖被传递到外部项目中（provider等模式不传递依赖） </li><li>依赖</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-r2dbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jasync-sql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jasync-r2dbc-mysql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>而上面的两个包之所以不需要添加optional是因为需要有这两个包，外部需要有这两个包 </p><ul><li>properties类</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix  = &quot;com.zhazha.jasync&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JasyncProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">enabled</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li><p>决定了配置最终是否在主项目中使用</p><ul><li>自动配置类</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.jasync.r2dbc.mysql.JasyncConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> com.github.jasync.sql.db.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.github.jasync.sql.db.mysql.pool.MySQLConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> io.r2dbc.pool.ConnectionPool;</span><br><span class="line"><span class="keyword">import</span> io.r2dbc.pool.ConnectionPoolConfiguration;</span><br><span class="line"><span class="keyword">import</span> io.r2dbc.spi.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> io.r2dbc.spi.ConnectionFactoryOptions;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureOrder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.r2dbc.R2dbcProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.PropertyMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.r2dbc.connection.R2dbcTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.ReactiveTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@AutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = JasyncAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ConnectionFactory.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;com.zhazha.jasync&quot;, name = &quot;enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(value = Ordered.HIGHEST_PRECEDENCE + 12)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JasyncAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    ConnectionPool <span class="title function_">connectionFactory</span><span class="params">(R2dbcProperties properties)</span> &#123;</span><br><span class="line">        <span class="type">JasyncConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> createConnectionFactory(properties);</span><br><span class="line">        R2dbcProperties.<span class="type">Pool</span> <span class="variable">pool</span> <span class="operator">=</span> properties.getPool();</span><br><span class="line">        <span class="type">PropertyMapper</span> <span class="variable">map</span> <span class="operator">=</span> PropertyMapper.get().alwaysApplyingWhenNonNull();</span><br><span class="line">        ConnectionPoolConfiguration.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> ConnectionPoolConfiguration.builder(connectionFactory);</span><br><span class="line">        map.from(pool.getMaxIdleTime()).to(builder::maxIdleTime);</span><br><span class="line">        map.from(pool.getMaxLifeTime()).to(builder::maxLifeTime);</span><br><span class="line">        map.from(pool.getMaxAcquireTime()).to(builder::maxAcquireTime);</span><br><span class="line">        map.from(pool.getMaxCreateConnectionTime()).to(builder::maxCreateConnectionTime);</span><br><span class="line">        map.from(pool.getInitialSize()).to(builder::initialSize);</span><br><span class="line">        map.from(pool.getMaxSize()).to(builder::maxSize);</span><br><span class="line">        map.from(pool.getValidationQuery()).whenHasText().to(builder::validationQuery);</span><br><span class="line">        map.from(pool.getValidationDepth()).to(builder::validationDepth);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConnectionPool</span>(builder.build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JasyncConnectionFactory <span class="title function_">createConnectionFactory</span><span class="params">(R2dbcProperties properties)</span> &#123;</span><br><span class="line">        <span class="type">ConnectionFactoryOptions</span> <span class="variable">connectionFactoryOptions</span> <span class="operator">=</span> ConnectionFactoryOptions.parse(properties.getUrl());</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(</span><br><span class="line">                properties.getUsername(),</span><br><span class="line">                Objects.requireNonNull(connectionFactoryOptions.getValue(ConnectionFactoryOptions.HOST)).toString(),</span><br><span class="line">                (Integer) connectionFactoryOptions.getValue(ConnectionFactoryOptions.PORT),</span><br><span class="line">                properties.getPassword(),</span><br><span class="line">                (String) connectionFactoryOptions.getValue(ConnectionFactoryOptions.DATABASE));</span><br><span class="line">        <span class="type">JasyncConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JasyncConnectionFactory</span>(<span class="keyword">new</span> <span class="title class_">MySQLConnectionFactory</span>(configuration));</span><br><span class="line">        <span class="keyword">return</span> connectionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ReactiveTransactionManager <span class="title function_">transactionManager</span><span class="params">(ConnectionPool factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R2dbcTransactionManager</span>(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这个类不能被spring boot 组件扫描器扫描到</p></li><li><p>只能被spring.factories 或者 @import注解被spring注入</p></li><li><p>所以我把@AutoConfiguration注释掉了</p></li><li><p>创建META-INF&#x2F;spring.factories </p><ul><li>内容</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.zhazha.jasync.config.JasyncAutoConfiguration</span><br></pre></td></tr></table></figure><h1 id="2-7-x新版本"><a href="#2-7-x新版本" class="headerlink" title="2.7.x新版本"></a>2.7.x新版本</h1><h2 id="有什么变化？"><a href="#有什么变化？" class="headerlink" title="有什么变化？"></a>有什么变化？</h2><p>之前：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070032774.png" alt="image-20221107003224611"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070032112.png" alt="image-20221107003238956"></p><p>之后是这样:</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070049101.png" alt="image-20221107004909991"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070049330.png" alt="image-20221107004932572"></p><p>当然你也可以将 <code>@AutoConfiguration</code> 这个注解注释掉，还是会成功。不过我看到的案例都添加了该注解</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070050891.png" alt="image-20221107005019751"></p><ul><li>新版本推荐使用<code>@AutoConfiguration</code>代替 <code>spring.factories</code> 方式</li><li>使用<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>代替<code>META-INF/spring.factories</code> <ul><li>内容从key value变成value</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.mycorp.libx.autoconfigure.LibXAutoConfiguration</span><br><span class="line">com.mycorp.libx.autoconfigure.LibXWebAutoConfiguration </span><br></pre></td></tr></table></figure><ul><li>还可以使用“#”添加你的注释 </li><li>旧版本的spring.factories可能在未来的版本被放弃 </li><li>使用@AutoConfiguration注解的before, beforeName, after and afterName属性来确定加载顺序 <ul><li>当然 @AutoConfigureBefore and @AutoConfigureAfter这两个注解还可以使用 </li><li>before表示还未被加载的自动配置类</li><li>after表示已经被加载的自动配置类</li><li>这里的还未和已经以被@AutoConfiguration注解的类被加载的那一瞬间为基准</li><li>这种，自动配置类之间能够规定配置类的加载顺序，可以保证A类和B类之间的加载顺序</li></ul></li><li>使用@AutoConfigureOrder注解来指定在自动配置类之间的顺序 <ul><li>这种虽然也能规定加载顺序，但是和前面的那种明确保证A类和B类之间的加载顺序关系不同，是统一的顺序</li><li>只会影响自动配置类之间的顺序，不会影响AnnotationConfigApplicationContext.register(Class…)的注册顺序</li></ul></li></ul><h2 id="怎么做？"><a href="#怎么做？" class="headerlink" title="怎么做？"></a>怎么做？</h2><ul><li><p>删除spring.factories改用org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><p> org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><ul><li><p>内容</p><p>com.zhazha.autoconfiguration.config.ExampleAutoConfiguration</p></li></ul></li><li><p>修改自动配置类的注解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.autoconfiguration.<span class="keyword">module</span>.ExampleModuleLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = ExampleProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;com.zhazha.example&quot;, name = &quot;enable&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="meta">@Import(ExampleModuleLoader.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleAutoConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>从Configuration到AutoConfiguration </li><li>但实际上这个注解可以不需要</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.autoconfiguration.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.autoconfiguration.<span class="keyword">module</span>.ExampleModuleLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@AutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(value = ExampleProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;com.zhazha.example&quot;, name = &quot;enable&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="meta">@Import(ExampleModuleLoader.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleAutoConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@AutoConfiguration</code>这个注解不是 <code>@Configuration</code>注解的代替品, 它只用于springboot项目启动时</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211050510048.png" alt="image-20221105051008793"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动配置 </tag>
            
            <tag> SPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11Gateway 自定义网关过滤器</title>
      <link href="/2022/11/07/02springcloud/11Gateway%20%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E5%85%B3%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2022/11/07/02springcloud/11Gateway%20%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E5%85%B3%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Gateway过滤器有什么用？"><a href="#Gateway过滤器有什么用？" class="headerlink" title="Gateway过滤器有什么用？"></a>Gateway过滤器有什么用？</h1><p>一个标准的Spring webFilter，使用过滤器，可以在<strong>请求之前或者之后执行业务逻辑。</strong></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070142198.png" alt="image.png"></p><p>从图中很明显可以看出，在请求后端服务前后都需要经过Filter，于是乎Filter的作用就明确了，在PreFilter(请求前处理)可以做<strong>参数校验</strong>、<strong>流量监控</strong>、<strong>日志记录</strong>、<strong>修改请求内容</strong>等等，在PostFilter(请求后处理)可以做<strong>响应内容修改</strong>。</p><h1 id="Gateway过滤器分类"><a href="#Gateway过滤器分类" class="headerlink" title="Gateway过滤器分类"></a>Gateway过滤器分类</h1><p>Gateway中一共提供了两种过滤器，一种是GatewayFilter、GlobalFilter；<br />GatewayFilter：Gateway网关过滤器，是针对单个路由的过滤器，又称局部过滤器，其功能是针对访问的URL起到一定的过滤效果。<br />GlobalFilter：从名称而言，那就是全局过滤器，是需要实现具体的Java类来实现GlobalFilter接口，这其中可以根据进行权限的验证，HTTP请求的头部添加等等。</p><h1 id="过滤器的声明周期"><a href="#过滤器的声明周期" class="headerlink" title="过滤器的声明周期"></a>过滤器的声明周期</h1><p>有pre和post两种方式的filter,分别处理前置逻辑和后置逻辑。客户端的请求先经过pre类型的filter，然后将请求转发到具体的业务服务，收到业务服务的响应之后，再经过post类型的filter处理，最后返回响应到客户端。</p><h1 id="过滤器的优先级"><a href="#过滤器的优先级" class="headerlink" title="过滤器的优先级"></a>过滤器的优先级</h1><p><strong>order越大，优先级越低</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;AFilter前置逻辑&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;AFilter后置逻辑&quot;</span>);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;BFilter前置逻辑&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;BFilter后置逻辑&quot;</span>);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;CFilter前置逻辑&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;CFilter后置逻辑&quot;</span>);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(-1)</span></span><br><span class="line">    <span class="keyword">public</span> GlobalFilter <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AFilter</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(0)</span></span><br><span class="line">    <span class="keyword">public</span> GlobalFilter <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BFilter</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order(1)</span></span><br><span class="line">    <span class="keyword">public</span> GlobalFilter <span class="title function_">c</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CFilter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AFilter前置逻辑</span><br><span class="line">BFilter前置逻辑</span><br><span class="line">CFilter前置逻辑</span><br><span class="line"></span><br><span class="line">CFilter后置逻辑</span><br><span class="line">BFilter后置逻辑</span><br><span class="line">AFilter后置逻辑</span><br></pre></td></tr></table></figure><h1 id="过滤器参数"><a href="#过滤器参数" class="headerlink" title="过滤器参数"></a>过滤器参数</h1><p>过滤器参数相对断言参数要少一些，但是同样重要，让我们来细数一下。<br />路由中的filters参数的设置也是非常广泛的。<br />而我们平时使用最多的就是</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">demo</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">http://demo</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Path=/demo/**</span></span><br><span class="line">  <span class="attr">filters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure><p>这个参数是从请求中剥离的路径个数，比如<code>http://127.0.0.1/demo/user/list</code>, 就可以得到<code>http://127.0.0.1/demo/list</code>。</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务网关 </tag>
            
            <tag> gateway </tag>
            
            <tag> event loop </tag>
            
            <tag> 过滤器 </tag>
            
            <tag> 自定义动态过滤器 </tag>
            
            <tag> 静态过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10SpringCloud Gateway 网关</title>
      <link href="/2022/11/07/02springcloud/010SpringCloud%20Gateway%20%E7%BD%91%E5%85%B3/"/>
      <url>/2022/11/07/02springcloud/010SpringCloud%20Gateway%20%E7%BD%91%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="推荐直接看脑图"><a href="#推荐直接看脑图" class="headerlink" title="推荐直接看脑图"></a>推荐直接看脑图</h1><p>本篇幅记得是导图，下面的笔记是好不容易从脑图中整理出来的，可能不完整</p><p>地址：</p><h1 id="什么是服务网关"><a href="#什么是服务网关" class="headerlink" title="什么是服务网关?"></a>什么是服务网关?</h1><p>API Gateway（APIGW &#x2F; API 网关），顾名思义，是出现在系统边界上的一个面向 API 的、串行集中式的<code>企业级应用防火墙</code><br />API 网关是一个服务器，是系统对外的唯一入口。<br />API 网关封装了系统内部架构，为每个客户端提供定制的 API。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140896.png" alt="image.png"></p><h1 id="为什么需要服务网关？"><a href="#为什么需要服务网关？" class="headerlink" title="为什么需要服务网关？"></a>为什么需要服务网关？</h1><h2 id="统一管理平台"><a href="#统一管理平台" class="headerlink" title="统一管理平台"></a>统一管理平台</h2><blockquote><p>举个例子: 报警电话 110, 打火警电话 119, 急救电话 120, 交通事故电话 122, 高速公路报警电话 12122, 森林防火报警电话12119等等<br>你突然发现路边变压器坏了, 你想通知有关部分, 但你不知道到底是哪个部门和什么电话号码, 所以你晕了<br>接着有个叫 Gateway 的人搞了个类似 114 查号平台, 你只需要打电话给 114 , 告知他你有什么需求, 114会跟你的要求转播到相应的平台<br>而这个 114 平台就类似于 Gateway API 网关, 而你就是客户端, Gateway会根据你的要求做出甄别、回应或者转发给相应的微服务(110 119等)</p></blockquote><p>API网关出现的原因就跟上面的例子略有不同，但总体相似。随着微服务架构的出现，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信，会有以下的问题：</p><ul><li>客户端请求多个微服务，各个服务ip不一样，增加客户端复杂度。</li><li>存在跨域，在一定场景下处理相对复杂。 </li><li>认证复杂，每个服务都需要独立认证。 </li><li>与微服务耦合太强，微服务变更，客户端需要变更</li></ul><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140731.png" alt="image.png"></p><p>当然不管有没有 API 网关，后端微服务都可以通过 API 很好地支持客户端的访问,  如下图: <br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140008.png" alt="image.png"></p><p>但对于服务数量众多、复杂度比较高、规模比较大的业务来说，引入 API 网关也有一系列的好处：</p><ul><li>聚合接口使得服务对调用者透明，客户端与后端的耦合度降低</li><li>聚合后台服务，节省流量，提高性能，提升用户体验</li><li>提供安全、流控、过滤、缓存、计费、监控等 API 管理功能</li></ul><h2 id="隔离外部访问与内部系统"><a href="#隔离外部访问与内部系统" class="headerlink" title="隔离外部访问与内部系统"></a>隔离外部访问与内部系统</h2><p>所有的客户端和消费端都通过统一的网关接入微服务，<strong>在网关层处理所有非业务功能</strong>。</p><p>API网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST&#x2F;HTTP的访问API。</p><p>常见的API网关主要提供以下的功能：</p><ul><li><strong>路由功能</strong>：路由是微服务网关的核心能力。通过路由功能微服务网关可以将请求转发到目标微服务。在微服务架构中，网关可以结合注册中心的动态服务发现，实现对后端服务的发现，调用方只需要知道网关对外暴露的服务API就可以透明地访问后端微服务。</li><li><strong>负载均衡</strong>：API网关结合负载均衡技术，利用Eureka或者Consul等服务发现工具，通过轮询、指定权重、IP地址哈希等机制实现下游服务的负载均衡。</li><li><strong>统一鉴权</strong>：一般而言，无论对内网还是外网的接口都需要做用户身份认证，而用户认证在一些规模较大的系统中都会采用统一的单点登录（Single Sign On）系统，如果每个微服务都要对接单点登录系统，那么显然比较浪费资源且开发效率低。API网关是统一管理安全性的绝佳场所，可以将认证的部分抽取到网关层，微服务系统无须关注认证的逻辑，只关注自身业务即可。</li><li><strong>协议转换</strong>：API网关的一大作用在于构建异构系统，API网关作为单一入口，通过协议转换整合后台基于REST、AMQP、Dubbo等不同风格和实现技术的微服务，面向Web Mobile、开放平台等特定客户端提供统一服务。</li><li><strong>指标监控</strong>：网关可以统计后端服务的请求次数，并且可以实时地更新当前的流量健康状态，可以对URL粒度的服务进行延迟统计，也可以使用Hystrix Dashboard查看后端服务的流量状态及是否有熔断发生。</li><li><strong>限流熔断</strong>：在某些场景下需要控制客户端的访问次数和访问频率，一些高并发系统有时还会有限流的需求。在网关上可以配置一个阈值，当请求数超过阈值时就直接返回错误而不继续访问后台服务。当出现流量洪峰或者后端服务出现延迟或故障时，网关能够主动进行熔断，保护后端服务，并保持前端用户体验良好。</li><li><strong>黑白名单</strong>：微服务网关可以使用系统黑名单，过滤HTTP请求特征，拦截异常客户端的请求，例如DDoS攻击等侵蚀带宽或资源迫使服务中断等行为，可以在网关层面进行拦截过滤。比较常见的拦截策略是根据IP地址增加黑名单。在存在鉴权管理的路由服务中可以通过设置白名单跳过鉴权管理而直接访问后端服务资源。</li><li><strong>灰度发布</strong>：微服务网关可以根据HTTP请求中的特殊标记和后端服务列表元数据标识进行流量控制，实现在用户无感知的情况下完成灰度发布。</li><li><strong>流量染色</strong>：和灰度发布的原理相似，网关可以根据HTTP请求的Host、Head、Agent等标识对请求进行染色，有了网关的流量染色功能，我们可以对服务后续的调用链路进行跟踪，对服务延迟及服务运行状况进行进一步的链路分析。</li><li><strong>文档中心</strong>：网关结合Swagger，可以将后端的微服务暴露给网关，网关作为统一的入口给接口的使用方提供查看后端服务的API规范，不需要知道每一个后端微服务的Swagger地址，这样网关起到了对后端API聚合的效果。</li><li><strong>日志审计</strong>：微服务网关可以作为统一的日志记录和收集器，对服务URL粒度的日志请求信息和响应信息进行拦截。</li></ul><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140149.png" alt="image.png"></p><h1 id="什么是Spring-Cloud-Gateway"><a href="#什么是Spring-Cloud-Gateway" class="headerlink" title="什么是Spring Cloud Gateway?"></a>什么是Spring Cloud Gateway?</h1><p>SpringCloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。<br />SpringCloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 2.0之前的非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。<br />Spring Cloud Gateway 的目标，不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控&#x2F;指标，和限流。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140994.png" alt="image.png"></p><p>上图可以很直观的看出来 Gateway 大体上的设计思路</p><p><strong>客户端的请求通过</strong><code>**Gateway的Predicates**</code>**进行匹配，如果判断为 **<code>**false**</code><strong>则跳到下一个</strong><code>**Route**</code><strong>，如果为</strong><code>**true**</code><strong>则通过一系列的</strong><code>**Filter**</code><strong>链路处理后将请求转发给微服务</strong></p><p>另外，我们还能看出Gateway底层使用的是 Netty 进行通讯, 而 Netty 底层使用的是 event loop 模型<br />我们来解了解面试常问道的 event loop是什么？和 Reactor线程模型是什么？</p><h2 id="什么是-event-loop-模型"><a href="#什么是-event-loop-模型" class="headerlink" title="什么是 event loop 模型?"></a>什么是 event loop 模型?</h2><p>EventLoop 这个概念其实并不是 Netty 独有的，它是一种事件等待和处理的程序模型，可以解决<strong>多线程资源消耗高的问题</strong>。例如 Node.js 就采用了 EventLoop 的运行机制，不仅占用资源低，而且能够支撑了大规模的流量访问。<br />下图展示了 EventLoop 通用的运行模式。每当事件发生时，应用程序都会将产生的事件放入事件队列当中，然后 EventLoop 会轮询从队列中取出事件执行或者将事件分发给相应的事件监听者执行。事件执行的方式通常分为立即执行、延后执行、定期执行几种。</p><blockquote><p>触发事件和事件完成之间是有事件间隔的，所以触发事件时会将事件存入 事件队列 中，然后交给 EventLoop 线程 轮询，等到 Worker 线程执行完毕事件后将告知 Event Loop 将 执行结果+Callback 返回给 主线程，主线程执行 Callback </p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140928.png" alt="image.png"></p><h2 id="什么是Reactor线程模型？"><a href="#什么是Reactor线程模型？" class="headerlink" title="什么是Reactor线程模型？"></a>什么是Reactor线程模型？</h2><p>Reactor 模式是基于<strong>事件驱动</strong>的，它会<strong>监听</strong>事件的发生，当监听到事件发生后，根据多路复用策略，将事件<strong>分发</strong>给相应的处理器处理。</p><p>核心组件：</p><ul><li>Handle（Event）：用于表示事件。</li><li>Event Demultiplexer：事件分离器，用于同步等待事件的发生。</li><li>Reactor：反应器，用于监听和分发事件。内部会调用 Event Demultiplexer 来同步等待事件的发生，然后将事件交由 Event Handler 处理。</li><li>Event Handler：事件处理器，用于处理事件。</li></ul><h1 id="SpringCloud-Gateway核心流程"><a href="#SpringCloud-Gateway核心流程" class="headerlink" title="SpringCloud Gateway核心流程"></a>SpringCloud Gateway核心流程</h1><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140236.png" alt="image.png"><br />核心概念：</p><ol><li>Gateway Client 向 Spring Cloud Gateway 发送请求</li><li>请求首先会被 HttpWebHandlerAdapter 进行提取组装成网关上下文</li><li>然后网关的上下文会传递到 DispatcherHandler ，它负责将请求分发给 RoutePredicateHandlerMapping</li><li>RoutePredicateHandlerMapping 负责路由查找，并根据路由断言判断路由是否可用</li><li>如果过断言成功，由FilteringWebHandler 创建过滤器链并调用</li><li>通过特定于请求的 Fliter 链运行请求，Filter 被虚线分隔的原因是Filter可以在发送代理请求之前（pre）和之后（post）运行逻辑</li><li>执行所有pre过滤器逻辑。然后进行代理请求。发出代理请求后，将运行“post”过滤器逻辑。</li><li>处理完毕之后将 Response 返回到 Gateway 客户端</li></ol><p>Filter过滤器：</p><ul><li>Filter在pre类型的过滤器可以做参数效验、权限效验、流量监控、日志输出、协议转换等。</li><li>Filter在post类型的过滤器可以做响应内容、响应头的修改、日志输出、流量监控等</li></ul><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140699.gif" alt="动画.gif"></p><h1 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h1><p>github切换到 consul 分支</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070140686.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070141210.png" alt="image.png"></p><h2 id="新建-payment8007-项目"><a href="#新建-payment8007-项目" class="headerlink" title="新建 payment8007 项目"></a>新建 payment8007 项目</h2><p>新建一个新的项目: <code>cloud-providerconsul-payment8007</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8007</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><h2 id="新建项目gateway9527"><a href="#新建项目gateway9527" class="headerlink" title="新建项目gateway9527"></a>新建项目<code>gateway9527</code></h2><p>创建项目<code>cloud-gateway-gateway9527</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注意这里不能导入 web，因为 gataway已经有webflux了 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><span class="comment">&lt;!--一般基础配置类--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意需要将 <code>spring-boot-starter-web</code>包注释掉，然后添加 <code>spring-cloud-starter-gateway</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment">#将 payment-8007 8006 提供的服务隐藏起来，不暴露给客户端，只给客户端暴露 API 网关的地址 9527</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">provider_payment_consul_routh</span>   <span class="comment">#路由 id,没有固定规则，但唯一，建议与服务名对应</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://consul-provider-payment</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/consul/**</span>    <span class="comment">#断言，路径匹配 注意：Path 中 P 为大写</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Method=GET</span> <span class="comment">#只能时 GET 请求时，才能访问</span></span><br></pre></td></tr></table></figure><p>这里我们需要注意 <code>uri</code> 和 <code>predicates</code>这两个配置</p><p>其中</p><ul><li><code>predicates</code>：下面的配置相当于 匹配条件</li><li><code>uri</code>：相当于匹配成功后访问的域名</li><li><code>id</code>：就是这段 <code>uri</code> 和 <code>predicates</code> 的唯一属性，用于标识唯一性，不能重名</li></ul><p>**最终访问的是: <strong><code>**uri + predicates.Path**</code></strong> 相当于 **<code>**https://consul-provider-payment/payment/consul/**</code></p><blockquote><p>注意，如果你在 <code>uri</code>中配置<code>uri: https://www.baidu.com</code>那么他就会访问到 百度</p></blockquote><p>所以如果你这样配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GateWayConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line">        RouteLocatorBuilder.<span class="type">Builder</span> <span class="variable">routes</span> <span class="operator">=</span> builder.routes();</span><br><span class="line"></span><br><span class="line">        routes.route(<span class="string">&quot;path_route_zhazha&quot;</span>,</span><br><span class="line">                r -&gt; r.path(<span class="string">&quot;/guonei&quot;</span>)</span><br><span class="line">                        .uri(<span class="string">&quot;https://www.baidu.com&quot;</span>)).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator2</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line">        RouteLocatorBuilder.<span class="type">Builder</span> <span class="variable">routes</span> <span class="operator">=</span> builder.routes();</span><br><span class="line">        routes.route(<span class="string">&quot;path_route_zhazha2&quot;</span>,</span><br><span class="line">                r -&gt; r.path(<span class="string">&quot;/guoji&quot;</span>)</span><br><span class="line">                        .uri(<span class="string">&quot;https://news.baidu.com&quot;</span>)).build();</span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中如果你访问<code>[http://localhost:9527/guonei](http://localhost:9527/guonei)</code>会导致:<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070141401.png" alt="image.png"><br />如果你访问<code>[https://www.baidu.com/guonei](https://www.baidu.com/guonei)</code>相同的:<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070141198.png" alt="image.png"></p><p><strong>所以需要注意的是</strong><code>**Path**</code><strong>必须是</strong><code>**uri**</code><strong>域名必须存在的路径</strong></p><h3 id="Java-Bean方式配置路由器"><a href="#Java-Bean方式配置路由器" class="headerlink" title="Java Bean方式配置路由器"></a>Java Bean方式配置路由器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemogatewayApplication</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> builder.routes()</span><br><span class="line">.route(<span class="string">&quot;path_route&quot;</span>, r -&gt; r.path(<span class="string">&quot;/get&quot;</span>)</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;host_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.myhost.org&quot;</span>)</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;rewrite_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.rewrite.org&quot;</span>)</span><br><span class="line">.filters(f -&gt; f.rewritePath(<span class="string">&quot;/foo/(?&lt;segment&gt;.*)&quot;</span>, <span class="string">&quot;/$&#123;segment&#125;&quot;</span>))</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;hystrix_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.hystrix.org&quot;</span>)</span><br><span class="line">.filters(f -&gt; f.hystrix(c -&gt; c.setName(<span class="string">&quot;slowcmd&quot;</span>)))</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;hystrix_fallback_route&quot;</span>, r -&gt; r.host(<span class="string">&quot;*.hystrixfallback.org&quot;</span>)</span><br><span class="line">.filters(f -&gt; f.hystrix(c -&gt; c.setName(<span class="string">&quot;slowcmd&quot;</span>).setFallbackUri(<span class="string">&quot;forward:/hystrixfallback&quot;</span>)))</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.route(<span class="string">&quot;limit_route&quot;</span>, r -&gt; r</span><br><span class="line">.host(<span class="string">&quot;*.limited.org&quot;</span>).and().path(<span class="string">&quot;/anything/**&quot;</span>)</span><br><span class="line">.filters(f -&gt; f.requestRateLimiter(c -&gt; c.setRateLimiter(redisRateLimiter())))</span><br><span class="line">.uri(<span class="string">&quot;http://httpbin.org&quot;</span>))</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Gateway组件中的配置路由详解"><a href="#Gateway组件中的配置路由详解" class="headerlink" title="Gateway组件中的配置路由详解"></a>Gateway组件中的配置路由详解</h1><h2 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">router1</span></span><br><span class="line">    <span class="attr">uri:</span> <span class="string">http://www.baidu.com</span></span><br><span class="line">    <span class="attr">predicates:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Path=/baidu/**</span></span><br><span class="line">    <span class="attr">filters:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br></pre></td></tr></table></figure><p>其中的id参数，是唯一的，如果多个路由的话，id也应该是不同的。</p><p>uri：该参数时用来指定匹配后的访问链接，如果匹配成功，那么就去访问百度了。<br />predicates：断言参数，这个请接着往下看。<br />filters：过滤器参数。</p><h2 id="断言参数"><a href="#断言参数" class="headerlink" title="断言参数"></a>断言参数</h2><p>断言参数<code>predicates</code>，是用来匹配路由规则的，比如本次例子中的<code>Path=/baidu/**</code>，意思就是匹配<code>[http://localhost/baidu/*/](http://localhost/baidu/*/)</code>的相关的链接。<br />断言参数也是Gateway中规则最多的了，下面我们细说一下断言有提供哪些匹配参数。</p><h3 id="After"><a href="#After" class="headerlink" title="After"></a>After</h3><p><code>- After=2021-01-01</code><br />匹配在2021年一月一日时间之后发生的请求。</p><blockquote><p><code>After=2019-09-24T16:30:00+08:00[Asia/Shanghai] </code></p></blockquote><h3 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h3><p><code>- Before=2021-01-01</code><br />匹配在2021年一月一日时间之前发生的请求。</p><h3 id="Between"><a href="#Between" class="headerlink" title="Between"></a>Between</h3><p><code>- Before=2021-01-01,2021-01-02</code><br />匹配在2021年一月一日至2021年一月二日之间发生的请求。</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p><code>- Cookie=username, macro</code><br />cookie的设置，有两个参数，分别是name和regexp（Java正则），可以匹配到相应名称的Cookie名称，且与正则相匹配的Cookie值的链接。</p><blockquote><p>username&#x3D;macro</p></blockquote><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p><code>- Header=X-Request-Id, \d+</code><br />Header同样也提供了两个参数，分别是name和regexp（Java正则），可以匹配相应类型的Url，比如127.0.0.1&#x2F;demo&#x2F;1，这样就可以进入上述规则。</p><h3 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h3><p><code>- Host=**.baidu.com</code><br />Host就比较好理解了，其参数就是匹配相应的ip，或者域名等信息的Url。</p><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p><code>- Method=GET</code><br />Method就更加熟悉了，GET、POST、PUT、DELETE等都是属于Method中的一类，上述就是匹配GET类的请求。</p><h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><p><code>- Path=/baidu/**</code><br />Path：我们最常用的，用于匹配URL相关路径。</p><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><p><code>- Query=username</code><br />Query：查询条件，用于匹配查询条件是否存在abc条件。</p><blockquote><p>curl <a href="http://localhost:9527/user?username=zhazha">http://localhost:9527/user?username=zhazha</a></p></blockquote><h3 id="RemoteAddr"><a href="#RemoteAddr" class="headerlink" title="RemoteAddr"></a>RemoteAddr</h3><p><code>- RemoteAddr=192.168.1.1/24</code></p><p>使用curl工具从192.168.1.1发起请求可以匹配该路由。</p><blockquote><p><code>curl http://localhost:9201/user/1</code></p></blockquote><h3 id="Weight"><a href="#Weight" class="headerlink" title="Weight"></a>Weight</h3><p>利用路由权重来匹配对应的路由规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_high</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8006</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_low</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8007</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>使用权重来路由相应请求，以下表示有80%的请求会被路由到localhost:8006，20%会被路由到localhost:8007。</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务网关 </tag>
            
            <tag> gateway </tag>
            
            <tag> event loop </tag>
            
            <tag> Reactor </tag>
            
            <tag> 路由 </tag>
            
            <tag> 动态路由 </tag>
            
            <tag> 静态路由 </tag>
            
            <tag> 自定义动态路由 </tag>
            
            <tag> 断言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09限流与熔断理论部分——hystrix熔断器（三）</title>
      <link href="/2022/11/07/02springcloud/09%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86%E2%80%94%E2%80%94hystrix%E7%86%94%E6%96%AD%E5%99%A8%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2022/11/07/02springcloud/09%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86%E2%80%94%E2%80%94hystrix%E7%86%94%E6%96%AD%E5%99%A8%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇在用不到的时候可以不学，只要学会 sentinel 就可以了</p></blockquote><h1 id="Hystrix能干嘛"><a href="#Hystrix能干嘛" class="headerlink" title="Hystrix能干嘛"></a>Hystrix能干嘛</h1><p>服务降级、服务熔断、接近实时的监控······</p><blockquote><p>hystrix保障我们的分布式系统不会导致整个体系服务失败，避免<strong>级联故障</strong>，以提高分布式系统的弹性。</p></blockquote><h2 id="1、服务降级"><a href="#1、服务降级" class="headerlink" title="1、服务降级"></a>1、服务降级</h2><p>让出服务的资源, 给另外的服务</p><p>服务降级强调的是<strong>当前服务 降级(或不再调用)<strong>被调用的</strong>报错服务</strong></p><p>这里的报错服务包括: </p><ul><li>对方服务的程序运行异常</li><li>超出我方规定的超时时间</li><li>服务熔断触发服务降级</li><li>线程池&#x2F;信号量打满也会导致服务降级</li></ul><h2 id="2、服务熔断"><a href="#2、服务熔断" class="headerlink" title="2、服务熔断"></a>2、服务熔断</h2><p>类比保险丝达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示<br />就是保险丝：服务的降级-&gt;进而熔断-&gt;恢复调用链路</p><h2 id="3、服务限流"><a href="#3、服务限流" class="headerlink" title="3、服务限流"></a>3、服务限流</h2><p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行</p><h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><p>8001先从自身找问题：设置自身调用超时时间的峰值，峰值内可以正常运行，超过了需要有兜底的方法处理，作服务降级fallback</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070133893.png" alt="image.png"></p><blockquote><h3 id="为什么客户端和服务端都可以使用hystrix"><a href="#为什么客户端和服务端都可以使用hystrix" class="headerlink" title="为什么客户端和服务端都可以使用hystrix?"></a>为什么客户端和服务端都可以使用hystrix?</h3><ul><li>服务端</li></ul><p>serverA 调用了 serverB 的服务, serverB可能已经宕机或者负载, 无法及时的做出反应, 所以我们可以给 serverA 提供 hystrix 保障 serverA 能够及时的做出反馈, 而不是 一直阻塞等待 serverB 最终弹出一堆报错的不友好信息(而且还能不安全)</p><ul><li>客户端</li></ul><p>clientA 调用了 serverA 的服务, clientA 不信任 serverA, 所以一般都会有个另外一个 serverB 做保障.  如果 clientA 访问 serverA 时阻塞超时, clientA 会熔断 serverA, 并对 serverA 降级, 最后clientA返回一个兜底的方法给用户, 下次再次访问 clientA 时, clientA 不再访问 serverA, 而是 serverA 集群中的另一台服务 serverB(多次访问时, 还会给个请求给 serverA 试试能不能用了)</p></blockquote><p>这是一次hystrix 熔断并fallback 的过程</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070133854.png" alt="image.png"></p><p>hystrix可以配置在 clientA 处 防止<strong>蓝标2</strong>出现问题阻塞<br />也可以配置在 serverB 防止 <strong>蓝标3</strong> 出现阻塞和超时的情况</p><p>了解这些, 接下来我们可以分别介绍介绍怎么玩</p><h3 id="server服务端-提供端"><a href="#server服务端-提供端" class="headerlink" title="server服务端(提供端)"></a>server服务端(提供端)</h3><p>依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 其他略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>只要导入包后, hystrix 默认启动, 不需要另外设置</p></blockquote><p>底层默认使用的还是 ribbon 做负载均衡</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070133520.png" alt="image.png"></p><p>application.yml :</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###consul服务端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider-payment</span></span><br><span class="line">  <span class="comment">####consul注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><p>接着我们可以给 controller 或者 service 添加 hystrix 操作功能</p><p>这里我们选择标记 controller 让 hystrix 拦截并使用</p><p>hystrix 标记超时的注解是 <code>@HystrixCommand</code></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070133176.png" alt="image.png"></p><p>注解可以使用 <code>fallbackMethod</code> 标记一个方法, 让<code>@HystrixCommand</code>标记的方法在发生错误时调用的备选方案</p><p>贴出完整代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 正常访问一切 OK</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String <span class="title function_">paymentInfoOk</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超时访问，演示降级</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String <span class="title function_">paymentInfoTimeOut</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoOk</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;线程池:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;paymentInfo_OK,id: &quot;</span> + id + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;O(∩_∩)O&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;线程池:&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;paymentInfo_TimeOut,id: &quot;</span> + id + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;O(∩_∩)O，耗费3秒&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoOk</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentInfoOk(id);</span><br><span class="line">log.info(<span class="string">&quot;****result: &quot;</span> + result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackPaymentInfoTimeOut&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentInfoTimeOut(id);</span><br><span class="line">log.info(<span class="string">&quot;****result: &quot;</span> + result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">fallbackPaymentInfoTimeOut</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;fallback&quot;</span>;</span><br><span class="line">log.info(<span class="string">&quot;****result: &quot;</span> + result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 通用熔断器注解, 有了这个下面的`EnableHystrix`注解就不需要了</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="comment">//@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentHystrixMain8001</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(PaymentHystrixMain8001.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里选择 controller 做 hystrix 标记可能不太恰当, 可能标记 service 可能会更好一点, 不过没关系，能够产生效果就行</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134421.png" alt="image.png">这部分完成</p><p>核心代码在这里: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackPaymentInfoTimeOut&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br></pre></td></tr></table></figure><p>超时时间是3秒， 实际延迟时间是 5 秒</p><p>所以代码肯定超时</p><p>访问: <code>[http://localhost:8001/payment/hystrix/timeout/3](http://localhost:8001/payment/hystrix/timeout/3)</code><br />反馈的信息: <code>fallback</code><br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134759.png" alt="image.png"></p><p>报错, 然后被 hystrix 拦截</p><blockquote><p>hystrix 默认超时时间为 1 秒, 而接口延迟是 5 秒, 所以这个接口会报错</p></blockquote><p>将 hystrix 超时时间定位 6秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackPaymentInfoTimeOut&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;6000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br></pre></td></tr></table></figure><p>启动jmeter</p><p>创建线程组:<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134154.png" alt="image.png"></p><p>10个线程, 跑 1秒 循环 1次<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134332.png" alt="image.png"><br />发现10个请求都成功了</p><p>改成 <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134479.png" alt="image.png">, 20个请求都会成功</p><p>但是如果改成:<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134757.png" alt="image.png"></p><p>就会走hystrix备选方案:<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134913.png" alt="image.png"><br />但是下面10个请求会成功<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134000.png" alt="image.png"></p><p>这是什么个情况?</p><h4 id="hystrix-线程隔离"><a href="#hystrix-线程隔离" class="headerlink" title="hystrix 线程隔离"></a>hystrix 线程隔离</h4><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134033.png" alt="image.png"></p><p>上图的情况是很容易出现的, 所以的请求都阻塞在 订单服务 这里.<br />而服务的线程总量是有限的(假设只有100条), 那么现在的请求全部被阻塞在 订单服务 前 <br />那么用户就没有多余的线程去访问 商品和用户 服务, 服务出现级联错误, 也就是服务雪崩</p><p>遇到这种问题要怎么解决呢?<br />hystrix使用了线程隔离技术<br />大致的方法是, 给每个服务提供默认 10个线程大小 的线程池<br />这样即使订单服务出现问题, 导致线程阻塞, 最终阻塞的线程也只不过是 10条, 不会导致 另外 的 90 条线程出现问题<br />这种方式就是令牌桶限流算法</p><p>hystrix在遇到各个类型的 command 指令时, 会将该类型设计成 key , 然后创建一个线程池, 最为 value, 存放到一个 ConcurrentHashMap 中, 如下图所示<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134472.png" alt="image.png"></p><p>具体的源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ThreadPoolExecutor <span class="title function_">getThreadPool</span><span class="params">(<span class="keyword">final</span> HystrixThreadPoolKey threadPoolKey, HystrixProperty&lt;Integer&gt; corePoolSize, HystrixProperty&lt;Integer&gt; maximumPoolSize, HystrixProperty&lt;Integer&gt; keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span> &#123;</span><br><span class="line">    <span class="type">ThreadFactory</span> <span class="variable">threadFactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!PlatformSpecific.isAppEngineStandardEnvironment()) &#123;</span><br><span class="line">        threadFactory = <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">threadNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r, <span class="string">&quot;hystrix-&quot;</span> + threadPoolKey.name() + <span class="string">&quot;-&quot;</span> + threadNumber.incrementAndGet());</span><br><span class="line">                thread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> thread;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        threadFactory = PlatformSpecific.getAppEngineThreadFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">dynamicCoreSize</span> <span class="operator">=</span> corePoolSize.get();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">dynamicMaximumSize</span> <span class="operator">=</span> maximumPoolSize.get();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dynamicCoreSize &gt; dynamicMaximumSize) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;Hystrix ThreadPool configuration at startup for : &quot;</span> + threadPoolKey.name() + <span class="string">&quot; is trying to set coreSize = &quot;</span> +</span><br><span class="line">                dynamicCoreSize + <span class="string">&quot; and maximumSize = &quot;</span> + dynamicMaximumSize + <span class="string">&quot;.  Maximum size will be set to &quot;</span> +</span><br><span class="line">                dynamicCoreSize + <span class="string">&quot;, the coreSize value, since it must be equal to or greater than the coreSize value&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(dynamicCoreSize, dynamicCoreSize, keepAliveTime.get(), unit, workQueue, threadFactory);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(dynamicCoreSize, dynamicMaximumSize, keepAliveTime.get(), unit, workQueue, threadFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行Command的方式一共四种</p><ul><li>execute()：以同步堵塞方式执行run()。调用execute()后，hystrix先创建一个新线程运行run()，接着调用程序要在execute()调用处一直堵塞着，直到run()运行完成。</li><li>queue()：以异步非堵塞方式执行run()。调用queue()就直接返回一个Future对象，同时hystrix创建一个新线程运行run()，调用程序通过Future.get()拿到run()的返回结果，而Future.get()是堵塞执行的。</li><li>observe()：事件注册前执行run()&#x2F;construct()。第一步是事件注册前，先调用observe()自动触发执行run()&#x2F;construct()（如果继承的是HystrixCommand，hystrix将创建新线程非堵塞执行run()；如果继承的是HystrixObservableCommand，将以调用程序线程堵塞执行construct()），第二步是从observe()返回后调用程序调用subscribe()完成事件注册，如果run()&#x2F;construct()执行成功则触发onNext()和onCompleted()，如果执行异常则触发onError()。</li><li>toObservable()：事件注册后执行run()&#x2F;construct()。第一步是事件注册前，调用toObservable()就直接返回一个Observable<String>对象，第二步调用subscribe()完成事件注册后自动触发执行run()&#x2F;construct()（如果继承的是HystrixCommand，hystrix将创建新线程非堵塞执行run()，调用程序不必等待run()；如果继承的是HystrixObservableCommand，将以调用程序线程堵塞执行construct()，调用程序等待construct()执行完才能继续往下走），如果run()&#x2F;construct()执行成功则触发onNext()和onCompleted()，如果执行异常则触发onError()</li></ul><h5 id="线程隔离的优点"><a href="#线程隔离的优点" class="headerlink" title="线程隔离的优点"></a>线程隔离的优点</h5><p><br />[1]:应用程序会被完全保护起来，即使依赖的一个服务的线程池满了，也不会影响到应用程序的其他部分。<br />[2]:我们给应用程序引入一个新的风险较低的客户端lib的时候，如果发生问题，也是在本lib中，并不会影响到其他内容，因此我们可以大胆的引入新lib库。<br />[3]:当依赖的一个失败的服务恢复正常时，应用程序会立即恢复正常的性能。<br />[4]:如果我们的应用程序一些参数配置错误了，线程池的运行状况将会很快显示出来，比如延迟、超时、拒绝等。同时可以通过动态属性实时执行来处理纠正错误的参数配置。<br />[5]:如果服务的性能有变化，从而需要调整，比如增加或者减少超时时间，更改重试次数，就可以通过线程池指标动态属性修改，而且不会影响到其他调用请求。<br />[6]:除了隔离优势外，hystrix拥有专门的线程池可提供内置的并发功能，使得可以在同步调用之上构建异步的外观模式，这样就可以很方便的做异步编程（Hystrix引入了Rxjava异步框架）。</p><blockquote><h4 id="尽管线程池提供了线程隔离，我们的客户端底层代码也必须要有超时设置，不能无限制的阻塞以致线程池一直饱和。"><a href="#尽管线程池提供了线程隔离，我们的客户端底层代码也必须要有超时设置，不能无限制的阻塞以致线程池一直饱和。" class="headerlink" title="尽管线程池提供了线程隔离，我们的客户端底层代码也必须要有超时设置，不能无限制的阻塞以致线程池一直饱和。"></a>尽管线程池提供了线程隔离，我们的客户端底层代码也必须要有超时设置，不能无限制的阻塞以致线程池一直饱和。</h4></blockquote><h5 id="线程隔离的缺点"><a href="#线程隔离的缺点" class="headerlink" title="线程隔离的缺点"></a>线程隔离的缺点</h5><p><br />[1]:线程池的主要缺点就是它增加了计算的开销，每个业务请求（被包装成命令）在执行的时候，会涉及到请求排队，调度和上下文切换。不过Netflix公司内部认为线程隔离开销足够小，不会产生重大的成本或性能的影响。<br />The Netflix API processes 10+ billion Hystrix Command executions per day using thread isolation. Each API instance has 40+ thread-pools with 5–20 threads in each (most are set to 10).<br />Netflix API每天使用线程隔离处理10亿次Hystrix Command执行。 每个API实例都有40多个线程池，每个线程池中有5-20个线程（大多数设置为10个）。<br />对于不依赖网络访问的服务，比如只依赖内存缓存这种情况下，就不适合用线程池隔离技术，而是采用信号量隔离，后面文章会介绍。<br />因此我们可以放心使用Hystrix的线程隔离技术，来防止雪崩这种可怕的致命性线上故障。</p><blockquote><p>这一小段转载自简书<br />作者：新栋BOOK<br />标题：Hystrix线程隔离技术解析-线程池</p></blockquote><h3 id="client客户端-消费端"><a href="#client客户端-消费端" class="headerlink" title="client客户端(消费端)"></a>client客户端(消费端)<a href="https://blog.csdn.net/Mark42/article/details/123738225"><br /></a></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###consul服务端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="comment">####consul注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><p>这里需要注意 application.yml 中如果开启了 hystrix 就需要同时启动 ribbon 和 hystrix 的超时配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">##设置feign 客户端超时时间（openFeign默认支持ribbon）</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">7000</span></span><br><span class="line">  <span class="comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">7000</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">7000</span></span><br></pre></td></tr></table></figure><p>如果不启动 hystrix 也需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//@EnableHystrix</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderHystrixMain80</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(OrderHystrixMain80.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;consul-provider-payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentClient</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoOk</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderHystrixController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentClient paymentClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfoOk</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentClient.paymentInfoOk(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentClient.paymentInfoTimeOut(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="问题一-超时问题"><a href="#问题一-超时问题" class="headerlink" title="问题一: 超时问题"></a>问题一: 超时问题</h4><p>现在使用<code>[http://localhost:80/consumer/payment/hystrix/timeout/2](http://localhost:80/consumer/payment/hystrix/timeout/2)</code>访问地址会报错</p><p>失败信息:<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134970.png" alt="image.png"></p><p>以上,面将错误直接丢给客户是一种非常失职的方式</p><p>那么要怎么解决呢?</p><p>非常简单, 就是不让用户看到不就行了.</p><p>方法有两种:</p><ol><li>使用 hystrix 将熔断的服务降级掉(这样就遇不到报错的服务了)</li><li>熔断返回的错误数据包拦截下来, 包装一个新的页面给用户</li></ol><p><code>@HystrixCommand(fallbackMethod = &quot;fallbackPaymentInfoTimeOut&quot;)</code><br />缺少了自定义的超时时间</p><p>可以这么做:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackPaymentInfoTimeOut&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><p>给他定时 3 秒, 3秒后超时</p><p>如果你是在<strong>客户端</strong>客户端什么都有只用了 openFeign 的话, 可以这么做:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment">## default 设置的全局超时时间，指定服务名称可以设置单个服务的超时时间</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">basic</span></span><br></pre></td></tr></table></figure><blockquote><p>我们在客户端使用了 <code>openFeign</code>可以这么配置, 他底层其实使用了 ribbon(旧版本)</p></blockquote><p>当然如果你给客户端添加 hystrix 就可以这么做:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">##设置feign 客户端超时时间（openFeign默认支持ribbon）</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">7000</span></span><br><span class="line">  <span class="comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">7000</span></span><br><span class="line"><span class="comment"># hystrix 内部的超时时间, 两个超时时间相同才会有准确的超时时间</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">7000</span></span><br></pre></td></tr></table></figure><blockquote><p>这种情况是使用了 hystrix 之后的超时时间方法, 当然你也可以添加 openFeign超时配置, 也能生效, 但还是要相同, 或者 比 7000 更小才能生效, 太麻烦了</p></blockquote><h4 id="问题二-代码冗余"><a href="#问题二-代码冗余" class="headerlink" title="问题二: 代码冗余"></a>问题二: 代码冗余</h4><p>服务端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackPaymentInfoTimeOut&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;6000&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentInfoTimeOut(id);</span><br><span class="line">    log.info(<span class="string">&quot;****result: &quot;</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">fallbackPaymentInfoTimeOut</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;h1&gt;访问&#x27;/payment/hystrix/timeout&#x27;失败: &quot;</span> + counter.getAndIncrement() + <span class="string">&quot;&lt;/h1&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是有问题的</p><p>每标记一个方法, 都需要配合的写一个新的 <code>fallbackMethod = &quot;fallbackPaymentInfoTimeOut&quot;</code>方法明显是不合理的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">fallbackPaymentInfoTimeOut</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;h1&gt;访问&#x27;/payment/hystrix/timeout&#x27;失败: &quot;</span> + counter.getAndIncrement() + <span class="string">&quot;&lt;/h1&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>并不是所有方法都需要专属的兜底方法</p><p>我们可以统一配置</p><h5 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h5><blockquote><p>给服务端提供代码</p></blockquote><p>给需要配置的类上添加<br /><code>@DefaultProperties(defaultFallback = &quot;globalFallback&quot;)</code><br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134606.png" alt="image.png"></p><h5 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h5><p>并且在该类中添加方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">globalFallback</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;h1&gt;Global port: &quot;</span> + port + <span class="string">&quot; counter: &quot;</span> + counter.getAndIncrement() + <span class="string">&quot;系统繁忙, 请稍后再尝试&lt;/h1&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070134984.png" alt="image.png"></p><h5 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h5><p>接着添加两个方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/timeout01/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut01</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentInfoTimeOut(id);</span><br><span class="line">    log.info(<span class="string">&quot;timeout01: &quot;</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/timeout02/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut02</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentInfoTimeOut(id);</span><br><span class="line">    log.info(<span class="string">&quot;timeout01: &quot;</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>记住需要加上 <code>@HystrixCommand</code> 注解, 否则全局异常 hystrix 失效, hystrix 需要标记方法才能生效</p></blockquote><h4 id="问题三-和业务逻辑混合在一起"><a href="#问题三-和业务逻辑混合在一起" class="headerlink" title="问题三: 和业务逻辑混合在一起"></a>问题三: 和业务逻辑混合在一起</h4><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135515.png" alt="image.png"></p><p>解决办法: 把这种 兜底的方法 放在客户端上</p><p>在 客户端 添加下列代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.client.PaymentClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentFallbackClient</span> <span class="keyword">implements</span> <span class="title class_">PaymentClient</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfoOk</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;====PaymentHystrixService fall back paymentInfoOk，o(╥﹏╥)o====&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut</span><span class="params">(Integer id)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;====PaymentHystrixService fall back paymentInfoTimeOut，o(╥﹏╥)o====&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;consul-provider-payment&quot;, fallback = PaymentFallbackClient.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentClient</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoOk</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfoTimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>主要方法就是给 <code>@FeignClient</code>注解添加<code>fallback</code>属性<br>值得注意的是<code>@Component</code>注解一定不要忘记加上</p></blockquote><p>此时关闭 8001 服务后, 客户端会走 兜底方法 , 不会再挂起等待</p><p><a href="http://localhost/consumer/payment/hystrix/timeout/2">http://localhost/consumer/payment/hystrix/timeout/2</a> <br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135734.png" alt="image.png"><br />接着再启动 8001 等一下又可以重新放到到该服务<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135111.png" alt="image.png"></p><h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><p>熔断机制是应对雪崩效应(<strong>级联故障</strong>)的一种微服务链路保护机制，当扇出链路的某个微服务出错不可用或者响应时间太长时，<br />会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息，当检测到该节点微服务调用响应正常后，恢复调用链路</p><p>在 springcloud 中如果使用 hystrix 做服务熔断, 他就有一个阈值 如果 5 秒内出现 20次 错误, 那么就会触发熔断机制.<br />hystrix触发熔断机制的方式还是给方法添加<code>@HystrixCommand</code>注解</p><p>hystrix 熔断的功能总结下来就是: </p><ol><li>hystrix标记方法</li><li>方法错误时调用 fallback方法, 统计方法错误次数</li><li>次数统计触发阈值后, 直接熔断（熔断器在全开状态：线路断开）</li><li>下次调用不会再去访问该服务, 而是直接调用 fallback</li><li>熔断后服务不可用, 是因为客户端直接跳过了调用正常方法的过程, 直接执行 fallback 方法</li><li>熔断后不是一直都不去使用熔断的服务, hystrix会找机会去试试是否能够处理客户端的请求（熔断器在半开状态：线路接通）, 以判断服务是否恢复（熔断器在关闭状态 ：线路全部接通）</li></ol><p>熔断器的状态：</p><ul><li>熔断打开</li></ul><p>请求不再进行调用当前服务，内部设置时钟一般为MTTR（平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态</p><ul><li>熔断关闭</li></ul><p>熔断关闭不会对服务进行熔断</p><ul><li>熔断半开</li></ul><p>部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</p><p>可以配合大佬的博客看</p><p><a href="https://martinfowler.com/bliki/CircuitBreaker.html">可以看下Martin Fowler大佬的文章CircuitBreaker</a></p><blockquote><p>It’s common for software systems to make remote calls to software running in different processes, probably on different machines across a network. One of the big differences between in-memory calls and remote calls is that remote calls can fail, or hang without a response until some timeout limit is reached. What’s worse if you have many callers on a unresponsive supplier, then you can run out of critical resources leading to cascading failures across multiple systems.</p></blockquote><p>软件系统对运行在不同进程的软件进行远程调用是很常见的, 这些软件可能运行在网络上的不同机子上. 内存调用和远程调用的不同点之一是远程调用可能会失败或者挂起而没有响应直至超过规定时间的限制. 更糟糕的是如果你有很多无响应的callers, 则你可能耗尽重要资源从, 而导致多个系统的级联错误. </p><blockquote><p>The basic idea behind the circuit breaker is very simple. You wrap a protected function call in a circuit breaker object, which monitors for failures. Once the failures reach a certain threshold, the circuit breaker trips, and all further calls to the circuit breaker return with an error, without the protected call being made at all. Usually you’ll also want some kind of monitor alert if the circuit breaker trips.</p></blockquote><p>断路器背后的思想非常简单. 你包装了个受保护的函数调用在断路器对象中, 该对象监听故障. 一旦错误达到某个阈值, 断路器会跳闸，并且对断路器的所有进一步调用都会返回错误，而根本不会进行受保护的调用。通常，如果断路器跳闸，您还需要某种监视器警报。</p><blockquote><p>这是大佬对断路器的描述和使用</p></blockquote><h3 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h3><p>现在我们根据上面的总结编写代码</p><p>在服务端添加代码:</p><p>在<code>PaymentService</code>添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">circuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;, value = &quot;true&quot;),// 是否开启断路器</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;10&quot;),// 断路后重新开启服务的请求次数</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value = &quot;10000&quot;),// 时间窗口期</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;30&quot;),// 失败率达到多少后跳闸</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">circuitBreaker</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;******id 不能负数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">serialNumber</span> <span class="operator">=</span> IdUtil.simpleUUID();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;调用成功，流水号: &quot;</span> + serialNumber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentCircuitBreaker_fallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id 不能负数，请稍后再试，/(ㄒoㄒ)/~~   id: &quot;</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>hystrix 配置说明<br><br /><br><strong>circuitBreaker.enabled</strong><br>设置断路器是否起作用。<br>默认值：true</p><p><strong>circuitBreaker.requestVolumeThreshold</strong><br>设置在一个滚动窗口中，打开断路器的最少请求数。<br>比如：断路器重新数量开启条件。如果值是20，在一个窗口内（比如10秒），收到19个请求，即使这19个请求都失败了，断路器也不会打开。<br>默认值：20</p><p><strong>circuitBreaker.sleepWindowInMilliseconds</strong><br>设置在回路被打开，拒绝请求到再次尝试请求并决定回路是否继续打开的时间。<br>窗口时间。一次统计的时间单位<br>默认值：5000（毫秒）</p><p><strong>circuitBreaker.errorThresholdPercentage</strong><br>设置打开回路并启动回退逻辑的错误比率。<br>在百分比为50%的条件下，一次时间窗口内， 发生了30次请求， 有15次失败，则触发<br>默认值：50%</p><p><a href="https://www.jianshu.com/p/39763a0bd9b8">更多hystrix配置简单说明（官方文档简译）</a></p></blockquote><p><code>PaymentController</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/circuit/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.circuitBreaker(id);</span><br><span class="line">    log.info(<span class="string">&quot;****result: &quot;</span> + result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着你就可以这么玩:<br /><a href="http://localhost:8001/payment/circuit/1">http://localhost:8001/payment/circuit/1</a><br /><a href="http://localhost:8001/payment/circuit/-31">http://localhost:8001/payment/circuit/-1</a></p><p>首先故意访问错误 30 次<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135359.png" alt="image.png"><br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135303.png" alt="image.png"></p><p>然后立即在网页上访问11次： <a href="http://localhost:8001/payment/circuit/1">http://localhost:8001/payment/circuit/1</a>  </p><blockquote><p>记住是立即访问 11  次哦， 否则就会恢复正常<br>因为超出 10 秒 的窗口时间，hystrix就会重新尝试放行请求</p></blockquote><p>你会发现前面10次都是报错 <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135514.png" alt="image.png"></p><p>这种现象完全符合大佬对 断路器的描述：</p><blockquote><p> Once the failures reach a certain threshold, the circuit breaker trips, and all further calls to the circuit breaker return with an error, without the protected call being made at all. </p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135651.png" alt="image.png"></p><h3 id="断路器开启或者关闭的条件"><a href="#断路器开启或者关闭的条件" class="headerlink" title="断路器开启或者关闭的条件"></a>断路器开启或者关闭的条件</h3><p>当满足一定的阀值的时候（默认10秒内超过20个请求次数）<br />当失败率达到一定的时候（默认10秒内超过50%的请求失败）<br />到达以上阀值，断路器将会开启<br />当开启的时候，所有请求都不会进行转发<br />一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发；如果成功，断路器会关闭；若失败，继续开启。重复4和5<br /><a href="https://blog.csdn.net/Mark42/article/details/123738225"><br /></a></p><h3 id="断路器打开之后"><a href="#断路器打开之后" class="headerlink" title="断路器打开之后"></a>断路器打开之后</h3><p>再有请求调用的时候，将不会调用主逻辑，而是直接调用降级fallback，通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果</p><h3 id="原来的主逻辑如何恢复"><a href="#原来的主逻辑如何恢复" class="headerlink" title="原来的主逻辑如何恢复"></a>原来的主逻辑如何恢复</h3><p>对于这一问题，hystrix也为我们实现了自动恢复功能。当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，主逻辑恢复；如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时<br /><a href="https://blog.csdn.net/Mark42/article/details/123738225"><br /></a></p><h3 id="所有配置"><a href="#所有配置" class="headerlink" title="所有配置"></a>所有配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//========================All</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;str_fallbackMethod&quot;,</span></span><br><span class="line"><span class="meta">        groupKey = &quot;strGroupCommand&quot;,</span></span><br><span class="line"><span class="meta">        commandKey = &quot;strCommand&quot;,</span></span><br><span class="line"><span class="meta">        threadPoolKey = &quot;strThreadPool&quot;,</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">        commandProperties = &#123;</span></span><br><span class="line"><span class="meta">                // 设置隔离策略，THREAD 表示线程池 SEMAPHORE：信号池隔离</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;execution.isolation.strategy&quot;, value = &quot;THREAD&quot;),</span></span><br><span class="line"><span class="meta">                // 当隔离策略选择信号池隔离的时候，用来设置信号池的大小（最大并发数）</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;execution.isolation.semaphore.maxConcurrentRequests&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                // 配置命令执行的超时时间</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;execution.isolation.thread.timeoutinMilliseconds&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                // 是否启用超时时间</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;execution.timeout.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                // 执行超时的时候是否中断</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;execution.isolation.thread.interruptOnTimeout&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                // 执行被取消的时候是否中断</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;execution.isolation.thread.interruptOnCancel&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                // 允许回调方法执行的最大并发数</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;fallback.isolation.semaphore.maxConcurrentRequests&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                // 服务降级是否启用，是否执行回调函数</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;fallback.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                // 是否启用断路器</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置在滚动时间窗中，断路器熔断的最小请求数。例如，默认该值为 20 的时候，</span></span><br><span class="line"><span class="meta">                // 如果滚动时间窗（默认10秒）内仅收到了19个请求， 即使这19个请求都失败了，断路器也不会打开。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;20&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置在滚动时间窗中，表示在滚动时间窗中，在请求数量超过</span></span><br><span class="line"><span class="meta">                // circuitBreaker.requestVolumeThreshold 的情况下，如果错误请求数的百分比超过50,</span></span><br><span class="line"><span class="meta">                // 就把断路器设置为 &quot;打开&quot; 状态，否则就设置为 &quot;关闭&quot; 状态。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;50&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置当断路器打开之后的休眠时间窗。 休眠时间窗结束之后，</span></span><br><span class="line"><span class="meta">                // 会将断路器置为 &quot;半开&quot; 状态，尝试熔断的请求命令，如果依然失败就将断路器继续设置为 &quot;打开&quot; 状态，</span></span><br><span class="line"><span class="meta">                // 如果成功就设置为 &quot;关闭&quot; 状态。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.sleepWindowinMilliseconds&quot;, value = &quot;5000&quot;),</span></span><br><span class="line"><span class="meta">                // 断路器强制打开</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.forceOpen&quot;, value = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">                // 断路器强制关闭</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;circuitBreaker.forceClosed&quot;, value = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">                // 滚动时间窗设置，该时间用于断路器判断健康度时需要收集信息的持续时间</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;metrics.rollingStats.timeinMilliseconds&quot;, value = &quot;10000&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置滚动时间窗统计指标信息时划分&quot;桶&quot;的数量，断路器在收集指标信息的时候会根据</span></span><br><span class="line"><span class="meta">                // 设置的时间窗长度拆分成多个 &quot;桶&quot; 来累计各度量值，每个&quot;桶&quot;记录了一段时间内的采集指标。</span></span><br><span class="line"><span class="meta">                // 比如 10 秒内拆分成 10 个&quot;桶&quot;收集这样，所以 timeinMilliseconds 必须能被 numBuckets 整除。否则会抛异常</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;metrics.rollingStats.numBuckets&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置对命令执行的延迟是否使用百分位数来跟踪和计算。如果设置为 false, 那么所有的概要统计都将返回 -1。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;metrics.rollingPercentile.enabled&quot;, value = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置百分位统计的滚动窗口的持续时间，单位为毫秒。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;metrics.rollingPercentile.timeInMilliseconds&quot;, value = &quot;60000&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置百分位统计滚动窗口中使用 “ 桶 ”的数量。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;metrics.rollingPercentile.numBuckets&quot;, value = &quot;60000&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置在执行过程中每个 “桶” 中保留的最大执行次数。如果在滚动时间窗内发生超过该设定值的执行次数，</span></span><br><span class="line"><span class="meta">                // 就从最初的位置开始重写。例如，将该值设置为100, 滚动窗口为10秒，若在10秒内一个 “桶 ”中发生了500次执行，</span></span><br><span class="line"><span class="meta">                // 那么该 “桶” 中只保留 最后的100次执行的统计。另外，增加该值的大小将会增加内存量的消耗，并增加排序百分位数所需的计算时间。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;metrics.rollingPercentile.bucketSize&quot;, value = &quot;100&quot;),</span></span><br><span class="line"><span class="meta">                // 该属性用来设置采集影响断路器状态的健康快照（请求的成功、 错误百分比）的间隔等待时间。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;metrics.healthSnapshot.intervalinMilliseconds&quot;, value = &quot;500&quot;),</span></span><br><span class="line"><span class="meta">                // 是否开启请求缓存</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;requestCache.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                // HystrixCommand的执行和事件是否打印日志到 HystrixRequestLog 中</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;requestLog.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        &#125;,</span></span><br><span class="line"><span class="meta">        threadPoolProperties = &#123;</span></span><br><span class="line"><span class="meta">                // 该参数用来设置执行命令线程池的核心线程数，该值也就是命令执行的最大并发量</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;coreSize&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                // 该参数用来设置线程池的最大队列大小。当设置为 -1 时，线程池将使用 SynchronousQueue 实现的队列，</span></span><br><span class="line"><span class="meta">                // 否则将使用 LinkedBlockingQueue 实现的队列。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;maxQueueSize&quot;, value = &quot;-1&quot;),</span></span><br><span class="line"><span class="meta">                // 该参数用来为队列设置拒绝阈值。 通过该参数， 即使队列没有达到最大值也能拒绝请求。</span></span><br><span class="line"><span class="meta">                // 该参数主要是对 LinkedBlockingQueue 队列的补充,因为 LinkedBlockingQueue</span></span><br><span class="line"><span class="meta">                // 队列不能动态修改它的对象大小，而通过该属性就可以调整拒绝请求的队列大小了。</span></span><br><span class="line"><span class="meta">                @HystrixProperty(name = &quot;queueSizeRejectionThreshold&quot;, value = &quot;5&quot;),</span></span><br><span class="line"><span class="meta">        &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">strConsumer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello 2020&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">str_fallbackMethod</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;*****fall back str_fallbackMethod&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hystrix工作流程"><a href="#hystrix工作流程" class="headerlink" title="hystrix工作流程"></a>hystrix工作流程</h2><p>Hystrix工作流程：<a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></p><p>官网图例：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135661.png" alt="image.png"></p><p>步骤说明：</p><ul><li>创建 HystrixCommand（用在依赖的服务返回单个操作结果的时候） 或 HystrixObserableCommand（用在依赖的服务返回多个操作结果的时候） 对象</li><li>命令执行。其中 HystrixComand 实现了下面前两种执行方式；而 HystrixObservableCommand 实现了后两种执行方式：execute()：同步执行，从依赖的服务返回一个单一的结果对象， 或是在发生错误的时候抛出异常。queue()：异步执行， 直接返回 一个Future对象， 其中包含了服务执行结束时要返回的单一结果对象。observe()：返回 Observable 对象，它代表了操作的多个结果，它是一个 Hot Obserable（不论 “事件源” 是否有 “订阅者”，都会在创建后对事件进行发布，所以对于 Hot Observable 的每一个 “订阅者” 都有可能是从 “事件源” 的中途开始的，并可能只是看到了整个操作的局部过程）。toObservable()： 同样会返回 Observable 对象，也代表了操作的多个结果，但它返回的是一个Cold Observable（没有 “订阅者” 的时候并不会发布事件，而是进行等待，直到有 “订阅者” 之后才发布事件，所以对于 Cold Observable 的订阅者，它可以保证从一开始看到整个操作的全部过程）</li><li>若当前命令的请求缓存功能是被启用的， 并且该命令缓存命中， 那么缓存的结果会立即以 Observable 对象的形式返回</li><li>检查断路器是否为打开状态。如果断路器是打开的，那么Hystrix不会执行命令，而是转接到 fallback 处理逻辑（第 8 步）；如果断路器是关闭的，检查是否有可用资源来执行命令（第 5 步）</li><li>线程池&#x2F;请求队列&#x2F;信号量是否占满。如果命令依赖服务的专有线程池和请求队列，或者信号量（不使用线程池的时候）已经被占满， 那么 Hystrix 也不会执行命令， 而是转接到 fallback 处理逻辑（第8步）</li><li>Hystrix 会根据我们编写的方法来决定采取什么样的方式去请求依赖服务。HystrixCommand.run() ：返回一个单一的结果，或者抛出异常。HystrixObservableCommand.construct()： 返回一个Observable 对象来发射多个结果，或通过 onError 发送错误通知</li><li>Hystrix会将 “成功”、“失败”、“拒绝”、“超时” 等信息报告给断路器， 而断路器会维护一组计数器来统计这些数据。断路器会使用这些统计数据来决定是否要将断路器打开，来对某个依赖服务的请求进行 “熔断&#x2F;短路”</li><li>当命令执行失败的时候， Hystrix 会进入 fallback 尝试回退处理， 我们通常也称该操作为 “服务降级”。而能够引起服务降级处理的情况有下面几种：第4步： 当前命令处于”熔断&#x2F;短路”状态，断路器是打开的时候。第5步： 当前命令的线程池、 请求队列或 者信号量被占满的时候。第6步：HystrixObservableCommand.construct() 或 HystrixCommand.run() 抛出异常的时候</li><li>当Hystrix命令执行成功之后， 它会将处理结果直接返回或是以Observable 的形式返回</li></ul><p>tips：如果我们没有为命令实现降级逻辑或者在降级处理逻辑中抛出了异常， Hystrix 依然会返回一个 Observable 对象， 但是它不会发射任何结果数据， 而是通过 onError 方法通知命令立即中断请求，并通过onError()方法将引起命令失败的异常发送给调用者<br /><a href="https://blog.csdn.net/Mark42/article/details/123738225"><br /></a></p><h2 id="服务监控hystrixDashboard"><a href="#服务监控hystrixDashboard" class="headerlink" title="服务监控hystrixDashboard"></a>服务监控hystrixDashboard</h2><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a><br />1、概述</h2><p><br />除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控（Hystrix Dashboard），Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p><h2 id="2、仪表盘9001"><a href="#2、仪表盘9001" class="headerlink" title="2、仪表盘9001"></a>2、仪表盘9001</h2><p><br />新建<strong>cloud-consumer-hystrix-dashboard9001</strong></p><p>（1）pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>HystrixDashboardMain9001</code>+新注解<code>@EnableHystrixDashboard</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixDashboardMain9001</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(HystrixDashboardMain9001.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开: <a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><p><strong>所有Provider微服务提供</strong>类(8001&#x2F;8002&#x2F;8003&#x2F;800x)都需要监控依赖配置<br />3、断路器演示<br />服务监控<code>hystrixDashboard</code></p><p>（1）修改<code>hystrix-payment8001</code><br />注意:新版本Hystrix需要在主启动类<code>PaymentHystrixMain8001</code>中指定监控路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// 通用熔断器注解, 有了这个下面的`EnableHystrix`注解就不需要了</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="comment">//@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentHystrixMain8001</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(PaymentHystrixMain8001.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑</span></span><br><span class="line"><span class="comment"> * ServletRegistrationBean因为springboot的默认路径不是&quot;/hystrix.stream&quot;，</span></span><br><span class="line"><span class="comment"> * 只要在自己的项目里配置上下面的servlet就可以了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ServletRegistrationBean <span class="title function_">getServlet</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">HystrixMetricsStreamServlet</span> <span class="variable">streamServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HystrixMetricsStreamServlet</span>();</span><br><span class="line"><span class="type">ServletRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(streamServlet);</span><br><span class="line">registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> registrationBean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监控测试"><a href="#监控测试" class="headerlink" title="监控测试"></a><br />监控测试</h3><p>观察监控窗口</p><p>9001监控8001，填写监控地址：<a href="http://localhost:8001/hystrix.stream">http://localhost:8001/hystrix.stream</a><br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135706.png" alt="image.png"></p><p>测试地址：<br /><a href="http://localhost:8001/payment/circuit/1">http://localhost:8001/payment/circuit/1</a><br /><a href="http://localhost:8001/payment/circuit/-1">http://localhost:8001/payment/circuit/-1</a></p><p>上述测试通过<br />先访问正确地址，再访问错误地址，再正确地址，会发现图示断路器都是慢慢放开的<br />监控结果，成功<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070135446.png" alt="image.png"><br />监控结果，失败<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070136109.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070136781.png" alt="image.png"></p><h3 id="如何看？"><a href="#如何看？" class="headerlink" title="如何看？"></a>如何看？</h3><p><br />7色、1圈、1线</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070136224.png" alt="image.png"></p><p>1圈：<br />实心圆：共有两种含义，它通过颜色的变化代表了实例的健康程度，它的健康度从绿色&lt;黄色&lt;橙色&lt;红色递减。该实心圆除了颜色的变化之外，它的大小也会根据实例的请求流量发生变化，流量越大该实心圆就越大。所以通过该实心圆的展示，就可以在大量的实例中快速的发现故障实例和高压力实例<br />1线：<br />曲线：用来记录2分钟内流量的相对变化，可以通过它来观察到流量的上升和下降趋势。<br />整图说明：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070136452.png" alt="image.png"><br />整图说明2：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070136245.png" alt="image.png"><br />搞懂一个才能看懂复杂的：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070136230.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务限流 </tag>
            
            <tag> 服务熔断 </tag>
            
            <tag> 服务隔离 </tag>
            
            <tag> 服务降级 </tag>
            
            <tag> hystrix </tag>
            
            <tag> 不推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08限流与熔断理论部分——sentinel(二)</title>
      <link href="/2022/11/07/02springcloud/08%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86%E2%80%94%E2%80%94sentinel(%E4%BA%8C)/"/>
      <url>/2022/11/07/02springcloud/08%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86%E2%80%94%E2%80%94sentinel(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="feign整合sentinel"><a href="#feign整合sentinel" class="headerlink" title="feign整合sentinel"></a>feign整合sentinel</h1><p>大体步骤：</p><ol><li>开启feign的sentinel功能</li><li>确实失败后的降级规则，有两种方案<ol><li>FallbackClass，无法对远程调用的异常做处理</li><li>FallbackFactory，可以对远程调用异常进行处理</li></ol></li></ol><p>首先实现<code>FallbackFactory</code></p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务限流 </tag>
            
            <tag> 服务熔断 </tag>
            
            <tag> sentinel </tag>
            
            <tag> 服务隔离 </tag>
            
            <tag> 服务降级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07限流与熔断理论部分——sentinel(一)</title>
      <link href="/2022/11/07/02springcloud/07%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86%E2%80%94%E2%80%94sentinel(%E4%B8%80)/"/>
      <url>/2022/11/07/02springcloud/07%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86%E2%80%94%E2%80%94sentinel(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是熔断器？"><a href="#什么是熔断器？" class="headerlink" title="什么是熔断器？"></a>什么是熔断器？</h1><blockquote><p>限流在前面的章节已经知道了，现在谈谈熔断器</p></blockquote><p><strong>熔断器起的作用就是在特定的场景下关掉当前的通路，从而起到保护整个系统的效果</strong></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129007.png" alt="image.png"></p><blockquote><p>这张图需要注意的是，绿色表示接通电路或者服务健康，红色表示熔断或者服务负载</p></blockquote><p>一次服务请求访问可能需要涉及到 服务A 而 服务A 又需要 服务B，C，D 三个服务器提供支持（<strong>微服务链路</strong>），如果 服务D 负载，请求延迟过高导致该请求阻塞等待服务D的响应<br />又请求的线程是珍贵资源，有限的，如果不将服务D熔断掉，并立即反馈失败，线程将被全部占用。<br />这种情况国内较雪崩效应（去你丫的雪崩效应），国外叫 cascading failures（<strong>级联故障</strong>）</p><blockquote><p>吐槽国内某些<strong>砖家</strong>别的不会，<strong>争KPI搞高大上的名字最牛</strong> 国内好像是2012年企鹅某高官首先提出的新名字<br>我当初学习的时候，就一直纠结微服务链路故障怎么就跟雪崩效应联系在一起了？雪崩效应不是加密算法的一种理想属性么？</p></blockquote><p>而熔断器就是为了防止出现级联故障而存在的。。。</p><h1 id="功能对比"><a href="#功能对比" class="headerlink" title="功能对比"></a>功能对比</h1><p>市面上的断路器就三种： Sentinel、Hystrix、resilience4j<br />其中前文说过的，Hystrix已经进入维护，基本不考虑使用了<br />而resilience4j国外推荐的比较多，国内主要使用阿里的Sentinel</p><table><thead><tr><th></th><th>Sentinel</th><th>Hystrix(维护状态)</th><th>Resilience4j（Spring推荐）</th></tr></thead><tbody><tr><td>开发者</td><td>alibaba</td><td>Netflix</td><td>独立</td></tr><tr><td>隔离策略</td><td>信号量隔离（并发线程数限流）</td><td>线程池隔离&#x2F;信号量隔离</td><td>信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于响应时间、异常比率、异常数基于异常比率</td><td>基于异常比率</td><td>基于异常比率、响应时间</td></tr><tr><td>实时统计实现</td><td>滑动窗口（LeapArray）</td><td>滑动窗口（基于 RxJava）</td><td>Ring Bit Buffer</td></tr><tr><td>动态规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td><td>有限支持</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td><td>接口的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td><td>Rate Limiter</td></tr><tr><td>流量整形</td><td>支持预热模式、匀速器模式、预热排队模式</td><td>不支持</td><td>简单的 Rate Limiter 模式</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>控制台</td><td>提供开箱即用的控制台，可配置规则、查看秒级监控、机器发现等</td><td>简单的监控查看</td><td>不提供控制台，可对接其它监控系统</td></tr></tbody></table><p>我们主要学习 sentinel<br />从：</p><ol><li>Sentinel是什么？</li><li>Sentinel有什么用？</li><li>怎么用sentinel？</li><li>sentinel如何实现？（底层实现）</li></ol><h1 id="sentinel限流框架"><a href="#sentinel限流框架" class="headerlink" title="sentinel限流框架"></a>sentinel限流框架</h1><h2 id="sentinel是什么？"><a href="#sentinel是什么？" class="headerlink" title="sentinel是什么？"></a>sentinel是什么？</h2><p>Sentinel 是<strong>面向分布式服务架构的流量控制组件</strong>，主要以流量为切入点，从限流、流量整形、熔断降级、系统负载保护、热点防护等多个维度来帮助开发者保障微服务的稳定性。</p><h2 id="Sentinel有功能？"><a href="#Sentinel有功能？" class="headerlink" title="Sentinel有功能？"></a>Sentinel有功能？</h2><p>Hystrix 主要是隔离和熔断，但是 Sentinel 侧重于</p><ul><li>多样化的流量控制</li><li>熔断降级</li><li>系统负载保护</li><li>实时监控和控制台</li></ul><blockquote><p>记住，限流和降级都是以保护核心业务为目的的策略，除核心外的业务在一定阈值内保证可用。</p></blockquote><h3 id="什么是流量控制？"><a href="#什么是流量控制？" class="headerlink" title="什么是流量控制？"></a>什么是流量控制？</h3><p>对随机到来的请求，sentinel根据系统处理能力对流量进行规整。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129677.png" alt="image.png"></p><p>sentinel将java应用的任何内容认为是<strong>资源</strong>（比如：应用程序提供的服务、应用程序调用其他应用提供的服务、甚至是一段代码），然后在资源外边围绕一圈<strong>规则</strong>（流量控制规则、熔断降级规则或系统保护规则）以保护资源，并且所有规则都可以实时动态调整。</p><h3 id="什么是sentinel的熔断降级？"><a href="#什么是sentinel的熔断降级？" class="headerlink" title="什么是sentinel的熔断降级？"></a>什么是sentinel的熔断降级？</h3><p>sentinel的熔断降级实现方式和 Hystrix 的实现不同。<br />Hystrix通过线程隔离实现对资源的隔离，这样的好处在于比较彻底，缺点也很明显线程池线程过多导致线程上下文切换频繁，还需要预先设定线程池大小。<br />Sentinel的实现方式就有两种思路：</p><ol><li>对每个资源设定一个阈值，如果该资源阻塞导致线程数量超过该阈值，资源就会拒绝新的请求，直到该资源的线程完成任务之后，才可以重新接受新的线程。这种方式的好处在于，不会有频繁的线程上下文切换，也不需要事先设定好线程池的大小，只要累计堆积线程的数量就行。</li><li>对资源进行定时。Sentinel 通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</li></ol><blockquote><p><strong>Hystrix的线程隔离</strong>：针对不同的资源分别创建不同的线程池，不同服务调用都发生在不同的线程池中，在线程池排队、超时等阻塞情况时可以快速失败，并可以提供 fallback 机制。线程池隔离的好处是隔离度比较高，可以针对某个资源的线程池去进行处理而不影响其它资源，但是代价就是线程上下文切换的 overhead 比较大，特别是对低延时的调用有比较大的影响。</p></blockquote><h3 id="系统自适应保护"><a href="#系统自适应保护" class="headerlink" title="系统自适应保护"></a>系统自适应保护</h3><p>sentinel会保持外部流量和内部系统处理能力之间的平衡。在分布式系统中，如果某个资源已经负载，分布式系统就会将该次请求转发给其他资源，但其他资源正好也在边缘状态，此时就会导致两个资源都会负载，导致集群不可用。针对这个情况，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p><h1 id="怎么安装sentinel控制台？"><a href="#怎么安装sentinel控制台？" class="headerlink" title="怎么安装sentinel控制台？"></a>怎么安装sentinel控制台？</h1><h2 id="什么是Sentinel-控制台？"><a href="#什么是Sentinel-控制台？" class="headerlink" title="什么是Sentinel 控制台？"></a>什么是Sentinel 控制台？</h2><p>Sentinel 提供一个轻量级的开源控制台，它提供机器发现以及健康情况管理、监控（单机和集群），规则管理和推送的功能。</p><p>Sentinel 控制台包含如下功能:<br />查看机器列表以及健康情况：收集 Sentinel 客户端发送的心跳包，用于判断机器是否在线。<br />监控 (单机和集群聚合)：通过 Sentinel 客户端暴露的监控 API，定期拉取并且聚合应用监控信息，最终可以实现秒级的实时监控。<br />规则管理和推送：统一管理推送规则。<br />鉴权：生产环境中鉴权非常重要。这里每个开发者需要根据自己的实际情况进行定制。</p><blockquote><p>注意：Sentinel 控制台目前仅支持单机部署。Sentinel 控制台项目提供 Sentinel 功能全集示例，不作为开箱即用的生产环境控制台，不提供安全可靠保障。若希望在生产环境使用请根据文档自行进行定制和改造。</p></blockquote><h2 id="启动控制台"><a href="#启动控制台" class="headerlink" title="启动控制台"></a>启动控制台</h2><ol><li>下载 <code>sentinel</code>jar 包 <a href="https://github.com/alibaba/Sentinel/releases">sentinel笔者使用的是1.8.5版本</a></li><li>启动控制台<code>java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar</code></li><li>访问<code>[http://localhost:8080/](http://localhost:8080/)</code></li></ol><blockquote><p>其中 <code>-Dserver.port=8080</code> 用于指定 Sentinel 控制台端口为 <code>8080</code>。<br>从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的登录功能，默认用户名和密码都是 <code>sentinel</code>。<br>用户可以通过如下参数进行配置：<br><code>-Dsentinel.dashboard.auth.username=sentinel</code> 用于指定控制台的登录用户名为 <code>sentinel</code>；<br><code>-Dsentinel.dashboard.auth.password=123456</code> 用于指定控制台的登录密码为 <code>123456</code>；如果省略这两个参数，默认用户和密码均为 <code>sentinel</code>；<br><code>-Dserver.servlet.session.timeout=7200 </code>用于指定 Spring Boot 服务端 session 的过期时间，如 <code>7200 </code>表示 <code>7200 秒</code>；<code>60m</code> 表示 <code>60 分钟</code>，<strong>默认为 30 分钟</strong>；<br>同样也可以直接在 <code>Spring properties</code> 文件中进行配置。<br>注意：部署多台控制台时，<code>session </code>默认不会在各实例之间共享，这一块需要自行改造。</p></blockquote><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><code>cloudalibaba-sentinel-service8401</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.alibaba;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelMainApp8401</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(SentinelMainApp8401.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.alibaba.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlowLimitController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/testA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testA</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;------testA&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/testB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testB</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;------testB&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目后，我们不会看到 <code>cloudalibaba-sentinel-service</code>这个项目出现在sentinel控制台左侧</p><p>sentinel控制台是懒加载的，如果不访问一次，控制台就不会主动去捕获信息</p><p>需要主动一次访问：<a href="http://localhost:8401/testA">http://localhost:8401/testA</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129985.png" alt="image.png"></p><h1 id="sentinel控制台详情"><a href="#sentinel控制台详情" class="headerlink" title="sentinel控制台详情"></a>sentinel控制台详情</h1><h2 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h2><p><code>sentinel</code>默认监控的是<code>SpringMVC</code>的<code>Mapping</code>也就是我们常说的 <code>controller</code> 层，<code>sentinel</code>将这视为<strong>资源</strong>。</p><p>簇点链路显示了那些被sentinel视为资源的地址，如下图：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129454.png" alt="image.png"></p><blockquote><p>注意: 簇点链路监控是内存态的信息，它仅展示启动后调用过的资源。所以如果打开 <code>sentinel </code>控制台后发现这里没有我们需要的资源，比如：<code>testA</code>，可以在浏览器上访问一次，就会出现了</p></blockquote><p>我们可以为 testA 资源添加流控：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129115.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129770.png" alt="image.png"></p><p>接着我们下载JMeter工具。该工具主要用来发送请求使用。</p><blockquote><p>打开工具后会发现全是英文，如果阅读比较困难可以打开【option】——【choose language】选择简体中文即可</p></blockquote><p>现在开始模拟多客户访问网站</p><ol><li>创建【测试计划】。点击【文件】——【新建】，还可以修改下名称【sentinel测试计划】——<code>ctrl+s</code>保存，选择存储路径即可。</li><li>右键【sentinel测试计划】——【添加】——【线程】——【线程组】——<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129101.png" alt="image.png"></li><li>创建http请求<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129181.png" alt="image.png"></li><li>添加路径：<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129578.png" alt="image.png"></li><li>添加结果树：<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129715.png" alt="image.png"></li><li>直接启动</li><li>打开结果树：<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129889.png" alt="image.png"></li></ol><blockquote><p>我们的中线程数为：20，两秒内执行完，qps计算可得：20&#x2F;2&#x3D;10，明显大于我们设定的qps&#x3D;5</p></blockquote><h2 id="流控规则的模式"><a href="#流控规则的模式" class="headerlink" title="流控规则的模式"></a>流控规则的模式</h2><p>流控模式有三种：</p><ol><li>直接：统计当前资源的请求，触发阈值时限流，比如上面我们访问 <code>/testA</code>资源一样</li><li>关联：统计关联资源(<code>B</code>)的请求，触发阈值时限流<code>A</code>，简单点说就是统计<code>B</code>限流<code>A</code></li><li>链路：统计指定链路访问到本资源的请求，触发阈值，限流整个链路</li></ol><h3 id="关联的使用场景"><a href="#关联的使用场景" class="headerlink" title="关联的使用场景"></a>关联的使用场景</h3><p>它的单元是 接口，讲的是 接口与接口之间 的关联关系</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129171.png" alt="image.png"><br />用户有无数个请求访问 <code>/textA</code> 和 <code>/textB</code>，他们之间共同竞争 <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070129676.png" alt="image.png"><br />现在我们要保证 <code>/textB</code>能够得到尽量多的资源要怎么做？</p><p>非常简单。</p><ol><li>我们假设<code>/textB</code>更加重要（根据实际项目判定那个资源更加重要）</li><li>之后再对 <code>/textA</code>限流</li><li>然后sentinel就会统计 <code>/textB</code>是否超出阈值，来限流<code>/textA</code>，从而让出更多的<strong>数据库某表</strong>给<code>textB</code>访问</li></ol><blockquote><p>超出表示<code>/textB</code>现在需要更多的资源，此时就需要让<code>testA</code>让出更多的请求</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130541.png" alt="image.png"></p><p><strong>关联的使用场景：</strong></p><ol><li><strong>两个资源有竞争关系</strong></li><li><strong>一个优先级高，一个优先级低</strong></li><li><strong>需要保证其中 一个重要的请求获得更多的资源</strong></li></ol><p>添加代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;query&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;查看订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;更新订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130379.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130028.png" alt="image.png"></p><blockquote><p>需要注意这里是<code>put</code>请求不是<code>get</code></p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130712.png" alt="image.png"></p><p>访问：<a href="http://localhost:8401/query">http://localhost:8401/query</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130124.png" alt="image.png"></p><p>可以看到 <code>query</code>请求被限流</p><h3 id="链路的使用场景"><a href="#链路的使用场景" class="headerlink" title="链路的使用场景"></a>链路的使用场景</h3><p>链路的单元是一条调用链，讲的是调用链之间的关系</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130416.png" alt="image.png"></p><p>在上面的调用链路中，作为入口的 <code>testA</code>和<code>testC </code>最终都会调用到<code>goods</code>资源</p><p>现在的问题是哪个调用链路的重要性较高，假设 <code>testC </code>调用链路重要性更加重要<br />那么就需要在 sentinel 控制台中添加以 <code>testA</code>作为入口的调用链路<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130316.png" alt="image.png"></p><ol><li><strong>两个链路（或者多条）</strong></li><li><strong>一个链路优先级高，另一个链路优先级低</strong></li><li><strong>两个链路有相交的资源</strong></li></ol><p>还是支付和查询订单，这两个业务都需要在底层调用<code>OrderService</code>的查询订单信息方法。<br />但是我们知道 sentinel 默认监控 SpringMVC 的 <code>Mapping</code><br />所以我们可以在<code>OrderService</code>方法上面添加<code>SentinelResource</code>注解，将方法标记为 <strong>资源</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">queryOrder</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;goods&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryOrder</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;查询订单&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;query&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">orderService.queryOrder();</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;查看订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">orderService.queryOrder();</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;更新订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们访问下链接</p><p>但是我们发现还是只有一个链路：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130339.png" alt="image.png"></p><p>这是有问题的，官网也说了，<code>application.yml</code>需要添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">web-context-unify:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>再次试试</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130641.png" alt="image.png"><br />这样我们就能看到两棵不同的树</p><p>接着我们给 goods 资源添加流控</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130781.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130670.png" alt="image.png"></p><blockquote><p>注意这里的qps是2</p></blockquote><p>添加jmeter<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130231.png" alt="image.png"> <br /><code>qps=4</code><br />然后添加两个 http 请求：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130303.png" alt="image.png"></p><p>访问：<a href="http://localhost:8401/query">http://localhost:8401/query</a><br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130130.png" alt="image.png"></p><p>jmeter也报错：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130309.png" alt="image.png"></p><h2 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h2><p>流控效果是请求达到流量阈值是所采取的策略是什么？</p><ul><li>快速失败：达到阈值，新的请求将被拒绝并抛出FlowException异常（默认）</li><li>预热模式（warm up）：对超出阈值的请求也会抛出异常，但是这种默认的阈值是动态的，会慢慢的将阈值调高直到最大阈值为止</li><li>排队等待：让所有的请求按照先后顺序排序，每个请求的间隔不能小于指定时间</li></ul><h3 id="预热模式"><a href="#预热模式" class="headerlink" title="预热模式"></a>预热模式</h3><p>预热模式下，需要设置<strong>qps阈值</strong>和<strong>预热时长</strong><br />这里我们设置 qps &#x3D; 10 预热时长 &#x3D; 5<br />这样 sentinel 将在不需要预热是 qps 保持为 10 &#x2F; 3 &#x3D; 3<br />这里的除数是 sentinel 内部默认值 3 <br />预热请求超出qps &#x3D; 3 则 sentinel 会逐步预热，直到5秒后的最大值，中间会拒绝掉部分请求</p><p>这就是预热模式</p><blockquote><p>threshold &#x2F; coldFactor &#x3D; 初始qps<br>coldFactor默认值为 3<br>threshold是最大qps</p></blockquote><p>设置jmeter：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070130001.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131980.png" alt="image.png"></p><p>起步就是 3 qps</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131769.png" alt="image.png"><br />可以看到成功的请求逐渐变高</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>预热模式的使用场景一般是秒杀活动</p><h2 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h2><p>热点：统计访问数量较大的节点<br />参数：针对参数<br />限流：使用的操作</p><p>说白了，就是<strong>分别统计参数值相同的请求，判断是否超出QPS阈值。</strong></p><p>如果不懂，还可以看下下面这张图示</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131993.png" alt="image.png"></p><p>sentinel对热点参数限流为 QPS &#x3D; 5，然后总共发了 18 个请求，其中10个请求是非热点接口的，所以可以不看</p><p>热点请求有8个<br />参数 axb 的请求在一秒钟发生了5次，大于等于qps阈值5，所以将被阻塞<br />参数 abc 的请求在一秒内发生了3次，没有超出阈值，请求通过。</p><p>还可以使用 sentinel控制台再次说明：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131543.png" alt="image.png"><br />如上图所示，我们设置了资源<code>hot</code><br />参数索引为 0 表示 <code>hot</code>接口的第一个参数<br />单机阈值为5，统计窗口时长为1，表示1秒内<strong>相同参数</strong>额请求数不能超过5个</p><p>比如 <code>hot?id=1</code>请求在一秒的时间内发起了10次，那么请求就会被阻塞</p><blockquote><p>此时前面的那一秒时间可能还发起了别的请求，比如<code>hot?id=2</code>发起了3次，此时并不会阻塞，虽然接口相同，但参数不同<br>热点参数限流针对的颗粒度是 接口+参数，接口相同，参数不同，意味着不同的请求，不会被 热点参数限流规则 统计</p></blockquote><h3 id="在springboot中试试"><a href="#在springboot中试试" class="headerlink" title="在springboot中试试"></a>在springboot中试试</h3><p>添加代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;hot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hot</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;热点参数: &quot;</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后设置 jmeter：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131898.png" alt="image.png"></p><p><code>id=1</code>配置的线程组是<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131199.png" alt="image.png"></p><p><code>id=2</code>配置的线程组是<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131808.png" alt="image.png"></p><p>同时启动两个线程组，结果发现全部都是成功，没有限流效果？<br />限流不成功？</p><p>其原因很简单，SpringMVC的<code>@Controller</code>注解的资源不被<strong>热点流量限流</strong>发现<br />需要主动给他们添加注解<code>@SentinelResource(&quot;hot&quot;)</code></p><blockquote><p>注意了。热点参数限流默认对SpringMVC资源无效。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;hot&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(&quot;hot&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hot</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;热点参数: &quot;</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131783.png" alt="image.png"><br />添加【热点规则】</p><p><code>id=1</code>结果<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131438.png" alt="image.png">，部分成功</p><p><code>id=2</code>结果<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131533.png" alt="image.png">，全部成功</p><p>说明 <code>id=1</code>和 <code>id=2</code>同时启动，不会产生任何的相互影响</p><h3 id="参数例外项"><a href="#参数例外项" class="headerlink" title="参数例外项"></a>参数例外项</h3><p>热点限流，对该接口的热点参数进行限流，但需要有例外情况。<br />也就是说这个参数需要进行特殊处理，即便它是热点参数，但不能也不需要限流。</p><p>比如：某款包款热卖利润极其高的商品，我们就不能进行热点参数限流。<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131094.png" alt="image.png"></p><p>上图我们重新设置了 <code>id=10</code>的这款热点商品的例外项，将其<code>qps</code>上调到每秒10个请求。</p><p>添加jmeter测试：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131787.png" alt="image.png"><br /><a href="http://localhost:8401/hot?id=10">http://localhost:8401/hot?id=10</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131109.png" alt="image.png"></p><h2 id="“实时监控”汇总资源信息（集群聚合）"><a href="#“实时监控”汇总资源信息（集群聚合）" class="headerlink" title="“实时监控”汇总资源信息（集群聚合）"></a>“实时监控”汇总资源信息（集群聚合）</h2><p>同时，同一个服务下的所有机器的簇点信息会被汇总，并且秒级地展示在”实时监控”下。<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131064.png" alt="image.png"></p><blockquote><p>注意: 实时监控仅存储 5 分钟以内的数据，如果需要持久化，需要通过调用<a href="https://github.com/alibaba/Sentinel/wiki/%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7">实时监控接口</a>来定制。</p></blockquote><blockquote><p>注意：请确保 Sentinel 控制台所在的机器时间与自己应用的机器时间保持一致，否则会导致拉不到实时的监控数据。</p></blockquote><h2 id="规则管理及推送"><a href="#规则管理及推送" class="headerlink" title="规则管理及推送"></a>规则管理及推送</h2><blockquote><p>本页面相关文档在 ：</p></blockquote><blockquote><p>sentinel默认使用的是原始模式，这种模式的配置只保存在内存中，在测试环境可以用用，但是在生产环境就不能这么玩了</p></blockquote><p>Sentinel 控制台同时提供简单的规则管理以及推送的功能。规则推送分为 3 种模式，包括 “原始模式”、”Pull 模式” 和”Push 模式”。<br />这里先简单的介绍”原始模式”。</p><p>sentinel默认是原始模式，该模式API 将规则推送至客户端并直接更新到内存中，简单，无任何依赖，但不保证一致性；<strong>规则保存在内存中，重启即消失。严重不建议用于生产环境</strong></p><p>DataSource 接口给我们提供了对接任意配置源的能力。相比直接通过 API 修改规则，实现 DataSource 接口是更加可靠的做法。<br />我们推荐通过控制台设置规则后将规则推送到统一的规则中心，客户端实现 ReadableDataSource 接口端监听规则中心实时获取变更，流程如下：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131832.png" alt="image.png"><br />DataSource 扩展常见的实现方式有:</p><ul><li>拉模式：客户端主动向某个规则管理中心定期轮询拉取规则，这个规则中心可以是 RDBMS、文件，甚至是 VCS 等。这样做的方式是简单，缺点是无法及时获取变更；</li><li>推模式：规则中心统一推送，客户端通过注册监听器的方式时刻监听变化，比如使用 Nacos、Zookeeper 等配置中心。这种方式有更好的实时性和一致性保证。</li></ul><p>Sentinel 目前支持以下数据源扩展：</p><ul><li>Pull-based: 动态文件数据源、Consul, Eureka</li><li>Push-based: ZooKeeper, Redis, Nacos, Apollo, etcd</li></ul><h2 id="拉模式"><a href="#拉模式" class="headerlink" title="拉模式"></a>拉模式</h2><p>pull 模式的数据源（如本地文件、RDBMS 等）一般是可写入的。使用时需要在客户端注册数据源：将对应的读数据源注册至对应的 RuleManager，将写数据源注册至 transport 的 WritableDataSourceRegistry 中。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070131305.webp"></p><p>首先 Sentinel 控制台通过 API 将规则推送至客户端并更新到内存中，接着注册的写数据源会将新的规则保存到本地的文件中。使用 pull 模式的数据源时一般不需要对 Sentinel 控制台进行改造。这种实现方法好处是简单，坏处是无法保证监控数据的一致性。</p><p>实现拉模式的数据源最简单的方式是继承 <code>AutoRefreshDataSource </code>抽象类，然后实现 <code>readSource()</code> 方法，在该方法里从指定数据源读取字符串格式的配置数据。比如 <a href="https://github.com/alibaba/Sentinel/blob/master/sentinel-demo/sentinel-demo-dynamic-file-rule/src/main/java/com/alibaba/csp/sentinel/demo/file/rule/FileDataSourceDemo.java">基于文件的数据源</a>。</p><h1 id="隔离和降级"><a href="#隔离和降级" class="headerlink" title="隔离和降级"></a>隔离和降级</h1><p>服务之间是相互依赖的，虽然限流可以保证服务不会因高并发产生异常，但无法保证服务不会因为其他原因而产生故障。所以需要其他手段将这些故障控制台一定的范围内，防止服务级联故障（服务雪崩）。</p><p>而这些手段大体上包括这几种：</p><ul><li>线程隔离：给每个服务专门提供一个线程池，线程池线程数量不能太高。这样出现问题 ，也仅仅只会有部分线程被阻塞。不会导致服务级联故障。</li><li>熔断：判断服务的故障率，根据故障情况，对该服务进行熔断。下次请求再次访问到该服务时，就会被立即返回。</li><li>限流：通过对并发访问进行限速，保证其他功能拿到更多的系统资源。</li></ul><blockquote><p>需要注意：降级是限流的一种行为（方案）</p></blockquote><p>限流的方案：</p><ul><li>拒绝服务：最简单的方式，把多余的请求直接拒绝掉。做的高大上一些，可以根据一定的用户规则进行拒绝策略。</li><li>服务降级：降级甚至关掉后台的某些服务。在服务必定出现高并发的情况下，比如双11。可以预先停止掉部分不重要的服务，并将部分强一致性的服务修改为最终一致性。（需要对业务有一定的了解）【弃卒保帅】</li><li>特权请求： 在多租户或者对用户进行分级时，可以考虑让一些特殊的用户有限处理，其他的可以考虑干掉</li><li>延迟处理：可以利用队列把请求缓存住。削峰填谷。</li></ul><blockquote><p>从上面提供的方案我们可以发现，都是对服务的调用方进行某种操作以保证服务高可用。服务的调用方也就是客户端在springcloud中一般使用feign进行调用，所以对于SpringCloud整合Sentinel，就需要对feign进行操作</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务限流 </tag>
            
            <tag> 服务熔断 </tag>
            
            <tag> sentinel </tag>
            
            <tag> 服务隔离 </tag>
            
            <tag> 服务降级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06限流与熔断理论部分</title>
      <link href="/2022/11/07/02springcloud/06%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86/"/>
      <url>/2022/11/07/02springcloud/06%E9%99%90%E6%B5%81%E4%B8%8E%E7%86%94%E6%96%AD%E7%90%86%E8%AE%BA%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="限流的目的（作用）"><a href="#限流的目的（作用）" class="headerlink" title="限流的目的（作用）"></a>限流的目的（作用）</h1><p>限流是保证最大限度为用户提供服务的手段之一</p><p>限流通过限制并发访问量或者一定窗口期内允许的请求量来保护系统，一旦达到限流量将会走相应的拒绝策略，比如：跳转的相对温和的拒绝页面拒绝请求、进入排队系统、降级等</p><p>总而言之，<strong>限流就是损失部分用户的可用性，为绝大多数用户提供稳定的服务。</strong></p><blockquote><p><strong>限流的核心：保护全部核心业务，损失部分一般业务。</strong></p></blockquote><h1 id="限流的实现方法"><a href="#限流的实现方法" class="headerlink" title="限流的实现方法"></a>限流的实现方法</h1><p>现在几乎无处不在：</p><ul><li>在Nginx层添加限流模块，限制平均访问速度</li><li>通过设置数据库连接池的大小总并发量</li><li>通过Guava提供的Ratelimiter限制接口的访问速度</li><li>TCP通讯协议的限流整形</li></ul><p>以此诞生和很多非常优秀的限流方法</p><h2 id="计数器固定窗口算法"><a href="#计数器固定窗口算法" class="headerlink" title="计数器固定窗口算法"></a>计数器固定窗口算法</h2><p>在执行时间周期内，每发生一次访问就累计一次，直到累计值达到限流上限，触发限流拒绝策略，当进入下一次时间周期时，重置限流计数累计值。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>但这种限流算法存在问题。。。</p><p>假设我们的时钟周期是 2s ，限流是 100</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070125860.png" alt="image.png"></p><p>如上图所示，在短短不到 1s 的时间内连续发生了 200 次突然的访问</p><p>超出系统能够提供的并发请求量</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>为了更好的观察到限流的情况，我们对限流需求进行了修改</p><p>2s 只能通过 2次 请求，共有10个请求，每个请求间隔 250ms </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.simplewindow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器固定窗口算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimiterSimpleWindow</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每秒阈值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">QPS</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间窗口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">TIME_WINDOWS</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计数器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">REQ_COUNT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 窗口计算开始时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">START_TIME</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ((System.currentTimeMillis() - START_TIME) &gt; TIME_WINDOWS) &#123;</span><br><span class="line">REQ_COUNT.set(<span class="number">0</span>);</span><br><span class="line">START_TIME = System.currentTimeMillis();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> REQ_COUNT.incrementAndGet() &lt;= QPS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">TimeUnit.MILLISECONDS.sleep(<span class="number">250</span>);</span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line"><span class="keyword">if</span> (tryAcquire()) &#123;</span><br><span class="line">System.out.println(now + <span class="string">&quot; do something&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(now + <span class="string">&quot; 被限流了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">18:48:32.459501800 <span class="keyword">do</span> something</span><br><span class="line">18:48:32.743208100 <span class="keyword">do</span> something</span><br><span class="line">18:48:32.999056300 被限流了</span><br><span class="line">18:48:33.251895600 被限流了</span><br><span class="line">18:48:33.504932600 被限流了</span><br><span class="line">18:48:33.756792300 被限流了</span><br><span class="line">18:48:34.009640500 被限流了</span><br><span class="line">18:48:34.262830700 <span class="keyword">do</span> something</span><br><span class="line">18:48:34.523701700 <span class="keyword">do</span> something</span><br><span class="line">18:48:34.791088100 被限流了</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="滑动窗口算法"><a href="#滑动窗口算法" class="headerlink" title="滑动窗口算法"></a>滑动窗口算法</h2><p>滑动窗口算法<strong>降低了</strong>计算器固定窗口算法的两倍_阈值_问题。</p><p>大体思路很简单，将 1s 的时间分段，分成更细颗粒度的时间单位，比如分成 4 分，如此原本的 1s 限流 100 次，变成 0.25s 限流 25次</p><p>即便出现了_阈值_问题，也仅仅是多了 25 次请求。125次请求也比200次请求要好得多</p><p>编码可以参考这张图：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070125498.png"><br />根据这张图以及对滑动窗口算法的理解，就可以写出下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.simplewindow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 滑动窗口算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimiterSlidingWindow</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 窗口大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Long</span> <span class="variable">windowSize</span> <span class="operator">=</span> <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分区</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">partition</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阈值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">qps</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存放子窗口的信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> WindowInfo[] windowsArray = <span class="keyword">new</span> <span class="title class_">WindowInfo</span>[partition];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RateLimiterSlidingWindow</span><span class="params">(Integer qps)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.qps = qps;</span><br><span class="line"><span class="type">long</span> <span class="variable">currentTimeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; windowsArray.length; i++) &#123;</span><br><span class="line">windowsArray[i] = <span class="keyword">new</span> <span class="title class_">WindowInfo</span>(currentTimeMillis, <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">currentTimeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">long</span> <span class="variable">curIndex</span> <span class="operator">=</span> currentTimeMillis % windowSize / (windowSize / partition);</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; windowsArray.length; i++) &#123;</span><br><span class="line"><span class="type">WindowInfo</span> <span class="variable">windowInfo</span> <span class="operator">=</span> windowsArray[i];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对时间的判断，判断是否超时</span></span><br><span class="line"><span class="comment"> * 这里每个子窗口的时间都是一样的 因为 currentTimeMillis 每次 tryAcquire 设置的都是相同一个值</span></span><br><span class="line"><span class="comment"> * 所以这里可以直接跟 windowSize 判断，而不是 子窗口的 windowSize / partition 单位时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> ((currentTimeMillis - windowInfo.time) &gt; windowSize) &#123;</span><br><span class="line">windowInfo.time = currentTimeMillis;</span><br><span class="line">windowInfo.getCount().set(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断子窗口的计数是否超过 qps ， 如果没有超过，则自增</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (curIndex == i &amp;&amp; windowInfo.getCount().get() &lt; qps) &#123;</span><br><span class="line">windowInfo.getCount().incrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line">sum += windowInfo.getCount().get();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最终在这里判断所有子窗口累计的次数和是否超过 qps 的次数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> sum &lt;= qps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">WindowInfo</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Long time;</span><br><span class="line"><span class="keyword">private</span> AtomicInteger count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">WindowInfo</span><span class="params">(Long time, AtomicInteger count)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.time = time;</span><br><span class="line"><span class="built_in">this</span>.count = count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">getTime</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTime</span><span class="params">(Long time)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.time = time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> AtomicInteger <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">success</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">RateLimiterSlidingWindow</span> <span class="variable">limiterSlidingWindow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RateLimiterSlidingWindow</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">Thread.sleep(<span class="number">300</span>);</span><br><span class="line"><span class="keyword">if</span> (limiterSlidingWindow.tryAcquire()) &#123;</span><br><span class="line">success++;</span><br><span class="line">System.err.println(<span class="string">&quot;访问成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;访问失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;实测成功次数：&quot;</span> + success);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里看代码可以计算出大致的成功次数：<br />20 次请求， 每次请求需要等待 300ms 所以需要 6000 ms 也就是 6s<br />而每次的 qps 的次数是 2， 所以大致可以访问 12 次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">访问成功</span><br><span class="line">访问成功</span><br><span class="line">访问失败</span><br><span class="line">访问成功</span><br><span class="line">访问成功</span><br><span class="line">访问失败</span><br><span class="line">访问失败</span><br><span class="line">访问成功</span><br><span class="line">访问成功</span><br><span class="line">访问失败</span><br><span class="line">访问失败</span><br><span class="line">访问成功</span><br><span class="line">访问成功</span><br><span class="line">访问失败</span><br><span class="line">访问失败</span><br><span class="line">访问成功</span><br><span class="line">访问成功</span><br><span class="line">访问失败</span><br><span class="line">访问失败</span><br><span class="line">访问成功</span><br><span class="line">实测成功次数：11</span><br><span class="line"></span><br><span class="line">进程已结束,退出代码0</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>sentinel 就是使用的这种算法实现的限流</p></blockquote><p>缺点：<br />这种方式无法处理突发情况，比如段时间内爆发大量的流量，此时将会有大量请求被拒绝</p><h2 id="滑动日志算法"><a href="#滑动日志算法" class="headerlink" title="滑动日志算法"></a>滑动日志算法</h2><p>滑动日志的方式是：使用日志记录下用户所有请求的时间，新请求到来时先判断最近指定时间范围内的请求数量是否超过指定阈值，由此来确定是否达到限流，这种方式没有了时间窗口突变的问题，限流比较准确，但是因为要记录下每次请求的时间点，所以<strong>占用的内存较多</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.simplewindow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 滑动日志方式限流</span></span><br><span class="line"><span class="comment"> * 设置 QPS 为 2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RateLimiterSildingLog</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阈值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">qps</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录请求的时间戳,和数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TreeMap&lt;Long, Long&gt; treeMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清理请求记录间隔, 60 秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">claerTime</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RateLimiterSildingLog</span><span class="params">(Integer qps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.qps = qps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 清理过期的数据老数据，最长 60 秒清理一次</span></span><br><span class="line">        <span class="keyword">if</span> (!treeMap.isEmpty() &amp;&amp; (now - treeMap.firstKey()) &gt; claerTime) &#123;</span><br><span class="line">            Set&lt;Long&gt; keySet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(treeMap.subMap(<span class="number">0L</span>, now - <span class="number">1000</span>).keySet());</span><br><span class="line">            <span class="keyword">for</span> (Long key : keySet) &#123;</span><br><span class="line">                treeMap.remove(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算当前请求次数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Long value : treeMap.subMap(now - <span class="number">1000</span>, now).values()) &#123;</span><br><span class="line">            sum += value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 超过QPS限制，直接返回 false</span></span><br><span class="line">        <span class="keyword">if</span> (sum + <span class="number">1</span> &gt; qps) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录本次请求</span></span><br><span class="line">        <span class="keyword">if</span> (treeMap.containsKey(now)) &#123;</span><br><span class="line">            treeMap.compute(now, (k, v) -&gt; v + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            treeMap.put(now, <span class="number">1L</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum &lt;= qps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">RateLimiterSildingLog</span> <span class="variable">rateLimiterSildingLog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RateLimiterSildingLog</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">250</span>);</span><br><span class="line">            <span class="type">LocalTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">            <span class="keyword">if</span> (rateLimiterSildingLog.tryAcquire()) &#123;</span><br><span class="line">                System.out.println(now + <span class="string">&quot; 做点什么&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(now + <span class="string">&quot; 被限流&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="令牌桶限流算法"><a href="#令牌桶限流算法" class="headerlink" title="令牌桶限流算法"></a>令牌桶限流算法</h2><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>令牌桶限流算法：系统会以一个恒定的速度往桶里放入令牌，而请求需要一个令牌，如果桶里没有令牌，则拒绝服务。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070125272.png"><br />令牌桶是网络流量整形（Traffic Shaping）和速率限制（Rate Limiting）中最常使用的一种算法</p><ul><li>那什么是网络流量整形和速率限制？</li></ul><p>网络流量整形借助缓冲区和令牌桶实现，保证报文能够以一定的速率发出，大体的工作方式可以借助下图实现<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070126826.png" alt="image.png"><br />如图所示，将报文的包放在下面缓存区，而上面的令牌桶以一定的效率生成令牌，每次报文想要发送前，需要获得一个令牌，这样，令牌桶就决定了报文的发送效率</p><p>假设令牌生成的效率是每秒 10 个，也就是 QPS &#x3D; 10，此时请求获取令牌时存在这么三种情况：</p><ul><li>请求速度大于令牌生成速度：那么令牌就被很快用完，后续再有请求发生，就会被限流</li><li>请求速度等于令牌生成速度：此时流量处于稳定状态</li><li>请求小于令牌生成速度：说明此时系统请求较少，请求将被稳定处理，而令牌的数量将会被限制在 max 最大值</li></ul><p>令牌桶可以处理突发请求：令牌桶是可以累积的，所以短时间内突然新增大量的请求这种情况可以被令牌桶积累的令牌处理</p><blockquote><p>需要注意：令牌桶限流算法容易和漏桶算法混淆。主要的区别在于令牌桶可以积累令牌，对付突发流量，也能保证处理的平均效率，而漏桶算法只能够强制限流</p></blockquote><p>代码可以借助这张图编写：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070126470.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.simplewindow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenBucketSmoothBursty</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 令牌桶的容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Integer capacity;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成令牌的效率</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> rate;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前令牌的数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> tokenAmount;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(Request request)</span> &#123;</span><br><span class="line">request.setHandleTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">System.out.println(request.getCode() + <span class="string">&quot;号请求被处理，请求发起时间:&quot;</span> + request.getLaunchTime() + <span class="string">&quot;,请求处理时间: &quot;</span> + request.getHandleTime() + <span class="string">&quot;, 处理耗时:&quot;</span> + (request.getHandleTime().getTime() - request.getLaunchTime().getTime()) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TokenBucketSmoothBursty</span><span class="params">(Integer capacity, <span class="type">long</span> rate)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.capacity = capacity;</span><br><span class="line"><span class="built_in">this</span>.rate = rate;</span><br><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">pool.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (tokenAmount &lt; <span class="built_in">this</span>.capacity) &#123;</span><br><span class="line"><span class="built_in">this</span>.tokenAmount++;</span><br><span class="line">System.out.println(<span class="string">&quot;tokenAmount: &quot;</span> + tokenAmount);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>, rate, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">TokenBucketSmoothBursty</span> <span class="variable">tokenBucketSmoothBursty</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TokenBucketSmoothBursty</span>(<span class="number">5</span>, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line"><span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>(i, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"><span class="keyword">if</span> (tokenBucketSmoothBursty.tryAcquire(request, TokenBucketSmoothBursty::handleRequest)) &#123;</span><br><span class="line">System.out.println(i + <span class="string">&quot;号请求被接受&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.err.println(i + <span class="string">&quot;号请求被拒绝&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(Request request, Consumer&lt;Request&gt; consumer)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (tokenAmount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">tokenAmount--;</span><br><span class="line">consumer.accept(request);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Request</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line"><span class="keyword">private</span> Date launchTime;</span><br><span class="line"><span class="keyword">private</span> Date handleTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Request</span><span class="params">(<span class="type">int</span> code, Date launchTime)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.code = code;</span><br><span class="line"><span class="built_in">this</span>.launchTime = launchTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Request</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.code = code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">getLaunchTime</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> launchTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLaunchTime</span><span class="params">(Date launchTime)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.launchTime = launchTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">getHandleTime</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> handleTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHandleTime</span><span class="params">(Date handleTime)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.handleTime = handleTime;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以使用 guava 的 <code>RateLimiter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 设置令牌桶的容量为 2， 意味着 1 秒钟只能访问 2 次</span></span><br><span class="line">    <span class="type">RateLimiter</span> <span class="variable">limiter</span> <span class="operator">=</span> RateLimiter.create(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);</span><br><span class="line">        <span class="comment">// 产生了一个令牌</span></span><br><span class="line">        System.out.println(time + <span class="string">&quot; : &quot;</span> + limiter.tryAcquire());</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">250</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏桶限流法"><a href="#漏桶限流法" class="headerlink" title="漏桶限流法"></a>漏桶限流法</h2><h3 id="是什么？-1"><a href="#是什么？-1" class="headerlink" title="是什么？"></a>是什么？</h3><p>漏桶限流算法的主要功能是：<br />控制数据注入网络的速度，以一种均速将桶内的请求一点点的放出来，平滑网络上的突发请求。<br />当请求超出桶的大小时，请求将被拒绝，走决绝策略。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070126931.png" alt="image.png"></p><blockquote><p>漏桶算法和令牌桶算法的区别在于漏桶限流算法能够拦截请求，也能够拦截突发请求，但无法处理突发的多余请求，它只能够按照程序员规定的速度一点点处理请求，而多余桶容量的请求将被抛弃或者走其他拒绝策略</p></blockquote><p>还可以直接使用 guava 提供的漏桶算法</p><h2 id="各个限流算法的比较"><a href="#各个限流算法的比较" class="headerlink" title="各个限流算法的比较"></a>各个限流算法的比较</h2><table><thead><tr><th>算法</th><th>确定参数</th><th>空间复杂度</th><th>时间复杂度</th><th>限制突发流量</th><th>平滑限流</th><th>分布式环境下实现难度</th></tr></thead><tbody><tr><td>固定窗口</td><td>计数周期T、<br />周期内最大访问数N</td><td>低O(1)<br />（记录周期内访问次数及周期开始时间）</td><td>低O(1)</td><td>否</td><td>否</td><td>低</td></tr><tr><td>滑动窗口</td><td>计数周期T、<br />周期内最大访问数N</td><td>高O(N)<br />（记录每个小周期中的访问数量）</td><td>中O(N)</td><td>是</td><td>相对实现。滑动窗口的格子划分的越多，那么滑动窗口的滚动就越平滑</td><td>中</td></tr><tr><td>漏桶</td><td>漏桶流出速度r、漏桶容量N</td><td>低O(1)<br />（记录当前漏桶中容量）</td><td>高O(N)</td><td>是</td><td>是</td><td>高</td></tr><tr><td>令牌桶</td><td>令牌产生速度r、令牌桶容量N</td><td>低O(1)<br />（记录当前令牌桶中令牌数）</td><td>高O(N)</td><td>是</td><td>是</td><td>高</td></tr></tbody></table><h2 id="服务的熔断和降低"><a href="#服务的熔断和降低" class="headerlink" title="服务的熔断和降低"></a>服务的熔断和降低</h2><h3 id="什么是服务的熔断？"><a href="#什么是服务的熔断？" class="headerlink" title="什么是服务的熔断？"></a>什么是服务的熔断？</h3><p>我们在各种场景下都会接触到熔断这两个字。高压电路中，如果某处电压过高，熔断器就会熔断，对电路进行保护。股票交易中，如果股票涨跌幅过大，也会采用熔断机制，暂停交易，来控制交易风险。</p><p>同样，在微服务架构中，熔断机制也是起着类似的作用。<strong>当调用链路中的某个微服务长时间不可用或者有延迟，响应过慢，系统就会熔断对该节点微服务的调用，快速返回错误信息。当监控到该微服务正常工作后，再次恢复该调用链路。</strong></p><h3 id="为什么需要服务的熔断？"><a href="#为什么需要服务的熔断？" class="headerlink" title="为什么需要服务的熔断？"></a>为什么需要服务的熔断？</h3><p>举个例子：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070126325.png" alt="image.png"></p><p>服务A 需要 服务 B C D </p><p>但是 服务D 出现了过载或者不可用的情况，导致 服务A 的请求阻塞等待 服务D 的响应，连带着 服务A 也出现问题。</p><p>如果还有其他服务需要用到 服务A 那么也跟着出问题，也就是所谓的服务雪崩效应</p><p>此时如果我们给每一个服务外围包裹一个熔断器，<strong>在服务可用时，闭合熔断器，在不可以使用时断开熔断器，立即告知调用方服务处于不可用状态</strong>。</p><h2 id="熔断器都有什么落地实现？"><a href="#熔断器都有什么落地实现？" class="headerlink" title="熔断器都有什么落地实现？"></a>熔断器都有什么落地实现？</h2><h3 id="Hystrix熔断器"><a href="#Hystrix熔断器" class="headerlink" title="Hystrix熔断器"></a>Hystrix熔断器</h3><p>Hystrix是一个用于处理分布式系统的<strong>延迟和容错</strong>的开源库,在分布式系统里，许多依赖不可避免的会调用失败,比如超时、异常等,<strong>Hystrix能够保证在一个依赖出问题的情况下， 不会导致整体服务失败，避免级联故障,以提高分布式系统的弹性</strong>。<strong>”断路器”本身是一种开关装置,当某个服务单元发生故障之后, 通过断路器的故障监控 (类似熔断保险丝),向调用方返回一个符合预期的、可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用,从而避免了故障在分布式系统中的蔓延，乃至雪崩。</strong></p><blockquote><p>这一段既说明了 hystrix 的作用，也说出了熔断器的作用</p></blockquote><h4 id="hystrix存在的问题"><a href="#hystrix存在的问题" class="headerlink" title="hystrix存在的问题"></a>hystrix存在的问题</h4><p>2018 年前后Netflix公司宣布其<strong>核心组件Hystrix、Ribbon、Zuul、Eureka等进入维护状态，不再进行新特性开发，只修 BUG</strong>。<br />这直接影响了Spring Cloud项目的发展路线，Spring 官方不得不采取了应对措施，在 2019 年的在 SpringOne 2019 大会中，Spring Cloud宣布 Spring Cloud Netflix 项目进入维护模式，并<strong>在 2020 年移除相关的Netflix OSS组件</strong>。</p><p>如今Netflix OSS在Spring Cloud体系的时代已经落幕了。在本次的更新中以下组件被从Spring Cloud Netflix中移除了<br />Spring Cloud本次移除的Netflix组件<br /><strong>Spring Cloud官方尤其着重指出ribbon、hystrix 和 zuul从Spring Cloud 2020.0正式版发布后将不再被Spring Cloud支持</strong>。在目前<strong>最新的Spring Cloud 2020.0中仅仅剩下了Eureka。但是留给Eureka的时间也不多了</strong>。<br /><strong>Feign 虽然是Netflix公司开源的，但从 9.x 版本开始就移交给OpenFeign组织管理，不从属于Netflix OSS范畴</strong>。</p><blockquote><p>所以 hystrix 入个门就行了，可能会有些公司还在用，但已淘汰，毕竟 spring-cloud-alibaba 系列实在太香了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务限流 </tag>
            
            <tag> 服务熔断 </tag>
            
            <tag> hystrix </tag>
            
            <tag> 限流 </tag>
            
            <tag> 熔断 </tag>
            
            <tag> 滑动窗口算法 </tag>
            
            <tag> 滑动日志算法 </tag>
            
            <tag> 漏桶限流算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05OpenFeign服务接口调用</title>
      <link href="/2022/11/07/02springcloud/05OpenFeign%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
      <url>/2022/11/07/02springcloud/05OpenFeign%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenFeign是什么？"><a href="#OpenFeign是什么？" class="headerlink" title="OpenFeign是什么？"></a>OpenFeign是什么？</h1><blockquote><p><a href="https://github.com/OpenFeign/feign">Feign</a> is a declarative web service client. It makes writing web service clients easier. To use Feign create an interface and annotate it. It has pluggable annotation support including Feign annotations and JAX-RS annotations. Feign also supports pluggable encoders and decoders. Spring Cloud adds support for Spring MVC annotations and for using the same HttpMessageConverters used by default in Spring Web. Spring Cloud integrates Eureka, Spring Cloud CircuitBreaker, as well as Spring Cloud LoadBalancer to provide a load-balanced http client when using Feign.</p></blockquote><p>feign是一个声明式的web服务客户端。它使得编写web服务客户端更加容易。要使用 feign 则需要创建一个接口并给接口添加上注解即可。<br />它具有可插入式的注解支持，包含feign注解和JAX-RS注解。feign也支持可插入的编码和解码。Spring Cloud增加了对Spring MVC注释的支持，并支持使用Spring Web中默认使用的HttpMessageConverters。当使用 Feign 时，Spring Cloud 整合了 Eureka，Spring Cloud CircuitBreaker(断路器)以及Spring Cloud LoadBalancer（负载均衡）以提供负载均衡的http client。</p><blockquote><p>说白了, openFeign就是个针对服务端映射(controller)的客户端工具, 主要目的是<strong>让 客户端 能够以类似 调用service的方式 调用到 服务端 的 controller</strong></p></blockquote><h2 id="Feign和OpenFeign的区别"><a href="#Feign和OpenFeign的区别" class="headerlink" title="Feign和OpenFeign的区别"></a>Feign和OpenFeign的区别</h2><table><thead><tr><th>Feign</th><th>openFiegn</th></tr></thead><tbody><tr><td>Feign是SpringCloud组件中一个轻量级RESTful的HTTP服务客户端，Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务</td><td>OpenFeign 是SpringCloud在Feign的基础上支持了SpringMVC的注解，如@RequestMapping等。OpenFeign 的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</td></tr></tbody></table><h1 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h1><blockquote><p>openFeign 也是针对客户端设计的, 所以代码一般卸载客户端上</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--一般基础通用配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">## 指定服务名称，在nacos中的名字</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line"><span class="comment">#        register-enabled: true</span></span><br><span class="line"><span class="comment">#        watch:</span></span><br><span class="line"><span class="comment">#          enabled: true</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="comment">## yml文件中存在特殊字符，必须用单引号包含，否则启动报错</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderFeignMain80</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(OrderFeignMain80.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.utils.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区分大小写</span></span><br><span class="line"><span class="comment">// 这里需要和服务提供方的 spring.application.name 的值相同</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;cloud-payment-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentFeignService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    CommonResult&lt;Payment&gt; <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;create&quot;)</span></span><br><span class="line">    CommonResult <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.service.PaymentFeignService;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.utils.CommonResult;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderFeignController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>CommonResult create(@RequestBody Payment payment);</code> openFeign默认的传参方式就是JSON传参（@RequestBody），因此定义接口的时候可以不用@RequestBody注解标注，不过为了规范，一般都填上。</p></blockquote><blockquote><p>注意：因为 <code>openFeign</code>默认使用<code>JSON</code>传参方式，如果需要使用表单传参方式则改为<code>@SpringQueryMap</code><br><code>CommonResult create(@SpringQueryMap Payment payment);</code></p></blockquote><h2 id="OpenFeign超时设置"><a href="#OpenFeign超时设置" class="headerlink" title="OpenFeign超时设置"></a>OpenFeign超时设置</h2><p>openFeign底层默认超时判定时间是 1秒 , 如果超出 1秒就会抛出异常</p><p>所以在有必要的情况下, 可以自行修改超时时间</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment">## default 设置的全局超时时间，指定服务名称可以设置单个服务的超时时间</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">basic</span></span><br></pre></td></tr></table></figure><p>但是如果需要调用涉及到多个openFeign接口的调用呢？</p><p>比如下图的情况：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070123530.png" alt="image.png"></p><p>很明显，<code>ServiceA </code>和 <code>ServiceB </code>能够通过，但 <code>ServiceC </code>不能够通过</p><p>此时我们可以单独给 <code>serviceC </code>设置超时时间：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment">## default 设置的全局超时时间，指定服务名称可以设置单个服务的超时时间</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">basic</span></span><br><span class="line">      <span class="attr">cloud-order-service:</span></span><br><span class="line">        <span class="attr">connectTimeout:</span> <span class="number">50000</span></span><br><span class="line">        <span class="attr">readTimeout:</span> <span class="number">50000</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">basic</span></span><br></pre></td></tr></table></figure><blockquote><p>单独设置的优先级大于 <code>default</code> </p></blockquote><h2 id="如何开启日志增强？"><a href="#如何开启日志增强？" class="headerlink" title="如何开启日志增强？"></a>如何开启日志增强？</h2><p><code>openFeign</code>虽然提供了日志增强功能，但是默认是不显示任何日志的，不过开发者在调试阶段可以自己配置日志的级别。<br /><code>openFeign</code>的日志级别如下：</p><ul><li><code>**NONE**</code>：默认的，不显示任何日志;</li><li><code>**BASIC**</code>：仅记录请求方法、<code>URL</code>、响应状态码及执行时间;</li><li><code>**HEADERS**</code>：除了<code>BASIC</code>中定义的信息之外，还有请求和响应的头信息;</li><li><code>**FULL**</code>：除了<code>HEADERS</code>中定义的信息之外，还有请求和响应的正文及元数据。</li></ul><p>配置起来也很简单，步骤如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenfeignConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：这里的<code>logger</code>是<code>feign</code>包里的。同时记住把 <code>application.yml</code>中的配置<code>loggerLevel: basic</code>注释掉</p></blockquote><p>接着在 <code>application.yml</code>文件中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.zhazha.springcloud.service:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p><code>FULL</code>显示出来的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2022-08-08 20:20:28.650 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] ---&gt; GET http://cloud-payment-service/payment/get/1 HTTP/1.1</span></span><br><span class="line">2022-08-08 20:20:28.651 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] ---&gt; END HTTP (0-byte body)</span></span><br><span class="line">2022-08-08 20:20:28.664 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] &lt;--- HTTP/1.1 200 (12ms)</span></span><br><span class="line">2022-08-08 20:20:28.664 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] connection: keep-alive</span></span><br><span class="line">2022-08-08 20:20:28.664 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] content-type: application/json</span></span><br><span class="line">2022-08-08 20:20:28.665 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] date: Mon, 08 Aug 2022 12:20:28 GMT</span></span><br><span class="line">2022-08-08 20:20:28.665 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] keep-alive: timeout=60</span></span><br><span class="line">2022-08-08 20:20:28.665 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] transfer-encoding: chunked</span></span><br><span class="line">2022-08-08 20:20:28.665 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] </span></span><br><span class="line">2022-08-08 20:20:28.665 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] &#123;&quot;code&quot;:200,&quot;message&quot;:&quot;查询成功 port: 8001&quot;,&quot;data&quot;:&#123;&quot;id&quot;:1,&quot;serial&quot;:&quot;zhazha01&quot;&#125;&#125;</span></span><br><span class="line">2022-08-08 20:20:28.665 DEBUG 8752 --- [p-nio-80-exec-2] c.z.s.service.PaymentFeignService        : [PaymentFeignService<span class="comment">#getPaymentById] &lt;--- END HTTP (84-byte body)</span></span><br></pre></td></tr></table></figure><h1 id="OpenFeign工作原理"><a href="#OpenFeign工作原理" class="headerlink" title="OpenFeign工作原理"></a>OpenFeign工作原理</h1><p>大致原理图：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070123276.png" alt="image.png"></p><p>分为初始化和拦截两个部分</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>在分析代码前，添加上<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070123345.png" alt="image.png"><br /><code>basePackages</code>，当然不加也行</p><p>从<code>@EnableFeignClients</code>注解入手分析</p><p>看到<code>@Import</code>注解，第一时间应当想到<code>ImportBeanDefinitionRegistrar</code>接口</p><blockquote><p>还需要想到<code>ImportSelector</code></p></blockquote><p>同时就需要了解改接口的作用主要目的就是：利用<code>registerBeanDefinitions</code>函数的<code>AnnotationMetadata importingClassMetadata</code>参数获取<code>@EnableFeignClients(basePackages = &quot;com.zhazha.springcloud.service&quot;)</code>注解的属性，然后使用<code>BeanDefinitionRegistry registry</code>去注册 <code>Bean Definition</code></p><blockquote><p>在本例子中<code>AnnotationMetadata importingClassMetadata</code>参数解析的是注解<code>EnableFeignClients</code>，在其他组件中，比如服务的发现与注册中寻找的是<code>@EnableDiscoveryClient</code>注解</p></blockquote><blockquote><p><code>AnnotationMetadata importingClassMetadata</code>可以获得<code>com.zhazha.springcloud.OrderFeignMain80</code>启动类上的注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry,</span></span><br><span class="line"><span class="params">BeanNameGenerator importBeanNameGenerator)</span> &#123;</span><br><span class="line"></span><br><span class="line">registerBeanDefinitions(importingClassMetadata, registry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register bean definitions as necessary based on the given annotation metadata of</span></span><br><span class="line"><span class="comment"> * the importing &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125; class.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that &#123;<span class="doctag">@link</span> BeanDefinitionRegistryPostProcessor&#125; types may &lt;em&gt;not&lt;/em&gt; be</span></span><br><span class="line"><span class="comment"> * registered here, due to lifecycle constraints related to &#123;<span class="doctag">@code</span> <span class="doctag">@Configuration</span>&#125;</span></span><br><span class="line"><span class="comment"> * class processing.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The default implementation is empty.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> importingClassMetadata annotation metadata of the importing class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry current bean definition registry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <br />在本案例中，OpenFeign使用<code>@Import</code>导入的是<code>FeignClientsRegistrar</code>类<br />从下面函数入手分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">registerDefaultConfiguration(metadata, registry);</span><br><span class="line">registerFeignClients(metadata, registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一段代码主要分析到的是<code>defaultConfiguration</code>属性，该属性用来自定义所有Feign客户端的配置，使用<code>@Configuration</code>进行配置。当然也可以为某一个Feign客户端进行配置。具体配置方法见<code>@FeignClient</code>的<code>configuration</code>属性。</p><blockquote><p>没用到不过也注册了一个Bean，但不分析（懒）</p></blockquote><p>核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerFeignClients</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">LinkedHashSet&lt;BeanDefinition&gt; candidateComponents = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">// 获得启动类上的注解EnableFeignClients</span></span><br><span class="line">Map&lt;String, Object&gt; attrs = metadata.getAnnotationAttributes(EnableFeignClients.class.getName());</span><br><span class="line">       <span class="comment">// 获取该注解的 clients 属性，看看是否有被@feignClient 注解标记的类</span></span><br><span class="line">       <span class="comment">// 我们项目中并未使用该注解的clients属性，所以获取为 clients.length 长度为 0</span></span><br><span class="line"><span class="keyword">final</span> Class&lt;?&gt;[] clients = attrs == <span class="literal">null</span> ? <span class="literal">null</span> : (Class&lt;?&gt;[]) attrs.get(<span class="string">&quot;clients&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (clients == <span class="literal">null</span> || clients.length == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">// 这段代码主要目的就是扫描 basePackages 注解的包路径，本案例中我主动添加了 com.zhazha.springcloud.service</span></span><br><span class="line">           <span class="comment">// 路径，所以会扫描该路径下的所有 FeignClient 注解标记的类</span></span><br><span class="line"><span class="type">ClassPathScanningCandidateComponentProvider</span> <span class="variable">scanner</span> <span class="operator">=</span> getScanner();</span><br><span class="line">scanner.setResourceLoader(<span class="built_in">this</span>.resourceLoader);</span><br><span class="line">scanner.addIncludeFilter(<span class="keyword">new</span> <span class="title class_">AnnotationTypeFilter</span>(FeignClient.class));</span><br><span class="line">           <span class="comment">// 源码在下面标记 ① 的地方</span></span><br><span class="line">Set&lt;String&gt; basePackages = getBasePackages(metadata);</span><br><span class="line"><span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">               <span class="comment">// 将扫描出来的类都添加到 Set 集合中</span></span><br><span class="line">               <span class="comment">// 在本案例中只能扫描到 PaymentFeignService 类</span></span><br><span class="line">               <span class="comment">// 只有他添加了 @FeignClient(value = &quot;cloud-payment-service&quot;) 注解</span></span><br><span class="line">candidateComponents.addAll(scanner.findCandidateComponents(basePackage));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; clazz : clients) &#123;</span><br><span class="line">candidateComponents.add(<span class="keyword">new</span> <span class="title class_">AnnotatedGenericBeanDefinition</span>(clazz));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (BeanDefinition candidateComponent : candidateComponents) &#123;</span><br><span class="line"><span class="keyword">if</span> (candidateComponent <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line"><span class="comment">// verify annotated class is an interface</span></span><br><span class="line"><span class="type">AnnotatedBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> (AnnotatedBeanDefinition) candidateComponent;</span><br><span class="line"><span class="type">AnnotationMetadata</span> <span class="variable">annotationMetadata</span> <span class="operator">=</span> beanDefinition.getMetadata();</span><br><span class="line">               <span class="comment">// @FeignClient 注解的类只能是接口</span></span><br><span class="line">Assert.isTrue(annotationMetadata.isInterface(), <span class="string">&quot;@FeignClient can only be specified on an interface&quot;</span>);</span><br><span class="line">               <span class="comment">// 拿到 FeignClient 注解的所有属性信息</span></span><br><span class="line">               <span class="comment">// 这里只能拿到value = &quot;cloud-payment-service&quot; 的值，其他都是默认的</span></span><br><span class="line">Map&lt;String, Object&gt; attributes = annotationMetadata</span><br><span class="line">.getAnnotationAttributes(FeignClient.class.getCanonicalName());</span><br><span class="line">               <span class="comment">// 此处 name = cloud-payment-service</span></span><br><span class="line">               <span class="comment">// 此处源码：看 ②</span></span><br><span class="line">               <span class="comment">// 可以明显看到优先级</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> getClientName(attributes);</span><br><span class="line">               <span class="comment">// 获取 FeignClient 注解configuration属性的值</span></span><br><span class="line">               <span class="comment">// 我们什么都没填，但还是注入了一个 bean</span></span><br><span class="line">registerClientConfiguration(registry, name, attributes.get(<span class="string">&quot;configuration&quot;</span>));</span><br><span class="line">               <span class="comment">// 核心代码 看 ③</span></span><br><span class="line">registerFeignClient(registry, annotationMetadata, attributes);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①<code>getBasePackages</code>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Set&lt;String&gt; <span class="title function_">getBasePackages</span><span class="params">(AnnotationMetadata importingClassMetadata)</span> &#123;</span><br><span class="line">Map&lt;String, Object&gt; attributes = importingClassMetadata</span><br><span class="line">.getAnnotationAttributes(EnableFeignClients.class.getCanonicalName());</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; basePackages = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String pkg : (String[]) attributes.get(<span class="string">&quot;value&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(pkg)) &#123;</span><br><span class="line">basePackages.add(pkg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String pkg : (String[]) attributes.get(<span class="string">&quot;basePackages&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(pkg)) &#123;</span><br><span class="line">basePackages.add(pkg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; clazz : (Class[]) attributes.get(<span class="string">&quot;basePackageClasses&quot;</span>)) &#123;</span><br><span class="line">basePackages.add(ClassUtils.getPackageName(clazz));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (basePackages.isEmpty()) &#123;</span><br><span class="line">basePackages.add(ClassUtils.getPackageName(importingClassMetadata.getClassName()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> basePackages;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② <code>getClientName</code>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">getClientName</span><span class="params">(Map&lt;String, Object&gt; client)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (client == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) client.get(<span class="string">&quot;contextId&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasText(value)) &#123;</span><br><span class="line">value = (String) client.get(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasText(value)) &#123;</span><br><span class="line">value = (String) client.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasText(value)) &#123;</span><br><span class="line">value = (String) client.get(<span class="string">&quot;serviceId&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(value)) &#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line"><span class="string">&quot;Either &#x27;name&#x27; or &#x27;value&#x27; must be provided in @&quot;</span> + FeignClient.class.getSimpleName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③<code>registerFeignClient</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个函数是注册类本体</span></span><br><span class="line"><span class="comment">// 第二个是 PaymentService 上的注解元信息，在registerFeignClient方法体中只做了 getClassName 这一项操作</span></span><br><span class="line"><span class="comment">// 注解 @FeignClient 的属性 key value 我们只配置了 value -&gt; cloud-payment-service</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">registerFeignClient</span><span class="params">(BeanDefinitionRegistry registry, AnnotationMetadata annotationMetadata,</span></span><br><span class="line"><span class="params">Map&lt;String, Object&gt; attributes)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 PaymentService 的类名 com.zhazha.springcloud.service.PaymentFeignService</span></span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> annotationMetadata.getClassName();</span><br><span class="line">        <span class="comment">// PaymentService 的类加载器</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ClassUtils.resolveClassName(className, <span class="literal">null</span>);</span><br><span class="line"><span class="type">ConfigurableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> registry <span class="keyword">instanceof</span> ConfigurableBeanFactory</span><br><span class="line">? (ConfigurableBeanFactory) registry : <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// contextId = cloud-payment-service</span></span><br><span class="line"><span class="type">String</span> <span class="variable">contextId</span> <span class="operator">=</span> getContextId(beanFactory, attributes);</span><br><span class="line">        <span class="comment">// name = cloud-payment-service</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> getName(attributes);</span><br><span class="line"><span class="type">FeignClientFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FeignClientFactoryBean</span>();</span><br><span class="line">factoryBean.setBeanFactory(beanFactory);</span><br><span class="line">factoryBean.setName(name);</span><br><span class="line">factoryBean.setContextId(contextId);</span><br><span class="line">factoryBean.setType(clazz);</span><br><span class="line">        <span class="comment">// 判断application.yml是否设置了 feign.client.refresh-enabled 配置项，我们这里没配置</span></span><br><span class="line">factoryBean.setRefreshableClient(isClientRefreshEnabled());</span><br><span class="line"><span class="type">BeanDefinitionBuilder</span> <span class="variable">definition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(clazz, () -&gt; &#123;</span><br><span class="line">factoryBean.setUrl(getUrl(beanFactory, attributes));</span><br><span class="line">factoryBean.setPath(getPath(beanFactory, attributes));</span><br><span class="line">factoryBean.setDecode404(Boolean.parseBoolean(String.valueOf(attributes.get(<span class="string">&quot;decode404&quot;</span>))));</span><br><span class="line"><span class="type">Object</span> <span class="variable">fallback</span> <span class="operator">=</span> attributes.get(<span class="string">&quot;fallback&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fallback != <span class="literal">null</span>) &#123;</span><br><span class="line">factoryBean.setFallback(fallback <span class="keyword">instanceof</span> Class ? (Class&lt;?&gt;) fallback</span><br><span class="line">: ClassUtils.resolveClassName(fallback.toString(), <span class="literal">null</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Object</span> <span class="variable">fallbackFactory</span> <span class="operator">=</span> attributes.get(<span class="string">&quot;fallbackFactory&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fallbackFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">factoryBean.setFallbackFactory(fallbackFactory <span class="keyword">instanceof</span> Class ? (Class&lt;?&gt;) fallbackFactory</span><br><span class="line">: ClassUtils.resolveClassName(fallbackFactory.toString(), <span class="literal">null</span>));</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 需要注意的 FeignClientFactoryBean 实现了 FactoryBean，所以如果需要定义一个对象时</span></span><br><span class="line">            <span class="comment">// 将会调用 FactoryBean 接口的 getObject 方法， 用于定义一个对象</span></span><br><span class="line">            <span class="comment">// 但这段代码并没有被立即调用</span></span><br><span class="line"><span class="keyword">return</span> factoryBean.getObject();</span><br><span class="line">&#125;);</span><br><span class="line">definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);</span><br><span class="line">definition.setLazyInit(<span class="literal">true</span>);</span><br><span class="line">validate(attributes);</span><br><span class="line"></span><br><span class="line"><span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> definition.getBeanDefinition();</span><br><span class="line">beanDefinition.setAttribute(FactoryBean.OBJECT_TYPE_ATTRIBUTE, className);</span><br><span class="line">        <span class="comment">// 注意看这一行，我们 feign 修饰的对象 PaymentService 并没有被注入，FactoryBean也没有调用 getObject</span></span><br><span class="line">beanDefinition.setAttribute(<span class="string">&quot;feignClientsRegistrarFactoryBean&quot;</span>, factoryBean);</span><br><span class="line"></span><br><span class="line"><span class="comment">// has a default, won&#x27;t be null</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">primary</span> <span class="operator">=</span> (Boolean) attributes.get(<span class="string">&quot;primary&quot;</span>);</span><br><span class="line"></span><br><span class="line">beanDefinition.setPrimary(primary);</span><br><span class="line"></span><br><span class="line">String[] qualifiers = getQualifiers(attributes);</span><br><span class="line"><span class="keyword">if</span> (ObjectUtils.isEmpty(qualifiers)) &#123;</span><br><span class="line">qualifiers = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; contextId + <span class="string">&quot;FeignClient&quot;</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 这里将 PaymentSercice 注入到 Spring 容器中</span></span><br><span class="line"><span class="type">BeanDefinitionHolder</span> <span class="variable">holder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(beanDefinition, className, qualifiers);</span><br><span class="line">BeanDefinitionReaderUtils.registerBeanDefinition(holder, registry);</span><br><span class="line">        <span class="comment">// 这里还是判断是否开启 feign.client.refresh-enabled </span></span><br><span class="line">        <span class="comment">// 这里我们没有配置，所以不走</span></span><br><span class="line">        <span class="comment">// 但实际上注入了 key = feign.Request.Options-cloud-payment-service 的 paymentService</span></span><br><span class="line">        <span class="comment">// 使用 refreshScope 创建Request.Options bean 定义</span></span><br><span class="line">registerOptionsBeanDefinition(registry, contextId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，注册完成，注意此时仅仅只是注册到 <code>DefaultListableBeanFactory</code>容器的 <code>beanDefinitionMap</code>中，并没有实例化！<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124495.png" alt="image.png"></p><blockquote><p>从这行代码判断出来的，并没有实例化它，实例化的话需要去拿到远程的实现对象</p></blockquote><p>而实例化的过程需要关注 Spring 异常熟悉的<code>org.springframework.context.support.AbstractApplicationContext#refresh</code>方法</p><p>我们来总结下，整个流程：</p><ol><li>使用<code>@Import</code>将<code>FeignClientsRegistrar</code>对象注入到Spring容器</li><li>使用<code>ClassPathScanningCandidateComponentProvider</code>扫描<code>FeignClient</code>注解的<code>BasePackages</code>属性所对应的所有对象，并将其存入<code>candidateComponents</code>容器中</li><li>遍历<code>candidateComponents</code>对象获取<code>FeignClient</code>注解的属性信息</li><li>创建<code>FeignClientFactoryBean</code>对象，并填充这些属性信息，该对象实现了<code>FactoryBean</code>为以后用于容器在初始化单例对象时调用该接口的<code>getObject</code>函数</li><li>创建<code>holder</code>对象，并以 key &#x3D; <code>com.zhazha.springcloud.service.PaymentFeignService</code>，value &#x3D; <code>PaymentFeignService</code>的 <code>beanDefinition</code>对象</li><li>这里虽然往容器中存入对象，但明摆着该<code>Bean</code>无法被使用，毕竟只是一个接口，需要特殊处理</li></ol><h2 id="实例化过程"><a href="#实例化过程" class="headerlink" title="实例化过程"></a>实例化过程</h2><p>从<code>OrderFeignController</code>开始入手接着去解析<code>controller</code>下面的<code>PaymentService</code>依赖</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124176.png" alt="image.png"></p><p>接着从 <code>BeanFactory</code>里面拿到<code>PaymentService</code>接口</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124388.png" alt="image.png"></p><p>最终他会回到上面我们分享过的源码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BeanDefinitionBuilder</span> <span class="variable">definition</span> <span class="operator">=</span> BeanDefinitionBuilder.genericBeanDefinition(clazz, () -&gt; &#123;</span><br><span class="line">    factoryBean.setUrl(getUrl(beanFactory, attributes));</span><br><span class="line">    factoryBean.setPath(getPath(beanFactory, attributes));</span><br><span class="line">    factoryBean.setDecode404(Boolean.parseBoolean(String.valueOf(attributes.get(<span class="string">&quot;decode404&quot;</span>))));</span><br><span class="line">    <span class="type">Object</span> <span class="variable">fallback</span> <span class="operator">=</span> attributes.get(<span class="string">&quot;fallback&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (fallback != <span class="literal">null</span>) &#123;</span><br><span class="line">        factoryBean.setFallback(fallback <span class="keyword">instanceof</span> Class ? (Class&lt;?&gt;) fallback</span><br><span class="line">                                : ClassUtils.resolveClassName(fallback.toString(), <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">fallbackFactory</span> <span class="operator">=</span> attributes.get(<span class="string">&quot;fallbackFactory&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (fallbackFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">        factoryBean.setFallbackFactory(fallbackFactory <span class="keyword">instanceof</span> Class ? (Class&lt;?&gt;) fallbackFactory</span><br><span class="line">                                       : ClassUtils.resolveClassName(fallbackFactory.toString(), <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> factoryBean.getObject(); <span class="comment">// 会在这里创建一个对象</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接着就能看到核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> getTarget();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the target type of the Feign client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a &#123;<span class="doctag">@link</span> Feign&#125; client created with the specified data and the context</span></span><br><span class="line"><span class="comment"> * information</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">getTarget</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// FeignContext 在 org.springframework.cloud.openfeign.FeignAutoConfiguration#feignContext 中</span></span><br><span class="line">       <span class="comment">// 被注入到 Spring容器中</span></span><br><span class="line">       <span class="comment">// 对于 FeignContext 的说明：①</span></span><br><span class="line"><span class="type">FeignContext</span> <span class="variable">context</span> <span class="operator">=</span> beanFactory != <span class="literal">null</span> ? beanFactory.getBean(FeignContext.class)</span><br><span class="line">: applicationContext.getBean(FeignContext.class);</span><br><span class="line">Feign.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> feign(context);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasText(url)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (LOG.isInfoEnabled()) &#123;</span><br><span class="line">LOG.info(<span class="string">&quot;For &#x27;&quot;</span> + name + <span class="string">&quot;&#x27; URL not provided. Will try picking an instance via load-balancing.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!name.startsWith(<span class="string">&quot;http&quot;</span>)) &#123;</span><br><span class="line">url = <span class="string">&quot;http://&quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">url = name;</span><br><span class="line">&#125;</span><br><span class="line">url += cleanPath();</span><br><span class="line">           <span class="comment">// 这里将会创建一个代理对象 ②</span></span><br><span class="line"><span class="keyword">return</span> (T) loadBalance(builder, context, <span class="keyword">new</span> <span class="title class_">HardCodedTarget</span>&lt;&gt;(type, name, url));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(url) &amp;&amp; !url.startsWith(<span class="string">&quot;http&quot;</span>)) &#123;</span><br><span class="line">url = <span class="string">&quot;http://&quot;</span> + url;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="built_in">this</span>.url + cleanPath();</span><br><span class="line"><span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> getOptional(context, Client.class);</span><br><span class="line"><span class="keyword">if</span> (client != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (client <span class="keyword">instanceof</span> FeignBlockingLoadBalancerClient) &#123;</span><br><span class="line"><span class="comment">// not load balancing because we have a url,</span></span><br><span class="line"><span class="comment">// but Spring Cloud LoadBalancer is on the classpath, so unwrap</span></span><br><span class="line">client = ((FeignBlockingLoadBalancerClient) client).getDelegate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (client <span class="keyword">instanceof</span> RetryableFeignBlockingLoadBalancerClient) &#123;</span><br><span class="line"><span class="comment">// not load balancing because we have a url,</span></span><br><span class="line"><span class="comment">// but Spring Cloud LoadBalancer is on the classpath, so unwrap</span></span><br><span class="line">client = ((RetryableFeignBlockingLoadBalancerClient) client).getDelegate();</span><br><span class="line">&#125;</span><br><span class="line">builder.client(client);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyBuildCustomizers(context, builder);</span><br><span class="line"></span><br><span class="line"><span class="type">Targeter</span> <span class="variable">targeter</span> <span class="operator">=</span> get(context, Targeter.class);</span><br><span class="line"><span class="keyword">return</span> (T) targeter.target(<span class="built_in">this</span>, builder, context, <span class="keyword">new</span> <span class="title class_">HardCodedTarget</span>&lt;&gt;(type, name, url));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①<code>FeignContext</code>：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124287.png" alt="image.png"></p><p><code>FeignContext</code>继承了<code>NameContextFactory</code>抽象类</p><p>它的功能主要是为每一个<code>contextId</code>创建一个独立的<code>ApplicationContext</code><br />该对象在<code>FeignAutoConfiguration</code>配置类中将<code>FeignContext</code>注入到Spring容器中</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124564.png" alt="image.png"></p><p>② <code>feign.ReflectiveFeign#newInstance</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">newInstance</span><span class="params">(Target&lt;T&gt; target)</span> &#123;</span><br><span class="line">  Map&lt;String, MethodHandler&gt; nameToHandler = targetToHandlersByName.apply(target);</span><br><span class="line">  Map&lt;Method, MethodHandler&gt; methodToHandler = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;Method, MethodHandler&gt;();</span><br><span class="line">  List&lt;DefaultMethodHandler&gt; defaultMethodHandlers = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;DefaultMethodHandler&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (Method method : target.type().getMethods()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Util.isDefault(method)) &#123;</span><br><span class="line">      <span class="type">DefaultMethodHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultMethodHandler</span>(method);</span><br><span class="line">      defaultMethodHandlers.add(handler);</span><br><span class="line">      methodToHandler.put(method, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      methodToHandler.put(method, nameToHandler.get(Feign.configKey(target.type(), method)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> factory.create(target, methodToHandler);</span><br><span class="line">  <span class="type">T</span> <span class="variable">proxy</span> <span class="operator">=</span> (T) Proxy.newProxyInstance(target.type().getClassLoader(),</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123;target.type()&#125;, handler);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (DefaultMethodHandler defaultMethodHandler : defaultMethodHandlers) &#123;</span><br><span class="line">    defaultMethodHandler.bindTo(proxy);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此实例化结束</p><h2 id="OpenFeign负载均衡源码分析"><a href="#OpenFeign负载均衡源码分析" class="headerlink" title="OpenFeign负载均衡源码分析"></a>OpenFeign负载均衡源码分析</h2><p>前面的创建和实例化都结束了，现在是使用过程</p><p><code>feign.SynchronousMethodHandler#invoke</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object[] argv)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">  <span class="type">RequestTemplate</span> <span class="variable">template</span> <span class="operator">=</span> buildTemplateFromArgs.create(argv);</span><br><span class="line">  <span class="type">Options</span> <span class="variable">options</span> <span class="operator">=</span> findOptions(argv);</span><br><span class="line">  <span class="type">Retryer</span> <span class="variable">retryer</span> <span class="operator">=</span> <span class="built_in">this</span>.retryer.clone();</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 核心代码 ①</span></span><br><span class="line">      <span class="keyword">return</span> executeAndDecode(template, options);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RetryableException e) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        retryer.continueOrPropagate(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RetryableException th) &#123;</span><br><span class="line">        <span class="type">Throwable</span> <span class="variable">cause</span> <span class="operator">=</span> th.getCause();</span><br><span class="line">        <span class="keyword">if</span> (propagationPolicy == UNWRAP &amp;&amp; cause != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> cause;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> th;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">        logger.logRetry(metadata.configKey(), logLevel);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着会去这个函数：<code>feign.SynchronousMethodHandler#executeAndDecode</code></p><p>核心代码是：<code>response = client.execute(request, options);</code></p><p>接着进入这里：<code>org.springframework.cloud.openfeign.loadbalancer.FeignBlockingLoadBalancerClient#execute</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Response <span class="title function_">execute</span><span class="params">(Request request, Request.Options options)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">URI</span> <span class="variable">originalUri</span> <span class="operator">=</span> URI.create(request.url());</span><br><span class="line"><span class="type">String</span> <span class="variable">serviceId</span> <span class="operator">=</span> originalUri.getHost();</span><br><span class="line">Assert.state(serviceId != <span class="literal">null</span>, <span class="string">&quot;Request URI does not contain a valid hostname: &quot;</span> + originalUri);</span><br><span class="line"><span class="type">String</span> <span class="variable">hint</span> <span class="operator">=</span> getHint(serviceId);</span><br><span class="line">DefaultRequest&lt;RequestDataContext&gt; lbRequest = <span class="keyword">new</span> <span class="title class_">DefaultRequest</span>&lt;&gt;(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">RequestDataContext</span>(buildRequestData(request), hint));</span><br><span class="line">Set&lt;LoadBalancerLifecycle&gt; supportedLifecycleProcessors = LoadBalancerLifecycleValidator</span><br><span class="line">.getSupportedLifecycleProcessors(</span><br><span class="line">loadBalancerClientFactory.getInstances(serviceId, LoadBalancerLifecycle.class),</span><br><span class="line">RequestDataContext.class, ResponseData.class, ServiceInstance.class);</span><br><span class="line">supportedLifecycleProcessors.forEach(lifecycle -&gt; lifecycle.onStart(lbRequest));</span><br><span class="line">       <span class="comment">// 核心代码</span></span><br><span class="line"><span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> loadBalancerClient.choose(serviceId, lbRequest);</span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>进入服务选择函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; ServiceInstance <span class="title function_">choose</span><span class="params">(String serviceId, Request&lt;T&gt; request)</span> &#123;</span><br><span class="line">       <span class="comment">// 获取 loadbalancer策略 ①</span></span><br><span class="line">ReactiveLoadBalancer&lt;ServiceInstance&gt; loadBalancer = loadBalancerClientFactory.getInstance(serviceId);</span><br><span class="line"><span class="keyword">if</span> (loadBalancer == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">// 核心代码 ②</span></span><br><span class="line">Response&lt;ServiceInstance&gt; loadBalancerResponse = Mono.from(loadBalancer.choose(request)).block();</span><br><span class="line"><span class="keyword">if</span> (loadBalancerResponse == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> loadBalancerResponse.getServer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124233.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124671.png" alt="image.png"></p><p>最终发现负载均衡策略是<code>RoundRobinLoadBalancer</code>轮询</p><p>②<code>org.springframework.cloud.loadbalancer.core.RoundRobinLoadBalancer#choose</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Mono&lt;Response&lt;ServiceInstance&gt;&gt; <span class="title function_">choose</span><span class="params">(Request request)</span> &#123;</span><br><span class="line"><span class="type">ServiceInstanceListSupplier</span> <span class="variable">supplier</span> <span class="operator">=</span> serviceInstanceListSupplierProvider</span><br><span class="line">.getIfAvailable(NoopServiceInstanceListSupplier::<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">return</span> supplier.get(request).next()</span><br><span class="line">.map(serviceInstances -&gt; processInstanceResponse(supplier, serviceInstances));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>熟悉的接口：<code>org.springframework.cloud.loadbalancer.core.ReactorLoadBalancer</code><br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070124706.png" alt="image.png"></p><p>回到<code>org.springframework.cloud.openfeign.loadbalancer.FeignBlockingLoadBalancerClient#execute</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Response <span class="title function_">execute</span><span class="params">(Request request, Request.Options options)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">URI</span> <span class="variable">originalUri</span> <span class="operator">=</span> URI.create(request.url());</span><br><span class="line"><span class="type">String</span> <span class="variable">serviceId</span> <span class="operator">=</span> originalUri.getHost();</span><br><span class="line"><span class="type">String</span> <span class="variable">hint</span> <span class="operator">=</span> getHint(serviceId);</span><br><span class="line">DefaultRequest&lt;RequestDataContext&gt; lbRequest = <span class="keyword">new</span> <span class="title class_">DefaultRequest</span>&lt;&gt;(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">RequestDataContext</span>(buildRequestData(request), hint));</span><br><span class="line">Set&lt;LoadBalancerLifecycle&gt; supportedLifecycleProcessors = LoadBalancerLifecycleValidator</span><br><span class="line">.getSupportedLifecycleProcessors(</span><br><span class="line">loadBalancerClientFactory.getInstances(serviceId, LoadBalancerLifecycle.class),</span><br><span class="line">RequestDataContext.class, ResponseData.class, ServiceInstance.class);</span><br><span class="line">supportedLifecycleProcessors.forEach(lifecycle -&gt; lifecycle.onStart(lbRequest));</span><br><span class="line">       <span class="comment">// 负载均衡，从多个服务提供者列表中选取一个</span></span><br><span class="line"><span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> loadBalancerClient.choose(serviceId, lbRequest);</span><br><span class="line">org.springframework.cloud.client.loadbalancer.Response&lt;ServiceInstance&gt; lbResponse = <span class="keyword">new</span> <span class="title class_">DefaultResponse</span>(</span><br><span class="line">instance);</span><br><span class="line">       <span class="comment">// 有默认的负载均衡策略，所以该分支不走</span></span><br><span class="line"><span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">// 计算出目标 ip 地址 ①</span></span><br><span class="line"><span class="type">String</span> <span class="variable">reconstructedUrl</span> <span class="operator">=</span> loadBalancerClient.reconstructURI(instance, originalUri).toString();</span><br><span class="line">       <span class="comment">// 创建请求</span></span><br><span class="line"><span class="type">Request</span> <span class="variable">newRequest</span> <span class="operator">=</span> buildRequest(request, reconstructedUrl);</span><br><span class="line"><span class="type">LoadBalancerProperties</span> <span class="variable">loadBalancerProperties</span> <span class="operator">=</span> loadBalancerClientFactory.getProperties(serviceId);</span><br><span class="line">       <span class="comment">// 最后玩这里走，进行请求处理</span></span><br><span class="line"><span class="keyword">return</span> executeWithLoadBalancerLifecycleProcessing(delegate, options, newRequest, lbRequest, lbResponse,</span><br><span class="line">supportedLifecycleProcessors, loadBalancerProperties.isUseRawStatusCodeInResponseData());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是 ip 从哪里获得？<br />从负载均衡这行<code>ServiceInstance instance = loadBalancerClient.choose(serviceId, lbRequest);</code>获取了目标服务的IP地址</p><p>接着在<br /><code>String reconstructedUrl = loadBalancerClient.reconstructURI(instance, originalUri).toString();</code></p><p>①<code>reconstructURI</code>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> URI <span class="title function_">doReconstructURI</span><span class="params">(ServiceInstance serviceInstance, URI original)</span> &#123;</span><br><span class="line">       <span class="comment">// host = 192.168.19.1 这是我们提供服务的服务器 ip 之一</span></span><br><span class="line"><span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> serviceInstance.getHost();</span><br><span class="line">       <span class="comment">// scheme = http</span></span><br><span class="line"><span class="type">String</span> <span class="variable">scheme</span> <span class="operator">=</span> Optional.ofNullable(serviceInstance.getScheme())</span><br><span class="line">.orElse(computeScheme(original, serviceInstance));</span><br><span class="line">       <span class="comment">// port = 8002</span></span><br><span class="line"><span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> computePort(serviceInstance.getPort(), scheme);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Objects.equals(host, original.getHost()) &amp;&amp; port == original.getPort()</span><br><span class="line">&amp;&amp; Objects.equals(scheme, original.getScheme())) &#123;</span><br><span class="line"><span class="keyword">return</span> original;</span><br><span class="line">&#125;</span><br><span class="line">       <span class="comment">// false</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">encoded</span> <span class="operator">=</span> containsEncodedParts(original);</span><br><span class="line">       <span class="comment">// 组合完毕：http://192.168.19.1:8002/payment/get/1</span></span><br><span class="line"><span class="keyword">return</span> UriComponentsBuilder.fromUri(original).scheme(scheme).host(host).port(port).build(encoded).toUri();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终在这里处理请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Response <span class="title function_">executeWithLoadBalancerLifecycleProcessing</span><span class="params">(Client feignClient, Request.Options options,</span></span><br><span class="line"><span class="params">Request feignRequest, org.springframework.cloud.client.loadbalancer.Request lbRequest,</span></span><br><span class="line"><span class="params">org.springframework.cloud.client.loadbalancer.Response&lt;ServiceInstance&gt; lbResponse,</span></span><br><span class="line"><span class="params">Set&lt;LoadBalancerLifecycle&gt; supportedLifecycleProcessors, <span class="type">boolean</span> loadBalanced, <span class="type">boolean</span> useRawStatusCodes)</span></span><br><span class="line"><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">supportedLifecycleProcessors.forEach(lifecycle -&gt; lifecycle.onStartRequest(lbRequest, lbResponse));</span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>至此，大体上的源码分析完毕</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务发现 </tag>
            
            <tag> openFeign </tag>
            
            <tag> feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04负载均衡</title>
      <link href="/2022/11/07/02springcloud/04%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2022/11/07/02springcloud/04%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是负载均衡？"><a href="#什么是负载均衡？" class="headerlink" title="什么是负载均衡？"></a>什么是负载均衡？</h1><p><strong>将工作负载分布到多个服务器来提高网站、应用、数据库或其他服务的性能和可靠性</strong></p><blockquote><p><strong>将处理分发给多个服务</strong></p></blockquote><br /><h1 id="客户端负载均衡和服务端负载均衡"><a href="#客户端负载均衡和服务端负载均衡" class="headerlink" title="客户端负载均衡和服务端负载均衡"></a>客户端负载均衡和服务端负载均衡</h1><p>常见的负载均衡方式有两种：</p><ul><li>服务端负载均衡</li><li>客户端负载均衡</li></ul><h2 id="服务端负载均衡"><a href="#服务端负载均衡" class="headerlink" title="服务端负载均衡"></a>服务端负载均衡</h2><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119910.png" alt="image.png"></p><p>所有客户端的请求都发送给一个组件，该组件存放着所有服务端清单，客户端的请求都会被改组件按照一定的策略转发给它所熟知的服务端</p><h2 id="客户端负载均衡"><a href="#客户端负载均衡" class="headerlink" title="客户端负载均衡"></a>客户端负载均衡</h2><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119278.png" alt="image.png"></p><p>客户端从注册中心获取服务列表清单，客户端在需要发送请求时拦截，接着按照一定的策略选取一个服务端，将请求发送给它</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><table><thead><tr><th>不同点</th><th>服务端负载均衡</th><th>客户端负载均衡</th></tr></thead><tbody><tr><td>是否需要建立负载均衡服务器</td><td>需要在客户端和服务端之间建立一个独立的负载均衡服务器。</td><td>将负载均衡的逻辑以代码的形式封装到客户端上，因此不需要单独建立负载均衡服务器。</td></tr><tr><td>是否需要服务注册中心</td><td>不需要服务注册中心。</td><td>需要服务注册中心。  在客户端负载均衡中，所有的客户端和服务端都需要将其提供的服务注册到服务注册中心上。</td></tr><tr><td>可用服务清单存储的位置</td><td>可用服务清单存储在位于客户端与服务器之间的负载均衡服务器上。</td><td>所有的客户端都维护了一份可用服务清单，这些清单都是从服务注册中心获取的。</td></tr><tr><td>负载均衡的时机</td><td>先将请求发送到负载均衡服务器，然后由负载均衡服务器通过负载均衡算法，在多个服务端之间选择一个进行访问；即在服务器端再进行负载均衡算法分配。  简单点说就是，先发送请求，再进行负载均衡。</td><td>在发送请求前，由位于客户端的服务负载均衡器（例如 Ribbon）通过负载均衡算法选择一个服务器，然后进行访问。  简单点说就是，先进行负载均衡，再发送请求。</td></tr><tr><td>客户端是否了解服务提供方信息</td><td>由于负载均衡是在客户端发送请求后进行的，因此客户端并不知道到底是哪个服务端提供的服务。</td><td>负载均衡是在客户端发送请求前进行的，因此客户端清楚的知道是哪个服务端提供的服务。</td></tr></tbody></table><blockquote><p>记住，客户端负载均衡和服务端负载均衡不都是代替关系，也可以是配合关系。从上图所示，我们知道客户端负载均衡有个前提：需要客户端（消费者）持有服务端（生产者）的列表，是对服务端的负载均衡，而不是客户端，所以客户端也可能卡顿，所以也需要nginx负载均衡。</p></blockquote><h1 id="负载均衡开始前"><a href="#负载均衡开始前" class="headerlink" title="负载均衡开始前"></a>负载均衡开始前</h1><p>创建新的项目<code>cloud-provider-payment8002</code>复制 <code>cloud-provider-payment8001</code>的源码和配置文件</p><p>修改：</p><p><code>application.yml</code>: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>             <span class="comment"># mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.zhazha.springcloud.entities</span>    <span class="comment"># 所有Entity别名类所在包</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 表示是否将自己注册进EurekaServer，默认为 true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否从EurekaServer抓取已有的注册信息，默认为 true 。单节点无所谓，</span></span><br><span class="line">    <span class="comment"># 集群必须设置为true才能配合 ribbon 使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># EurekaServer的地址</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure><p>这里我们仅需要修改端口 8001 -》 8002 其他配置不需要修改</p><p>接着先启动 7001 和 7002 而后启动 8001  8002 项目 最后启动 80 端口项目</p><p>打开网页：<a href="http://eureka7001.com:7001/">http://eureka7001.com:7001/</a></p><p>就能看到下列情况：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120312.png" alt="image.png"></p><p>出现两个服务的提供者</p><blockquote><p>有没有觉得这名字太长了？<br>修改下吧！<br>给 8001 项目的 <code>application.yml</code>添加<code>eureka.instance.instance-id=payment8001</code><br>为了更好的显示出 ip 还可以添加：<code>eureka.instance.prefer-ip-address=true</code><br>给8002项目也改上<code>eureka.instance.instance-id=payment8002</code> <code>eureka.instance.prefer-ip-address=true</code><br>重启项目就可以看到：<br><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120705.png" alt="image.png"></p></blockquote><p>访问：<a href="http://localhost/order/payment/get/1">http://localhost/order/payment/get/1</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120994.png" alt="image.png"></p><p>不管怎么刷新都是 8001 没有达到负载均衡的地步</p><p>为什么？</p><p>根源在 order80 项目 <br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120332.png" alt="image.png"><br />这里已经定死了只能访问 <code>8001</code></p><p>我们可以这么搞：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"><span class="comment">//定义服务端URL</span></span><br><span class="line"><span class="comment">//public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用微服务的名字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端通过RestTemplate调用服务端</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;payment/create&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">create</span><span class="params">(Payment payment)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改<code>public static final String PAYMENT_URL = &quot;http://CLOUD-PAYMENT-SERVICE&quot;;</code>这段</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>添加<code>@LoadBalanced</code>注解</p></blockquote><p>重启项目</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120220.png" alt="image.png"></p><p>此时测试发现是<code>轮询策略</code>，负载均衡成功~~~</p><p>这样修改，虽然实现了负载均衡，但却需要 <code>CLOUD-PAYMENT-SERVICE</code>微服务名字，将微服务彻底写死了</p><p>所以需要改造</p><h1 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h1><blockquote><p>基本已经被<code>LoadBalancer</code>代替，但理论大于实际，所以理论部分还是得过过</p></blockquote><h2 id="Ribbon是什么？"><a href="#Ribbon是什么？" class="headerlink" title="Ribbon是什么？"></a>Ribbon是什么？</h2><p>Netflix Ribbon 是 Netflix 公司发布的开源组件，其主要功能是<strong>提供客户端的负载均衡算法和服务调用</strong>。</p><blockquote><p>记住：这是<strong>客户端</strong>负载均衡算法</p></blockquote><h2 id="Ribbon有什么用？"><a href="#Ribbon有什么用？" class="headerlink" title="Ribbon有什么用？"></a>Ribbon有什么用？</h2><p>通过它，我们可以<strong>将面向服务的 REST 模板（RestTemplate）请求转换为客户端负载均衡的服务调用</strong>。</p><blockquote><p>说白了，就是在客户端拿到几个服务的列表，按照一定的策略选取一个服务，将请求转发给该服务。就这么简单<br>负载均衡的核心在于不把所有的请求都转发给一个服务，而是按照一定的策略将请求分发出去</p></blockquote><h2 id="Ribbon工作原理"><a href="#Ribbon工作原理" class="headerlink" title="Ribbon工作原理"></a>Ribbon工作原理</h2><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120784.png" alt="image.png"></p><ul><li>第一步：Ribbon 拦截所有标注@loadBalance注解的 RestTemplate。RestTemplate 是用来发送 HTTP 请求的。</li><li>第二步：将 Ribbon 默认的拦截器 LoadBalancerInterceptor 添加到 RestTemplate 的执行逻辑中，当 RestTemplate 每次发送 HTTP 请求时，都会被 Ribbon 拦截。</li><li>第三步：拦截后，Ribbon 会创建一个 ILoadBalancer 实例。</li><li>第四步：ILoadBalancer 实例会使用 RibbonClientConfiguration 完成自动配置。就会配置好 IRule，IPing，ServerList。</li><li>第五步：<strong>Ribbon 会从服务列表中选择一个服务，将请求转发给这个服务</strong>。</li></ul><blockquote><p>拦截 + 配置 + 选取 + 转发</p></blockquote><p>同时这张图片我们可以再次使用<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120348.png" alt="image.png"></p><p>从这里可以我们可以知道<br />Ribbon 会先从 Eureka Server（服务注册中心）去获取服务端列表，然后通过负载均衡策略将请求分摊给多个服务端，从而达到负载均衡的目的</p><p>同时前面说的 <code>IRule</code> 接口是 Ribbon 提供的负载均衡策略</p><p>它有 7 中默认的实现类，每个类都是一种负载均衡策略</p><table><thead><tr><th>序号</th><th>实现类</th><th>负载均衡策略</th></tr></thead><tbody><tr><td>1</td><td>RoundRobinRule</td><td>按照<strong>线性轮询</strong>策略，即按照一定的顺序依次选取服务实例</td></tr><tr><td>2</td><td>RandomRule</td><td><strong>随机</strong>选取一个服务实例</td></tr><tr><td>3</td><td>RetryRule</td><td>按照 RoundRobinRule（<strong>轮询</strong>）的策略来获取服务，如果获取的服务实例为 null 或已经失效，则在指定的时间之内<strong>不断地进行重试</strong>（重试时获取服务的策略还是 RoundRobinRule 中定义的策略），<strong>如果超过指定时间依然没获取到服务实例则返回 null</strong> 。</td></tr><tr><td>4</td><td>WeightedResponseTimeRule</td><td>WeightedResponseTimeRule 是 RoundRobinRule 的一个子类，它对 RoundRobinRule 的功能进行了扩展。  <strong>根据平均响应时间，来计算所有服务实例的权重，响应时间越短的服务实例权重越高，被选中的概率越大</strong>。刚启动时，如果统计信息不足，则使用线性轮询策略，等信息足够时，再切换到 WeightedResponseTimeRule。</td></tr><tr><td>5</td><td>BestAvailableRule</td><td>继承自 ClientConfigEnabledRoundRobinRule。<strong>先过滤点故障或失效的服务实例，然后再选择并发量最小的服务实例</strong>。</td></tr><tr><td>6</td><td>AvailabilityFilteringRule</td><td><strong>先过滤掉故障或失效的服务实例，然后再选择并发量较小的服务实例</strong>。</td></tr><tr><td>7</td><td>ZoneAvoidanceRule</td><td>默认的负载均衡策略，<strong>综合判断服务所在区域（zone）的性能和服务（server）的可用性，来选择服务实例</strong>。<strong>在没有区域的环境下，该策略与轮询（RandomRule）策略类似</strong>。</td></tr></tbody></table><h2 id="Ribbon怎么玩？-看看就好-不需要自己实现"><a href="#Ribbon怎么玩？-看看就好-不需要自己实现" class="headerlink" title="Ribbon怎么玩？(看看就好, 不需要自己实现)"></a>Ribbon怎么玩？(看看就好, 不需要自己实现)</h2><blockquote><p>注意，现在业界<code>Eureka</code>基本很少使用了，所以本篇讲的 <code>Ribbon（扩展版）</code>现阶段只有 <code>Nacos</code>在使用（而且新版本nacos也放弃使用Ribbon）<br>本篇也就稍微讲讲基于 zookeeper 做服务的注册和发现中心 的方式吧, 而不是 eureka</p></blockquote><p>首先, 第一步就是降级</p><p>将 springboot 降级, 修改 parent 项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再创建一个项目<code>cloud-provider-payment8001</code> 和 <code>8002</code></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120715.png" alt="image.png"></p><p>提供方的 pom</p><blockquote><p>这里只提供 8002 的配置和源码, 8001 基本相同, 只需要改下 server.port 端口就行</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端,这里不再使用Eureka进行服务注册，所以这里导入的是Zookeeper的相关依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 先排除自带的zookeeper --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加zookeeper3.8.0版本，注意这里要和 zookeeper 应用启动的版本一致 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日常通用jar包配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">localhost:2181</span></span><br></pre></td></tr></table></figure><p>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8002</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(PaymentMain8002.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;springcloud: &quot;</span> + serverPort + <span class="string">&quot;\t\t&quot;</span> + UUID.randomUUID();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是修改 <code>cloud-consumer-order80</code></p><p>pom唯一的区别:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="string">&lt;!--</span> <span class="string">先排除自带的zookeeper</span> <span class="string">--&gt;</span></span><br><span class="line">    <span class="string">&lt;exclusions&gt;</span></span><br><span class="line">        <span class="string">&lt;exclusion&gt;</span></span><br><span class="line">            <span class="string">&lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span></span><br><span class="line">            <span class="string">&lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="string">&lt;/exclusion&gt;</span></span><br><span class="line">        <span class="string">&lt;!--</span> <span class="string">排除和不排除都一样,</span> <span class="string">低版本的</span> <span class="string">springcloud</span> <span class="string">底层默认就使用</span> <span class="string">ribbon</span> <span class="string">--&gt;</span></span><br><span class="line">        <span class="string">&lt;exclusion&gt;</span></span><br><span class="line">            <span class="string">&lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">        <span class="string">&lt;/exclusion&gt;</span></span><br><span class="line">    <span class="string">&lt;/exclusions&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderConsulController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INVOKE_URL</span> <span class="operator">=</span> <span class="string">&quot;http://cloud-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/&quot;</span>, String.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者调用支付服务(consule)---&gt;result:&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常简单</p><p>唯一需要注意的地方是别忘了<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120564.png" alt="image.png"></p><p>然后就有 ribbon 负载均衡了</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070120311.png" alt="image.png"></p><p>可以看的出来这是轮询策略</p><h2 id="ribbon切换策略模式"><a href="#ribbon切换策略模式" class="headerlink" title="ribbon切换策略模式"></a>ribbon切换策略模式</h2><p>唯一需要注意的一点：</p><blockquote><p>注意：The CustomConfiguration clas must be a @Configuration class, but take care that it is not in a @ComponentScan for the main application context. Otherwise, it is shared by all the @RibbonClients. If you use @ComponentScan (or @SpringBootApplication), you need to take steps to avoid it being included (for instance, you can put it in a separate, non-overlapping package or specify the packages to scan explicitly in the @ComponentScan).</p></blockquote><p>大意是说，<code>ribbon</code>自定义的 配置必须放在 <code>@SpringBootApplication</code>注解或者说<code>@ComponentScan</code>注解<strong>能扫描到的包之外</strong>，否则你自定义的配置将被所有<code>@RibbonClients</code>注解共享</p><blockquote><p>由于 ribbon 是客户端负载均衡落地方式的一种, 所以代码的改造主要是在 <code>order80(客户端)</code>  项目上进行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.rule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.RandomRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfRule</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">myRule</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>记住, 策略必须放在 springboot 不能扫描到的包</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RibbonClient(value = &quot;cloud-provider-payment&quot;, configuration = &#123;MySelfRule.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span></span><br></pre></td></tr></table></figure><blockquote><p><code>cloud-provider-payment</code> 就是 <code>8001</code> 和 <code>8002</code> 的  <code>spring.application.name</code>, 主要的目的就是限定 <code>MySelfRule</code>负载均衡策略只针对 <code>cloud-provider-payment</code> 的服务提供方</p></blockquote><h3 id="还有哪些负载均衡策略"><a href="#还有哪些负载均衡策略" class="headerlink" title="还有哪些负载均衡策略?"></a>还有哪些负载均衡策略?</h3><table><thead><tr><th>策略名称</th><th>策略对应的类名</th><th>实现原理</th></tr></thead><tbody><tr><td>轮询策略（默认）</td><td>RoundRobinRule</td><td>轮询策略表示每次都顺序取下一个 provider，比如一共有 5 个provider，第 1 次取第 1 个，第 2次取第 2 个，第 3 次取第 3 个，以此类推</td></tr><tr><td>权重轮询策略</td><td>WeightedResponseTimeRule</td><td>1.根据每个 provider 的响应时间分配一个权重，响应时间越长，权重越小，被选中的可能性越低。2.原理：一开始为轮询策略，并开启一个计时器，每 30 秒收集一次每个 provider 的平均响应时间，当信息足够时，给每个 provider附上一个权重，并按权重随机选择provider，高权越重的 provider会被高概率选中。</td></tr><tr><td>随机策略</td><td>RandomRule</td><td>从 provider 列表中随机选择一个provider</td></tr><tr><td>最少并发数策略</td><td>BestAvailableRule</td><td>选择正在请求中的并发数最小的 provider，除非这个provider 在熔断中。</td></tr><tr><td>在“选定的负载均衡策略”基础上进行重试机制</td><td>RetryRule</td><td>1.“选定的负载均衡策略”这个策略是轮询策略RoundRobinRule2.该重试策略先设定一个阈值时间段，如果在这个阈值时间段内当选择 provider 不成功，则一直尝试采用“选定的负载均衡策略：轮询策略”最后选择一个可用的provider</td></tr><tr><td>可用性敏感策略</td><td>AvailabilityFilteringRule</td><td>过滤性能差的 provider,有 2种：第一种：过滤掉在 eureka 中处于一直连接失败 provider 第二种：过滤掉高并发的 provider</td></tr><tr><td>区域敏感性策略</td><td>ZoneAvoidanceRule</td><td>1.以一个区域为单位考察可用性，对于不可用的区域整个丢弃，从剩下区域中选可用的provider2.如果这个 ip 区域内有一个或多个实例不可达或响应变慢，都会降低该 ip 区域内其他 ip 被选中的权重。</td></tr></tbody></table><blockquote><p>实际上还有一部分用于 做注册中心专属的负载均衡策略. 比如 zookeepper 的 <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070121861.png" alt="image.png"><br>比如 旧版本的 nacos 也有属于自己的 ribbon 负载均衡策略</p></blockquote><h1 id="LoadBalancer负载均衡"><a href="#LoadBalancer负载均衡" class="headerlink" title="LoadBalancer负载均衡"></a>LoadBalancer负载均衡</h1><h2 id="需要知道什么？"><a href="#需要知道什么？" class="headerlink" title="需要知道什么？"></a>需要知道什么？</h2><p>新版本SpringCloud默认使用<code>LoadBalancer</code>的负载均衡，且是默认使用的</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070121044.png" alt="image.png"></p><p>启动这几个项目，然后访问：<a href="http://localhost/order/payment/get/1">http://localhost/order/payment/get/1</a><br />就会看到<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070121547.png" alt="image.png"></p><p>上面的端口不断在 8001 和 8002 之间来回 切换</p><p>可以发现其默认使用的也是 <strong>轮询</strong></p><p>而他本身也就提供了两种负载均衡模式：<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070121752.png" alt="image.png"></p><p>默认是<code>RoundRobinLoadBalancer</code>轮询</p><blockquote><p>如果引入 nacos，还是多个 <code>NacosLoadBalancer</code>方案</p></blockquote><h2 id="源码大体思路"><a href="#源码大体思路" class="headerlink" title="源码大体思路"></a>源码大体思路</h2><blockquote><p>可以使用 idea 的覆盖运行方式先将 <code>order80</code>项目运行起来，然后访问下网址：<a href="http://localhost/order/payment/get/1">http://localhost/order/payment/get/1</a> 最后在关闭微服务。<br>这样可以借助<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070121281.png" alt="image.png"><br>可以更加方便查看源码</p></blockquote><ol><li>使用<code>LoadBalancerInterceptorConfig</code> 配置<code>LoadBalancerInterceptor</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> LoadBalancerInterceptor <span class="title function_">loadBalancerInterceptor</span><span class="params">(LoadBalancerClient loadBalancerClient,</span></span><br><span class="line"><span class="params">                                                       LoadBalancerRequestFactory requestFactory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoadBalancerInterceptor</span>(loadBalancerClient, requestFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>ClientHttpRequestInterceptor</code>实现的<code>LoadBalancerInterceptor</code>拦截器拦截下请求</li><li><code>LoadBalancerInterceptor</code>接口会拦截客户端 http 请求</li><li><code>LoadBalancerInterceptor</code>内的拦截器源码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ClientHttpResponse <span class="title function_">intercept</span><span class="params">(<span class="keyword">final</span> HttpRequest request, <span class="keyword">final</span> <span class="type">byte</span>[] body,</span></span><br><span class="line"><span class="params">                                    <span class="keyword">final</span> ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">URI</span> <span class="variable">originalUri</span> <span class="operator">=</span> request.getURI();</span><br><span class="line">    <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> originalUri.getHost();</span><br><span class="line">    Assert.state(serviceName != <span class="literal">null</span>, <span class="string">&quot;Request URI does not contain a valid hostname: &quot;</span> + originalUri);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.loadBalancer.execute(serviceName, <span class="built_in">this</span>.requestFactory.createRequest(request, body, execution));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>最终代码走到核心接口<code>LoadBalancerClient</code>，核心类<code>BlockingLoadBalancerClient</code></li><li>然后是核心代码段：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">execute</span><span class="params">(String serviceId, LoadBalancerRequest&lt;T&gt; request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hint</span> <span class="operator">=</span> getHint(serviceId);</span><br><span class="line">    LoadBalancerRequestAdapter&lt;T, TimedRequestContext&gt; lbRequest = <span class="keyword">new</span> <span class="title class_">LoadBalancerRequestAdapter</span>&lt;&gt;(request,</span><br><span class="line">                                                                                                    buildRequestContext(request, hint));</span><br><span class="line">    Set&lt;LoadBalancerLifecycle&gt; supportedLifecycleProcessors = getSupportedLifecycleProcessors(serviceId);</span><br><span class="line">    supportedLifecycleProcessors.forEach(lifecycle -&gt; lifecycle.onStart(lbRequest));</span><br><span class="line">    <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> choose(serviceId, lbRequest);</span><br><span class="line">    <span class="keyword">return</span> execute(serviceId, serviceInstance, lbRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="怎么自定义？"><a href="#怎么自定义？" class="headerlink" title="怎么自定义？"></a>怎么自定义？</h2><p>首先如果需要自定义负载均衡策略，需要查看：<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070121173.png" alt="image.png"></p><p>我们可以效仿上面两个已经实现的类自定义一个新的负载均衡策略</p><p>直接复制<code>RandomLoadBalancer</code>然后进行修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfRule</span> <span class="keyword">implements</span> <span class="title class_">ReactorServiceInstanceLoadBalancer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> String serviceId;</span><br><span class="line">ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MySelfRule</span><span class="params">(String serviceId, ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.serviceId = serviceId;</span><br><span class="line"><span class="built_in">this</span>.serviceInstanceListSupplierProvider = serviceInstanceListSupplierProvider;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;Response&lt;ServiceInstance&gt;&gt; <span class="title function_">choose</span><span class="params">(Request request)</span> &#123;</span><br><span class="line"><span class="type">ServiceInstanceListSupplier</span> <span class="variable">supplier</span> <span class="operator">=</span> serviceInstanceListSupplierProvider</span><br><span class="line">.getIfAvailable(NoopServiceInstanceListSupplier::<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">return</span> supplier.get(request).next()</span><br><span class="line">.map(serviceInstances -&gt; processInstanceResponse(supplier, serviceInstances));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Response&lt;ServiceInstance&gt; <span class="title function_">processInstanceResponse</span><span class="params">(ServiceInstanceListSupplier supplier,</span></span><br><span class="line"><span class="params">  List&lt;ServiceInstance&gt; serviceInstances)</span> &#123;</span><br><span class="line">Response&lt;ServiceInstance&gt; serviceInstanceResponse = getInstanceResponse(serviceInstances);</span><br><span class="line"><span class="keyword">if</span> (supplier <span class="keyword">instanceof</span> SelectedInstanceCallback &amp;&amp; serviceInstanceResponse.hasServer()) &#123;</span><br><span class="line">((SelectedInstanceCallback) supplier).selectedServiceInstance(serviceInstanceResponse.getServer());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> serviceInstanceResponse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Response&lt;ServiceInstance&gt; <span class="title function_">getInstanceResponse</span><span class="params">(List&lt;ServiceInstance&gt; instances)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (instances.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">log.warn(<span class="string">&quot;No servers available for service: &quot;</span> + serviceId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EmptyResponse</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> ThreadLocalRandom.current().nextInt(arr.length);</span><br><span class="line"><span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> instances.get(arr[index] % instances.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultResponse</span>(instance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心算法随便写的，就三行代码<br /><code>private int[] arr = &#123;3, 1, 4, 1, 5, 9, 2, 6, 5&#125;;</code><br /><code>int index = ThreadLocalRandom.current().nextInt(arr.length);</code><br /><code>ServiceInstance instance = instances.get(arr[index] % instances.size());</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRuleConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ReactorServiceInstanceLoadBalancer <span class="title function_">reactorServiceInstanceLoadBalancer</span><span class="params">(Environment environment, LoadBalancerClientFactory loadBalancerClientFactory)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MySelfRule</span>(name, loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>记住：这里不要添加注解 <code>@Configuration</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LoadBalancerClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;, configuration = MyRuleConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nacos和loadbalancer"><a href="#nacos和loadbalancer" class="headerlink" title="nacos和loadbalancer"></a>nacos和loadbalancer</h2><h3 id="服务的提供者"><a href="#服务的提供者" class="headerlink" title="服务的提供者"></a>服务的提供者</h3><p>创建两个项目：<code>cloud-provider02-payment8001</code>和<code>cloud-provider02-payment8002</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code>: <code>8001</code>项目</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>             <span class="comment"># mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"><span class="comment">#        namespace: public</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.zhazha.springcloud.entities</span>    <span class="comment"># 所有Entity别名类所在包</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code>: <code>8002</code>项目的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>             <span class="comment"># mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"><span class="comment">#        namespace: public</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.zhazha.springcloud.entities</span>    <span class="comment"># 所有Entity别名类所在包</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(value = &quot;com.zhazha.springcloud.dao&quot;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8001_2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(PaymentMain8001_2.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.SelectProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentDao</span> &#123;</span><br><span class="line"><span class="meta">@Insert(&quot;insert into payment(serial) values (#&#123;serial&#125;)&quot;)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span>;</span><br><span class="line"><span class="comment">//@Select(&quot;select * from payment p where p.id = #&#123;id&#125;&quot;)</span></span><br><span class="line">Payment <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SelectProvider(type = PaymentProvider.class, method = &quot;getAll&quot;)</span></span><br><span class="line">List&lt;Payment&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.jdbc.SQL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentProvider</span> &#123;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SQL</span>().SELECT(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">.FROM(<span class="string">&quot;payment&quot;</span>).toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.entities.Payment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span>;</span><br><span class="line">Payment <span class="title function_">getPaymentById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.dao.PaymentDao;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> paymentDao.create(payment);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Payment <span class="title function_">getPaymentById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> paymentDao.getPaymentById(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.utils.CommonResult;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回给前端的结果集</span></span><br><span class="line"><span class="comment"> * 下面的 RequestBody 注解如果不加上， restTemplate 的 postForObject 将无法保存参数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> payment</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;create&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span> &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.create(payment);</span><br><span class="line">log.info(<span class="string">&quot;******插入结果：&quot;</span> + result);</span><br><span class="line"><span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>, <span class="string">&quot;插入数据库成功 port: &quot;</span> + serverPort, result);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>, <span class="string">&quot;插入数据库失败&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;get/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">getPaymentByID</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line"><span class="type">Payment</span> <span class="variable">payment</span> <span class="operator">=</span> paymentService.getPaymentById(id);</span><br><span class="line">log.info(<span class="string">&quot;******插入结果：&quot;</span> + payment);</span><br><span class="line"><span class="keyword">if</span> (payment != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>, <span class="string">&quot;查询成功 port: &quot;</span> + serverPort, payment);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">444</span>, <span class="string">&quot;没有查询记录&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;discovery&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">discovery</span><span class="params">()</span> &#123;</span><br><span class="line">List&lt;String&gt; services = <span class="built_in">this</span>.discoveryClient.getServices();</span><br><span class="line"><span class="keyword">for</span> (String service : services) &#123;</span><br><span class="line">log.info(<span class="string">&quot;*********** service: &quot;</span> + service);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">log.info(<span class="string">&quot;service application host = &#123;&#125;, port = &#123;&#125;, uri = &#123;&#125;&quot;</span>, instance.getHost(), instance.getPort(), instance.getUri());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.discoveryClient;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.zhazha.springcloud.dao.PaymentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;payment&quot;</span> <span class="attr">id</span>=<span class="string">&quot;PaymentMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">column</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPaymentById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;PaymentMap&quot;</span>&gt;</span></span><br><span class="line">        select * from payment p where p.id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="服务的消费者"><a href="#服务的消费者" class="headerlink" title="服务的消费者"></a>服务的消费者</h3><p>创建项目：<code>cloud-consumer02-order80</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service02</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">&#x27;127.0.0.1:8848&#x27;</span></span><br><span class="line"><span class="comment">#      server-addr: 192.168.133.128:8847  #集群 nginx 负载均衡访问 nacos</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"><span class="comment">#        namespace: public</span></span><br><span class="line"><span class="comment">#    loadbalancer:</span></span><br><span class="line"><span class="comment">#      enabled: true</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.rule.LoadBalancerConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.annotation.LoadBalancerClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@LoadBalancerClient(configuration = LoadBalancerConfig.class, value = &quot;cloud-payment-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMain80_2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        SpringApplication.run(OrderMain80_2.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> com.zhazha.springcloud.utils.CommonResult;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"><span class="comment">//定义服务端URL</span></span><br><span class="line"><span class="comment">//public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用微服务的名字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://cloud-payment-service&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端通过RestTemplate调用服务端</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;payment/create&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(Payment payment)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义<code>Rule</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.rule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.RandomLoadBalancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.ReactorServiceInstanceLoadBalancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.ServiceInstanceListSupplier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.support.LoadBalancerClientFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadBalancerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ReactorServiceInstanceLoadBalancer <span class="title function_">loadBalancer</span><span class="params">(Environment environment, LoadBalancerClientFactory loadBalancerClientFactory)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomLoadBalancer</span>(loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070121863.png" alt="image.png"></p><p>成功了</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 负载均衡 </tag>
            
            <tag> nacos </tag>
            
            <tag> Ribbon </tag>
            
            <tag> LoadBalancer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03spring-cloud整合dubbo使用nacos做注册中心</title>
      <link href="/2022/11/07/02springcloud/03spring-cloud%E6%95%B4%E5%90%88dubbo%E4%BD%BF%E7%94%A8nacos%E5%81%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
      <url>/2022/11/07/02springcloud/03spring-cloud%E6%95%B4%E5%90%88dubbo%E4%BD%BF%E7%94%A8nacos%E5%81%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="nacos安装和入门"><a href="#nacos安装和入门" class="headerlink" title="nacos安装和入门"></a>nacos安装和入门</h1><p><a href="https://juejin.cn/post/7119484969621127205">nacos简单入个门</a></p><h1 id="nacos-需要准备的地方"><a href="#nacos-需要准备的地方" class="headerlink" title="nacos 需要准备的地方"></a>nacos 需要准备的地方</h1><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070118320.png" alt="image.png"></p><h1 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring-cloud-nacos-dubbo-producer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring-cloud-nacos-dubbo-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring-cloud-nacos-dubbo-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="创建-api-项目"><a href="#创建-api-项目" class="headerlink" title="创建 api 项目"></a>创建 api 项目</h1><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070118652.png" alt="image.png"></p><p>这个项目主要是给服务的提供方和消费方提供一个公共的接口协议（接口参数）</p><h1 id="服务的提供方"><a href="#服务的提供方" class="headerlink" title="服务的提供方"></a>服务的提供方</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-nacos-dubbo-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-nacos-dubbo-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>bootstrap.yml</code> 这个文件主要给后期将我们的 <code>application.yml</code>配置上传到 <code>nacos</code>上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">allow-circular-references:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-producer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos的分组，不会修改 dubbo 注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos 的分组，不会修改dubbo注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">com.zhazha.producer.service.impl</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="comment"># dubbo 协议名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="comment"># dubbo 协议端口（ -1 表示自增端口，从 20880 开始）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的命名空间</span></span><br><span class="line">    <span class="string">parameters[namespace]:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的分组</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 关闭 dubbo 在线运维功能，该功能主要通过 telnet 方式进行服务的权重调整</span></span><br><span class="line">    <span class="attr">qos-enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>注意看注释的地方</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosDubboProducerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(NacosDubboProducerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.producer.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.api.HelloService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.DubboService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DubboService</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line">log.info(<span class="string">&quot;nacos-dubbo-producer&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;nacos-dubbo-producer&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务的提供方步骤结束</p><h1 id="服务的消费方"><a href="#服务的消费方" class="headerlink" title="服务的消费方"></a>服务的消费方</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-nacos-dubbo-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-nacos-dubbo-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>bootstrap.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">allow-circular-references:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos的分组，不会修改 dubbo 注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos 的分组，不会修改dubbo注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line"><span class="comment">#  scan:</span></span><br><span class="line"><span class="comment">#    base-packages: com.zhazha.producer.service.impl</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="comment"># dubbo 协议名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="comment"># dubbo 协议端口（ -1 表示自增端口，从 20880 开始）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的命名空间</span></span><br><span class="line">    <span class="string">parameters[namespace]:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的分组</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 关闭 dubbo 在线运维功能，该功能主要通过 telnet 方式进行服务的权重调整</span></span><br><span class="line">    <span class="attr">qos-enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>注意上面注释的地方</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosDubboConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(NacosDubboConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhazha.api.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.DubboReference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DubboReference</span></span><br><span class="line"><span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;sayHi&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sayHi</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> helloService.sayHi();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目需要准备的就这些了</p><p>调用成功：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070118727.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119107.png" alt="image.png"></p><p>同时 <code>dubbo </code>也会在 配置中心记录一些数据</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119972.png" alt="image.png"></p><h1 id="配置上传到-nacos"><a href="#配置上传到-nacos" class="headerlink" title="配置上传到 nacos"></a>配置上传到 <code>nacos</code></h1><p>现在将<code>application.yml</code>内的内容上传到 <code>nacos</code>配置中心上</p><h2 id="创建专用于配置的命名空间"><a href="#创建专用于配置的命名空间" class="headerlink" title="创建专用于配置的命名空间"></a>创建专用于配置的命名空间</h2><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119619.png" alt="image.png"></p><h2 id="提供方配置修改"><a href="#提供方配置修改" class="headerlink" title="提供方配置修改"></a>提供方配置修改</h2><blockquote><p>忘记 <code>dubbo</code> 会占用配置中心了，所以另外新建一个，</p></blockquote><p><code>bootstrap.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-producer</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">allow-circular-references:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">de98a7a1-8814-44c5-a635-e19872132371</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>去新建配置：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119938.png" alt="image.png"></p><p><code>dubbo-producer.yaml</code>填入内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-producer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos的分组，不会修改 dubbo 注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos 的分组，不会修改dubbo注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line">  <span class="attr">scan:</span></span><br><span class="line">    <span class="attr">base-packages:</span> <span class="string">com.zhazha.producer.service.impl</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="comment"># dubbo 协议名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="comment"># dubbo 协议端口（ -1 表示自增端口，从 20880 开始）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的命名空间</span></span><br><span class="line">    <span class="string">parameters[namespace]:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的分组</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br></pre></td></tr></table></figure><h2 id="消费方配置修改"><a href="#消费方配置修改" class="headerlink" title="消费方配置修改"></a>消费方配置修改</h2><p><code>bootstrap.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-consumer</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">allow-circular-references:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">de98a7a1-8814-44c5-a635-e19872132371</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>在nacos上创建<code>dubbo-consumer.yaml</code></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119750.png" alt="image.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos的分组，不会修改 dubbo 注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">        <span class="comment"># 这个只能修改 dubbo-producer 注册到 nacos 的分组，不会修改dubbo注册到 nacos 的分组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line"><span class="attr">dubbo:</span></span><br><span class="line"><span class="comment">#  scan:</span></span><br><span class="line"><span class="comment">#    base-packages: com.zhazha.producer.service.impl</span></span><br><span class="line">  <span class="attr">protocol:</span></span><br><span class="line">    <span class="comment"># dubbo 协议名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="comment"># dubbo 协议端口（ -1 表示自增端口，从 20880 开始）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">nacos://127.0.0.1:8848</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的命名空间</span></span><br><span class="line">    <span class="string">parameters[namespace]:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">    <span class="comment"># 修改 dubbo 在 nacos 上的分组</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 关闭 dubbo 在线运维功能，该功能主要通过 telnet 方式进行服务的权重调整</span></span><br><span class="line">    <span class="attr">qos-enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>最后<br /><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119984.png" alt="image.png"></p><blockquote><p>前面的入门篇已经讲过了，nacos配置中心的名字必须怎样，回到入门篇去看<br><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070119862.png" alt="image.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务发现 </tag>
            
            <tag> 注册中心 </tag>
            
            <tag> 服务注册 </tag>
            
            <tag> nacos </tag>
            
            <tag> CAP </tag>
            
            <tag> 服务消费方 </tag>
            
            <tag> 服务提供方 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-nacos入门</title>
      <link href="/2022/11/07/02springcloud/02-nacos%E5%85%A5%E9%97%A8/"/>
      <url>/2022/11/07/02springcloud/02-nacos%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="nacos学习"><a href="#nacos学习" class="headerlink" title="nacos学习"></a><code>nacos</code>学习</h1><h2 id="一、nacos是什么？"><a href="#一、nacos是什么？" class="headerlink" title="一、nacos是什么？"></a>一、<code>nacos</code>是什么？</h2><p><code>Nacos</code> 英文全称为 <code>Dynamic Naming and Configuration Service</code>，是一个由阿里巴巴团队使用 Java 语言开发的开源项目。</p><p><code>Nacos</code> 是一个更易于帮助构建云原生应用的动态<strong>服务发现</strong>、<strong>配置管理</strong>和<strong>服务管理</strong>平台（参考自 <a href="https://nacos.io/zh-cn/index.html">Nacos 官网</a>）。</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070115461.png" alt="image.png"></p><blockquote><p>总结下来主要做三件事：</p><ol><li>动态服务发现</li><li>服务管理</li><li>配置管理</li></ol></blockquote><h3 id="nacos-名字的由来（了解）"><a href="#nacos-名字的由来（了解）" class="headerlink" title="nacos 名字的由来（了解）"></a><code>nacos </code>名字的由来（了解）</h3><p><code>Nacos</code> 的命名是由 3 部分组成：</p><table><thead><tr><th>组成部分</th><th>全称</th><th>描述</th></tr></thead><tbody><tr><td><code>Na</code></td><td><code>naming/nameServer</code></td><td>即服务注册中心，与 <code>Spring Cloud Eureka</code><br /> 的功能类似。</td></tr><tr><td><code>co</code></td><td><code>configuration</code></td><td>即配置中心，与 <code>Spring Cloud Config</code><br />+<code>Spring Cloud Bus</code><br /> 的功能类似。</td></tr><tr><td><code>s</code></td><td><code>service</code></td><td>即服务，表示 <code>Nacos</code><br /> 实现的服务注册中心和配置中心都是以服务为核心的。</td></tr></tbody></table><p>我们可以将 <code>Nacos</code> 理解成服务注册中心和配置中心的组合体，它可以替换 <a href="http://m.biancheng.net/springcloud/eureka.html">Eureka</a> 作为服务注册中心，实现服务的注册与发现；还可以替换 <a href="http://m.biancheng.net/springcloud/config.html">Spring Cloud Config</a> 作为配置中心，实现配置的动态刷新。</p><p><code>Nacos</code> 作为服务注册中心经历了十年“双十一”的洪峰考验，具有简单易用、稳定可靠、性能卓越等优点，可以帮助用户更敏捷、容易地构建和管理微服务应用。</p><p><code>Nacos</code> 支持几乎所有主流类型“服务”的发现、配置和管理：</p><ul><li><a href="https://kubernetes.io/docs/concepts/services-networking/service/">Kubernetes Service</a></li><li><a href="https://grpc.io/docs/what-is-grpc/core-concepts#service-definition">gRPC </a>&amp; <a href="https://dubbo.apache.org/zh/">Dubbo RPC Service</a></li><li><code>Spring Cloud RESTful Service</code></li></ul><p>转载自：<a href="http://m.biancheng.net/springcloud/nacos.html">Nacos：Spring Cloud Alibaba服务注册与配置中心（非常详细） (biancheng.net)</a></p><p><img src="https://nacos.io/img/nacosMap.jpg#crop=0&crop=0&crop=1&crop=1&id=BJikK&originHeight=1198&originWidth=1880&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><h2 id="二、为什么使用Nacos？"><a href="#二、为什么使用Nacos？" class="headerlink" title="二、为什么使用Nacos？"></a>二、为什么使用<code>Nacos</code>？</h2><blockquote><p>或者说 <code>nacos</code> 有什么优势？</p></blockquote><ol><li><code>eureka 2.0</code>闭源 </li><li>开箱即用，上手简洁，暂时也没发现有太大的坑 </li><li><code>nacos</code>使用的<code>raft</code>协议,<code>nacos</code>集群的一致性要远大于<code>eureka</code>集群 </li><li>因为<code>nacos</code>功能更加丰富，社区更加活跃 </li><li>背靠国内大厂（经受双十一的考验），中英文文档 </li><li>界面美观 </li><li>支持 <code>k8s</code></li></ol><h2 id="三、nacos的架构"><a href="#三、nacos的架构" class="headerlink" title="三、nacos的架构"></a>三、<code>nacos</code>的架构</h2><h3 id="基本架构及概念（了解）"><a href="#基本架构及概念（了解）" class="headerlink" title="基本架构及概念（了解）"></a>基本架构及概念（了解）</h3><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116664.jpeg"></p><p>这张图通过三个部分查看</p><p>第一个部分是 <code>Multi-Datacenter Nacos Cluster</code> 的 <code>Nacos Server</code> 这是 <code>Nacos</code> 的核心</p><p>第二部分是 <code>Nacos</code> 的 <code>Console</code> 控制中心</p><p>第三部分是外部的 <code>Provider</code>、<code>Consumer</code></p><ul><li><code>Nameserver</code>：解决<code>namespace</code>到<code>clusterid</code>的路由问题，解决用户环境与<code>nacos</code>物理环境映射问题</li><li><code>Provider APP</code>：是指提供可复用和可调用服务的应用方。</li><li><code>Comsumer APP</code>：是指会发起对某个服务调用的应用方。</li><li><code>OpenAPI</code>：暴露标准<code>Rest</code>风格<code>HTTP</code>接口，简单易用，方便多语言集成</li><li><code>Naming Service</code>：提供分布式系统中所有对象(<code>Object</code>)、实体(<code>Entity</code>)的“名字”到关联的元数据之间的映射管理服务，例如 <code>ServiceName</code> -&gt; <code>Endpoints Info, Distributed Lock Name</code> -&gt; <code>Lock Owner/Status Info</code>, <code>DNS Domain Name</code> -&gt; <code>IP List</code>, 服务发现和 <code>DNS</code> 就是名字服务的2大场景。</li><li><code>Configuration Service</code>：在服务或者应用运行过程中，提供动态配置或者元数据以及配置管理的服务提供者。</li><li>一致性协议：解决不同数据，不同一致性要求情况下，不同一致性机制</li><li><code>Console</code>：易用控制台，做服务管理、配置管理等操作</li></ul><h3 id="逻辑架构及组件介绍（了解）"><a href="#逻辑架构及组件介绍（了解）" class="headerlink" title="逻辑架构及组件介绍（了解）"></a>逻辑架构及组件介绍（了解）</h3><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116388.png"></p><ul><li>服务管理：实现服务<code>CRUD</code>，域名<code>CRUD</code>，服务健康状态检查，服务权重管理等功能</li><li>配置管理：实现配置管<code>CRUD</code>，版本管理，灰度管理，监听管理，推送轨迹，聚合数据等功能</li><li>元数据管理：提供元数据<code>CURD</code> 和打标能力</li><li>插件机制：实现三个模块可分可合能力，实现扩展点<code>SPI</code>机制</li><li>事件机制：实现异步化事件通知，<code>sdk</code>数据变化异步通知等逻辑</li><li>日志模块：管理日志分类，日志级别，日志可移植性（尤其避免冲突），日志格式，异常码+帮助文档</li><li>回调机制：<code>sdk</code>通知数据，通过统一的模式回调用户处理。接口和数据结构需要具备可扩展性</li><li>寻址模式：解决<code>ip</code>，域名，<code>nameserver</code>、广播等多种寻址模式，需要可扩展</li><li>推送通道：解决server与存储、<code>server</code>间、<code>server</code>与<code>sdk</code>间推送性能问题</li><li>容量管理：管理每个租户，分组下的容量，防止存储被写爆，影响服务可用性</li><li>流量管理：按照租户，分组等多个维度对请求频率，长链接个数，报文大小，请求流控进行控制</li><li>缓存机制：容灾目录，本地缓存，<code>server</code>缓存机制。容灾目录使用需要工具</li><li>启动模式：按照单机模式，配置模式，服务模式，<code>dns</code>模式，或者<code>all</code>模式，启动不同的程序<code>+UI</code></li><li>一致性协议：解决不同数据，不同一致性要求情况下，不同一致性机制</li><li>存储模块：解决数据持久化、非持久化存储，解决数据分片问题</li><li><code>Nameserver</code>：解决<code>namespace</code>到<code>clusterid</code>的路由问题，解决用户环境与<code>nacos</code>物理环境映射问题</li><li><code>CMDB</code>：解决元数据存储，与三方<code>cmdb</code>系统对接问题，解决应用，人，资源关系</li><li><code>Metrics</code>：暴露标准<code>metrics</code>数据，方便与三方监控系统打通</li><li><code>Trace</code>：暴露标准<code>trace</code>，方便与<code>SLA</code>系统打通，日志白平化，推送轨迹等能力，并且可以和计量计费系统打通</li><li>接入管理：相当于阿里云开通服务，分配身份、容量、权限过程</li><li>用户管理：解决用户管理，登录，<code>sso</code>等问题</li><li>权限管理：解决身份识别，访问控制，角色管理等问题</li><li>审计系统：扩展接口方便与不同公司审计系统打通</li><li>通知系统：核心数据变更，或者操作，方便通过<code>SMS</code>系统打通，通知到对应人数据变更</li><li><code>OpenAPI</code>：暴露标准<code>Rest</code>风格<code>HTTP</code>接口，简单易用，方便多语言集成</li><li><code>Console</code>：易用控制台，做服务管理、配置管理等操作</li><li><code>SDK</code>：多语言<code>sdk</code></li><li><code>Agent</code>：<code>dns-f</code>类似模式，或者与<code>mesh</code>等方案集成</li><li><code>CLI</code>：命令行对产品进行轻量化管理，像<code>git</code>一样好用</li></ul><h3 id="nacos-目前的功能"><a href="#nacos-目前的功能" class="headerlink" title="nacos 目前的功能"></a><code>nacos</code> 目前的功能</h3><p><a href="https://nacos.io/zh-cn/docs/feature-list.html">feature-list (nacos.io)</a></p><h3 id="nacos两大组件"><a href="#nacos两大组件" class="headerlink" title="nacos两大组件"></a><code>nacos</code>两大组件</h3><p>与 <code>Eureka</code> 类似，<code>Nacos</code> 也采用 <code>CS</code>（<code>Client/Server</code>，客户端&#x2F;服务器）架构，它包含两大组件，如下表。</p><table><thead><tr><th>组件</th><th>描述</th><th>功能</th></tr></thead><tbody><tr><td><code>Nacos Server</code></td><td><code>Nacos</code><br /> 服务端，与 <code>Eureka Server</code><br /> 不同，<code>Nacos Server</code><br /> 由阿里巴巴团队使用 <code>Java</code><br /> 语言编写并将 <code>Nacos Server</code><br /> 的下载地址给用户，用户只需要直接下载并运行即可。</td><td><code>Nacos Server</code><br /> 可以作为服务注册中心，帮助 <code>Nacos Client</code><br /> 实现服务的注册与发现。</td></tr><tr><td></td><td></td><td><code>Nacos Server</code><br /> 可以作为配置中心，帮助 <code>Nacos Client</code><br /> 在不重启的情况下，实现配置的动态刷新。</td></tr><tr><td><code>Nacos Client</code></td><td><code>Nacos</code><br /> 客户端，通常指的是微服务架构中的各个服务，由用户自己搭建，可以使用多种语言编写。</td><td><code>Nacos Client</code><br /> 通过添加依赖 <code>spring-cloud-starter-alibaba-nacos-discovery</code><br />，在服务注册中心（<code>Nacos Server</code><br />）中实现服务的注册与发现。</td></tr><tr><td></td><td></td><td><code>Nacos Client</code><br /> 通过添加依赖 <code>spring-cloud-starter-alibaba-nacos-config</code><br />，在配置中心（<code>Nacos Server</code><br />）中实现配置的动态刷新。</td></tr></tbody></table><h3 id="CAP原则"><a href="#CAP原则" class="headerlink" title="CAP原则"></a><code>CAP</code>原则</h3><p><code>CAP</code>原理主要讲的是在一个分布式系统中的一致性（<code>Consistency</code>），可用性（<code>Availability</code>）和分区容忍性（也称分区容错性）（<code>Partition tolerance</code>），这三点只能满足两点</p><p>其中</p><p>①一致性：对于客户端的每次读操作，要么读到的是最新的数据，要么读取失败。换句话说，一致性是站在分布式系统的角度，对访问本系统的客户端的一种承诺：要么我给您返回一个错误，要么我给你返回绝对一致的最新数据，不难看出，其强调的是数据正确。</p><p>②可用性：任何客户端的请求都能得到响应数据，不会出现响应错误。换句话说，可用性是站在分布式系统的角度，对访问本系统的客户的另一种承诺：我一定会给您返回数据，不会给你返回错误，但不保证数据最新，强调的是不出错。</p><p>③分区容忍性：由于分布式系统通过网络进行通信，网络是不可靠的。当任意数量的消息丢失或延迟到达时，系统仍会继续提供服务，不会挂掉。换句话说，分区容忍性是站在分布式系统的角度，对访问本系统的客户端的再一种承诺：我会一直运行，不管我的内部出现何种数据同步问题，强调的是不挂掉。</p><p>可以看出这三点中有一点必须满足，<code>分区容忍性Partition tolerance</code>，否则系统只要丢失掉一个节点，整个分布式系统都将无法工作</p><p>所以对于一个分布式组件来说，要么满足<code>AP</code>，要么满足<code>CP</code></p><p>而众所周知的 <code>zookeeper</code> 满足了 <code>CP</code>，抛弃了 <code>A</code></p><p><code>Eurake</code>满足了 <code>AP</code>，保证了 <code>C</code> 的最终一致性</p><p>而本文 的 <code>nacos</code> 默认启动 <code>AP</code>，同时也支持<code>CP</code></p><h3 id="nacos和一致性算法"><a href="#nacos和一致性算法" class="headerlink" title="nacos和一致性算法"></a><code>nacos</code>和一致性算法</h3><h4 id="为什么-nacos-需要一致性算法？"><a href="#为什么-nacos-需要一致性算法？" class="headerlink" title="为什么 nacos 需要一致性算法？"></a>为什么 <code>nacos</code> 需要一致性算法？</h4><p><code>nacos</code> 为了尽量减少用户的部署和运营成本，做到用户只需要一个包就可以快速启动<code>nacos</code>单机或者集群，因此 <code>nacos</code> 需要存储一些数据。</p><p><code>nacos</code>在单机下存储数据问题不大，但是在集群下就需要一些一致性算法帮助各个节点进行数据同步，就不得不引入现存的一些共识算法咯</p><h3 id="为什么-nacos-选择raft以及distro？"><a href="#为什么-nacos-选择raft以及distro？" class="headerlink" title="为什么 nacos 选择raft以及distro？"></a>为什么 <code>nacos</code> 选择<code>raft</code>以及<code>distro</code>？</h3><h4 id="raft共识算法"><a href="#raft共识算法" class="headerlink" title="raft共识算法"></a>raft共识算法</h4><p><code>raft</code> 协议简单入门看这里：（了解）</p><p><a href="https://juejin.cn/post/7116445621082390565">https://juejin.cn/post/7116445621082390565</a></p><ul><li><code>nacos</code>作为<strong>服务发现注册中心</strong>而言：</li></ul><p>而服务发现注册中心<strong>必须要保证可用性</strong>，而<strong>强一致性协议的情况下，如果集群可用的节点数没有过半的话，可能导致注册中心在部分时间内不可用</strong></p><p>所以最终<code>nacos</code>选择了 <code>AP</code> 并配合 <strong>最终一致性</strong> 作为 服务发现注册中心 的底层共识算法</p><blockquote><p>以上针对 <code>nacos</code> 非持久化数据而言，对于持久化数据来说，就不需要选择<code>AP</code>，可以配合强一致性共识算法</p></blockquote><ul><li><code>nacos</code> 作为配置中心的而言：</li></ul><p>配置数据中心必须保证绝大多数节点的配置都是一致的，否则可能导致配置不同或者配置丢失引起分布式系统中的节点出现严重的问题，所以对于配置数据中心而言，配置必须使用强一致性</p><p>所以 <code>nacos</code> 同时支持 <code>AP</code> 和 <code>CP</code></p><p>那为什么 <code>nacos</code> 选择 <code>raft</code> 和 <code>distro</code> 呢？</p><p>首先 <code>raft</code> 是强一致性共识算法，而且很好理解，其次 <code>nacos</code> 背靠阿里，实现了另一套基于<code>raft</code>的算法 <code>JRaft</code></p><p><code>JRaft</code>支持多 <code>RaftGroup</code>, 也可以为 <code>nacos</code> 后面提供多数据分片带来了可能</p><h4 id="distro协议"><a href="#distro协议" class="headerlink" title="distro协议"></a><code>distro</code>协议</h4><p><code>**distro**</code>** 协议是阿里巴巴自研的⼀个最终⼀致性协议<strong>，而最终⼀致性协议有很多，比如 <code>Gossip</code>、 <code>Eureka</code> 内的数据同步算法。而 <code>distro</code> 算法是集 <code>Gossip</code> 以及 <code>Eureka</code> 协议的优点并加以优化而出来的，对于原生的 <code>Gossip</code>，</strong>由于随机选取发送消息的节点，也就不可避免的存在消息重复发送给同⼀节点的情况，增加了网络的传输的压力，也给消息节点带来额外的处理负载<strong>，而 <code>distro</code> 算法引入了 <code>Server</code> 的概念，</strong>每个节点负责⼀部分数据以及将自己的数据同步给其他节点，有效的降低了消息冗余的问题**。</p><h2 id="四、怎么装？"><a href="#四、怎么装？" class="headerlink" title="四、怎么装？"></a>四、怎么装？</h2><p>去 <code>git</code> 上下载</p><p><a href="https://github.com/alibaba/nacos/releases/tag/2.1.0">Release 2.1.0 (Apr 29, 2022) · alibaba&#x2F;nacos (github.com)</a></p><h3 id="Linux-Unix-Mac下启动方式"><a href="#Linux-Unix-Mac下启动方式" class="headerlink" title="Linux/Unix/Mac下启动方式"></a><code>Linux/Unix/Mac</code>下启动方式</h3><p>启动命令(<code>standalone</code>代表着单机模式运行，非集群模式):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure><p>如果您使用的是<code>ubuntu</code>系统，或者运行脚本报错提示[[符号找不到，可尝试如下运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash startup.sh -m standalone</span><br></pre></td></tr></table></figure><h3 id="window下启动"><a href="#window下启动" class="headerlink" title="window下启动"></a><code>window</code>下启动</h3><p>请进入目录 <code>D:\programs\env\nacos-server-2.1.0_2\nacos\bin</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p>单机启动</p><p>可以在控制台看到</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116516.png" alt="image.png"></p><blockquote><p>这里我使用的是 <code>docker</code> 安装的 <code>nacos</code>，后面会讲</p></blockquote><blockquote><p><del>这里有个坑，</del><code>~~application.properties~~</code><del>里面的几个属性都是无效的，不知道是不是我没弄清楚什么。。。</del></p></blockquote><blockquote><p>可以在<code>bootstrap.yml</code>中配置</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos.config.data-id</span>=<span class="string">example</span></span><br><span class="line"><span class="attr">nacos.config.group</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="attr">nacos.config.auto-refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p><a href="http://localhost:8080/config/get"><br /></a></p><h3 id="docker上安装nacos的坑"><a href="#docker上安装nacos的坑" class="headerlink" title="docker上安装nacos的坑"></a><code>docker</code>上安装<code>nacos</code>的坑</h3><p>如果你选择在 <code>docker</code> 上安装 <code>nacos</code> ， 你只需要下载 <code>nacos/nacos-server</code> 这个镜像包</p><p>然后你会看到 <code>docker hub</code> 上的 <code>quick start</code>:</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116274.png" alt="image.png"></p><p>你跟着做，你会发现 <code>nacos</code> 启动成功了，但你 <code>spring-boot</code> 项目怎么都无法启动成功</p><p>如果你回到 <code>nacos</code> 官方文档，又会看到另一个方式：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116906.png" alt="image.png"></p><p>需要你去 <code>github</code> 上 <code>clone</code> 项目</p><p>如果你没梯子，会很麻烦，而且也很复杂</p><p>那我只想要 <code>docker hub</code> 上的 <code>nacos</code> 怎么办？</p><p><a href="https://github.com/nacos-group/nacos-docker">nacos-group&#x2F;nacos-docker: This project contains a Docker image meant to facilitate the deployment of Nacos . (github.com)</a></p><p>看上面网址</p><p>这里会有个 <code>quick start</code>：</p><p><code>docker run --name nacos-quick -e MODE=standalone -p 8848:8848 -p 9848:9848 -d nacos/nacos-server:2.0.2</code></p><p>你会发现问题</p><p>多了个端口 <code>9848</code></p><p>对， 这才是对的。。。</p><p>然后你回去看 <code>nacos</code> 的镜像配置</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116314.png" alt="image.png"></p><p>咦，不是只暴露了一个端口么？ 怎么还要另一个端口？</p><p>答案在这里：</p><p><a href="https://nacos.io/zh-cn/docs/2.0.0-compatibility.html">Nacos 2.0.0 兼容性文档</a></p><p><code>Nacos2.0</code>版本相比<code>1.X</code>新增了<code>gRPC</code>的通信方式，因此需要增加<code>2个端口</code>。新增端口是在配置的主端口<code>(server.port)</code>基础上，进行一定偏移量自动生成。</p><table><thead><tr><th>端口</th><th>与主端口的偏移量</th><th>描述</th></tr></thead><tbody><tr><td><code>9848</code></td><td><code>1000</code></td><td>客户端<code>gRPC</code><br />请求服务端端口，用于客户端向服务端发起连接和请求</td></tr><tr><td><code>9849</code></td><td><code>1001</code></td><td>服务端<code>gRPC</code><br />请求服务端端口，用于服务间同步等</td></tr></tbody></table><blockquote><p>好吧，我直接 <code>nacos 2.1</code> 的，谁会没事去关注兼容问题，害~ 我没话说了，下次一定跟官网走。。。</p></blockquote><h3 id="github-上-nacos-docker-需要注意的地方"><a href="#github-上-nacos-docker-需要注意的地方" class="headerlink" title="github 上 nacos-docker 需要注意的地方"></a><code>github </code>上 <code>nacos-docker</code> 需要注意的地方</h3><p>在<code>github</code>上的 <code>nacos-docker</code> 这个项目会三种方式告诉你如何启动 <code>nacos</code></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116364.png" alt="image.png"></p><ul><li>单机模式 <code>Derby</code>:     这种模式是极简模式，数据没法持久化存储，适合开发环境。</li><li>单机模式 <code>MySQL</code>:(支持<code>MySQL5.7</code>和<code>MySQL8.0</code>，我们这里学习<code>MySQL5.7</code>安装模式，因为当前主流还是<code>MySQL5.7</code>)     这种模式支持数据持久化，数据会存储到MySQL中，适合生产环境。</li><li>集群模式:     这种模式适合生产环境并且服务节点个数较多，不存在单点故障问题。</li></ul><blockquote><p>注意上面使用 <code>mysql </code>的方式启动需要 <code>mysql </code>表结构，而表结构在 <code>nacos </code>官方的项目中<br><a href="https://github.com/alibaba/nacos/blob/develop/config/src/main/resources/META-INF/nacos-db.sql">https://github.com/alibaba/nacos/blob/develop/config/src/main/resources/META-INF/nacos-db.sql</a></p></blockquote><h2 id="四、springboot整合nacos"><a href="#四、springboot整合nacos" class="headerlink" title="四、springboot整合nacos"></a>四、<code>springboot</code>整合<code>nacos</code></h2><h3 id="nacos配置中心"><a href="#nacos配置中心" class="headerlink" title="nacos配置中心"></a><code>nacos</code>配置中心</h3><p>nacos上面需要这样：</p><ol><li>新建命名空间</li></ol><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116206.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116668.png" alt="image.png"></p><p>配置列表的内容是：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116453.png" alt="image.png"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070116119.png" alt="image.png"></p><p>首先创建 <code>springboot</code> <code>maven</code>项目</p><p><code>pom.xml</code> 如下：（这里是 <code>maven pom</code> 项目，注意自己去创建一个新模块 导入 <code>dependencyManagement</code> 内的依赖）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>spring-boot-nacos-config<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-config-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">f4d95375-72ac-4197-9314-87b7fc0d0530</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><blockquote><p>这里需要注意，命名空间需要填入 <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117698.png" alt="image.png"><br>而不是 <code>namespace: spring-boot</code> </p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.spring.context.<span class="keyword">annotation</span>.config.NacosPropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@NacosPropertySource(dataId = <span class="string">&quot;nacos-config.properties&quot;</span>, groupId = <span class="string">&quot;spring-boot-config&quot;</span>, autoRefreshed = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosConfigApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> static void main(String[] args) throws Exception &#123;</span><br><span class="line">SpringApplication.run(NacosConfigApplication.<span class="keyword">class</span>, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.config.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.config.<span class="keyword">annotation</span>.NacosValue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</span><br><span class="line"><span class="keyword">import</span> static org.springframework.web.bind.<span class="keyword">annotation</span>.RequestMethod.GET;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NacosValue(value = <span class="string">&quot;<span class="subst">$&#123;useLocalCache:false&#125;</span>&quot;</span>, autoRefreshed = true)</span></span><br><span class="line"><span class="keyword">private</span> boolean useLocalCache;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = <span class="string">&quot;/get&quot;</span>, method = GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> boolean <span class="keyword">get</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> useLocalCache;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117555.png" alt="image.png"></p><p>成了</p><blockquote><p>注意 <code>autoRefreshed = true</code> ，这样微服务才随时能感知 <code>nacos </code>配置的变化</p></blockquote><h3 id="nacos服务发现"><a href="#nacos服务发现" class="headerlink" title="nacos服务发现"></a><code>nacos</code>服务发现</h3><h4 id="服务提供端"><a href="#服务提供端" class="headerlink" title="服务提供端"></a>服务提供端</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-nacos-discovery-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>巨坑：<code>nacos </code>的 <code>springboot </code>包中的<code>spring-context-support</code>依赖不向前兼容，导致项目启动报错：<br><code>com.sun.proxy.$Proxy27 cannot be cast to class java.util.Map (com.sun.proxy.$Proxy27 is in unnamed module of loader &#39;app&#39;; java.util.Map is in module java.base of loader &#39;bootstrap&#39;)</code><br>看了下，就差了一个版本：<code>1.0.10</code> 人都傻了</p></blockquote><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-producer</span></span><br><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">*</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosDiscoveryApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> static void main(String[] args) throws Exception &#123;</span><br><span class="line">SpringApplication.run(NacosDiscoveryApplication.<span class="keyword">class</span>, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.<span class="keyword">annotation</span>.NacosInjected;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.exception.NacosException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.naming.NamingService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NacosInjected</span></span><br><span class="line"><span class="keyword">private</span> NamingService namingService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(<span class="string">&quot;/register&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> boolean getServiceName() throws NacosException &#123;</span><br><span class="line">namingService.registerInstance(<span class="string">&quot;example&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务，访问 <a href="http://127.0.0.1:8080/register">http://127.0.0.1:8080/register</a> 注册服务</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117299.png" alt="image.png"></p><h4 id="服务消费端"><a href="#服务消费端" class="headerlink" title="服务消费端"></a>服务消费端</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-nacos-dicovery-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nacos-discovery-spring-boot-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-consumer</span></span><br><span class="line"><span class="attr">nacos:</span></span><br><span class="line">  <span class="attr">discovery:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">*</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosDiscoveryApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(NacosDiscoveryApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.annotation.NacosInjected;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.exception.NacosException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.naming.NamingService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.nacos.api.naming.pojo.Instance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscoveryController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NacosInjected</span></span><br><span class="line"><span class="keyword">private</span> NamingService namingService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Instance&gt; <span class="title function_">get</span><span class="params">(<span class="meta">@RequestParam</span> String serviceName)</span> <span class="keyword">throws</span> NacosException &#123;</span><br><span class="line"><span class="keyword">return</span> namingService.getAllInstances(serviceName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117210.png" alt="image.png"></p><p>成功了</p><h2 id="五、springcloud-整合-nacos"><a href="#五、springcloud-整合-nacos" class="headerlink" title="五、springcloud 整合 nacos"></a>五、<code>springcloud</code> 整合 <code>nacos</code></h2><h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-nacos-config-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里需要注意添加：<code>spring-cloud-starter-bootstrap</code>，这一点官网没说，给的例子也是较为低的 <code>spring-boot </code>版本，这点需要注意</p><p><code>nacos </code>官方都说了 要用到 <code>bootstrap.yml </code>配置文件</p><p>新建 <code>bootstrap.yml </code>文件，填入下面代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">properties</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">spring-cloud-config</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br></pre></td></tr></table></figure><blockquote><p><code>namespace </code>在这里能看到： <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117620.png" alt="image.png"></p></blockquote><p>在 <code>application.yml</code> 文件中填入代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudNacosConfigApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(SpringCloudNacosConfigApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.config.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;user.id:&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;user.password:&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;get&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">&quot;username = %s, password = %s\n&quot;</span>, username, password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里只能使用<code>@Value</code>，如果使用<code>@NacosValue</code>注解，无效</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117864.png" alt="image.png"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117924.png" alt="image.png"></p><blockquote><p>这里需要注意：配置文件名必须是 <code>spring.application.name</code>+ <code>spring.profiles.active</code> + <code>.</code> + <code>spring.cloud.nacos.config.file-extension</code><br>比如你的 <code>application</code>名字是 <code>zhazha</code>，然后 <code>active </code>写成 <code>dev</code>，最后<code>file-extension</code> 写上 <code>yaml</code> 或者 <code>properties </code>(目前只支持这两种)</p></blockquote><p>然后你会发现不成功</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117840.png" alt="image.png"></p><p>为什么？</p><blockquote><p>如果你是新手可以直接搜索：“springcloud nacos 配置中心 坑”调整下时间，近期一年的搜索就会找到解决方法</p></blockquote><p>问题很简单，<code>spring-boot </code>从 版本开始就将 <code>bootstrap.yml </code>剥离出去了，所以需要添加包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样 <code>bootstrap.yml </code>配置文件才会生效</p><p>重新启动，就可以了</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117207.png" alt="image.png"></p><blockquote><p>很多时候不要去嘲讽那些守旧的人，特别是<code>java8</code>程序员，他们吃过的盐比我们吃过的饭还多。哈哈哈</p></blockquote><h3 id="nacos服务发现-1"><a href="#nacos服务发现-1" class="headerlink" title="nacos服务发现"></a><code>nacos</code>服务发现</h3><h4 id="服务提供端-1"><a href="#服务提供端-1" class="headerlink" title="服务提供端"></a>服务提供端</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-nacos-discovery-producer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><p><code>bootstrap.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-producer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringCloudNacosProducerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(SpringCloudNacosProducerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;get&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sayHi</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;producer: &quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目后将会在这里看到：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070117652.png" alt="image.png"></p><p>可以访问：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070118429.png" alt="image.png"></p><h4 id="服务的消费端"><a href="#服务的消费端" class="headerlink" title="服务的消费端"></a>服务的消费端</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-nacos-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhazha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-nacos-discovery-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><p><code>bootstrap.yml</code> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">edc7dbc5-31bb-4bb6-bbe7-b76e0828e918</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">spring-cloud</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhazha.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosConsumerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(NacosConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhazha.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ConsumerController</span><span class="params">(RestTemplate restTemplate)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.restTemplate = restTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;consumer/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">consumer</span><span class="params">(<span class="meta">@PathVariable</span> String name)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8080/get?name=&#123;name&#125;&quot;</span>, String.class, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070118463.png" alt="image.png"></p><p>成功了</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务发现 </tag>
            
            <tag> 注册中心 </tag>
            
            <tag> 服务注册 </tag>
            
            <tag> nacos </tag>
            
            <tag> CAP </tag>
            
            <tag> 一致性算法 </tag>
            
            <tag> 共识算法 </tag>
            
            <tag> raft </tag>
            
            <tag> paxos </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01Eureka和其他方案</title>
      <link href="/2022/11/07/02springcloud/01-Eureka%E5%92%8C%E5%85%B6%E4%BB%96%E6%96%B9%E6%A1%88/"/>
      <url>/2022/11/07/02springcloud/01-Eureka%E5%92%8C%E5%85%B6%E4%BB%96%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>仅用于当字典查</p><h1 id="Eureka的理论部分"><a href="#Eureka的理论部分" class="headerlink" title="Eureka的理论部分"></a>Eureka的理论部分</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>Eureka是一个服务注册和发现的<strong>注册中心</strong></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070112403.png"></p><p>需要注意上图在 Eureka Server 和 Service Provider 这两个部分可以做集群</p><p>Service Provider 先将自己的服务注册到注册中心 Eureka Server 中，接着 Service Consumer 也注册到 注册中心中，然后根据自己的需要选择服务</p><p>注册中心将服务提供者的地址发送给 Service Consumer 中，Service Consumer在根据地址远程调用 Service Provider</p><h2 id="Eureka-Server-和-Eureka-Client-的故事"><a href="#Eureka-Server-和-Eureka-Client-的故事" class="headerlink" title="Eureka Server 和 Eureka Client 的故事"></a>Eureka Server 和 Eureka Client 的故事</h2><p>我们以房东和租户之间的关系来对照 Eureka Server 和 Eureka Client 之间的关系</p><table><thead><tr><th>租户每 30 天需要交房租给房东</th><th>Eureka Client 每 30 秒对 Eureka Server 发送一次心跳包</th></tr></thead><tbody><tr><td>租户如果90天（也就是3个月）没交房租，房子和押金都会被房东收回</td><td>Eureka Server 发现某个 Eureka Client 超过 90 秒都没发送心跳包，Eureka Server会从注册表中把该 Eureka Client 删除</td></tr></tbody></table><h1 id="整合Eureka（单机）"><a href="#整合Eureka（单机）" class="headerlink" title="整合Eureka（单机）"></a>整合Eureka（单机）</h1><h2 id="父项目"><a href="#父项目" class="headerlink" title="父项目"></a>父项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.zhazha.springcloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springcloud_study_parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;cloud-provider-payment8001&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.7.1&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2021.0.3&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2021.1&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;8.0.29&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.2.11&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.2.2&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;4.13.1&lt;/version&gt;</span><br><span class="line">                &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.17.2&lt;/version&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.18.24&lt;/version&gt;</span><br><span class="line">                &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;finalName&gt;springcloud_study_parent&lt;/finalName&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.7.1&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">                    &lt;addResources&gt;true&lt;/addResources&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="创建-api-项目"><a href="#创建-api-项目" class="headerlink" title="创建 api 项目"></a>创建 api 项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud_study_parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.22&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.8.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud.entities;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Payment implements Serializable &#123;</span><br><span class="line">private Long id;</span><br><span class="line">private String serial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.zhazha.springcloud.utils;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class CommonResult&lt;T&gt; implements Serializable &#123;</span><br><span class="line">private Integer code;</span><br><span class="line">private String message;</span><br><span class="line">private T data;</span><br><span class="line"></span><br><span class="line">public CommonResult(Integer code, String message) &#123;</span><br><span class="line">this.code = code;</span><br><span class="line">this.message = message;</span><br><span class="line">this.data = null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建注册中心项目"><a href="#创建注册中心项目" class="headerlink" title="创建注册中心项目"></a>创建注册中心项目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud_study_parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-eureka-server7001&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7001</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line">  client:</span><br><span class="line">    register-with-eureka: false # false表示不向注册中心注册自己</span><br><span class="line">    fetch-registry: false # false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class EurekaMain7001 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(EurekaMain7001.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud_study_parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-provider-payment8001&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-payment-service</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource            # 当前数据源操作类型</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver             # mysql驱动包</span><br><span class="line">    url: jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  mapperLocations: classpath:mapper/*.xml</span><br><span class="line">  type-aliases-package: com.zhazha.springcloud.entities    # 所有Entity别名类所在包</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line"></span><br><span class="line">#Eureka配置</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    # 表示是否将自己注册进EurekaServer，默认为 true</span><br><span class="line">    register-with-eureka: true</span><br><span class="line">    # 是否从EurekaServer抓取已有的注册信息，默认为 true 。单节点无所谓，</span><br><span class="line">    # 集群必须设置为true才能配合 ribbon 使用负载均衡</span><br><span class="line">    fetch-registry: true</span><br><span class="line">    # EurekaServer的地址</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:7001/eureka</span><br></pre></td></tr></table></figure><p>mybatis的Mapper xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.zhazha.springcloud.dao.PaymentDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap type=&quot;payment&quot; id=&quot;PaymentMap&quot;&gt;</span><br><span class="line">        &lt;result property=&quot;id&quot; column=&quot;id&quot; jdbcType=&quot;BIGINT&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;serial&quot; column=&quot;serial&quot; jdbcType=&quot;VARCHAR&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;getPaymentById&quot; resultMap=&quot;PaymentMap&quot;&gt;</span><br><span class="line">        select * from payment p where p.id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(value = &quot;com.zhazha.springcloud.dao&quot;)</span><br><span class="line">@EnableEurekaClient</span><br><span class="line">public class PaymentMain8001 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(PaymentMain8001.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud.dao;</span><br><span class="line"></span><br><span class="line">import com.zhazha.springcloud.entities.Payment;</span><br><span class="line">import org.apache.ibatis.annotations.Insert;</span><br><span class="line">import org.apache.ibatis.annotations.Param;</span><br><span class="line">import org.apache.ibatis.annotations.SelectProvider;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface PaymentDao &#123;</span><br><span class="line">@Insert(&quot;insert into payment(serial) values (#&#123;serial&#125;)&quot;)</span><br><span class="line">int create(Payment payment);</span><br><span class="line">//@Select(&quot;select * from payment p where p.id = #&#123;id&#125;&quot;)</span><br><span class="line">Payment getPaymentById(@Param(&quot;id&quot;) Long id);</span><br><span class="line"></span><br><span class="line">@SelectProvider(type = PaymentProvider.class, method = &quot;getAll&quot;)</span><br><span class="line">List&lt;Payment&gt; getAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud.dao;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.jdbc.SQL;</span><br><span class="line"></span><br><span class="line">public class PaymentProvider &#123;</span><br><span class="line">public String getAll() &#123;</span><br><span class="line">return new SQL().SELECT(&quot;*&quot;)</span><br><span class="line">.FROM(&quot;payment&quot;).toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意 <code>public String getAll()</code>函数必须是 <code>public</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud.service;</span><br><span class="line"></span><br><span class="line">import com.zhazha.springcloud.entities.Payment;</span><br><span class="line"></span><br><span class="line">public interface PaymentService &#123;</span><br><span class="line">int create(Payment payment);</span><br><span class="line">Payment getPaymentById(Long id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud.service.impl;</span><br><span class="line"></span><br><span class="line">import com.zhazha.springcloud.dao.PaymentDao;</span><br><span class="line">import com.zhazha.springcloud.entities.Payment;</span><br><span class="line">import com.zhazha.springcloud.service.PaymentService;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class PaymentServiceImpl implements PaymentService &#123;</span><br><span class="line">@Resource</span><br><span class="line">private PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public int create(Payment payment) &#123;</span><br><span class="line">return paymentDao.create(payment);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public Payment getPaymentById(Long id) &#123;</span><br><span class="line">return paymentDao.getPaymentById(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line">import com.zhazha.springcloud.entities.Payment;</span><br><span class="line">import com.zhazha.springcloud.service.PaymentService;</span><br><span class="line">import com.zhazha.springcloud.utils.CommonResult;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">@RequestMapping(&quot;payment&quot;)</span><br><span class="line">public class PaymentController &#123;</span><br><span class="line">@Resource</span><br><span class="line">private PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 返回给前端的结果集</span><br><span class="line"> * 下面的 RequestBody 注解如果不加上， restTemplate 的 postForObject 将无法保存参数</span><br><span class="line"> * @param payment</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">@PostMapping(value = &quot;create&quot;)</span><br><span class="line">public CommonResult create(@RequestBody Payment payment) &#123;</span><br><span class="line">Integer result = paymentService.create(payment);</span><br><span class="line">log.info(&quot;******插入结果：&quot; + result);</span><br><span class="line">if (result &gt; 0) &#123;</span><br><span class="line">return new CommonResult(200, &quot;插入数据库成功&quot;, result);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return new CommonResult(444, &quot;插入数据库失败&quot;, null);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@GetMapping(value = &quot;get/&#123;id&#125;&quot;)</span><br><span class="line">public CommonResult getPaymentByID(@PathVariable(&quot;id&quot;) Long id) &#123;</span><br><span class="line">Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">log.info(&quot;******插入结果：&quot; + payment);</span><br><span class="line">if (payment != null) &#123;</span><br><span class="line">return new CommonResult(200, &quot;查询成功&quot;, payment);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return new CommonResult(444, &quot;没有查询记录&quot;, null);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>@RequestBody</code>和<code>@ResponseBody</code>的功能</p><p>如果不使用 <code>@RequestBody</code>每个属性对应一个参数，参数在请求的URL中</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070112109.png"></p><p>如果使用 <code>@RequestBody</code>的话，一个实体对应一个参数，参数不在请求的URL中</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070112323.png"></p><ul><li><code>@RequestBody</code>的作用是：读取<code>Request</code>请求的<code>body</code>部分数据，使用系统默认配置的<code>HttpMessageConverter</code>进行解析，然后把相应的数据绑定到要返回的对象上，再把<code>HttpMessageConverter</code>返回的对象数据绑定到 <code>controller</code>中方法的参数上；</li><li><code>@ResponseBody</code>的作用是：用于将<code>Controller</code>的方法返回的对象，通过适当的<code>HttpMessageConverter</code>转换为指定格式后，写入到Response对象的body数据区。返回的数据不是<code>html</code>标签的页面，而是其他某种格式的数据时（如<code>json</code>、<code>xml</code>等）使用</li></ul><p>添加日志显示 mybatis sql:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  file:</span><br><span class="line">  # 日志保存位置</span><br><span class="line">    path: D:\programs\codes\java\springcloud_study_parent\logs</span><br><span class="line">  level:</span><br><span class="line">    # 某包下日志打印 level</span><br><span class="line">    com:</span><br><span class="line">      zhazha:</span><br><span class="line">        springcloud:</span><br><span class="line">          dao: debug</span><br></pre></td></tr></table></figure><p>访问： <a href="http://localhost:7001/">http://localhost:7001/</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070112524.png"></p><p>就能够看到上面已经发现了我们的 8001 项目</p><p>可以访问：</p><p><a href="http://localhost:8001/payment/get/2">http://localhost:8001/payment/get/2</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070112312.png"></p><h2 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h2><p>maven pom.xml:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud_study_parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.zhazha.springcloud&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-consumer-order80&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--eureka-client--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.zhazha.springcloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--boot web actuator--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--一般通用配置--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>application.yml:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-order-service</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    #表示是否将自己注册进EurekaServer默认为true。</span><br><span class="line">    register-with-eureka: true</span><br><span class="line">    #是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span><br><span class="line">    fetchRegistry: true</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:7001/eureka</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@EnableEurekaClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class MainApp80 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">SpringApplication.run(MainApp80.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">@LoadBalanced</span><br><span class="line">public RestTemplate restTemplate() &#123;</span><br><span class="line">return new RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line">import com.zhazha.springcloud.dto.CommonResult;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">@RequestMapping(&quot;consumer&quot;)</span><br><span class="line">public class OrderController &#123;</span><br><span class="line"></span><br><span class="line">@Resource</span><br><span class="line">private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">public static final String INVOKE_URL = &quot;http://CLOUD-PAYMENT-SERVICE&quot;;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;payment/get/&#123;id&#125;&quot;)</span><br><span class="line">public CommonResult get(@PathVariable(&quot;id&quot;) Long id) &#123;</span><br><span class="line">return restTemplate.getForObject(INVOKE_URL + &quot;/payment/get/&#123;id&#125;&quot;, CommonResult.class, id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;payment/eureka&quot;)</span><br><span class="line">public String orderEureka() &#123;</span><br><span class="line">return &quot;order80: &quot; + restTemplate.getForObject(INVOKE_URL + &quot;/payment/eureka&quot;, String.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问: <a href="http://localhost:8080/consumer/payment/get/2">http://localhost:8080/consumer/payment/get/2</a></p><h1 id="整合Eureka（集群）"><a href="#整合Eureka（集群）" class="headerlink" title="整合Eureka（集群）"></a>整合<code>Eureka</code>（集群）</h1><h2 id="eureka-server集群"><a href="#eureka-server集群" class="headerlink" title="eureka server集群"></a>eureka server集群</h2><p>整合<code>Eureka</code>集群的大体思路是：</p><p><code>Eureka</code>的注册中心是无法自己给自己注册的，但是多个注册中心是可以相互注册的</p><p>比如 <code>注册中心A</code> 不能将自己注册到<code>注册中心A</code>，但是可以将自己注册到 <code>注册中心B</code>，而<code>注册中心B</code>也可以将自己注册给<code>注册中心A</code></p><p>现在我们先新建两个项目试试</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070112315.png"></p><p>将 7001 项目中的配置和源码复制到 7002 中</p><p>接着只要修改：</p><p>port <strong>:</strong> 7001</p><p>hostname <strong>:</strong> eureka7001.com</p><p>defaultZone <strong>: http:&#x2F;&#x2F;</strong> eureka7002.com:7002&#x2F;eureka&#x2F;</p><p>这三个就可以了</p><p>7001：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7001</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka7001.com #eureka服务端的实例名称</span><br><span class="line">  client:</span><br><span class="line">    # false表示不向注册中心注册自己</span><br><span class="line">    register-with-eureka: false</span><br><span class="line">    # false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="line">    fetch-registry: false</span><br><span class="line">    service-url:</span><br><span class="line">      # 设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span><br><span class="line">      # defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br><span class="line">      defaultZone: http://eureka7002.com:7002/eureka/</span><br></pre></td></tr></table></figure><p>7002:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 7002</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: eureka7002.com #eureka服务端的实例名称</span><br><span class="line">  client:</span><br><span class="line">    # false表示不向注册中心注册自己</span><br><span class="line">    register-with-eureka: false</span><br><span class="line">    # false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span><br><span class="line">    fetch-registry: false</span><br><span class="line">    service-url:</span><br><span class="line">      # 设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址</span><br><span class="line">      # defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka/</span><br></pre></td></tr></table></figure><h2 id="eureka服务提供方集群"><a href="#eureka服务提供方集群" class="headerlink" title="eureka服务提供方集群"></a>eureka服务提供方集群</h2><p>最后服务的注册项目： 8001 <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070112022.png">需要修改一部分配置：</p><p>defaultZone <strong>: http:&#x2F;&#x2F;</strong> eureka7001.com:7001&#x2F;eureka&#x2F;,<a href="http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/">http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/</a> <em>#将服务注册到 Eureka Server 集群</em></p><p>然后再创建一个<code>cloud-provider-payment8002</code>, 配置基本一样</p><p>**</p><p>完整代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8001</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-payment-service</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    url: jdbc:mysql://localhost:3306/springcloud2022?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br><span class="line">#Eureka配置</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    # 表示是否将自己注册进EurekaServer，默认为 true</span><br><span class="line">    register-with-eureka: true</span><br><span class="line">    # 是否从EurekaServer抓取已有的注册信息，默认为 true 。单节点无所谓，</span><br><span class="line">    # 集群必须设置为true才能配合 ribbon 使用负载均衡</span><br><span class="line">    fetch-registry: true</span><br><span class="line">    # EurekaServer的地址</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7001.com:7002/eureka</span><br><span class="line">mybatis:</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">  mapper-locations: classpath:mapper/*.xml</span><br><span class="line">logging:</span><br><span class="line">  file:</span><br><span class="line">    path: D:\programs\codes\java\springcloud_study_parent\logs</span><br><span class="line">  level:</span><br><span class="line">    com:</span><br><span class="line">      zhazha:</span><br><span class="line">        springcloud:</span><br><span class="line">          dao: debug</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8002</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-payment-service</span><br><span class="line">  datasource:</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    username: root</span><br><span class="line">    password: 123456</span><br><span class="line">    url: jdbc:mysql://localhost:3306/springcloud2022?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br><span class="line">#Eureka配置</span><br><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    # 表示是否将自己注册进EurekaServer，默认为 true</span><br><span class="line">    register-with-eureka: true</span><br><span class="line">    # 是否从EurekaServer抓取已有的注册信息，默认为 true 。单节点无所谓，</span><br><span class="line">    # 集群必须设置为true才能配合 ribbon 使用负载均衡</span><br><span class="line">    fetch-registry: true</span><br><span class="line">    # EurekaServer的地址</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7001.com:7002/eureka</span><br><span class="line">mybatis:</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br><span class="line">  mapper-locations: classpath:mapper/*.xml</span><br><span class="line">logging:</span><br><span class="line">  file:</span><br><span class="line">    path: D:\programs\codes\java\springcloud_study_parent\logs</span><br><span class="line">  level:</span><br><span class="line">    com:</span><br><span class="line">      zhazha:</span><br><span class="line">        springcloud:</span><br><span class="line">          dao: debug</span><br></pre></td></tr></table></figure><p>修改 <code>hosts </code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 eureka7001.com</span><br><span class="line">127.0.0.1 eureka7002.com</span><br></pre></td></tr></table></figure><p>这里我们需要注意</p><p><code>@LoadBalanced</code>这个注解, 开启客户端负载均衡. 这个之后会讲</p><p>接着访问: <a href="http://localhost/consumer/payment/eureka">http://localhost/consumer/payment/eureka</a> 就能看到 8001 和 8002 轮询出现</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113018.png"></p><p>这里就没截图 8002 了</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113433.png"></p><p>成功了，而且是两个<code>Eureka Server</code> 都有</p><p>这里就不粘贴 <code>eureka02.com</code>的界面了</p><p>从图中需要知道的信息：</p><p><code>eureka.instance.hostname=eureka7001.com</code>这个配置最后会显示在</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113724.png"></p><p><code>spring.application.name=cloud-payment-service</code>这个配置最后会显示在<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113624.png"></p><h2 id="Eureka的自我保护机制"><a href="#Eureka的自我保护机制" class="headerlink" title="Eureka的自我保护机制"></a>Eureka的自我保护机制</h2><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113420.png"></p><p>紧急情况！ EUREKA 可能不正确地声称实例已启动，但实际上并未启动。续订少于阈值，因此为了安全起见，实例不会过期。</p><p>有时候我们能够在 Eureka 注册中心页面上看到上面这样的警告</p><p>这表明注册中心（7001）没有收到服务的提供者（8001）的心跳包，但实际的服务还会显示在 注册中心页面中</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113814.png"></p><p>Eureka 注册中心的虽然记录下服务提供者的信息，但实际上已经无法继续提供服务了</p><p>这是 Eureka 自我保护机制的策略：“好死不如赖活”</p><p>这种情况存在弊端，服务的消费端可能会正巧需要获得该服务，导致服务调用失败。此时，我们可以通过客户端的容错机制来解决此问题，比如：Ribbon和Hystrix</p><p>如果需要关闭 Eureka 的自我保护机制，则可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  server:</span><br><span class="line">    enable-self-preservation: false # false 关闭 Eureka 的自我保护机制，默认是开启,一般不建议大家修改</span><br></pre></td></tr></table></figure><h3 id="修改心跳包的周期"><a href="#修改心跳包的周期" class="headerlink" title="修改心跳包的周期"></a>修改心跳包的周期</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">instance:</span><br><span class="line">  #心跳检测与续约时间</span><br><span class="line">  #开发时设置小点，保证服务关闭后注册中心及时剔除服务</span><br><span class="line">  #Eureka客户端向服务端发送心跳的时间间隔，单位为秒（默认是30秒）</span><br><span class="line">  lease-renewal-interval-in-seconds: 1</span><br><span class="line">  #Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒（默认是90秒），超时将剔除服务</span><br><span class="line">  lease-expiration-duration-in-seconds: 2</span><br></pre></td></tr></table></figure><h3 id="主机名称-服务名称修改"><a href="#主机名称-服务名称修改" class="headerlink" title="主机名称:服务名称修改"></a>主机名称:服务名称修改</h3><p>自定义一个客户端的名字</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113270.png"></p><p>只需要在 application.yml 文件中加上:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    instance-id: payment8001</span><br></pre></td></tr></table></figure><h3 id="访问信息有IP信息提示"><a href="#访问信息有IP信息提示" class="headerlink" title="访问信息有IP信息提示"></a>访问信息有IP信息提示</h3><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113450.png"></p><p>如果你左下角蓝色长方形中的网址没有 ip 显示则需要:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br></pre></td></tr></table></figure><h2 id="使用DiscoveryClient服务发现"><a href="#使用DiscoveryClient服务发现" class="headerlink" title="使用DiscoveryClient服务发现"></a>使用<code>DiscoveryClient</code>服务发现</h2><ol><li>在 application 启动类上添加<code>@EnableDiscoveryClient</code>注解</li><li>去controller里面注入</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Resource</span><br><span class="line">private DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">@RequestMapping(value = &quot;discovery&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Object discovery() &#123;</span><br><span class="line">    List&lt;String&gt; services = this.discoveryClient.getServices();</span><br><span class="line">    for (String service : services) &#123;</span><br><span class="line">        log.info(&quot;*********** service: &quot; + service);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(&quot;CLOUD-PAYMENT-SERVICE&quot;);</span><br><span class="line">    for (ServiceInstance instance : instances) &#123;</span><br><span class="line">        log.info(&quot;service application host = &#123;&#125;, port = &#123;&#125;, uri = &#123;&#125;&quot;, instance.getHost(), instance.getPort(), instance.getUri());</span><br><span class="line">    &#125;</span><br><span class="line">    return this.discoveryClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.z.s.controller.PaymentController: *********** service: cloud-payment-service</span><br><span class="line">c.z.s.controller.PaymentController: service application host = 192.168.19.1, port = 8001, uri = http://192.168.19.1:8001</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;services&quot;: [</span><br><span class="line">    &quot;cloud-payment-service&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;order&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Eureka停更"><a href="#Eureka停更" class="headerlink" title="Eureka停更"></a>Eureka停更</h2><p>Eureka 目前已经停更好几年了，很多公司也早早转移战场</p><p>目前市面上的代替方案有很多：</p><ol><li>zookeeper（CP） paxos 共识</li><li>consul（CP） raft 共识</li><li>nacos（CP、AP） jraft + distro ★ 推荐使用</li></ol><h1 id="zookeeper代替方案"><a href="#zookeeper代替方案" class="headerlink" title="zookeeper代替方案"></a>zookeeper代替方案</h1><h2 id="zk启动"><a href="#zk启动" class="headerlink" title="zk启动"></a>zk启动</h2><p>直接在 linux 的 docker 环境下启动</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113964.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.9&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  zoo1:</span><br><span class="line">    image: zookeeper:3.8.0</span><br><span class="line">    restart: always</span><br><span class="line">    hostname: zoo1</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;2181:2181&quot;</span><br><span class="line">    environment:</span><br><span class="line">      ZOO_MY_ID: 1</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/root/zookeeper/zoo.cfg:/conf/zoo.cfg&quot;</span><br><span class="line">    privileged: true</span><br><span class="line">    container_name: zoo1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dataDir=/data</span><br><span class="line">dataLogDir=/datalog</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line">autopurge.snapRetainCount=3</span><br><span class="line">autopurge.purgeInterval=0</span><br><span class="line">maxClientCnxns=60</span><br><span class="line">standaloneEnabled=true</span><br><span class="line">admin.enableServer=true</span><br><span class="line">server.1=localhost:2888:3888;2181</span><br></pre></td></tr></table></figure><p><code>docker compose up -d</code> 创建并启动 <code>zookeeper</code></p><p>这里需要注意 zookeeper 的版本 3.8.0</p><p>如果在window下启动, 需要修改 <code>zoo_sample.cfg</code>为 <code>zoo.cfg</code></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070113616.png"></p><p>然后在控制台下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.cmd</span><br></pre></td></tr></table></figure><h2 id="zk服务提供方"><a href="#zk服务提供方" class="headerlink" title="zk服务提供方"></a>zk服务提供方</h2><p>创建项目：</p><p><code>cloud-provider-payment8004</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud_study_parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-provider-payment8004&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- SpringBoot整合zookeeper客户端,这里不再使用Eureka进行服务注册，所以这里导入的是Zookeeper的相关依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt;</span><br><span class="line">            &lt;!-- 先排除自带的zookeeper --&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">                    &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">                &lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--添加zookeeper3.8.0版本，注意这里要和 zookeeper 应用启动的版本一致 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 热部署依赖--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>这里 <code>zookeeper </code>的版本 <code>jar </code>包 是 <code>3.8.0</code>，要和 <code>docker </code>的 <code>zookeeper </code>版本一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class PaymentMain8004 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">SpringApplication.run(PaymentMain8004.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import java.util.UUID;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class PaymentController &#123;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">private String serverPort;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;payment/zk&quot;)</span><br><span class="line">public String paymentZk() &#123;</span><br><span class="line">    return &quot;springcloud with zookeeper:&quot;+serverPort+&quot;\t&quot;+ UUID.randomUUID();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们能够看到 zookeeper 中被注册的服务：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114008.png"></p><p>访问：<a href="http://localhost:8004/payment/zk">http://localhost:8004/payment/zk</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114257.png"></p><p>当我们关闭 8004 项目，zookeeper 会一定时间内心跳验证</p><p>然后立即删除掉服务</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114613.png"></p><p>这和Eureka不相同</p><p>zookeeper CP 与 Eureka AP</p><p>再久一点连 <code>service</code> 节点都没了</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd798a5c807a4c89b0d00c9edcdb6881~tplv-k3u1fbpfcp-zoom-1.image"></p><h2 id="zk服务消费方"><a href="#zk服务消费方" class="headerlink" title="zk服务消费方"></a>zk服务消费方</h2><p>创建 <code>cloud-consumerzk-order80</code> 项目</p><p><code>pom.xml</code> 和 8004 项目一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-consumer-order</span><br><span class="line">  cloud:</span><br><span class="line">    zookeeper:</span><br><span class="line">      connect-string: 192.168.0.155:2181</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class OrderZKMain80 &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">@LoadBalanced</span><br><span class="line">public RestTemplate restTemplate() &#123;</span><br><span class="line">return new RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">SpringApplication.run(OrderZKMain80.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class OrderZKController &#123;</span><br><span class="line"></span><br><span class="line">public static final String INVOKE_URL = &quot;http://cloud-provider-payment&quot;;</span><br><span class="line"></span><br><span class="line">@Resource</span><br><span class="line">private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/consumer/payment/zk&quot;)</span><br><span class="line">public String paymentInfo() &#123;</span><br><span class="line">return restTemplate.getForObject(INVOKE_URL + &quot;/payment/zk&quot;, String.class);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost/consumer/payment/zk">http://localhost/consumer/payment/zk</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114708.png"></p><p>远程调用成功</p><h1 id="Consul代替方案"><a href="#Consul代替方案" class="headerlink" title="Consul代替方案"></a>Consul代替方案</h1><h2 id="Consul是什么？"><a href="#Consul是什么？" class="headerlink" title="Consul是什么？"></a>Consul是什么？</h2><p>Consul包含多个组件,但是作为一个整体,为你的基础设施提供<strong>服务发现</strong>和<strong>服务配置</strong>的工具.他提供以下关键特性:</p><ul><li><strong>服务发现</strong> Consul的客户端可用提供一个服务,比如 api 或者mysql ,另外一些客户端可用使用Consul去发现一个指定服务的提供者.通过DNS或者HTTP应用程序可用很容易的找到他所依赖的服务.</li><li><strong>健康检查</strong> Consul客户端可用提供任意数量的健康检查,指定一个服务(比如:webserver是否返回了200 OK 状态码)或者使用本地节点(比如:内存使用是否大于90%). 这个信息可由operator用来监视集群的健康.被服务发现组件用来避免将流量发送到不健康的主机.</li><li><strong>Key&#x2F;Value存储</strong> 应用程序可用根据自己的需要使用Consul的层级的Key&#x2F;Value存储.比如动态配置,功能标记,协调,领袖选举等等,简单的HTTP API让他更易于使用.</li><li><strong>安全服务通信</strong>：Consul可以为服务生成和分发TLS证书，以建立相互的TLS连接。意图可用于定义允许哪些服务通信。服务分割可以很容易地进行管理，其目的是可以实时更改的，而不是使用复杂的网络拓扑和静态防火墙规则。</li><li><strong>多数据中心</strong>: Consul支持开箱即用的多数据中心.这意味着用户不需要担心需要建立额外的抽象层让业务扩展到多个区域.</li></ul><p>Consul面向DevOps和应用开发者友好.是他适合现代的弹性的基础设施.</p><p>需要注意它是用 golang 写的</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114129.png"></p><ol><li>节点分类</li></ol><!----><ol><li><ol><li>Consul 分为 Client 和 Server两种节点(所有的节点也被称为Agent)，其中Server 节点保存数据，Client 负责健康检查及转发数据请求到Server。所有的 Server 节点组成了一个集群，他们之间运行 Raft 协议，通过共识仲裁选举出 Leader。所有的业务数据都通过 Leader 写入到集群中做持久化，当有半数以上的节点存储了该数据后，Server集群才会返回ACK，从而保障了数据的强一致性。所有的 Follower 会跟随 Leader 的脚步，保证其有最新的数据副本</li></ol></li></ol><!----><ol start="2"><li>数据中心内部通信</li></ol><!----><ol><li><ol><li>Consul 数据中心内部的所有节点通过 Gossip 协议（8301端口）维护成员关系，这也被叫做LAN GOSSIP。当数据中心内部发生拓扑变化时，存活的节点们能够及时感知，比如Server节点down掉后，Client 就会将对应Server节点从可用列表中剥离出去。集群内数据的读写请求既可以直接发到Server，也可以通过 Client 转发到Server，请求最终会到达 Leader 节点。在允许数据轻微陈旧的情况下，读请求也可以在普通的Server节点完成，集群内数据的读写和复制都是通过8300端口完成</li></ol></li></ol><!----><ol start="3"><li>跨数据中心通信</li></ol><!----><ol><li><ol><li>Consul支持多数据中心，上图中有两个 DataCenter，他们通过网络互联，注意为了提高通信效率，只有Server节点才加入跨数据中心的通信。跨数据中心的 Gossip 协议使用8302端口，也被称为WAN GOSSIP，是全局范围内唯一的。通常情况下，不同的Consul数据中心之间不会复制数据。当请求另一个数据中心的资源时，Server 会将其转发到目标数据中心的随机Server 节点，该节点随后可以转发给本地 Leader 处理</li></ol></li></ol><table><thead><tr><th><strong>端口</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>8300</td><td>RPC 调用</td></tr><tr><td>8301</td><td>数据中心内部 GOSSIP 协议使用</td></tr><tr><td>8302</td><td>跨数据中心 GOSSIP 协议使用</td></tr><tr><td>8500</td><td>HTTP API 和 Web 接口使用</td></tr><tr><td>8600</td><td>用于 DNS 服务端</td></tr></tbody></table><h2 id="Consul服务的注册与发现"><a href="#Consul服务的注册与发现" class="headerlink" title="Consul服务的注册与发现"></a>Consul服务的注册与发现</h2><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114096.png"></p><p>绿色方框是服务的注册中心，使用 raft 共识算法选举出 leader 和 follower 两种节点</p><p>红色是服务的注册方，consul 的 client模式 将服务注册到注册中心</p><p>蓝色是服务的消费方，consul client 去注册中心拿服务信息，接着识别信息远程调用红色节点的服务</p><p>dubbo经典调用关系.jpg</p><h2 id="springcloud整合Consul"><a href="#springcloud整合Consul" class="headerlink" title="springcloud整合Consul"></a>springcloud整合Consul</h2><h3 id="服务的提供方"><a href="#服务的提供方" class="headerlink" title="服务的提供方"></a>服务的提供方</h3><p>创建<code>cloud-providerconsul-payment8006</code>项目</p><p>添加<code>pom.xml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;springcloud_study_parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;artifactId&gt;cloud-providerconsul-payment8006&lt;/artifactId&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;&lt;!--SpringCloud consul-server --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.zhazha&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;cloud-api-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- SpringBoot整合Web组件 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--日常通用jar包配置--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8006</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consul-provider-payment</span><br><span class="line">  cloud:</span><br><span class="line">    consul:</span><br><span class="line">      port: 8500</span><br><span class="line">      host: 127.0.0.1</span><br><span class="line">      discovery:</span><br><span class="line">        service-name: service-producer</span><br></pre></td></tr></table></figure><table><thead><tr><th>If you use <a href="https://docs.spring.io/spring-cloud-consul/docs/current/reference/html/#spring-cloud-consul-config">Spring Cloud Consul Config</a>, and you have set spring.cloud.bootstrap.enabled&#x3D;true or spring.config.use-legacy-processing&#x3D;true or use spring-cloud-starter-bootstrap, then the above values will need to be placed in bootstrap.yml instead of application.yml.</th></tr></thead></table><p>这里需要注意到，如果是开启了 bootstrap 主键，则需要将 上面的 配置从 application.yml 转移到 bootstrap.yml 中</p><p>To disable the Consul Discovery Client you can set spring.cloud.consul.discovery.enabled to false. Consul Discovery Client will also be disabled when spring.cloud.discovery.enabled is set to false.</p><p>并且如果你需要禁止 Consul Discovery Client（也就是我们现在这个项目）去发现服务，可以<code>spring.cloud.consul.discovery.enabled </code>设置为<code> false</code></p><p>To disable the service registration you can set spring.cloud.consul.discovery.register to false.</p><p>同时呢，要禁止服务注册，你可以设置 <code>spring.cloud.consul.discovery.register</code>为 <code>false</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class PaymentConsulMain8006 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">SpringApplication.run(PaymentConsulMain8006.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:8500/">http://localhost:8500/</a></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114418.png"></p><p>可以看到<code>spring.cloud.consul.discovery.service-name=service-producer</code>配置决定了 service 中的名字，<strong>后期客户端会根据这个名称来进行服务调用。</strong></p><p>而我们的 <code>spring.application.name=consul-provider-payment-8006</code>出现在<img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114458.png"></p><p>表示 <code>service-producer</code>下面有一个叫<code>consul-provider-payment-8006</code>的实例</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211070114951.png"></p><h3 id="服务的消费方"><a href="#服务的消费方" class="headerlink" title="服务的消费方"></a>服务的消费方</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;!--SpringCloud consul-server --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!-- SpringBoot整合Web组件 --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--日常通用jar包配置--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">           &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">           &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">###consul服务端口号</span><br><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-consumer-order</span><br><span class="line">  ####consul注册中心地址</span><br><span class="line">  cloud:</span><br><span class="line">    consul:</span><br><span class="line">      host: 127.0.0.1</span><br><span class="line">      port: 8500</span><br><span class="line">      discovery:</span><br><span class="line">        #hostname: 127.0.0.1</span><br><span class="line">        service-name: $&#123;spring.application.name&#125;</span><br></pre></td></tr></table></figure><p>这里我们如果要把消费端变得更加纯粹，可以添加<code>spring.cloud.consul.discovery.register=false</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class OrderConsulMain80 &#123;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">@LoadBalanced</span><br><span class="line">public RestTemplate restTemplate() &#123;</span><br><span class="line">return new RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">SpringApplication.run(OrderConsulMain80.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.zhazha.springcloud.controller;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public class OrderConsulController &#123;</span><br><span class="line"></span><br><span class="line">// 服务的提供的 spring.cloud.consul.discovery.service-name=service-producer </span><br><span class="line">// 配置决定了，服务的消费方使用的地址</span><br><span class="line">// 这里的地址不再是服务提供方的 spring.application.name</span><br><span class="line">public static final String INVOKE_URL = &quot;http://service-producer&quot;;</span><br><span class="line"></span><br><span class="line">@Resource</span><br><span class="line">private RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;consumer/payment/consul&quot;)</span><br><span class="line">public String paymentInfo() &#123;</span><br><span class="line">return restTemplate.getForObject(INVOKE_URL + &quot;/payment/consul&quot;, String.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>下期</p>]]></content>
      
      
      <categories>
          
          <category> springcloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eureka </tag>
            
            <tag> zookeeper </tag>
            
            <tag> consul </tag>
            
            <tag> 服务发现 </tag>
            
            <tag> 注册中心 </tag>
            
            <tag> 服务注册 </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还用什么mybatis？这些方法不香么？不香</title>
      <link href="/2022/11/07/03ORM/01%E8%BF%98%E7%94%A8%E4%BB%80%E4%B9%88mybatis%EF%BC%9F%E8%BF%99%E4%BA%9B%E6%96%B9%E6%B3%95%E4%B8%8D%E9%A6%99%E4%B9%88%EF%BC%9F%E4%B8%8D%E9%A6%99/"/>
      <url>/2022/11/07/03ORM/01%E8%BF%98%E7%94%A8%E4%BB%80%E4%B9%88mybatis%EF%BC%9F%E8%BF%99%E4%BA%9B%E6%96%B9%E6%B3%95%E4%B8%8D%E9%A6%99%E4%B9%88%EF%BC%9F%E4%B8%8D%E9%A6%99/</url>
      
        <content type="html"><![CDATA[<h1 id="各种玩法"><a href="#各种玩法" class="headerlink" title="各种玩法"></a>各种玩法</h1><ol><li>注解和XML方式</li><li>mybatis 的 SQL 语句构建器(不好用)</li><li>整合mybatis-dynamic-sql(不好用)</li><li>fluent-mybatis(还不错, 但不推荐使用)</li><li>jpa + queryDSL(最舒服)</li></ol><h2 id="搭个基础架构"><a href="#搭个基础架构" class="headerlink" title="搭个基础架构"></a>搭个基础架构</h2><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211072109613.png" alt="image-20221107210959557"></p><p>User表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> (</span><br><span class="line"> `id`<span class="type">INT</span>(<span class="number">11</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line"> `username` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line"> `telephone`    <span class="type">VARCHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机&#x27;</span>,</span><br><span class="line"> `birthday`DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line"> `gender`  <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line"> `address` <span class="type">VARCHAR</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY  (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><p>Account表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account` (</span><br><span class="line">  `ID` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `UID` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">  `MONEY` <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;金额&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`ID`),</span><br><span class="line">  KEY `FK_Reference_8` (`UID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><p>role表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role` (</span><br><span class="line">  `ID` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `ROLE_NAME` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;职位&#x27;</span>,</span><br><span class="line">  `ROLE_DESC` <span class="type">varchar</span>(<span class="number">60</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`ID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><p>user_role表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_role` (</span><br><span class="line">  `UID` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">  `RID` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;职位编号&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`UID`,`RID`),</span><br><span class="line">  KEY `FK_Reference_10` (`RID`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `FK_Reference_10` <span class="keyword">FOREIGN</span> KEY (`RID`) <span class="keyword">REFERENCES</span> `role` (`ID`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `FK_Reference_9` <span class="keyword">FOREIGN</span> KEY (`UID`) <span class="keyword">REFERENCES</span> `<span class="keyword">user</span>` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mybatis-base</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/jpa?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment"># mybatis plus sql控制台打印出来</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.zhazha.xml.entity</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">banner:</span> <span class="string">off</span></span><br></pre></td></tr></table></figure><p>使用EasyCode插件生成对应代码</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211072112350.png" alt="image-20221107211223266"></p><h2 id="基操：XML-的方式"><a href="#基操：XML-的方式" class="headerlink" title="基操：XML 的方式"></a>基操：XML 的方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Model</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="comment">//用户名</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="comment">//手机</span></span><br><span class="line"><span class="keyword">private</span> String telephone;</span><br><span class="line"><span class="comment">//生日</span></span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="comment">//性别</span></span><br><span class="line"><span class="keyword">private</span> String gender;</span><br><span class="line"><span class="comment">//地址</span></span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Set&lt;Account&gt; accounts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">extends</span> <span class="title class_">Model</span>&lt;Account&gt; &#123;</span><br><span class="line"><span class="comment">//编号</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="comment">//用户编号</span></span><br><span class="line"><span class="keyword">private</span> Integer uid;</span><br><span class="line"><span class="comment">//金额</span></span><br><span class="line"><span class="keyword">private</span> Long money;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里需要注意一个问题:</p><p>由于我们的代码都是由 EasyCode 插件生成, 所以所有的Dao代码都会继承一个BaseMapper接口, 继承这个接口</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211081031727.png" alt="image-20221108103020026"></p><p>之后<code>UserDao</code>的 <code>sql</code>都是由 <code>mybatis-plus</code>框架自动生成的, 生成的代码将会是这样<code>select id, username, telephone, birthday, gender, address, accounts from user u </code>, 这里有一个字段<code>accounts</code>并不是<code>user</code>表的字段</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211081035633.png" alt="image-20221108103552549"></p><p>所以如果我们不注意这点, 那么就会报错</p><p>而且我找了源码发现他是直接使用的 <code>User.class.getFields()</code> 这种方式拿到的字段, 基本上没有任何办法规避掉<code>accounts</code></p><p>但是可以通过<code>@TableField(exist = false)</code> 这个注解实现, 我们只要:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonInclude(value = JsonInclude.Include.NON_ABSENT)</span></span><br><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Account&gt; accounts;</span><br></pre></td></tr></table></figure><p>这样就不会报错了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Model</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="comment">//用户名</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="comment">//手机</span></span><br><span class="line"><span class="keyword">private</span> String telephone;</span><br><span class="line"><span class="comment">//生日</span></span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="comment">//性别</span></span><br><span class="line"><span class="keyword">private</span> String gender;</span><br><span class="line"><span class="comment">//地址</span></span><br><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonInclude(value = JsonInclude.Include.NON_ABSENT)</span></span><br><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Account&gt; accounts;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonInclude(value = JsonInclude.Include.NON_ABSENT)</span></span><br><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取主键值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 主键值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Serializable <span class="title function_">pkVal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">extends</span> <span class="title class_">Model</span>&lt;Account&gt; &#123;</span><br><span class="line"><span class="comment">//编号</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="comment">//用户编号</span></span><br><span class="line"><span class="keyword">private</span> Integer uid;</span><br><span class="line"><span class="comment">//金额</span></span><br><span class="line"><span class="keyword">private</span> Long money;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonInclude(value = JsonInclude.Include.NON_ABSENT)</span></span><br><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取主键值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 主键值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Serializable <span class="title function_">pkVal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> <span class="keyword">extends</span> <span class="title class_">Model</span>&lt;Role&gt; &#123;</span><br><span class="line"><span class="comment">//编号</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="comment">//职位</span></span><br><span class="line"><span class="keyword">private</span> String roleName;</span><br><span class="line"><span class="comment">//描述</span></span><br><span class="line"><span class="keyword">private</span> String roleDesc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonInclude(value = JsonInclude.Include.NON_ABSENT)</span></span><br><span class="line"><span class="meta">@TableField(exist = false)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取主键值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 主键值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Serializable <span class="title function_">pkVal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRole</span> <span class="keyword">extends</span> <span class="title class_">Model</span>&lt;UserRole&gt; &#123;</span><br><span class="line"><span class="comment">//用户编号</span></span><br><span class="line"><span class="keyword">private</span> Integer uid;</span><br><span class="line"><span class="comment">//职位编号</span></span><br><span class="line"><span class="keyword">private</span> Integer rid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取主键值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 主键值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Serializable <span class="title function_">pkVal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.uid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>@JsonInclude(value = JsonInclude.Include.NON_ABSENT)</code> 注解可以在json序列化的时候省略 null的字段和 <code>Optional.isEmpty</code>的字段</p></blockquote><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.zhazha.xml.entity.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;telephone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;telephone&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;CustomMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;accounts&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;account&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;aid&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;role&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>UserDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select *, a.ID as aid from orm.user u join orm.account a where a.UID = u.id&quot;)</span></span><br><span class="line"><span class="meta">@ResultMap(value = &quot;UserMap&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">findUserAccount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211080050200.png" alt="image-20221108005034087"></p><blockquote><p>注意看上面的代码, sql语句中的 <code>aid</code> 和 <code>resultMap</code> 中的 <code>column=&quot;aid&quot;</code> 相同, 如果不这么做, 那么 <code>account</code>的 <code>id</code> 查询出来的结果将会是 <code>user</code> 的 <code>id</code>和<code>account</code>的 <code>id</code>相同, 如下图:</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211080053051.png" alt="image-20221108005311918"></p><p>修改了之后，将会是这样：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211080054187.png" alt="image-20221108005442087"></p><p>这样才是正确结果</p><h3 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h3><p>AccountDao.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.zhazha.xml.entity.Account&quot;</span> <span class="attr">id</span>=<span class="string">&quot;AccountMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;UID&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span> <span class="attr">column</span>=<span class="string">&quot;MONEY&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">autoMapping</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;UID&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>AccountDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from orm.account a join orm.user u on u.id = a.UID&quot;)</span></span><br><span class="line"><span class="meta">@ResultMap(&quot;AccountMap&quot;)</span></span><br><span class="line">List&lt;Account&gt; <span class="title function_">findAccountUser</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211080059892.png" alt="image-20221108005906803"></p><p>这里将 <code>Account</code> 对象 <code>UID</code> 的值存储在 <code>User</code> 对象的 <code>id</code> 上, 因为他们两个的值是相同的</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211080101042.png" alt="image-20221108010106966"></p><p>这样看起来也不是很麻烦</p><p>当然也可以直接这么搞，这样不需要使用 <code>autoMapping</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.zhazha.xml.entity.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;telephone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;telephone&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;TIMESTAMP&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;accounts&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;com.zhazha.xml.dao.AccountDao.AccountMap&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>但是这样还是会存在 <code>account</code> 的 <code>id</code> 等于 <code>user</code> <code>id</code> 的问题</p></blockquote><h3 id="为什么不推荐使用autoMapping"><a href="#为什么不推荐使用autoMapping" class="headerlink" title="为什么不推荐使用autoMapping?"></a>为什么不推荐使用<code>autoMapping</code>?</h3><p>很多人都会说 <code>autoMapping</code> 慎用，但我觉得这和C语言的goto语句一样, 并不是不可以用</p><p>而是在使用前需要将其架在一个方框下面</p><h2 id="基操：对象继承方式多表查询"><a href="#基操：对象继承方式多表查询" class="headerlink" title="基操：对象继承方式多表查询"></a>基操：对象继承方式多表查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAccount</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Double money;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"><span class="meta">@Select(&quot;select u.*, a.MONEY from orm.user u join orm.account a on u.id = a.UID&quot;)</span></span><br><span class="line">List&lt;UserAccount&gt; <span class="title function_">listUserAccount</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">listUserAccount</span><span class="params">()</span> &#123;</span><br><span class="line">    PageHelper.startPage(<span class="number">20</span>, <span class="number">10</span>);</span><br><span class="line">    List&lt;UserAccount&gt; userAccounts = userDao.listUserAccount();</span><br><span class="line">    System.err.println(userAccounts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211072117236.png" alt="image-20221107211729135"></p><h2 id="使用mybatis-SQL-语句构建器-不好用"><a href="#使用mybatis-SQL-语句构建器-不好用" class="headerlink" title="使用mybatis SQL 语句构建器(不好用)"></a>使用mybatis SQL 语句构建器(不好用)</h2><blockquote><p>不好用, 简单过下</p></blockquote><p>官方文档: <a href="https://mybatis.org/mybatis-3/zh/statement-builders.html">mybatis – MyBatis 3 | SQL 语句构建器</a></p><p>如果你仔细研究mybatis官方, 你会发现这项功能的本质就是字符串拼接</p><p>借助注解在Mapper接口上的<code>@xxxProvider</code>(例如<code>@SelectProvider</code>), 代替原先的注解<code>@Select</code>提供用户自定义 <code>sql语句</code> </p><p>该<code>@SelectProvider</code>注解的<code>value</code>属性可以标记一个类名, <code>method</code>标记一个函数名</p><p>类似于:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SelectProvider(value = UserDaoProvider.class, method = &quot;findUser&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">findUser</span><span class="params">(<span class="meta">@Param(&quot;gender&quot;)</span> String gender, <span class="meta">@Param(&quot;address&quot;)</span> String address)</span>;</span><br></pre></td></tr></table></figure><p>而<code>UserDaoProvider</code>类是这样:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoProvider</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">findUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SQL</span>()</span><br><span class="line">                .SELECT(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .FROM(<span class="string">&quot;user u&quot;</span>)</span><br><span class="line">                .WHERE(<span class="string">&quot;u.gender = #&#123;gender&#125;&quot;</span>)</span><br><span class="line">                .WHERE(<span class="string">&quot;address like concat(#&#123;address&#125;, &#x27;%&#x27;)&quot;</span>)</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>记住这里需要注意类是<code>public类</code>, 函数是 <code>static public 函数</code></p></blockquote><p>同时<code>UserDaoProvider</code>类也可以实现<code>ProviderMethodResolver</code>接口以实现不指定<code>method</code>就能找到函数名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoProvider</span> <span class="keyword">implements</span> <span class="title class_">ProviderMethodResolver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">findUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SQL</span>()</span><br><span class="line">                .SELECT(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .FROM(<span class="string">&quot;user u&quot;</span>)</span><br><span class="line">                .WHERE(<span class="string">&quot;u.gender = #&#123;gender&#125;&quot;</span>)</span><br><span class="line">                .WHERE(<span class="string">&quot;address like concat(#&#123;address&#125;, &#x27;%&#x27;)&quot;</span>)</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>太麻烦了, 我还不如用字符串拼接</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SelectProvider(value = UserDaoProvider.class)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">findUser</span><span class="params">(<span class="meta">@Param(&quot;gender&quot;)</span> String gender, <span class="meta">@Param(&quot;address&quot;)</span> String address)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">findUser</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    List&lt;User&gt; userList = userDao.findUser(<span class="string">&quot;女&quot;</span>, <span class="string">&quot;122&quot;</span>);</span><br><span class="line">    System.err.println(objectMapper.writeValueAsString(userList));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211081927887.png" alt="image-20221108192619171"></p><h2 id="整合mybatis-dynamic-sql-不好用"><a href="#整合mybatis-dynamic-sql-不好用" class="headerlink" title="整合mybatis-dynamic-sql(不好用)"></a>整合mybatis-dynamic-sql(不好用)</h2><h3 id="需要做什么"><a href="#需要做什么" class="headerlink" title="需要做什么?"></a>需要做什么?</h3><p>修改mybatis generator项目, 然后生成代码</p><p>新建一个项目叫做 mybatis_generator</p><p>然后导入 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.dynamic-sql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-dynamic-sql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>紧接着创建<code>generatorConfig.xml</code>:</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211090038377.png" alt="image-20221109003759785"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Mybatis Generator目前有5种运行模式，分别为：MyBatis3DynamicSql、MyBatis3Kotlin、MyBatis3、MyBatis3Simple、MyBatis3DynamicSqlV1。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;springboot-base&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3DynamicSql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span></span></span><br><span class="line"><span class="tag">                <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/orm?tinyInt1isBit=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>nullCatalogMeansCurrent=true&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer， 为 true时把JDBC DECIMAL</span></span><br><span class="line"><span class="comment">            和 NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否试用jdk8时间类--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useJSR310Types&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:生成PO类的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetPackage</span>=<span class="string">&quot;com.zhazha.dynamic.entity&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetProject:mapper映射文件生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetPackage</span>=<span class="string">&quot;com.zhazha.dynamic.mapper&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--生成全部表tableName设为%--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;%&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定数据库表</span></span><br><span class="line"><span class="comment">  schema:数据库的schema,可以使用SQL通配符匹配。如果设置了该值，生成SQL的表名会变成如schema.tableName的形式。</span></span><br><span class="line"><span class="comment">  domainObjectName:生成对象的基本名称。如果没有指定，MBG会自动根据表名来生成名称。</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;table schema=&quot;&quot; tableName=&quot;&quot; domainObjectName=&quot;&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建MybatisGenerator:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mybatis.generator.api.MyBatisGenerator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.config.xml.ConfigurationParser;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.generator.internal.DefaultShellCallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//MBG 执行过程中的警告信息</span></span><br><span class="line">        List&lt;String&gt; warnings = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//读取我们的 MBG 配置文件</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> MybatisGenerator.class.getResourceAsStream(<span class="string">&quot;/mybatis/generatorConfig.xml&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">ConfigurationParser</span> <span class="variable">cp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConfigurationParser</span>(warnings);</span><br><span class="line">            <span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> cp.parseConfiguration(is);</span><br><span class="line">            <span class="comment">//当生成的代码重复时，不要覆盖原代码</span></span><br><span class="line">            <span class="type">DefaultShellCallback</span> <span class="variable">callback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultShellCallback</span>(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//创建 MBG</span></span><br><span class="line">            <span class="type">MyBatisGenerator</span> <span class="variable">myBatisGenerator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBatisGenerator</span>(config, callback, warnings);</span><br><span class="line">            <span class="comment">//执行生成代码</span></span><br><span class="line">            myBatisGenerator.generate(<span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//输出警告信息</span></span><br><span class="line">            <span class="keyword">for</span> (String warning : warnings) &#123;</span><br><span class="line">                System.out.println(warning);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接运行就能生成 mybatis-dynamic 的代码, 而不是 Example 那一套了</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211090040119.png" alt="image-20221109004001973"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211090040835.png" alt="image-20221109004021457"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211090040059.png" alt="image-20221109004043957"></p><p>使用也非常简单</p><ol><li>静态导入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.zhazha.dynamic.mapper.UserDynamicSqlSupport.user;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mybatis.dynamic.sql.SqlBuilder.select;</span><br></pre></td></tr></table></figure><ol start="2"><li>入门代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">dsl</span> <span class="operator">=</span> select(user.allColumns())</span><br><span class="line">        .from(user)</span><br><span class="line">        .limit(<span class="number">10</span>)</span><br><span class="line">        .offset(<span class="number">20</span>)</span><br><span class="line">        .build()</span><br><span class="line">        .render(RenderingStrategies.MYBATIS3);</span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectMany(dsl);</span><br><span class="line">    System.err.println(objectMapper.writeValueAsString(userList));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>还是不好用, 多表关联还是得配置<code>ResultMap</code>, 还不如 XML 方式, 这种方法就不要看了</p></blockquote><h2 id="整合fluent-mybatis（还是不推荐）"><a href="#整合fluent-mybatis（还是不推荐）" class="headerlink" title="整合fluent-mybatis（还是不推荐）"></a>整合fluent-mybatis（还是不推荐）</h2><blockquote><p>文档地址：<a href="https://toscode.gitee.com/fluent-mybatis/fluent-mybatis/wikis">https://toscode.gitee.com/fluent-mybatis/fluent-mybatis/wikis</a></p></blockquote><h3 id="fluent-mybatis特性"><a href="#fluent-mybatis特性" class="headerlink" title="fluent mybatis特性"></a>fluent mybatis特性</h3><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211090103538.png" alt="FluentMybatis特性"></p><h3 id="fluent-mybatis原理"><a href="#fluent-mybatis原理" class="headerlink" title="fluent mybatis原理"></a>fluent mybatis原理</h3><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211090105235.png" alt="FluentMybatis原理"></p><h3 id="quick-start"><a href="#quick-start" class="headerlink" title="quick start"></a>quick start</h3><h4 id="1-导入必要的依赖"><a href="#1-导入必要的依赖" class="headerlink" title="1. 导入必要的依赖"></a>1. 导入必要的依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.atool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fluent-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.atool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fluent-mybatis-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-生成必要代码"><a href="#2-生成必要代码" class="headerlink" title="2. 生成必要代码"></a>2. 生成必要代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.org.atool.generator.FileGenerator;</span><br><span class="line"><span class="keyword">import</span> cn.org.atool.generator.annotation.Table;</span><br><span class="line"><span class="keyword">import</span> cn.org.atool.generator.annotation.Tables;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EntityGeneratorDemo</span> &#123;</span><br><span class="line">    <span class="comment">// 数据源 url</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/orm?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">    <span class="comment">// 数据库用户名</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="comment">// 数据库密码</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 引用配置类，build方法允许有多个配置类</span></span><br><span class="line">        FileGenerator.build(Empty.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Tables(</span></span><br><span class="line"><span class="meta">            // 设置数据库连接信息</span></span><br><span class="line"><span class="meta">            url = url, username = username, password = password,</span></span><br><span class="line"><span class="meta">            // 设置entity类生成src目录, 相对于 user.dir</span></span><br><span class="line"><span class="meta">            srcDir = &quot;src/main/java&quot;,</span></span><br><span class="line"><span class="meta">            // 设置entity类的package值</span></span><br><span class="line"><span class="meta">            basePack = &quot;com.zhazha.fluent&quot;,</span></span><br><span class="line"><span class="meta">            // 设置dao接口和实现的src目录, 相对于 user.dir</span></span><br><span class="line"><span class="meta">            daoDir = &quot;src/main/java&quot;,</span></span><br><span class="line"><span class="meta">            // 设置哪些表要生成Entity文件</span></span><br><span class="line"><span class="meta">            tables = &#123;@Table(value = &#123;&quot;account&quot;, &quot;user&quot;&#125;)&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Empty</span> &#123; <span class="comment">//类名随便取, 只是配置定义的一个载体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>记得修改必要的代码</p></blockquote><p>执行后会创建下面两个包</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211090150289.png" alt="image-20221109015047193"></p><blockquote><p>代码生成完毕, 发现报错了, 编译下项目, 这样就可以在 target 目录下找到</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211090152688.png" alt="image-20221109015240564"></p><p>如果<code>annotations</code>不是蓝色图标，可以点击这里</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211090151983.png" alt="image-20221109015143855"></p><p>如果还不是还可以这样：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211091230265.png" alt="image-20221109122529326"></p></blockquote><h4 id="3-给启动类添加Mapper扫描注解"><a href="#3-给启动类添加Mapper扫描注解" class="headerlink" title="3. 给启动类添加Mapper扫描注解"></a>3. 给启动类添加Mapper扫描注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&#123;&quot;com.zhazha.fluent.mapper&quot;&#125;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FluentApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(FluentApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211090155138.png" alt="image-20221109015503967"></p><h4 id="4-添加application配置"><a href="#4-添加application配置" class="headerlink" title="4. 添加application配置"></a>4. 添加application配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">fluent-mybatis-demo</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/orm?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">lazy-loading-enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.zhazha.fluent.entity</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br></pre></td></tr></table></figure><h4 id="5-添加fluent-mybatis必要的Bean"><a href="#5-添加fluent-mybatis必要的Bean" class="headerlink" title="5. 添加fluent mybatis必要的Bean"></a>5. 添加fluent mybatis必要的Bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.org.atool.fluent.mybatis.spring.MapperFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FluentConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperFactory <span class="title function_">mapperFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapperFactory</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-使用"><a href="#6-使用" class="headerlink" title="6. 使用"></a>6. 使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 取分页第一个， 否则下面的 findOne 会报错</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="type">UserQuery</span> <span class="variable">query</span> <span class="operator">=</span> UserQuery.query();</span><br><span class="line">    query.where()</span><br><span class="line">        .username()</span><br><span class="line">        .startWith(<span class="string">&quot;s&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">        .end();</span><br><span class="line">    <span class="type">UserEntity</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findOne(query);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test04</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 关联 user 和 account 表</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="type">UserQuery</span> <span class="variable">userQuery</span> <span class="operator">=</span> UserQuery.query().select(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="type">AccountQuery</span> <span class="variable">accountQuery</span> <span class="operator">=</span> AccountQuery.query().where.id().isNull().end();</span><br><span class="line">    <span class="type">var</span> <span class="variable">joinQuery</span> <span class="operator">=</span> JoinBuilder.from(userQuery)</span><br><span class="line">        .leftJoin(accountQuery).on(userQuery1 -&gt; userQuery1.where.id(), accountQuery1 -&gt; accountQuery1.where.uid()).endJoin()</span><br><span class="line">        .build();</span><br><span class="line">    <span class="comment">// 查询表</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; mapList = userMapper.listMaps(joinQuery);</span><br><span class="line">    <span class="comment">// 批量添加 account 对象</span></span><br><span class="line">    <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>(<span class="number">10000000</span>);</span><br><span class="line">    ArrayList&lt;AccountEntity&gt; accountEntities = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    mapList.forEach(stringObjectMap -&gt; &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> (Integer) stringObjectMap.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">AccountEntity</span> <span class="variable">accountEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountEntity</span>();</span><br><span class="line">        accountEntity.setMoney(random.nextDouble()).setUid(id);</span><br><span class="line">        accountEntities.add(accountEntity);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> accountMapper.insertBatchWithPk(accountEntities);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用类sql语句关联查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="type">var</span> <span class="variable">userSql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FreeQuery</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;u&quot;</span>).select(<span class="string">&quot;u.*&quot;</span>);</span><br><span class="line">    <span class="type">FreeQuery</span> <span class="variable">accountSql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FreeQuery</span>(<span class="string">&quot;account&quot;</span>, <span class="string">&quot;a&quot;</span>).select(<span class="string">&quot;a.*&quot;</span>).orderBy.asc(<span class="string">&quot;a.id&quot;</span>).end();</span><br><span class="line">    <span class="type">JoinQuery</span> <span class="variable">query</span> <span class="operator">=</span> JoinBuilder.from(userSql)</span><br><span class="line">        .join(accountSql).onEq(<span class="string">&quot;u.id&quot;</span>, <span class="string">&quot;a.uid&quot;</span>).endJoin().build();</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; mapList = userMapper.listMaps(query);</span><br><span class="line">    System.err.println(JSONUtil.toJsonStr(mapList));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>我们在试试这个sql：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">user</span> u</span><br><span class="line"><span class="keyword">join</span> user_role ur <span class="keyword">on</span> u.id <span class="operator">=</span> ur.UID</span><br><span class="line"><span class="keyword">join</span> role r <span class="keyword">on</span> r.ID <span class="operator">=</span> ur.RID</span><br><span class="line"><span class="keyword">where</span> u.gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">and</span> r.ID <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">UserQuery</span> <span class="variable">userQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserQuery</span>().select(<span class="string">&quot;*&quot;</span>).where.gender().eq(<span class="string">&quot;女&quot;</span>).end();</span><br><span class="line">    <span class="type">UserRoleQuery</span> <span class="variable">userRoleQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRoleQuery</span>(<span class="string">&quot;ur&quot;</span>);</span><br><span class="line">    <span class="type">RoleQuery</span> <span class="variable">roleQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleQuery</span>().where.id().eq(<span class="number">2</span>).end();</span><br><span class="line">    <span class="type">var</span> <span class="variable">query</span> <span class="operator">=</span> JoinBuilder.from(userQuery)</span><br><span class="line">        .join(userRoleQuery).on(userQuery1 -&gt; userQuery1.where.id(), userRoleQuery1 -&gt; userRoleQuery1.where.uid()).endJoin()</span><br><span class="line">        .join(roleQuery).onEq(UserRoleEntity::getRid, RoleEntity::getId).endJoin()</span><br><span class="line">        .build();</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; mapList = userMapper.listMaps(query);</span><br><span class="line">    System.err.println(JSONUtil.toJsonStr(mapList));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是报错了</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211100103212.png" alt="image-20221110010340087"></p><p>参数类型不匹配：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211100056862.png" alt="image-20221110005601742"></p></blockquote><p>尝试这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test07</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">UserQuery</span> <span class="variable">userQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserQuery</span>(<span class="string">&quot;u&quot;</span>).select(<span class="string">&quot;*&quot;</span>).where.gender().eq(<span class="string">&quot;女&quot;</span>).end();</span><br><span class="line">    <span class="type">UserRoleQuery</span> <span class="variable">userRoleQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRoleQuery</span>(<span class="string">&quot;ur&quot;</span>);</span><br><span class="line">    <span class="type">RoleQuery</span> <span class="variable">roleQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleQuery</span>(<span class="string">&quot;r&quot;</span>).where.id().eq(<span class="number">2</span>).end();</span><br><span class="line">    <span class="type">var</span> <span class="variable">query</span> <span class="operator">=</span> JoinBuilder.from(userQuery)</span><br><span class="line">        .join(userRoleQuery).on(userQuery1 -&gt; userQuery1.where.id(), userRoleQuery1 -&gt; userRoleQuery1.where.uid()).endJoin()</span><br><span class="line">        .join(roleQuery).onEq(<span class="string">&quot;r.id&quot;</span>, <span class="string">&quot;ur.rid&quot;</span>).endJoin()</span><br><span class="line">        .build();</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; mapList = userMapper.listMaps(query);</span><br><span class="line">    System.err.println(JSONUtil.toJsonStr(mapList));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询成功</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211100107216.png" alt="image-20221110010718102"></p><p>但，有必要这样么？</p><p>为什么不使用MybatisCodeHelper插件呢？</p><p><strong><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211101426078.png"></strong></p><p>都可以生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResultMap(&quot;CustomMap&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">selectAllJoinRole</span><span class="params">(<span class="meta">@Param(&quot;gender&quot;)</span> String gender, <span class="meta">@Param(&quot;roleId&quot;)</span> Integer roleId)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllJoinRole&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CustomMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from user u</span><br><span class="line">    join user_role ur on u.id = ur.UID</span><br><span class="line">    join role r on r.ID = ur.RID</span><br><span class="line">    where u.gender = #&#123;gender&#125;</span><br><span class="line">          and r.ID = #&#123;roleId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h2><h3 id="JPA是什么？"><a href="#JPA是什么？" class="headerlink" title="JPA是什么？"></a>JPA是什么？</h3><p>JPA是一套API， 用户java持久层使用的API，更准确的说，jpa是一套用于持久层的规范（接口）</p><h3 id="JPA和hibernate的关系"><a href="#JPA和hibernate的关系" class="headerlink" title="JPA和hibernate的关系"></a>JPA和hibernate的关系</h3><p>hibernate是ORM，它只是较好的实现了JPA规范</p><p>换句话说， JPA相当于规定了接口，hibernate则是实现类，只不过hibernate提供了更多的功能罢了</p><h3 id="JPA怎么玩？"><a href="#JPA怎么玩？" class="headerlink" title="JPA怎么玩？"></a>JPA怎么玩？</h3><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>JPA Buddy 插件：必备，方便很多，新版本收费，可以选择旧点的版本</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211101939432.png" alt="image-20221110193957265"></p><h4 id="创建Entity"><a href="#创建Entity" class="headerlink" title="创建Entity"></a>创建Entity</h4><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211101940229.png" alt="image-20221110194038117"></p><p>鼠标右键表，选择</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211101941009.png" alt="image-20221110194105920"></p><p>选择 DB connection，项目</p><p>填写好生成代码的包位置</p><p>最后选择 Mapped Relations和Tables</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211101943551.png" alt="image-20221110194311429"></p><p>代码生成成功</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211101942133.png" alt="image-20221110194226030"></p><p>分配数据源</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211101944970.png" alt="image-20221110194426871"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211101944865.png" alt="image-20221110194459761"></p><p>添加Lombok注解</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211101945207.png" alt="image-20221110194529079"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211101945520.png" alt="image-20221110194551413"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211101946560.png" alt="image-20221110194610426"></p><p>生成repository代码：</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211101947771.png" alt="image-20221110194710643"></p><h3 id="多表关联"><a href="#多表关联" class="headerlink" title="多表关联"></a>多表关联</h3><h4 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h4><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211102143370.png" alt="image-20221110214323266"></p><p>思路：</p><p>user肯定需要一个account集合，表示一对多</p><p>account需要一个user表示一对一</p><p>综合依赖就是一对多关系</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211102152219.png" alt="image-20221110215246072"></p><ul><li>user肯定需要一个account集合，表示一对多</li></ul><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211102147703.png" alt="image-20221110214742479"></p><p>但不行啊，你得告诉JPA，一对多对应着<code>Account</code>对象那边的哪个字段？</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211102200029.png" alt="image-20221110220047897"></p><p>好像可以了？试试</p><h5 id="JPQL方案"><a href="#JPQL方案" class="headerlink" title="JPQL方案"></a>JPQL方案</h5><p>把这个sql语句使用jpa的方式实现出来</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211110956351.png" alt="image-20221111095607779"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">avg</span>( a.money ) <span class="keyword">AS</span> money,</span><br><span class="line">u.username <span class="keyword">AS</span> username </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">account a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">USER</span> u <span class="keyword">ON</span> ( u.id <span class="operator">=</span> a.uid ) </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">u.gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">u.username</span><br></pre></td></tr></table></figure><p>首先是JPQL的方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Account, Integer&gt;, JpaSpecificationExecutor&lt;Account&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Query(&quot;select new com.zhazha.jpa.entity.AccountDto(avg(a.money), u.username) \n&quot; +</span></span><br><span class="line"><span class="meta">       &quot;from Account a join User u on u.id=a.uid where u.gender=:gender \n&quot; +</span></span><br><span class="line"><span class="meta">       &quot;group by u.username &quot;)</span></span><br><span class="line">List&lt;AccountDto&gt; <span class="title function_">avgMoneyByGender</span><span class="params">(<span class="meta">@Param(&quot;gender&quot;)</span> <span class="type">char</span> gender)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211110957638.png" alt="image-20221111095706527"></p><p>查询出来的数据基本没什么问题</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211111023099.png" alt="image-20221111102318890"></p><h5 id="原生sql方案"><a href="#原生sql方案" class="headerlink" title="原生sql方案"></a>原生sql方案</h5><p>AccountRepository:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query(value = &quot;select avg(a.MONEY) as money, u.username from account a join user u on u.id = a.UID where u.gender=:gender group by u.username&quot;, nativeQuery = true)</span></span><br><span class="line">List&lt;AccountDto&gt; <span class="title function_">nativeAvgMoneyByGender</span><span class="params">(<span class="meta">@Param(&quot;gender&quot;)</span> <span class="type">char</span> gender)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">nativeAvgMoneyByGender</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;AccountDto&gt; accountList = accountRepository.nativeAvgMoneyByGender(<span class="string">&#x27;女&#x27;</span>);</span><br><span class="line">    System.err.println(JSONUtil.toJsonStr(accountList));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样会报错, 因为 <code>AccountDto</code> 不是JPA的 <code>Entity</code></p><p>网站找过解决方案, 不过都很麻烦(有点像写了个Mybatis的 ResultMap 比这还麻烦)</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211111027342.png" alt="image-20221111102721206"></p><p>第一步:</p><p>AccountRepository: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query(nativeQuery = true)</span></span><br><span class="line">List&lt;AccountDto&gt; <span class="title function_">nativeAvgMoneyByGender</span><span class="params">(<span class="meta">@Param(&quot;gender&quot;)</span> <span class="type">char</span> gender)</span>;</span><br></pre></td></tr></table></figure><p>第二步:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NamedNativeQuery(name = &quot;Account.nativeAvgMoneyByGender&quot;,</span></span><br><span class="line"><span class="meta">query = &quot;select avg(a.MONEY) as money, u.username from account a join user u on u.id = a.UID where u.gender=:gender group by u.username&quot;,</span></span><br><span class="line"><span class="meta">resultSetMapping = &quot;Mapping.AccountDto&quot;)</span></span><br><span class="line"><span class="meta">@SqlResultSetMapping(name = &quot;Mapping.AccountDto&quot;,</span></span><br><span class="line"><span class="meta">classes = @ConstructorResult(targetClass = AccountDto.class,</span></span><br><span class="line"><span class="meta">columns = &#123;@ColumnResult(name = &quot;money&quot;),</span></span><br><span class="line"><span class="meta">@ColumnResult(name = &quot;username&quot;)&#125;))</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211111051017.png" alt="image-20221111105149867"></p><p>第三步:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">nativeAvgMoneyByGender</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;AccountDto&gt; accountList = accountRepository.nativeAvgMoneyByGender(<span class="string">&#x27;女&#x27;</span>);</span><br><span class="line">    System.err.println(JSONUtil.toJsonStr(accountList));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就成功了</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211111053221.png" alt="image-20221111105336113"></p><h5 id="动态查询"><a href="#动态查询" class="headerlink" title="动态查询"></a>动态查询</h5><p>这种方式不需要另外写sql语句了, 我也没用过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    List&lt;Account&gt; accountList = accountRepository.findAll((root, query, criteriaBuilder) -&gt; &#123;</span><br><span class="line">        ArrayList&lt;Predicate&gt; predicates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Join&lt;Object, Object&gt; user = root.join(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        predicates.add(criteriaBuilder.like(user.get(<span class="string">&quot;username&quot;</span>), <span class="string">&quot;黄%&quot;</span>));</span><br><span class="line">        predicates.add(criteriaBuilder.equal(user.get(<span class="string">&quot;gender&quot;</span>), <span class="string">&#x27;男&#x27;</span>));</span><br><span class="line">        <span class="keyword">return</span> query.where(predicates.toArray(<span class="keyword">new</span> <span class="title class_">Predicate</span>[<span class="number">0</span>])).getRestriction();</span><br><span class="line">    &#125;);</span><br><span class="line">    accountList.forEach(System.err::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他多对多关系"><a href="#其他多对多关系" class="headerlink" title="其他多对多关系"></a>其他多对多关系</h4><blockquote><p>其他多表关联我就不一一举例了, 可以看注解的注释</p><p>比如 <code>OneToOne</code> 注解内的注释, 列举了三种适应场景</p><p>外键关系的<code>OneToOne</code></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211120200843.png" alt="image-20221112020042319"></p><p>主键相同的<code>OneToOne</code></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211120201745.png" alt="image-20221112020112527"></p><p>从可嵌入的类到其他<code>Entity</code>之间的<code>OneToOne</code>关系</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211120201057.png" alt="image-20221112020128900"></p><p>而<code>OneToMany</code>也是罗列了三种情况, 泛型, 非泛型和单向的<code>OneToMany</code>关系</p></blockquote><h3 id="存在的问题-1"><a href="#存在的问题-1" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>看了点皮毛是不是觉得JPA也就这样?</p><p>确实, 不仅更难用了, 还得纠结多表关联注解的选择</p><p>有什么办法简化么?</p><h3 id="QueryDSL"><a href="#QueryDSL" class="headerlink" title="QueryDSL"></a>QueryDSL</h3><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h4><p>官方地址:<a href="http://querydsl.com/">Querydsl - Unified Queries for Java</a></p><p>QueryDSL仅仅是一个通用的查询框架，专注于通过Java API构建类型安全的SQL查询。</p><p>Querydsl可以通过一组通用的查询API为用户构建出适合不同类型ORM框架或者是SQL的查询语句，也就是说QueryDSL是基于各种ORM框架以及SQL之上的一个通用的查询框架。</p><p>借助QueryDSL可以在任何支持的ORM框架或者SQL平台上以一种通用的API方式来构建查询。目前QueryDSL支持的平台包括JPA,JDO,SQL,Mongodb 等等</p><h4 id="冰山一角"><a href="#冰山一角" class="headerlink" title="冰山一角"></a>冰山一角</h4><p>简单看看 queryDSL值不值得学</p><p>同样是前面的sql 在 queryDSL 下可以这么玩</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">QAccount</span> <span class="variable">qAccount</span> <span class="operator">=</span> QAccount.account;</span><br><span class="line">    <span class="type">QUser</span> <span class="variable">qUser</span> <span class="operator">=</span> QUser.user;</span><br><span class="line">    List&lt;Tuple&gt; tupleList = jpaQuery.select(qAccount.money, qUser.username).from(qAccount)</span><br><span class="line">        .join(qUser).on(qUser.id.eq(qAccount.uid))</span><br><span class="line">        .where(qUser.gender.eq(<span class="string">&#x27;女&#x27;</span>))</span><br><span class="line">        .groupBy(qUser.username)</span><br><span class="line">        .fetch();</span><br><span class="line">    </span><br><span class="line">    List&lt;AccountDto&gt; accountDtoList = tupleList.stream().map(tuple -&gt; &#123;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">money</span> <span class="operator">=</span> tuple.get(qAccount.money);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> tuple.get(qUser.username);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AccountDto</span>(money, username);</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 多余代码</span></span><br><span class="line">    accountDtoList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>完整代码在后面有, 这里只是给你看看好不好用</p></blockquote><h4 id="怎么玩"><a href="#怎么玩" class="headerlink" title="怎么玩?"></a>怎么玩?</h4><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- querydsl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.querydsl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>querydsl-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.querydsl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>querydsl-apt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>JPAAnnotationProcessor</code> 找到注解了<code>javax.persistence.Entity</code>的领域类型, 并且为领域类型生成查询代码</p><p>如果你在<code>entity</code>对象上使用 <code>Hibernate</code> 注解, 你应该使用<code>APT processor</code>(依赖) <code>com.querydsl.apt.hibernate.HibernateAnnotationProcessor</code>代替</p><p>maven 运行 <code>clean install</code>  接着你将会获得在 <code>target/generated-sources/java</code>目录中生成的查询类</p><p>如果你使用 eclipse, 运行 <code>mvn eclipse:eclipse</code> 以更新你的Eclipse项目, 令你得项目包含<code>target/generated-sources/java</code>目录作为 源码目录</p><p>现在, 你可以去构造一个JPQL查询实例和查询领域对象的Model实例</p><blockquote><p>记住, 生成的代码需要设置下</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211120328969.png" alt="image-20221112032801841"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211120328948.png" alt="image-20221112032830797"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211120328289.png" alt="image-20221112032845157"></p></blockquote><p>现在还记得前面的这个sql语句么?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">avg</span>( a.money ) <span class="keyword">AS</span> money,</span><br><span class="line">u.username <span class="keyword">AS</span> username </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">account a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">USER</span> u <span class="keyword">ON</span> ( u.id <span class="operator">=</span> a.uid ) </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">u.gender <span class="operator">=</span> <span class="string">&#x27;女&#x27;</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">u.username</span><br></pre></td></tr></table></figure><p>用 queryDSL 怎么玩?</p><p>非常简单</p><p>事先需要创建好对象 <code>JPAQueryFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccountTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PersistenceContext</span></span><br><span class="line"><span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line"><span class="keyword">private</span> JPAQueryFactory jpaQueryFactory;</span><br><span class="line"><span class="keyword">private</span> JPAQuery&lt;Void&gt; jpaQuery;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">jpaQuery = <span class="keyword">new</span> <span class="title class_">JPAQuery</span>&lt;&gt;(<span class="built_in">this</span>.entityManager);</span><br><span class="line">jpaQueryFactory = <span class="keyword">new</span> <span class="title class_">JPAQueryFactory</span>(<span class="built_in">this</span>.entityManager);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意: <img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211120333972.png" alt="image-20221112033306854"></p><p>这两个对象可以无缝衔接, 两个都可以用</p><p>github上是这样: </p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211120334144.png" alt="image-20221112033435997"></p><p>官网这边也稍微讲了点</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211120340597.png" alt="image-20221112034013476"></p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211120344478.png" alt="image-20221112034409334"></p><p>上面那句话也讲了 <code>JPAQueryFactory</code> 会获取<code>JPAQuery</code>对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">QAccount</span> <span class="variable">qAccount</span> <span class="operator">=</span> QAccount.account;</span><br><span class="line">    <span class="type">QUser</span> <span class="variable">qUser</span> <span class="operator">=</span> QUser.user;</span><br><span class="line">    List&lt;Tuple&gt; tupleList = jpaQuery.select(qAccount.money, qUser.username).from(qAccount)</span><br><span class="line">        .join(qUser).on(qUser.id.eq(qAccount.uid))</span><br><span class="line">        .where(qUser.gender.eq(<span class="string">&#x27;女&#x27;</span>))</span><br><span class="line">        .groupBy(qUser.username)</span><br><span class="line">        .fetch();</span><br><span class="line">    List&lt;AccountDto&gt; accountDtoList = tupleList.stream().map(tuple -&gt; &#123;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">money</span> <span class="operator">=</span> tuple.get(qAccount.money);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> tuple.get(qUser.username);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AccountDto</span>(money, username);</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">    accountDtoList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提高测试效率"><a href="#提高测试效率" class="headerlink" title="提高测试效率"></a>提高测试效率</h4><p>为了提高测试代码执行的效率, 绕过 springboot 那一套, 需要做个简单的改造</p><p>在 <code>META-INF</code> 下创建<code>persistence.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistence</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/persistence&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">version</span>=<span class="string">&quot;2.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistence-unit</span> <span class="attr">name</span>=<span class="string">&quot;JPADemo&quot;</span> <span class="attr">transaction-type</span>=<span class="string">&quot;RESOURCE_LOCAL&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置JPA规范的服务提供商 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.jpa.HibernatePersistenceProvider<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.hibernate.dialect.MySQL8Dialect&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.url&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/orm?characterEncoding=utf8<span class="symbol">&amp;amp;</span>connectTimeout=1000<span class="symbol">&amp;amp;</span>socketTimeout=3000<span class="symbol">&amp;amp;</span>autoReconnect=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;javax.persistence.jdbc.password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.format_sql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistence-unit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistence</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.querydsl.core.Tuple;</span><br><span class="line"><span class="keyword">import</span> com.querydsl.jpa.impl.JPAQueryFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManager;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EntityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Persistence;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JPATest</span> &#123;</span><br><span class="line"><span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line"><span class="keyword">private</span> JPAQueryFactory jpaQueryFactory;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">QAccount</span> <span class="variable">qAccount</span> <span class="operator">=</span> QAccount.account;</span><br><span class="line"><span class="type">QUser</span> <span class="variable">qUser</span> <span class="operator">=</span> QUser.user;</span><br><span class="line">List&lt;Tuple&gt; tupleList = jpaQueryFactory.select(qAccount.money, qUser.username).from(qAccount)</span><br><span class="line">.join(qUser).on(qUser.id.eq(qAccount.uid))</span><br><span class="line">.where(qUser.gender.eq(<span class="string">&#x27;女&#x27;</span>))</span><br><span class="line">.groupBy(qUser.username)</span><br><span class="line">.fetch();</span><br><span class="line">tupleList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">EntityManagerFactory</span> <span class="variable">entityManagerFactory</span> <span class="operator">=</span> Persistence.createEntityManagerFactory(<span class="string">&quot;JPADemo&quot;</span>);</span><br><span class="line">entityManager = entityManagerFactory.createEntityManager();</span><br><span class="line">jpaQueryFactory = <span class="keyword">new</span> <span class="title class_">JPAQueryFactory</span>(<span class="built_in">this</span>.entityManager);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.entityManager.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="QueryDSL使得JPA关联注解可有可无"><a href="#QueryDSL使得JPA关联注解可有可无" class="headerlink" title="QueryDSL使得JPA关联注解可有可无"></a>QueryDSL使得JPA关联注解可有可无</h4><blockquote><p>使用了queryDSL, JPA的那些多对多 一对多 多对一注解变得可有可无了</p><p>即使我们把代码改成完全和 mysql 字段上一模一样都可以执行查询</p></blockquote><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211120438599.png" alt="image-20221112043857425"></p><blockquote><p>就比如: </p><p>原先 应该是这样</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211120450910.png" alt="image-20221112045020774"> </p><p>现在变成</p><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211120451688.png" alt="image-20221112045115582"></p></blockquote><p>注意看上图Entity属性根本就没有任何的多表关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="type">QUser</span> <span class="variable">qUser</span> <span class="operator">=</span> QUser.user;</span><br><span class="line">   <span class="type">QRole</span> <span class="variable">qRole</span> <span class="operator">=</span> QRole.role;</span><br><span class="line">   <span class="type">QUserRole</span> <span class="variable">qUserRole</span> <span class="operator">=</span> QUserRole.userRole;</span><br><span class="line">   List&lt;Tuple&gt; tupleList = jpaQueryFactory.select(qUser, qRole, qUserRole).from(qUser)</span><br><span class="line">         .join(qUserRole).on(qUserRole.id.uid.eq(qUser.id))</span><br><span class="line">         .join(qRole).on(qRole.id.eq(qUserRole.id.rid))</span><br><span class="line">         .where(qRole.id.eq(<span class="number">2</span>))</span><br><span class="line">         .limit(<span class="number">10</span>)</span><br><span class="line">         .fetch();</span><br><span class="line">   tupleList.forEach(tuple -&gt; &#123;</span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> tuple.get(qUser);</span><br><span class="line">      <span class="type">Role</span> <span class="variable">role</span> <span class="operator">=</span> tuple.get(qRole);</span><br><span class="line">      <span class="type">UserRole</span> <span class="variable">userRole</span> <span class="operator">=</span> tuple.get(qUserRole);</span><br><span class="line">      System.err.println(user);</span><br><span class="line">      System.err.println(role);</span><br><span class="line">      System.err.println(userRole); <span class="comment">// UserRole(id=com.zhazha.jpa.entity.UserRoleId@537)</span></span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但上面的查询可以查到数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">user0_.id <span class="keyword">AS</span> id1_2_0_,</span><br><span class="line">role2_.ID <span class="keyword">AS</span> id1_1_1_,</span><br><span class="line">userrole1_.RID <span class="keyword">AS</span> rid1_3_2_,</span><br><span class="line">userrole1_.UID <span class="keyword">AS</span> uid2_3_2_,</span><br><span class="line">user0_.address <span class="keyword">AS</span> address2_2_0_,</span><br><span class="line">user0_.birthday <span class="keyword">AS</span> birthday3_2_0_,</span><br><span class="line">user0_.gender <span class="keyword">AS</span> gender4_2_0_,</span><br><span class="line">user0_.telephone <span class="keyword">AS</span> telephon5_2_0_,</span><br><span class="line">user0_.username <span class="keyword">AS</span> username6_2_0_,</span><br><span class="line">role2_.ROLE_DESC <span class="keyword">AS</span> role_des2_1_1_,</span><br><span class="line">role2_.ROLE_NAME <span class="keyword">AS</span> role_nam3_1_1_ </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="keyword">USER</span> user0_</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> user_role userrole1_ <span class="keyword">ON</span> ( userrole1_.UID <span class="operator">=</span> user0_.id )</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> role role2_ <span class="keyword">ON</span> ( role2_.ID <span class="operator">=</span> userrole1_.RID ) </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">role2_.ID <span class="operator">=</span><span class="number">2</span></span><br><span class="line">LIMIT <span class="number">10</span></span><br></pre></td></tr></table></figure><p><img src="https://gcore.jsdelivr.net/gh/bangiao/blog_images@main/blog/202211120441860.png" alt="image-20221112044130705"></p><p>这样也就不存在 N + 1 问题了</p>]]></content>
      
      
      <categories>
          
          <category> ORM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
            <tag> jpa </tag>
            
            <tag> hibernate </tag>
            
            <tag> XML </tag>
            
            <tag> DSL </tag>
            
            <tag> mysql </tag>
            
            <tag> queryDSL </tag>
            
            <tag> fluent mybatis </tag>
            
            <tag> JPQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步和同步的区别是什么？</title>
      <link href="/2022/11/04/01%E9%AB%98%E5%B9%B6%E5%8F%91/001%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2022/11/04/01%E9%AB%98%E5%B9%B6%E5%8F%91/001%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="异步和同步的区别是什么？"><a href="#异步和同步的区别是什么？" class="headerlink" title="异步和同步的区别是什么？"></a>异步和同步的区别是什么？</h1><p>一起探讨探讨这么判断是否有问题？</p><h2 id="前提或者说是共识"><a href="#前提或者说是共识" class="headerlink" title="前提或者说是共识"></a>前提或者说是共识</h2><p>学习异步和同步你可能需要了解一些前提</p><ol><li>异步、同步是指两个及以上有交织的个体间的事情（有交织是指有为同一间事情付出过，或者是表示有因果关系的）</li><li>异步、同步是相对事件（需要有对照才能判断）</li><li>需要规定某个时间段内发生（你不可能要求两个个体在任何时间都处于同步或者异步的情况，同卵双胞胎都做不到）</li></ol><p>了解这两点，你才能了解什么是异步、同步。</p><h1 id="异步和同步是什么？"><a href="#异步和同步是什么？" class="headerlink" title="异步和同步是什么？"></a>异步和同步是什么？</h1><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><ol><li>前提：两个个体</li><li>时间和事件是否相同</li></ol><p><strong>异步相当于：两个有交织的个体 相同的时间，不同的事件 and 相同的事件，不同的时间（强调交错）</strong></p><p><strong>同步相当于：两个有交织的个体 相同的时间，相同的事件 and 相同的事件，相同的时间（强调相同）</strong></p><h2 id="探索过程"><a href="#探索过程" class="headerlink" title="探索过程"></a>探索过程</h2><p>异步和同步，我们需要拆开看</p><p>首先了解什么是 “异”什么是“同”？</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de38a2ef79064ba9b3bd6d9e3c586e0a~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/874e2def73d1485ba1bebb04ce11811c~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>分别表示<strong>不同和相同</strong>两个概念</p><p>那么步呢？</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d91751c40f4e4d06a26e549b6b2db8b3~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>我觉得表示阶段；**步长；阶段 ** 或者更加宽泛点我们可以认为是 <strong>动作和时间</strong></p><p>再宽泛点我们可以认为是 <strong>事件和时间</strong></p><p><strong>综合起来就表示：</strong></p><p><strong>异步相当于：两个有交织的个体 相同的时间，不同的事件 and 相同的事件，不同的时间（强调交错）</strong></p><p><strong>同步相当于：两个有交织的个体 相同的时间，相同的事件 and 相同的事件，相同的时间（强调相同）</strong></p><p>PS: 这里的时间表示某段时间，而不是一直都是这样</p><blockquote><p>也就是说，两个有交织的个体是在同一时间段内（同步）还是错位时间段内（异步）为同一件事情花费精力</p></blockquote><p>现在带入现实生活中去看看：</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><blockquote><p>案例转载自：<a href="https://blog.csdn.net/chenyang_wei/article/details/124102547">从小白到高手，10 图教你同步与异步</a></p></blockquote><h2 id="第一个案例"><a href="#第一个案例" class="headerlink" title="第一个案例"></a>第一个案例</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bf5262011c534dfb946b0770e7a4cc97~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>首先老板在数钱的时候你还没搬砖</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13e7ce707aff43d09be65c579bb9f7ec~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>如果你只看这段时间的话，你可以认为他是异步，包括底下这段也是</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77f284d5731742368a6c76a3d2c2fc9c~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><blockquote><p>当然你要说数钱是个 IO 操作那么，上图这段需要两根柱子，一根是程序阻塞等待，另一根是DMA处理IO操作。同步异步本身就随时发生着，这就跟爱因斯坦相对论一样，看你参考系分的细不细咯。</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab11c1a415594931965381fdd9fd6b34~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>上面这段很明显的看出来是 相同时间，相同事件，这是同步操作</p><p>老板阻塞等待你搬砖完毕，都是再为你搬砖花费精力，只不过你花的多，他花的少而已</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0935abe18fa441efaa167e5245e2119b~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p>下图这段是相同时间，不同事件并且他们是有交织的，或者说他们是有因果关系的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f10f28a7fcb44dc1a3e5889c30857bc3~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="第二个案例"><a href="#第二个案例" class="headerlink" title="第二个案例"></a>第二个案例</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21b044b521db419981959bd8a310c252~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f41c6e0a9074c9580fa434f5d90090e~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="第三个案例"><a href="#第三个案例" class="headerlink" title="第三个案例"></a>第三个案例</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f2a0f2561424682bb2c9c78732cd01a~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/34876efdc9a34ebe87f7866a9dd5677d~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1d16196d74864b0ab739a92991b0f7fa~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="第四个案例"><a href="#第四个案例" class="headerlink" title="第四个案例"></a>第四个案例</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/27a4e1353cd84a46ba83a8cdb747225d~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41460c920b1c44bba2ab92f82f90f802~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f6fe0a60a614de69a8f046f2668b661~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><blockquote><p>最后需要注意的是，并不是所有的情况下异步都一定比同步高效，还需要结合具体业务以及IO的复杂度具体情况具体分析。</p></blockquote><blockquote><p>由于是很久以前记得笔记，忘记是哪个大佬设计的图片，所以不好意思，没有留图片转发地址</p></blockquote><h1 id="并发和并行的区别是什么？"><a href="#并发和并行的区别是什么？" class="headerlink" title="并发和并行的区别是什么？"></a>并发和并行的区别是什么？</h1><p>如果某个系统支持两个或者多个动作（Action）<strong>同时存在</strong>，那么这个系统就是一个<strong>并发系统</strong>。如果某个系统支持两个或者多个动作<strong>同时执行</strong>，那么这个系统就是一个<strong>并行系统</strong>。并发系统与并行系统这两个定义之间的关键差异在于<strong>“存在”</strong>这个词。<br />在并发程序中可以同时拥有两个或者多个线程。这意味着，如果程序在单核处理器上运行，那么这两个线程将交替地换入或者换出内存。这些线程是同时“存在”的——每个线程都处于执行过程中的某个状态。如果程序能够并行执行，那么就一定是运行在多核处理器上。此时，程序中的每个线程都将分配到一个独立的处理器核上，因此可以同时运行。<br />我相信你已经能够得出结论——<strong>“并行”概念是“并发”概念的一个子集</strong>。也就是说，你可以编写一个拥有多个线程或者进程的并发程序，但如果没有多核处理器来执行这个程序，那么就不能以并行方式来运行代码。因此，凡是在求解单个问题时涉及多个执行流程的编程模式或者执行行为，都属于并发编程的范畴。<br />摘自：《并发的艺术》 — 〔美〕布雷谢斯</p>]]></content>
      
      
      <categories>
          
          <category> 高并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 同步 </tag>
            
            <tag> 异步 </tag>
            
            <tag> 并行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wiki首页</title>
      <link href="/1999/01/01/Home/"/>
      <url>/1999/01/01/Home/</url>
      
        <content type="html"><![CDATA[<h1 id="Bangiao"><a href="#Bangiao" class="headerlink" title="Bangiao"></a>Bangiao</h1><p>笔记</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
